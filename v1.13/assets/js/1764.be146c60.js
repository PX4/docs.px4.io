(window.webpackJsonp=window.webpackJsonp||[]).push([[1764],{3275:function(t,a,e){"use strict";e.r(a);var s=e(19),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"模块参考-驱动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块参考-驱动"}},[t._v("#")]),t._v(" 模块参考：驱动")]),t._v(" "),e("p",[t._v("子分类")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_imu.html"}},[t._v("Imu")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_distance_sensor.html"}},[t._v("距离传感器")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_airspeed_sensor.html"}},[t._v("空速传感器")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_baro.html"}},[t._v("气压计")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_transponder.html"}},[t._v("Transponder")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_rpm_sensor.html"}},[t._v("Rpm Sensor")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_optical_flow.html"}},[t._v("Optical Flow")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/zh/modules/modules_driver_magnetometer.html"}},[t._v("Magnetometer")])],1)]),t._v(" "),e("h2",{attrs:{id:"adc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adc"}},[t._v("#")]),t._v(" adc")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/adc/board_adc",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/adc/board_adc"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[t._v("ADC 驱动。")]),t._v(" "),e("p",[e("a",{attrs:{id:"adc_usage"}})]),t._v(" "),e("h3",{attrs:{id:"用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("adc <command> [arguments...]\n Commands:\n   start\n\n   test\n\n   stop\n\n   status        打印状态信息\n")])])]),e("h2",{attrs:{id:"ads1115"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ads1115"}},[t._v("#")]),t._v(" ads1115")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/adc/ads1115",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/adc/ads1115"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"ads1115_usage"}})]),t._v(" "),e("h3",{attrs:{id:"用法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法-2"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ads1115 <command> [arguments...]\n Commands:\n   start\n     [-I]        内部I2C总线(们)\n     [-X]        外部I2C 总线(们)\n     [-b <val>]  指定板总线(default=all) (外部SPI: n条总线\n                 (default=1))\n     [-f <val>]  总线频率单位kHz\n     [-q]       安静启动 (没有设备发现时不输出消息)\n     [-a <val>]  I2C 地址\n                 默认: 72\n\n   stop\n\n   status        打印状态信息\n")])])]),e("h2",{attrs:{id:"atxxxx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#atxxxx"}},[t._v("#")]),t._v(" atxxxx")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/osd/atxxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/osd/atxxxx"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"描述-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-2"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[t._v("例如挂载在OmnibusF4SD板上的针对 ATXXXX 芯片的OSD驱动。")]),t._v(" "),e("p",[t._v("可以通过 OSD_ATXXXX_CFG 参数使能.")]),t._v(" "),e("p",[e("a",{attrs:{id:"atxxxx_usage"}})]),t._v(" "),e("h3",{attrs:{id:"用法-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法-3"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("atxxxx <command> [arguments...]\n Commands:\n   start\n     [-s]        内部 SPI 总线(们)\n     [-S]        外部SPI 总线(们)\n     [-b <val>]  指定板总线 (默认=all) (外部 SPI: n 条总线\n                 (默认=1))\n     [-c <val>]  片选引脚 (对于内部SPI) 或者索引(对于外部SPI)\n     [-m <val>]  SPI 模式\n     [-f <val>]  总线频率单位kHz\n     [-q]        安静启动 (没有发现设备时无消息输出)\n\n   stop\n\n   status        打印状态信息\n")])])]),e("h2",{attrs:{id:"batmon"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#batmon"}},[t._v("#")]),t._v(" batmon")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/smart_battery/batmon",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/smart_battery/batmon"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"描述-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-3"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[t._v("用于智能电池的BQ40Z50电量统计芯片")]),t._v(" "),e("h3",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("p",[t._v("To start at address 0x0B, on bus 4")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batt_smbus -X write_flash 19069 2 27 0\n")])])]),e("p",[e("a",{attrs:{id:"batmon_usage"}})]),t._v(" "),e("h3",{attrs:{id:"描述-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-4"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batmon <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 11\n\n   man_info      Prints manufacturer info.\n\n   unseal        解锁设备的flash来使能 write_flash 命令\n\n   seal          锁住设备的flash来失能 write_flash 命令.\n\n   suspend       从调度循环中挂起该设备\n")])])]),e("h2",{attrs:{id:"batt-smbus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#batt-smbus"}},[t._v("#")]),t._v(" batt_smbus")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/batt_smbus",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/batt_smbus"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"用法-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法-4"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("p",[t._v("This will enable capturing on the 4th pin. Then do:")]),t._v(" "),e("h3",{attrs:{id:"用法-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法-5"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("p",[t._v("To write to flash to set parameters. address, number_of_bytes, byte0, ... , byteN")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batt_smbus -X write_flash 19069 2 27 0\n")])])]),e("p",[e("a",{attrs:{id:"batt_smbus_usage"}})]),t._v(" "),e("h3",{attrs:{id:"描述-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-5"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batt_smbus <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 11\n\n   man_info      Prints manufacturer info.\n\n   unseal        Unseals the devices flash memory to enable write_flash\n                 commands.\n\n   seal          Seals the devices flash memory to disbale write_flash commands.\n\n   suspend       Suspends the driver from rescheduling the cycle.\n\n   resume        Resumes the driver from suspension.\n\n   write_flash   Writes to flash. The device must first be unsealed with the\n                 unseal command.\n     [address]   The address to start writing.\n     [number of bytes] Number of bytes to send.\n     [data[0]...data[n]] One byte of data at a time separated by spaces.\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"bst"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bst"}},[t._v("#")]),t._v(" bst")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/telemetry/bst",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/telemetry/bst"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"bst_usage"}})]),t._v(" "),e("h3",{attrs:{id:"示例-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bst <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 118\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"sf1xx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sf1xx"}},[t._v("#")]),t._v(" sf1xx")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/dshot",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/dshot"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"用法-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法-6"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("p",[t._v("This is the DShot output driver. It is similar to the fmu driver, and can be used as drop-in replacement to use DShot as ESC communication protocol instead of PWM.")]),t._v(" "),e("p",[t._v("On startup, the module tries to occupy all available pins for DShot output. It skips all pins already in use (e.g. by a camera trigger module).")]),t._v(" "),e("p",[t._v("It supports:")]),t._v(" "),e("ul",[e("li",[t._v("DShot150, DShot300, DShot600, DShot1200")]),t._v(" "),e("li",[t._v("通过独立的串口遥控，并且发布esc_status消息")]),t._v(" "),e("li",[t._v("通过命令行接口发送 DShot 命令")])]),t._v(" "),e("h3",{attrs:{id:"描述-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-6"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[t._v("Permanently reverse motor 1:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dshot reverse -m 1\ndshot save -m 1\n")])])]),e("p",[t._v("After saving, the reversed direction will be regarded as the normal one. So to reverse again repeat the same commands.")]),t._v(" "),e("p",[e("a",{attrs:{id:"dshot_usage"}})]),t._v(" "),e("h3",{attrs:{id:"描述-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-7"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dshot <command> [arguments...]\n mc_att_control <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        打印状态信息\n")])])]),e("h2",{attrs:{id:"fmu-mode-pwm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fmu-mode-pwm"}},[t._v("#")]),t._v(" fmu mode_pwm")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/examples/fake_gps",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_gps"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"描述-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-8"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[e("a",{attrs:{id:"fake_gps_usage"}})]),t._v(" "),e("h3",{attrs:{id:"描述-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-9"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fake_gps <command> [arguments...]\n mc_att_control <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        打印状态信息\n")])])]),e("h2",{attrs:{id:"fake-imu"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fake-imu"}},[t._v("#")]),t._v(" fake_imu")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/examples/fake_imu",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_imu"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"描述-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-10"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[e("a",{attrs:{id:"fake_imu_usage"}})]),t._v(" "),e("h3",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fake_imu <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"gps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gps"}},[t._v("#")]),t._v(" gps")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/examples/fake_magnetometer",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_magnetometer"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"示例-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("p",[t._v("Publish the earth magnetic field as a fake magnetometer (sensor_mag). Requires vehicle_attitude and vehicle_gps_position.")]),t._v(" "),e("p",[e("a",{attrs:{id:"fake_magnetometer_usage"}})]),t._v(" "),e("h3",{attrs:{id:"用法-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用法-7"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fake_magnetometer <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"gimbal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gimbal"}},[t._v("#")]),t._v(" gimbal")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/modules/gimbal",target:"_blank",rel:"noopener noreferrer"}},[t._v("modules/gimbal"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"描述-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-11"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[t._v("Mount/gimbal Gimbal control driver. It maps several different input methods (eg. RC or MAVLink) to a configured output (eg. AUX channels or MAVLink).")]),t._v(" "),e("p",[t._v("Documentation how to use it is on the "),e("a",{attrs:{href:"https://docs.px4.io/master/en/advanced/gimbal_control.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("gimbal_control"),e("OutboundLink")],1),t._v(" page.")]),t._v(" "),e("h3",{attrs:{id:"examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("Test the output by setting a angles (all omitted axes are set to 0):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gimbal test pitch -45 yaw 30\n")])])]),e("p",[e("a",{attrs:{id:"gimbal_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gimbal <command> [arguments...]\n Commands:\n   start\n\n   test          Test the output: set a fixed angle for one or multiple axes\n                 (gimbal must be running)\n     roll|pitch|yaw <angle> Specify an axis and an angle in degrees\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"gps-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gps-2"}},[t._v("#")]),t._v(" gps")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/gps",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/gps"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("GPS driver module that handles the communication with the device and publishes the position via uORB. It supports multiple protocols (device vendors) and by default automatically selects the correct one.")]),t._v(" "),e("p",[t._v("The module supports a secondary GPS device, specified via "),e("code",[t._v("-e")]),t._v(" parameter. The position will be published on the second uORB topic instance, but it's currently not used by the rest of the system (however the data will be logged, so that it can be used for comparisons).")]),t._v(" "),e("h3",{attrs:{id:"implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("p",[t._v("There is a thread for each device polling for data. The GPS protocol classes are implemented with callbacks so that they can be used in other projects as well (eg. QGroundControl uses them too).")]),t._v(" "),e("h3",{attrs:{id:"examples-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples-2"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("Starting 2 GPS devices (the main GPS on /dev/ttyS3 and the secondary on /dev/ttyS4):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gps start -d /dev/ttyS3 -e /dev/ttyS4\n")])])]),e("p",[t._v("Initiate warm restart of GPS device")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gps reset warm\n")])])]),e("p",[e("a",{attrs:{id:"gps_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-2"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gps <command> [arguments...]\n Commands:\n   start\n     [-d <val>]  GPS device\n                 values: <file:dev>, default: /dev/ttyS3\n     [-b <val>]  Baudrate (can also be p:<param_name>)\n                 default: 0\n     [-e <val>]  Optional secondary GPS device\n                 values: <file:dev>\n     [-g <val>]  Baudrate (secondary GPS, can also be p:<param_name>)\n                 default: 0\n     [-i <val>]  GPS interface\n                 values: spi|uart, default: uart\n     [-j <val>]  secondary GPS interface\n                 values: spi|uart, default: uart\n     [-p <val>]  GPS Protocol (default=auto select)\n                 values: ubx|mtk|ash|eml|fem|nmea\n\n   stop\n\n   status        print status info\n\n   reset         Reset GPS device\n     cold|warm|hot Specify reset type\n")])])]),e("h2",{attrs:{id:"ina226"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ina226"}},[t._v("#")]),t._v(" ina226")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/power_monitor/ina226",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina226"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-2"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("Driver for the INA226 power monitor.")]),t._v(" "),e("p",[t._v("Multiple instances of this driver can run simultaneously, if each instance has a separate bus OR I2C address.")]),t._v(" "),e("p",[t._v("For example, one instance can run on Bus 2, address 0x41, and one can run on Bus 2, address 0x43.")]),t._v(" "),e("p",[t._v("If the INA226 module is not powered, then by default, initialization of the driver will fail. To change this, use the -f flag. If this flag is set, then if initialization fails, the driver will keep trying to initialize again every 0.5 seconds. With this flag set, you can plug in a battery after the driver starts, and it will work. Without this flag set, the battery must be plugged in before starting the driver.")]),t._v(" "),e("p",[e("a",{attrs:{id:"ina226_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-3"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ina226 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 65\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 2)\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"ina228"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ina228"}},[t._v("#")]),t._v(" ina228")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/power_monitor/ina228",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina228"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-3"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("Driver for the INA228 power monitor.")]),t._v(" "),e("p",[t._v("Multiple instances of this driver can run simultaneously, if each instance has a separate bus OR I2C address.")]),t._v(" "),e("p",[t._v("For example, one instance can run on Bus 2, address 0x45, and one can run on Bus 2, address 0x45.")]),t._v(" "),e("p",[t._v("If the INA228 module is not powered, then by default, initialization of the driver will fail. To change this, use the -f flag. If this flag is set, then if initialization fails, the driver will keep trying to initialize again every 0.5 seconds. With this flag set, you can plug in a battery after the driver starts, and it will work. Without this flag set, the battery must be plugged in before starting the driver.")]),t._v(" "),e("p",[e("a",{attrs:{id:"ina228_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-4"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ina228 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 69\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 2)\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"ina238"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ina238"}},[t._v("#")]),t._v(" ina238")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/power_monitor/ina238",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina238"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-4"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("Driver for the INA238 power monitor.")]),t._v(" "),e("p",[t._v("Multiple instances of this driver can run simultaneously, if each instance has a separate bus OR I2C address.")]),t._v(" "),e("p",[t._v("For example, one instance can run on Bus 2, address 0x45, and one can run on Bus 2, address 0x45.")]),t._v(" "),e("p",[t._v("If the INA238 module is not powered, then by default, initialization of the driver will fail. To change this, use the -f flag. If this flag is set, then if initialization fails, the driver will keep trying to initialize again every 0.5 seconds. With this flag set, you can plug in a battery after the driver starts, and it will work. Without this flag set, the battery must be plugged in before starting the driver.")]),t._v(" "),e("p",[e("a",{attrs:{id:"ina238_usage"}})]),t._v(" "),e("h3",{attrs:{id:"描述-12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-12"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ina238 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 69\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 2)\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"iridiumsbd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iridiumsbd"}},[t._v("#")]),t._v(" iridiumsbd")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/telemetry/iridiumsbd",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/telemetry/iridiumsbd"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"实现-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现-2"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),e("p",[t._v("IridiumSBD driver.")]),t._v(" "),e("p",[t._v("Creates a virtual serial port that another module can use for communication (e.g. mavlink).")]),t._v(" "),e("p",[e("a",{attrs:{id:"iridiumsbd_usage"}})]),t._v(" "),e("h3",{attrs:{id:"示例-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例-4"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("iridiumsbd <command> [arguments...]\n Commands:\n   start\n     -d <val>    Serial device\n                 values: <file:dev>\n     [-v]        Enable verbose output\n\n   test\n     [s|read|AT <cmd>] Test command\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"irlock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#irlock"}},[t._v("#")]),t._v(" irlock")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/irlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/irlock"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"irlock_usage"}})]),t._v(" "),e("h3",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("irlock <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 84\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"linux-pwm-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-pwm-out"}},[t._v("#")]),t._v(" linux_pwm_out")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/linux_pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/linux_pwm_out"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"描述-13"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-13"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[t._v("Linux PWM output driver with board-specific backend implementation.")]),t._v(" "),e("p",[e("a",{attrs:{id:"linux_pwm_out_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-5"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("linux_pwm_out <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"lsm303agr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lsm303agr"}},[t._v("#")]),t._v(" lsm303agr")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/magnetometer/lsm303agr",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/magnetometer/lsm303agr"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"lsm303agr_usage"}})]),t._v(" "),e("h3",{attrs:{id:"使用-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-2"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("lsm303agr <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-R <val>]  Rotation\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"newpixel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#newpixel"}},[t._v("#")]),t._v(" newpixel")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/lights/neopixel",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/neopixel"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-5"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This module is responsible for driving interfasing to the Neopixel Serial LED")]),t._v(" "),e("h3",{attrs:{id:"examples-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples-3"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("It is typically started with:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("neopixel -n 8\n")])])]),e("p",[t._v("To drive all available leds.")]),t._v(" "),e("p",[e("a",{attrs:{id:"newpixel_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-6"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("newpixel <command> [arguments...]\n Commands:\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"paa3905"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#paa3905"}},[t._v("#")]),t._v(" paa3905")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/optical_flow/paa3905",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/paa3905"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"paa3905_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-7"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("paa3905 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-Y <val>]  custom yaw rotation (degrees)\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"paw3902"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#paw3902"}},[t._v("#")]),t._v(" paw3902")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/optical_flow/paw3902",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/paw3902"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"paw3902_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-8"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("paw3902 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-Y <val>]  custom yaw rotation (degrees)\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pca9685"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pca9685"}},[t._v("#")]),t._v(" pca9685")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/pca9685",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pca9685"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"pca9685_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-9"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pca9685 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 64\n\n   reset\n\n   test          enter test mode\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pca9685-pwm-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pca9685-pwm-out"}},[t._v("#")]),t._v(" pca9685_pwm_out")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/pca9685_pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pca9685_pwm_out"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-6"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This module is responsible for generate pwm pulse with PCA9685 chip.")]),t._v(" "),e("p",[t._v("It listens on the actuator_controls topics, does the mixing and writes the PWM outputs.")]),t._v(" "),e("h3",{attrs:{id:"implementation-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation-2"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("p",[t._v("This module depends on ModuleBase and OutputModuleInterface. IIC communication is based on CDev::I2C")]),t._v(" "),e("h3",{attrs:{id:"examples-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples-4"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("It is typically started with:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pca9685_pwm_out start -a 64 -b 1\n")])])]),e("p",[t._v("Use the "),e("code",[t._v("mixer")]),t._v(" command to load mixer files. "),e("code",[t._v("mixer load /dev/pwm_outputX etc/mixers/quad_x.main.mix")]),t._v(" The number X can be acquired by executing "),e("code",[t._v("pca9685_pwm_out status")]),t._v(" when this driver is running.")]),t._v(" "),e("p",[e("a",{attrs:{id:"pca9685_pwm_out_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-10"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pca9685_pwm_out <command> [arguments...]\n Commands:\n   start         Start the task\n     [-a <val>]  device address on this bus\n                 default: 64\n     [-b <val>]  bus that pca9685 is connected to\n                 default: 1\n     [-r <val>]  schedule rate limit\n                 default: 400\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pmw3901"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pmw3901"}},[t._v("#")]),t._v(" pmw3901")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/optical_flow/pmw3901",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/pmw3901"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"pmw3901_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-11"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pmw3901 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-R <val>]  Rotation\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pps-capture"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pps-capture"}},[t._v("#")]),t._v(" pps_capture")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/pps_capture",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pps_capture"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-7"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This implements capturing PPS information from the GNSS module and calculates the drift between PPS and Real-time clock.")]),t._v(" "),e("p",[e("a",{attrs:{id:"pps_capture_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-12"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pps_capture <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pwm-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pwm-out"}},[t._v("#")]),t._v(" pwm_out")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pwm_out"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-8"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This module is responsible for driving the output pins. For boards without a separate IO chip (eg. Pixracer), it uses the main channels. On boards with an IO chip (eg. Pixhawk), it uses the AUX channels, and the px4io driver is used for main ones.")]),t._v(" "),e("p",[t._v("It listens on the actuator_controls topics, does the mixing and writes the PWM outputs.")]),t._v(" "),e("p",[t._v("On startup, the module tries to occupy all available pins for PWM/Oneshot output. It skips all pins already in use (e.g. by a camera trigger module).")]),t._v(" "),e("h3",{attrs:{id:"implementation-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation-3"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("p",[t._v("By default the module runs on a work queue with a callback on the uORB actuator_controls topic.")]),t._v(" "),e("p",[e("a",{attrs:{id:"pwm_out_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-13"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-13"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pwm_out <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pwm-out-sim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pwm-out-sim"}},[t._v("#")]),t._v(" pwm_out_sim")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/pwm_out_sim",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pwm_out_sim"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-9"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("Driver for simulated PWM outputs.")]),t._v(" "),e("p",[t._v("Its only function is to take "),e("code",[t._v("actuator_control")]),t._v(" uORB messages, mix them with any loaded mixer and output the result to the "),e("code",[t._v("actuator_output")]),t._v(" uORB topic.")]),t._v(" "),e("p",[t._v("It is used in SITL and HITL.")]),t._v(" "),e("p",[e("a",{attrs:{id:"pwm_out_sim_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-14"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-14"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pwm_out_sim <command> [arguments...]\n Commands:\n   start         Start the module\n     [-m <val>]  Mode\n                 values: hil|sim, default: sim\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"px4flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#px4flow"}},[t._v("#")]),t._v(" px4flow")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/optical_flow/px4flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/px4flow"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"px4flow_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-15"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-15"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("px4flow <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 66\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"px4io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#px4io"}},[t._v("#")]),t._v(" px4io")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/px4io",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/px4io"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-10"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("Output driver communicating with the IO co-processor.")]),t._v(" "),e("p",[e("a",{attrs:{id:"px4io_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-16"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-16"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("px4io <command> [arguments...]\n Commands:\n   start\n\n   checkcrc      Check CRC for a firmware file against current code on IO\n     <filename>  Firmware file\n\n   update        Update IO firmware\n     [<filename>] Firmware file\n\n   debug         set IO debug level\n     <debug_level> 0=disabled, 9=max verbosity\n\n   bind          DSM bind\n     dsm2|dsmx|dsmx8 protocol\n\n   sbus1_out     enable sbus1 out\n\n   sbus2_out     enable sbus2 out\n\n   test_fmu_fail test: turn off IO updates\n\n   test_fmu_ok   re-enable IO updates\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"rc-input"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rc-input"}},[t._v("#")]),t._v(" rc_input")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/rc_input",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/rc_input"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-11"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This module does the RC input parsing and auto-selecting the method. Supported methods are:")]),t._v(" "),e("ul",[e("li",[t._v("PPM")]),t._v(" "),e("li",[t._v("SBUS")]),t._v(" "),e("li",[t._v("DSM")]),t._v(" "),e("li",[t._v("SUMD")]),t._v(" "),e("li",[t._v("ST24")]),t._v(" "),e("li",[t._v("TBS Crossfire (CRSF)")])]),t._v(" "),e("p",[e("a",{attrs:{id:"rc_input_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-17"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-17"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rc_input <command> [arguments...]\n Commands:\n   start\n     [-d <val>]  RC device\n                 values: <file:dev>, default: /dev/ttyS3\n\n   bind          Send a DSM bind command (module must be running)\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"rgbled"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rgbled"}},[t._v("#")]),t._v(" rgbled")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/lights/rgbled_ncp5623c",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/rgbled_ncp5623c"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"rgbled_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-18"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-18"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rgbled <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 57\n     [-o <val>]  RGB PWM Assignment\n                 default: 123\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"roboclaw"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#roboclaw"}},[t._v("#")]),t._v(" roboclaw")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/roboclaw",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/roboclaw"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-12"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This driver communicates over UART with the "),e("a",{attrs:{href:"http://downloads.basicmicro.com/docs/roboclaw_user_manual.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Roboclaw motor driver"),e("OutboundLink")],1),t._v(". It performs two tasks:")]),t._v(" "),e("ul",[e("li",[t._v("Control the motors based on the "),e("code",[t._v("actuator_controls_0")]),t._v(" UOrb topic.")]),t._v(" "),e("li",[t._v("Read the wheel encoders and publish the raw data in the "),e("code",[t._v("wheel_encoders")]),t._v(" UOrb topic")])]),t._v(" "),e("p",[t._v("In order to use this driver, the Roboclaw should be put into Packet Serial mode (see the linked documentation), and your flight controller's UART port should be connected to the Roboclaw as shown in the documentation. For Pixhawk 4, use the "),e("code",[t._v("UART & I2C B")]),t._v(" port, which corresponds to "),e("code",[t._v("/dev/ttyS3")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"implementation-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation-4"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("p",[t._v("The main loop of this module (Located in "),e("code",[t._v("RoboClaw.cpp::task_main()")]),t._v(") performs 2 tasks:")]),t._v(" "),e("ol",[e("li",[t._v("Write "),e("code",[t._v("actuator_controls_0")]),t._v(" messages to the Roboclaw as they become available")]),t._v(" "),e("li",[t._v("Read encoder data from the Roboclaw at a constant, fixed rate.")])]),t._v(" "),e("p",[t._v("Because of the latency of UART, this driver does not write every single "),e("code",[t._v("actuator_controls_0")]),t._v(" message to the Roboclaw immediately. Instead, it is rate limited based on the parameter "),e("code",[t._v("RBCLW_WRITE_PER")]),t._v(".")]),t._v(" "),e("p",[t._v("On startup, this driver will attempt to read the status of the Roboclaw to verify that it is connected. If this fails, the driver terminates immediately.")]),t._v(" "),e("h3",{attrs:{id:"examples-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples-5"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("The command to start this driver is:")]),t._v(" "),e("p",[t._v("$ roboclaw start "),e("device",[e("baud")],1)],1),t._v(" "),e("p",[e("code",[t._v("<device>")]),t._v(" is the name of the UART port. On the Pixhawk 4, this is "),e("code",[t._v("/dev/ttyS3")]),t._v(". "),e("code",[t._v("<baud>")]),t._v(" is te baud rate.")]),t._v(" "),e("p",[t._v("All available commands are:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ roboclaw start <device> <baud>")])]),t._v(" "),e("li",[e("code",[t._v("$ roboclaw status")])]),t._v(" "),e("li",[e("code",[t._v("$ roboclaw stop")])])]),t._v(" "),e("p",[e("a",{attrs:{id:"roboclaw_usage"}})]),t._v(" "),e("h3",{attrs:{id:"描述-14"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述-14"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("roboclaw <command> [arguments...]\n Commands:\n")])])]),e("h2",{attrs:{id:"safety-button"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#safety-button"}},[t._v("#")]),t._v(" safety_button")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/safety_button",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/safety_button"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-13"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-13"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This module is responsible for the safety button. Pressing the safety button 3 times quickly will trigger a GCS pairing request.")]),t._v(" "),e("p",[e("a",{attrs:{id:"safety_button_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-19"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-19"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("safety_button <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"sht3x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sht3x"}},[t._v("#")]),t._v(" sht3x")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/hygrometer/sht3x",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/hygrometer/sht3x"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-14"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-14"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("SHT3x Temperature and Humidity Sensor Driver by Senserion.")]),t._v(" "),e("h3",{attrs:{id:"examples-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples-6"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("CLI usage example:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sht3x start -X\n")])])]),e("p",[t._v("Start the sensor driver on the external bus")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sht3x status\n")])])]),e("p",[t._v("Print driver status")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sht3x values\n")])])]),e("p",[t._v("Print last measured values")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sht3x reset\n")])])]),e("p",[t._v("Reinitialize senzor, reset flags")]),t._v(" "),e("p",[e("a",{attrs:{id:"sht3x_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-20"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-20"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sht3x <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 68\n     [-k]        if initialization (probing) fails, keep retrying periodically\n\n   stop\n\n   status        print status info\n\n   values        Print actual data\n\n   reset         Reinitialize sensor\n")])])]),e("h2",{attrs:{id:"tap-esc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tap-esc"}},[t._v("#")]),t._v(" tap_esc")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/tap_esc",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/tap_esc"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-15"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-15"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This module controls the TAP_ESC hardware via UART. It listens on the actuator_controls topics, does the mixing and writes the PWM outputs.")]),t._v(" "),e("h3",{attrs:{id:"implementation-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation-5"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("p",[t._v("Currently the module is implementd as a threaded version only, meaning that it runs in its own thread instead of on the work queue.")]),t._v(" "),e("h3",{attrs:{id:"example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),e("p",[t._v("The module is typically started with: tap_esc start -d /dev/ttyS2 -n <1-8>")]),t._v(" "),e("p",[e("a",{attrs:{id:"tap_esc_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-21"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-21"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("tap_esc <command> [arguments...]\n Commands:\n   start         Start the task\n     [-d <val>]  Device used to talk to ESCs\n                 values: <device>\n     [-n <val>]  Number of ESCs\n                 default: 4\n")])])]),e("h2",{attrs:{id:"tone-alarm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tone-alarm"}},[t._v("#")]),t._v(" tone_alarm")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/tone_alarm",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/tone_alarm"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-16"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-16"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("This module is responsible for the tone alarm.")]),t._v(" "),e("p",[e("a",{attrs:{id:"tone_alarm_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-22"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-22"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("tone_alarm <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"uwb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uwb"}},[t._v("#")]),t._v(" uwb")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/uwb/uwb_sr150",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/uwb/uwb_sr150"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"description-17"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-17"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("Driver for NXP UWB_SR150 UWB positioning system. This driver publishes a "),e("code",[t._v("uwb_distance")]),t._v(" message whenever the UWB_SR150 has a position measurement available.")]),t._v(" "),e("h3",{attrs:{id:"example-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example")]),t._v(" "),e("p",[t._v("Start the driver with a given device:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uwb start -d /dev/ttyS2\n")])])]),e("p",[e("a",{attrs:{id:"uwb_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-23"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-23"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uwb <command> [arguments...]\n Commands:\n   start\n     -d <val>    Name of device for serial communication with UWB\n                 values: <file:dev>\n     -b <val>    Baudrate for serial communication\n                 values: <int>\n     -p <val>    Position Debug: displays errors in Multilateration\n                 values: <int>\n\n   stop\n\n   status\n")])])]),e("h2",{attrs:{id:"voxlpm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#voxlpm"}},[t._v("#")]),t._v(" voxlpm")]),t._v(" "),e("p",[t._v("Source: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/release/1.13/src/drivers/power_monitor/voxlpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/voxlpm"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"voxlpm_usage"}})]),t._v(" "),e("h3",{attrs:{id:"usage-24"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage-24"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("voxlpm [arguments...]\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 68\n     [-T <val>]  Type\n                 values: VBATT|P5VDC|P12VDC, default: VBATT\n     [-k]        if initialization (probing) fails, keep retrying periodically\n\n   stop\n\n   status        print status info\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);