import{_ as e,a as o,b as t,c as a,d as i,e as l,f as r,g as s,h as n,i as d}from"./chunks/vscode_intellisense.cdSAS1zP.js";import{_ as p,c,o as u,ab as h}from"./chunks/framework.CUflZczI.js";const C=JSON.parse('{"title":"비주얼 스튜디오 코드 IDE(VSCode)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/dev_setup/vscode.md","filePath":"ko/dev_setup/vscode.md"}'),m={name:"ko/dev_setup/vscode.md"},g=h('<h1 id="비주얼-스튜디오-코드-ide-vscode" tabindex="-1">비주얼 스튜디오 코드 IDE(VSCode) <a class="header-anchor" href="#비주얼-스튜디오-코드-ide-vscode" aria-label="Permalink to &quot;비주얼 스튜디오 코드 IDE(VSCode)&quot;">​</a></h1><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> is a powerful cross-platform source code editor/IDE that can be used for PX4 development on Ubuntu, Windows, and macOS.</p><p>PX4 개발에 VSCode를 사용하는 데에는 많은 이유가 있습니다.</p><ul><li>Getting setup <em>really</em> only takes a few minutes.</li><li>A rich extension ecosystem that enables a huge range of tools needed for PX4 development: C/C++ (with solid <em>cmake</em> integration), <em>Python</em>, <em>Jinja2</em>, ROS messages, and even DroneCAN dsdl.</li><li>뛰어난 Github 통합 기능</li></ul><p>IDE를 설정과 개발 방법에 대하여 설명합니다.</p><p>:::note 다른 강력한 IDE가 있지만, 일반적으로 PX4와 통합에는 많은 어려움이 있습니다. With <em>VScode</em>, configuration is stored in the PX4/PX4-Autopilot tree (<a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/.vscode" target="_blank" rel="noreferrer">PX4-Autopilot/.vscode</a>) so the setup process is as simple as adding the project folder. :::</p><h2 id="선행-조건" tabindex="-1">선행 조건 <a class="header-anchor" href="#선행-조건" aria-label="Permalink to &quot;선행 조건&quot;">​</a></h2><p>You must already have installed the command line <a href="./../dev_setup/dev_env.html">PX4 developer environment</a> for your platform and downloaded the <em>Firmware</em> source code repo.</p><h2 id="설치-및-설정" tabindex="-1">설치 및 설정 <a class="header-anchor" href="#설치-및-설정" aria-label="Permalink to &quot;설치 및 설정&quot;">​</a></h2><ol><li><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VSCode 다운로드 및 설치</a>(사용자의 OS에 맞는 버전이 제공됨).</p></li><li><p>Open VSCode and add the PX4 source code:</p><ul><li>Select <em>Open folder ...</em> option on the welcome page (or using the menu: <strong>File &gt; Open Folder</strong>): <img src="'+e+'" alt="Open Folder"></li><li>A file selection dialog will appear. Select the <strong>PX4-Autopilot</strong> directory and then press <strong>OK</strong>.</li></ul><p>The project files and configuration will then load into <em>VSCode</em>.</p></li><li><p>Press <strong>Install All</strong> on the <em>This workspace has extension recommendations</em> prompt (this will appear on the bottom right of the IDE). <img src="'+o+'" alt="확장 기능 설치"></p><p>VSCode will open the <em>Extensions</em> panel on the left hand side so you can watch the progress of installation.</p><p><img src="'+t+'" alt="VSCode 탐색기에 로드된 PX4"></p></li><li><p>오른쪽 하단에 여러 알림/프롬프트가 나타날 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p></div></li></ol><p>메시지가 사라지면, 하단 파란색 막대 오른쪽에 있는 작은 &quot;알람&quot; 아이콘을 클릭합니다. :::</p><ul><li>If prompted to install a new version of <em>cmake</em>: <ul><li><strong>아니요</strong>라고 말합니다(<a href="./../dev_setup/dev_env.html">PX4 개발자 환경</a>과 함께 올바른 버전이 설치됨).</li></ul></li><li>If prompted to sign into <em>github.com</em> and add your credentials: <ul><li>이것은 당신에게 달려 있습니다! Github와 IDE 간의 긴밀한 통합을 제공하여 워크플로를 단순화할 수 있습니다.</li></ul></li><li>다른 프롬프트는 선택 사항이며 유용하다고 생각되면 설치할 수 있습니다. </li></ul><p><a id="building"></a></p><h2 id="px4-빌드" tabindex="-1">PX4 빌드 <a class="header-anchor" href="#px4-빌드" aria-label="Permalink to &quot;PX4 빌드&quot;">​</a></h2><p>빌드를 진행하려면:</p><ol><li><p>Select your build target (&quot;cmake build config&quot;):</p><ul><li><p>The current <em>cmake build target</em> is shown on the blue <em>config</em> bar at the bottom (if this is already your desired target, skip to next step). <img src="'+a+'" alt="Select Cmake build target"></p><div class="info custom-block"><p class="custom-block-title">The cmake target you select affects the targets offered for when <a href="#debugging">building/debugging</a> (i.e. for hardware debugging you must select a hardware target like <code>px4_fmu-v6</code>).</p></div></li></ul></li></ol><p>:::</p><ul><li>Click the target on the config bar to display other options, and select the one you want (this will replace any selected target).</li><li><em>Cmake</em> will then configure your project (see notification in bottom right). <img src="'+i+'" alt="Cmake config project"></li><li>Wait until configuration completes. When this is done the notification will disappear and you&#39;ll be shown the build location: <img src="'+l+'" alt="Cmake config project">.</li></ul><ol><li>그런 다음 구성 표시줄에서 빌드를 시작할 수 있습니다(<strong>빌드</strong> 또는 <strong>디버그</strong> 선택). <img src="'+r+'" alt="디버깅 또는 빌드 실행"></li></ol><p>After building at least once you can now use [code completion](#code completion) and other <em>VSCode</em> features.</p><h2 id="디버깅" tabindex="-1">디버깅 <a class="header-anchor" href="#디버깅" aria-label="Permalink to &quot;디버깅&quot;">​</a></h2><p><a id="debugging_sitl"></a></p><h3 id="sitl-디버깅" tabindex="-1">SITL 디버깅 <a class="header-anchor" href="#sitl-디버깅" aria-label="Permalink to &quot;SITL 디버깅&quot;">​</a></h3><p>SITL에서 PX4를 디버깅하려면:</p><ol><li><p>사이드바에서 디버그 아이콘(빨간색으로 표시)을 선택하여 디버그 패널을 표시합니다.<img src="'+s+'" alt="디버깅 실행"></p></li><li><p>Then choose your debug target (e.g. <em>Debug SITL (Gazebo Iris)</em>) from the top bar debug dropdown (purple box).</p><p>:::note 제공되는 디버그 대상(보라색 상자)은 빌드 대상(하단 막대의 노란색 상자)과 일치합니다. 예를 들어, SITL 대상을 디버그하려면 빌드 대상에 SITL이 포함되어야 합니다. :::</p></li><li><p>디버그 &quot;재생&quot; 화살표(상단 막대의 디버그 대상 옆 - 분홍색 상자)를 클릭하여 디버깅을 시작합니다.</p></li></ol><p>디버깅하는 동안 중단점을 설정하고, 코드를 건너뛰고, 그렇지 않으면 정상적으로 개발할 수 있습니다.</p><h3 id="하드웨어-디버깅" tabindex="-1">하드웨어 디버깅 <a class="header-anchor" href="#하드웨어-디버깅" aria-label="Permalink to &quot;하드웨어 디버깅&quot;">​</a></h3><p>The instructions in <a href="./../debug/swd_debug.html">SWD Debug Port</a> explain how to connect to the SWD interface on common flight controllers (for example, using the Dronecode or Blackmagic probes).</p><p>SWD 인터페이스에 연결한 후 VSCode의 하드웨어 디버깅은 디버거 유형(및 펌웨어)(예: <code>jlink (px4_fmu-v5)</code>)에 적합한 디버그 대상을 선택한다는 점을 제외하고 <a href="#debugging_sitl">SITL 디버깅</a>과 동일합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>jlink</code> 옵션을 보려면 <a href="#building-px4">펌웨어 빌드를 위한 cmake 대상</a>을 선택하여야 합니다.</p></div><p><img src="'+n+'" alt="다양한 프로브에 대한 옵션이 있는 하드웨어 대상을 보여주는 이미지"></p><p><a id="code completion"></a></p><h2 id="코드-완성" tabindex="-1">코드 완성 <a class="header-anchor" href="#코드-완성" aria-label="Permalink to &quot;코드 완성&quot;">​</a></h2><p>코드 완성(및 기타 IntelliSense 마법)이 작동하려면 활성화 설정후, <a href="#building">코드를 빌드</a>하여야 합니다.</p><p>이 작업이 완료되면 다른 작업을 수행할 필요가 없습니다. 툴체인은 입력시 자동으로 기호를 제공합니다.</p><p><img src="'+d+'" alt="인텔리센스"></p><h2 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h2><p>이 섹션에는 설정 및 빌드 오류에 대한 지침이 포함되어 있습니다.</p><h3 id="ubuntu-18-04-visual-studio-code는-이-큰-작업-영역에서-파일-변경-사항을-감시할-수-없습니다" tabindex="-1">Ubuntu 18.04: &quot;Visual Studio Code는 이 큰 작업 영역에서 파일 변경 사항을 감시할 수 없습니다.&quot; <a class="header-anchor" href="#ubuntu-18-04-visual-studio-code는-이-큰-작업-영역에서-파일-변경-사항을-감시할-수-없습니다" aria-label="Permalink to &quot;Ubuntu 18.04: &quot;Visual Studio Code는 이 큰 작업 영역에서 파일 변경 사항을 감시할 수 없습니다.&quot;&quot;">​</a></h3><p>이 오류는 시작시에 나타납니다. 일부 시스템에서는 애플리케이션에 적용되는 파일 핸들의 상한선이 8192개이므로 VSCode가 <code>/PX4-Autopilot</code>에서 파일 수정 사항을 감지하지 못할 수 있습니다.</p><p>메모리 소비를 희생시키면서 오류를 방지하기 위해 이 제한을 늘릴 수 있습니다. <a href="https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc" target="_blank" rel="noreferrer">여기에 있는 지침</a>을 따르십시오. 값 65536이면 충분합니다.</p>',41),f=[g];function b(_,k,v,S,P,q){return u(),c("div",null,f)}const I=p(m,[["render",b]]);export{C as __pageData,I as default};
