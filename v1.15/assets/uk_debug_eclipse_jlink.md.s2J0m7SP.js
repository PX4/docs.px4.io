import{_ as e,a as i,b as l,c as a,d as t,e as s,f as r,g as p,h as n,i as o,j as g,k as c,l as u}from"./chunks/eclipse_svd_file_path.cFnbI5xs.js";import{_ as m,c as h,o as d,ab as k}from"./chunks/framework.CUflZczI.js";const B=JSON.parse('{"title":"Налагодження з Eclipse та J-Link","description":"","frontmatter":{},"headers":[],"relativePath":"uk/debug/eclipse_jlink.md","filePath":"uk/debug/eclipse_jlink.md"}'),_={name:"uk/debug/eclipse_jlink.md"},b=k('<h1 id="налагодження-з-eclipse-та-j-link" tabindex="-1">Налагодження з Eclipse та J-Link <a class="header-anchor" href="#налагодження-з-eclipse-та-j-link" aria-label="Permalink to &quot;Налагодження з Eclipse та J-Link&quot;">​</a></h1><p>Ця тема пояснює, як налаштувати та використовувати <a href="https://gnu-mcu-eclipse.github.io/" target="_blank" rel="noreferrer">MCU Eclipse</a> з адаптером <em>Segger Jlink</em> для налагодження PX4, що працює на NuttX (наприклад, плати серії Pixhawk).</p><h2 id="необхідне-обладнання" tabindex="-1">Необхідне обладнання <a class="header-anchor" href="#необхідне-обладнання" aria-label="Permalink to &quot;Необхідне обладнання&quot;">​</a></h2><ul><li><a href="https://www.segger.com/products/debug-probes/j-link/models/j-link-edu-mini/" target="_blank" rel="noreferrer">J-Link EDU Mini</a></li><li>Адаптер для підключення Segger JLink до контролера польоту <a href="./../debug/swd_debug.html">Порту відлагодження SWD</a> (порт відлагодження).</li><li>Мікро USB кабель</li></ul><h2 id="встановлення" tabindex="-1">Встановлення <a class="header-anchor" href="#встановлення" aria-label="Permalink to &quot;Встановлення&quot;">​</a></h2><h3 id="px4" tabindex="-1">PX4 <a class="header-anchor" href="#px4" aria-label="Permalink to &quot;PX4&quot;">​</a></h3><p>Налаштуйте PX4, дотримуючись звичайних вказівок:</p><ul><li><a href="./../dev_setup/dev_env.html">Налаштуйте середовище розробника/інструментальний набір PX4</a> для вашої платформи (наприклад, для Linux дивиться: <a href="./../dev_setup/dev_env_linux_ubuntu.html">Середовище розробки на Ubuntu LTS / Debian Linux</a>).</li><li><a href="./../dev_setup/building_px4.html">Завантажте PX4</a> та за потреби перезберіть його в командному рядку.</li></ul><h3 id="eclipse" tabindex="-1">Eclipse <a class="header-anchor" href="#eclipse" aria-label="Permalink to &quot;Eclipse&quot;">​</a></h3><p>Встановлення <em>Eclipse</em>:</p><ol><li>Завантажте <a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases/" target="_blank" rel="noreferrer">Eclipse CDT для розробників на C/C++</a> (MCU GitHub).</li><li>Розпакуйте папку Eclipse та скопіюйте її куди завгодно (немає потреби запускати будь-які сценарії установки).</li><li>Запустіть <em>Eclipse</em> та виберіть місце для вашої початкової робочої області.</li></ol><h3 id="інструменти-segger-jlink" tabindex="-1">Інструменти Segger Jlink <a class="header-anchor" href="#інструменти-segger-jlink" aria-label="Permalink to &quot;Інструменти Segger Jlink&quot;">​</a></h3><p>Для встановлення інструментів <em>Segger Jlink</em>:</p><ol><li>Завантажте та запустіть <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack" target="_blank" rel="noreferrer">Пакунок програмного забезпечення та документації J-Link</a> для вашої ОС (доступні пакети для Windows та Linux). <ul><li>У Linux інструменти встановлюються у <strong>/usr/bin</strong>.</li></ul></li></ol><p>Для отримання додаткової інформації див. : <a href="https://gnu-mcu-eclipse.github.io/debug/jlink/install/" target="_blank" rel="noreferrer">https://gnu-mcu-eclipse.github.io/debug/jlink/install/</a>.</p><h2 id="перше-використання" tabindex="-1">Перше використання <a class="header-anchor" href="#перше-використання" aria-label="Permalink to &quot;Перше використання&quot;">​</a></h2><ol><li><p>Підключіть <em>Segger JLink</em> до комп&#39;ютера-хоста та <a href="./../debug/swd_debug.html">порту відлагодження контролера польоту</a> (через адаптер).</p></li><li><p>Увімкніть модульний політний контролер.</p></li><li><p>Запустіть <em>Eclipse</em>.</p></li><li><p>Додайте джерело вибравши <strong>File &gt; Import &gt; C/C++ &gt; Існуючий код як проект</strong> та натисніть <strong>Next</strong>.</p></li><li><p>Вказати шлях до папки <strong>PX4-Autopilot</strong> та дати йому ім&#39;я, потім виберіть <em>ARM Cross GCC</em> у <em>Toolchain for Indexer Settings</em> та натисніть на <strong>Finish</strong>. Імпорт триває деякий час. Дочекайтеся його завершення.</p></li><li><p>Встановіть налаштування MCU: клацніть правою кнопкою миші на проект верхнього рівня в досліднику проектів, виберіть <em>Properties</em>, а потім під MCU виберіть <em>SEGGER J-Link Path</em>. Встановіть його, як показано на знімку екрану нижче. <img src="'+e+'" alt="Eclipse: Segger J-Link Path"></p></li><li><p>Пакети з оновленнями:</p><ul><li><p>Клацніть на маленьку іконку у верхньому правому куті під назвою <em>Open Perspective</em> та відкрийте перспективу <em>Packs</em>. <img src="'+i+`" alt="Eclipse: Workspace"></p></li><li><p>Клацніть кнопку <strong>update all</strong>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p></div></li></ul></li></ol><p>Це займає ДУЖЕ БАГАТО ЧАСУ (10 хвилин). Ігноруйте всі помилки про відсутні пакети. :::</p><pre><code> ![Eclipse: Workspace Packs Perspective](../../assets/debug/eclipse_packs_perspective.jpg)
</code></pre><ul><li>Пристрої STM32Fxx знаходяться в папці Keil, встановлюються правою кнопкою миші та вибором <strong>install</strong> на відповідний пристрій для F4 та F7.</li></ul><ol><li><p>Налаштування конфігурації налагодження для цілі:</p><ul><li>Натисніть правою кнопкою миші на проекті <em>Settings</em> (menu: <strong>C/C++ Build &gt; Settings</strong>)</li><li>Виберіть вкладку <em>Devices</em>, розділ <em>Devices</em> (Не <em>Boards</em>).</li><li>Знайдіть FMU чіп, який ви хочете налагодити.</li></ul><p><img src="`+l+'" alt="Eclipse: Select FMU in settings"></p></li><li><p>Виберіть налаштування відладки за допомогою невеликого випадаючого списку поруч із символом багу: <img src="'+a+'" alt="Eclipse: Debug config"></p></li><li><p>Потім виберіть <em>GDB SEGGER J-Link Debugging</em> і потім кнопку <strong>New config</strong> у верхньому лівому куті. <img src="'+t+'" alt="Eclipse: GDB Segger Debug config"></p></li><li><p>Налаштування конфігурації збірки:</p><ul><li><p>Дайте йому назву та встановіть <em>C/C++ Application</em> до відповідного <strong>.elf</strong> файлу.</p></li><li><p>Виберіть <em>Disable Auto build</em></p><p>::: інформація Пам&#39;ятайте, що ви повинні побудувати ціль з командного рядка перед початком сеансу налагодження. :::</p></li></ul><p><img src="'+s+'" alt="Eclipse: GDB Segger Debug config"></p></li><li><p>Вкладки <em>Debugger</em> та <em>Startup</em> не повинні потребувати будь-яких змін (просто перевірте ваші налаштування за знімками екрану нижче)</p><p><img src="'+r+'" alt="Eclipse: GDB Segger Debug config: debugger tab"> <img src="'+p+'" alt="Eclipse: GDB Segger Debug config: startup tab"></p></li></ol><h2 id="відлагодження-з-урахуванням-завдань-segger" tabindex="-1">Відлагодження з урахуванням завдань SEGGER <a class="header-anchor" href="#відлагодження-з-урахуванням-завдань-segger" aria-label="Permalink to &quot;Відлагодження з урахуванням завдань SEGGER&quot;">​</a></h2><p>Відладка, яка враховує задачі (також відома як <a href="https://www.segger.com/products/debug-probes/j-link/tools/j-link-gdb-server/thread-aware-debugging/" target="_blank" rel="noreferrer">відлагодження, яке враховує потоки</a>), дозволяє вам показати контекст усіх запущених потоків/задач замість лише стеку поточної задачі. Це досить корисно, оскільки PX4 має тенденцію запускати виконання багато різних завдань.</p><p>Для активації цієї функції в Eclipse:</p><ol><li><p>Спочатку вам потрібно увімкнути <code>CONFIG_DEBUG_TCBINFO</code> у конфігурації NuttX для вашої збірки (щоб викрити зсуви TCB).</p><ul><li><p>Відкрийте термінал у кореневій теці вихідного коду PX4-Autopilot</p></li><li><p>У терміналі відкрийте <code>menuconfig</code> використовуючи відповідну ціль make для збірки. Це виглядатиме приблизно так:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boardguiconfig</span></span></code></pre></div><p>(Див. <a href="./../hardware/porting_guide_config.html#px4-menuconfig-setup">PX4 Menuconfig Setup</a> для отримання додаткової інформації) щодо використання засобів конфігурації).</p></li><li><p>Переконайтеся, що параметр <em>Enable TCBinfo struct for debug</em> вибраний, як показано: <img src="'+n+'" alt="NuttX: Menuconfig: CONFIG_DEBUG_TCBINFO"></p></li></ul></li><li><p>Скомпілюйте бібліотеку <strong>jlink-nuttx.so</strong> в терміналі, виконавши наступну команду в терміналі: <code>make jlink-nuttx</code></p></li><li><p>Змініть Eclipse, щоб використовувати цю бібліотеку. В конфігурації <em>J-Link GDB Server Setup</em> оновіть <strong>Other options</strong>, щоб включити <code>-rtos /home/&lt;PX4 path&gt;/Tools/jlink-nuttx.so</code>, як показано нижче.</p><p><img src="'+o+'" alt="Eclipse: GDB Segger Debug config RTOS aware: debugger tab"></p></li><li><p>Під час запуску налагоджувача ви повинні побачити зараз декілька потоків замість одного:</p><p><img src="'+g+'" alt="Eclipse: GDB Segger Debug config RTOS aware: debug session"></p></li></ol><h2 id="вирішення-проблем" tabindex="-1">Вирішення проблем <a class="header-anchor" href="#вирішення-проблем" aria-label="Permalink to &quot;Вирішення проблем&quot;">​</a></h2><h3 id="цільовии-процесор-відсутніи-в-package-manager" tabindex="-1">Цільовий процесор відсутній в Package Manager <a class="header-anchor" href="#цільовии-процесор-відсутніи-в-package-manager" aria-label="Permalink to &quot;Цільовий процесор відсутній в Package Manager&quot;">​</a></h3><p>Якщо цільовий ЦП не відображається в package manager, вам може знадобитися ці крок для запуску відображення реєстру.</p><p>:::порада Це, як правило, не повинно траплятися (але повідомляжться про такі випадки при підключенні до контролера STM F7). :::</p><p>Додавання відсутніх файлів SVD для <em>Peripheral View</em>:</p><ol><li><p>Дізнайтеся, де MCU Eclipse зберігає свої пакети (<strong>Preferences &gt; C/C++ &gt; MCU Packages</strong>):</p><p><img src="'+c+'" alt="Eclipse: MCU Packages"></p></li><li><p>Завантажте відсутні пакети з: <a href="http://www.keil.com/dd2/Pack/" target="_blank" rel="noreferrer">http://www.keil.com/dd2/Pack/</a></p></li><li><p>Відкрийте завантажений пакет за допомогою інструменту для розпакування, та витягніть файли <strong>.SVD</strong> з: <strong>/CMSIS/SVD</strong>.</p></li><li><p>Виберіть потрібний файл <strong>.SVD</strong> у: <strong>Debug Options &gt; GDB SEGGER JLink Debugging &gt; SVD Path</strong></p><p><img src="'+u+'" alt="Eclipse: SVD File path"></p></li></ol>',31),f=[b];function S(E,P,D,C,x,w){return d(),h("div",null,f)}const F=m(_,[["render",S]]);export{B as __pageData,F as default};
