import{_ as s,c as a,o as i,ab as e}from"./chunks/framework.CUflZczI.js";const m=JSON.parse('{"title":"参数设置","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced/parameters_and_configurations.md","filePath":"zh/advanced/parameters_and_configurations.md"}'),p={name:"zh/advanced/parameters_and_configurations.md"},n=e(`<h1 id="参数设置" tabindex="-1">参数设置 <a class="header-anchor" href="#参数设置" aria-label="Permalink to &quot;参数设置&quot;">​</a></h1><p>PX4 使用 <em>param subsystem</em>（<code>float</code> 和 <code>int32_t</code> 值的二维表）和文本文件（用于启动脚本）来存储其配置。</p><p>本节详细讨论 <em>param</em> 子系统。 它涵盖如何列出、保存和加载参数，以及如何定义这些参数并使这些参数在地面站上显示。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./../concept/system_startup.html">系统启动</a> 以及 <a href="./../dev_airframes/adding_a_new_frame.html">机架配置</a> 的启动脚本在其他页面上有详细介绍。</p></div><h2 id="命令行使用方法" tabindex="-1">命令行使用方法 <a class="header-anchor" href="#命令行使用方法" aria-label="Permalink to &quot;命令行使用方法&quot;">​</a></h2><p>PX4 <a href="./../debug/system_console.html">系统控制台</a>提供了<a href="./../modules/modules_command.html#param">参数</a>工具，可用于设置参数，读取参数值，保存参数，以及导出和还原参数。</p><h3 id="获取和设置参数" tabindex="-1">获取和设置参数 <a class="header-anchor" href="#获取和设置参数" aria-label="Permalink to &quot;获取和设置参数&quot;">​</a></h3><p><code>param show</code> 命令列出所有系统参数：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span></span></code></pre></div><p>为了更有选择性，部分参数名称可以使用通配符 &quot;*&quot; ：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RC_MAP_A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Symbols:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> saved,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unsaved</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [359,498] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [360,499] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [361,500] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_ACRO_SW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [375,514] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 723</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> total,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 532</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used.</span></span></code></pre></div><p>可以使用 <code>-c</code> 标志显示已更改的所有参数（从其默认值）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span></code></pre></div><p>您可以使用<code>param show-for-airframe</code>来显示所有修改了默认值的参数，只显示当前机架定义的文件（默认导入）。</p><h3 id="导出和加载参数" tabindex="-1">导出和加载参数 <a class="header-anchor" href="#导出和加载参数" aria-label="Permalink to &quot;导出和加载参数&quot;">​</a></h3><p>你可以保存任何已经_修改_的参数(不同于机身默认的参数)。</p><p>标准的 <code>param save</code> 命令将参数存储在当前默认文件中:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span></code></pre></div><p>如果提供了参数，它会将参数存储到这个新位置:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span></code></pre></div><p>有两个不同的命令来_加载_参数:</p><ul><li><code>param load</code> 首先将所有参数完全重置为默认值，然后用存储在文件中的任何值覆盖参数值。</li><li><code>param import</code> 只是用文件中的值覆盖参数值，然后保存结果（即有效调用 <code>param save</code>）。</li></ul><p><code>load</code> 有效地将参数重置为保存参数时的状态（我们说 &quot;有效&quot;，因为保存在文件中的任何参数都将被更新，但其他参数可能有不同于参数文件创建时的固件定义默认值）。</p><p>相比之下，<code>import</code> 是将文件中的参数与无人机的当前状态合并。 例如，这可以用来只导入包含校准数据的参数文件，而不覆盖系统配置的其余部分。</p><p>这两种情况的示例如下所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件保存时重置参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 选择性的保存参数 (不自动加载)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将保存的参数与当前参数合并</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span></code></pre></div><h2 id="参数创建-定义" tabindex="-1">参数创建/定义 <a class="header-anchor" href="#参数创建-定义" aria-label="Permalink to &quot;参数创建/定义&quot;">​</a></h2><p>参数定义有两部分:</p><ul><li><a href="#parameter-metadata">参数元数据</a>指定固件中每个参数的默认值，以及用于在地面控制站和文档中呈现（和编辑）参数的其他元数据。</li><li><a href="#c-c-api">C/C++ 代码</a> 能够从 PX4 模块和驱动器中获取或订阅参数值。</li></ul><p>以下描述了编写元数据和代码的几种方法。 在可能的情况下，代码应该使用更新的<a href="#yaml-metadata">YAML 元数据</a>和<a href="#c-api">C++ API</a>，而不是使用旧的 C 参数/代码定义，因为这些方法更灵活和健壮。</p><p>参数元数据<a href="#publishing-parameter-metadata-to-a-gcs">被编译到固件中</a>，并通过<a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer"> MAVLink 组件信息服务</a>提供给地面站。</p><h3 id="参数名称" tabindex="-1">参数名称 <a class="header-anchor" href="#参数名称" aria-label="Permalink to &quot;参数名称&quot;">​</a></h3><p>参数名称不得超过 16 个 ASCII 字符。</p><p>按照惯例，组中的每个参数都应共享相同的 (有意义的) 字符串前缀，后跟下划线，<code>MC_</code> 和 <code>FW_</code> 用于与多旋翼或固定翼系统具体相关的参数。 此惯例不强制执行。</p><p>名称必须匹配代码和 <a href="#parameter-metadata">参数元数据</a> 以正确地将参数与其元数据关联 (包括固件中的默认值)。</p><h3 id="c-c-api" tabindex="-1">C / C++ API <a class="header-anchor" href="#c-c-api" aria-label="Permalink to &quot;C / C++ API&quot;">​</a></h3><p>有单独的 C 和 C++ 的 API 可用于从 PX4 模块和驱动程序中访问参数值。</p><p>API 之间的一个重要区别是，C++ 版本具有更有效的标准化机制，可与参数值的更改（即来自 GCS 的更改）同步。</p><p>同步很重要，因为参数可能随时被更改为另一个值。 您的代码应该 <em>始终</em> 使用参数存储中的当前值。 如果无法获取最新版本，则需要在更改参数后重新启动（使用 <code>@reboot_required</code> 元数据来重启）。</p><p>此外，C++ 版本有更好的类型安全和更小的 RAM 开销。 缺点是参数名称必须在编译时知道，而 C 语言 API 可以将动态创建的名称作为字符串。</p><h4 id="c-api" tabindex="-1">C++ API <a class="header-anchor" href="#c-api" aria-label="Permalink to &quot;C++ API&quot;">​</a></h4><p>C++ API 提供宏来将参数声明为 <em>class attributes</em>。 您可以添加一些 &quot;常见模板&quot; 代码，以定期监听与 <em>任何</em> 参数更新相关的 <a href="./../middleware/uorb.html">uORB Topic</a> 。 框架代码然后 (在不可见的情况下) 处理追踪影响 uORB 消息，并保持参数属性和 uORB 消息同步。 在代码的其余部分中，您只能使用定义的参数属性，它们将始终是最新的！</p><p>首先在您的模块或驱动程序的类头文件中包含所需的头文件:</p><ul><li><p><strong>px4_platform_common/module_params.h</strong> 获取 <code>DEFINE_PARAMETERS</code> 宏：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;px4_platform_common/module_params.h&gt;</span></span></code></pre></div></li><li><p><strong>参数_update.h</strong> 访问 uORB <code>parameter_update</code> 消息：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;uORB/topics/parameter_update.h&gt;</span></span></code></pre></div></li><li><p><strong>Subscription.hpp</strong> 是 C++ 版本的 uORB 订阅 API:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;uORB/Subscription.hpp&gt;</span></span></code></pre></div></li></ul><p>从 <code>ModuleParams</code>派生类，并使用 <code>DEFINE_PARAMETERS</code> 指定参数列表及其相关的参数属性。 参数的名称必须与其参数元数据定义相同。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : ..., </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModuleParams</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 如果由必要，检查参数更改并更新它们。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parameters_update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DEFINE_PARAMETERS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (ParamInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SYS_AUTOSTART</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_sys_autostart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /**&lt; example parameter */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (ParamFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ATT_BIAS_MAX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_att_bias_max</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**&lt; another parameter */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 订阅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uORB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SubscriptionInterval _parameter_update_sub{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ORB_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parameter_update), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>使用模板更新 CPP 文件，以检查与参数更新相关的 uORB 消息。</p><p>代码中调用 <code>parameters_update(); </code> 定期检查是否有更新:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parameters_update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_parameter_update_sub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        parameter_update_s param_update;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _parameter_update_sub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">param_update);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //如果有任何参数更新, 调用 updateParams() 来检查</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 该类属性是否需要更新 (然后执行更新)。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述方法中：</p><ul><li><code>_parameter_update_sub.updated()</code> 告诉我们是否有 <em>任何</em> 更新 <code>param_update</code> 的 uORB 消息 (但不是受影响的参数)。</li><li>如果更新了 &quot;某些&quot; 参数，我们会将更新复制到 <code>parameter_update_s</code> (<code>param_update</code>), 以清除待处理的更新。</li><li>然后我们调用 <code>ModuleParams::updateParams()</code>。 这个&quot;底层&quot;更新了我们<code>DEFINE_PARAMETERS</code>列表中列出的所有参数属性。</li></ul><p>然后，参数属性 (<code>_sys_autostart</code> 和<code>_att_bias_max</code> 在本例中) 可用于表示参数，并随时更新参数值的变化。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./../modules/module_template.html">Application/Module Template</a>使用的是新风格的 C++ API，但是不包括<a href="#parameter-metadata">parameter metadata</a>。</p></div><h4 id="c-api-1" tabindex="-1">C API <a class="header-anchor" href="#c-api-1" aria-label="Permalink to &quot;C API&quot;">​</a></h4><p>C API 可以在模块和驱动程序中使用。</p><p>首先包括参数 API 头文件:</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;parameters/param.h&gt;</span></span></code></pre></div><p>然后检索参数并将其分配到一个变量 (这里 <code>my_param</code>)，如下文所示 <code>PARAM_NAME</code>。 变量 <code>my_param</code> 然后可以用于您的模块代码。</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PARAM_NAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">my_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">如果在参数元数据中声明了 <code>PARAM_NAME</code>，则将设置其默认值，上述查找参数的调用应始终成功。 如果要多次读取该参数，可以缓存句柄，并在需要时在 <code>param_get()</code> 中使用</p><p><code>param_find()</code> 是一个“昂贵”操作，返回一个可以被 <code>param_get()</code> 使用的句柄。 如果要多次读取该参数，可以缓存句柄，并在需要时在 <code>param_get()</code> 中使用</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 获取参数句柄</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">param_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PARAM_INVALID;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_param_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> param_find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PARAM_NAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 查询我们需要的参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_param_handle, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_param);</span></span></code></pre></div><h3 id="参数元数据" tabindex="-1">参数元数据 <a class="header-anchor" href="#参数元数据" aria-label="Permalink to &quot;参数元数据&quot;">​</a></h3><p>PX4 使用广泛的参数元数据系统来驱动面向用户的参数表示，并在固件中设置的每个参数的默认值。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>正确的元数据对于地面站的良好用户体验至关重要。</p></div></div><p>参数元数据可以储存在源文件目录树的任意位置中，作为 <strong>.c</strong> 或 <strong>.yaml</strong> 参数定义(YAML 定义较新，较灵活)。 通常，它与关联的模块一起存储。</p><p>构建系统提取元数据（使用命令<code>make parameters_metadata</code>）来构建<a href="./../advanced_config/parameter_reference.html">parameter reference</a>，并且参数信息<a href="#publishing-parameter-metadata-to-a-gcs">供地面站使用</a>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>添加了一个 <em>新的</em> 参数文件后，你应该在产生新参数（被添加的参数文件作为_cmake_配置步骤中的一部分，在清理构建和 cmake 被修改后会被添加）之前调用<code>make clean</code>。</p></div><h4 id="yaml-元数据" tabindex="-1">YAML 元数据 <a class="header-anchor" href="#yaml-元数据" aria-label="Permalink to &quot;YAML 元数据&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">在写入 YAML 参数定义时，无法在 <em>libraries</em> 中使用。</p></div><p>YAML 元数据是为了完全替换 <strong>.c</strong> 文件定义。 它支持所有相同的元数据，以及多实例定义等新功能。</p><ul><li><p>YAML 参数元数据结构在此处： <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/validation/module_schema.yaml" target="_blank" rel="noreferrer">validation/module_schema.yaml</a>。</p></li><li><p>正在使用的 YAML 定义示例可以在 MAVLink 参数定义中找到： <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/mavlink/module.yaml" target="_blank" rel="noreferrer">/src/modules/mavlink/module.yaml</a>。</p></li><li><p>通过添加到 cmake 构建系统中注册一个 YAML 文件</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODULE_CONFIG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module.yaml</span></span></code></pre></div><p>到 <code>CMakeLists.txt</code> 该模块的 <code>px4_add_module</code> 部分。</p></li></ul><h4 id="多实例-模块化-yaml-元数据" tabindex="-1">多实例（模块化）YAML 元数据 <a class="header-anchor" href="#多实例-模块化-yaml-元数据" aria-label="Permalink to &quot;多实例（模块化）YAML 元数据&quot;">​</a></h4><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/validation/module_schema.yaml" target="_blank" rel="noreferrer">YAML 参数定义</a> 支持模块化参数定义(不支持模块化参数代码)。</p><p>YAML 允许使用 <code>\${i}</code> 在参数名，描述等中定义实例数。 例如，下面将生成 MY_PARAM_1_RATE、MY_PARAM_2_RATE 等。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MY_PARAM_\${i}_RATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Maximum rate for instance \${i}</span></span></code></pre></div><p>以下 YAML 定义提供起始和结束索引。</p><ul><li><code>num_instances</code> (默认是1): 要生成的实例数 (&gt;=1)</li><li><code>instance_start</code> (默认是 0): 第一个实例编号。 如果是 0， <code>\${i}</code> 扩展到 [0, N-1]\`.</li></ul><p>关于完整的示例，请参阅 MAVLink 参数定义： <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/mavlink/module.yaml" target="_blank" rel="noreferrer">/src/modules/mavlink/module.yaml</a></p><h4 id="c-参数元数据" tabindex="-1">c 参数元数据 <a class="header-anchor" href="#c-参数元数据" aria-label="Permalink to &quot;c 参数元数据&quot;">​</a></h4><p>传统方法是将定义的参数元数据写在一个扩展名为**.c**的文件中（在撰写本文时，这是源代码中最常用的方法）。</p><p>参数的元数据部分看起来像下面的例子:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Pitch P gain</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Pitch proportional gain, i.e. desired angular speed in rad/s for error 1 rad.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @unit 1/s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @min 0.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @max 10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @decimal 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @increment 0.0005</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @reboot_required true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group Multicopter Attitude Control</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PARAM_DEFINE_FLOAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MC_PITCH_P, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Acceleration compensation based on GPS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * velocity.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group Attitude Q estimator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @boolean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PARAM_DEFINE_INT32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ATT_ACC_COMP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>末尾的 <code>PARAM_DEFINE_*</code> 宏指定参数的类型 (<code>PARAM_DEFINE_FLOAT</code> 或 <code>PARAM_DEFINE_INT32</code>)、参数的名称 (必须与代码中使用的名称匹配) 以及固件中的默认值。</p><p>注释块中的行都是可选的，主要用于控制地面站内的显示和编辑选项。 每一行的注释建议如下(详见 <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/validation/module_schema.yaml" target="_blank" rel="noreferrer">module_schema.yaml</a>)。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;title&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;longer description, can be multi-line&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @unit &lt;the unit, e.g. m for meters&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @min &lt;the minimum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @max &lt;the maximum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @decimal &lt;the minimum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @increment &lt;the &quot;ticks&quot; in which this value will increment in the UI&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @reboot_required true &lt;add this if changing the param requires a system restart.&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @boolean &lt;add this for integer parameters that represent a boolean value&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group &lt;a title for parameters that form a group&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h2 id="发布参数的元数据到地面站" tabindex="-1">发布参数的元数据到地面站 <a class="header-anchor" href="#发布参数的元数据到地面站" aria-label="Permalink to &quot;发布参数的元数据到地面站&quot;">​</a></h2><p>参数元数据 JSON 文件被编译到固件（或托管在互联网上），并通过<a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer"> MAVLink 组件元数据服务</a>提供给地面站。 这确保了元数据始终与载具上运行的代码保持最新。</p><p>此过程与<a href="./../concept/events_interface.html#publishing-event-metadata-to-a-gcs">事件元数据</a>的发布相同。 有关更多信息，请参阅<a href="./../advanced/px4_metadata.html"> PX4 元数据（翻译与发布）</a></p><h2 id="更多信息" tabindex="-1">更多信息 <a class="header-anchor" href="#更多信息" aria-label="Permalink to &quot;更多信息&quot;">​</a></h2><ul><li><a href="./../advanced_config/parameters.html">查找/更新参数</a></li><li><a href="./../advanced_config/parameter_reference.html">参数参照表</a></li><li><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/common/include/px4_platform_common/param.h#L129" target="_blank" rel="noreferrer">参数实现</a> (参数消息用 <code>.get()</code>, <code>.commit()</code>, 和其他方法)</li></ul>`,88),t=[n];function l(h,k,r,d,c,o){return i(),a("div",null,t)}const E=s(p,[["render",l]]);export{m as __pageData,E as default};
