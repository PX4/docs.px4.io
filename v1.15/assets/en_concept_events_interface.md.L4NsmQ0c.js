import{_ as a,E as i,c as t,J as n,m as e,a as l,ab as p,o}from"./chunks/framework.CUflZczI.js";const f=JSON.parse('{"title":"Events Interface","description":"","frontmatter":{},"headers":[],"relativePath":"en/concept/events_interface.md","filePath":"en/concept/events_interface.md"}'),h={name:"en/concept/events_interface.md"},r=e("h1",{id:"events-interface",tabindex:"-1"},[l("Events Interface "),e("a",{class:"header-anchor",href:"#events-interface","aria-label":'Permalink to "Events Interface"'},"​")],-1),d=p(`<p>The <em>Events Interface</em> provides a system-wide API for notification of events, which are published to GCSs via the <em>MAVLink Events Service</em> (to GCSs and other components) and also stored in <a href="./../dev_log/logging.html">system logs</a>.</p><p>The interface can be used for publishing events for state changes or any other type of occurrence, including things like arming readiness, calibration completion, and reaching the target takeoff height.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The events interface will replace the use of <code>mavlink_log_*</code> calls in PX4 code, (and <code>STATUS_TEXT</code> messages in MAVLink) for event notification in PX4 v1.13 and later. There will be an intermediate period where <a href="#backward-compatibility">both approaches are supported</a>.</p></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h3 id="basic" tabindex="-1">Basic <a class="header-anchor" href="#basic" aria-label="Permalink to &quot;Basic&quot;">​</a></h3><p>To use the API, add this include:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;px4_platform_common/events.h&gt;</span></span></code></pre></div><p>And then define and send the event from the desired code location:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mymodule_test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Info, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="backward-compatibility" tabindex="-1">Backward compatibility <a class="header-anchor" href="#backward-compatibility" aria-label="Permalink to &quot;Backward compatibility&quot;">​</a></h4><p>For older GCS versions without events interface support, PX4 currently sends out all events also as <code>mavlink_log_*</code> <code>STATUSTEXT</code> message. In addition, the message must be tagged with an appended tab (<code>\\t</code>) so that newer GCS&#39;s can ignore that and only show the event.</p><p>So whenever adding an event, be sure to also add a <code>mavlink_log_</code> call. For example:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink_log_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mavlink_log_pub, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test Message</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mymodule_test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Info, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>All such <code>mavlink_log_</code> calls will be removed after the next release.</p><h3 id="detailed" tabindex="-1">Detailed <a class="header-anchor" href="#detailed" aria-label="Permalink to &quot;Detailed&quot;">​</a></h3><p>The above is a minimal example, this is a more extensive one:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* EVENT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @description</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * This is the detailed event description.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - value of arg1: {1}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - value of arg2: {2:.1}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;profile name=&quot;dev&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * (This paragraph is only meant to be shown to developers).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * This behavior can be configured with the parameter &lt;param&gt;COM_EXAMPLE&lt;/param&gt;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;/profile&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Link to documentation: &lt;a&gt;https://docs.px4.io&lt;/a&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;event_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Error, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Info}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Event Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arg1, arg2);</span></span></code></pre></div><p>Explanations and requirements:</p><ul><li><p><code>/* EVENT</code>: This tag indicates that a comment defines metadata for the following event.</p></li><li><p><strong>event_name</strong>: the event name (<code>events::ID(event_name)</code>).</p><ul><li>must be unique within the whole source code of PX4. As a general convention, prefix it with the module name, or the source file for larger modules.</li><li>must be a valid variable name, i.e. must not contain spaces, colons, etc.</li><li>from that name, a 24 bit event ID is derived using a hash function. This means as long as the event name stays the same, so will the ID.</li></ul></li><li><p><strong>Log Level</strong>:</p><ul><li><p>valid log levels are the same as used in the MAVLink <a href="https://mavlink.io/en/messages/common.html#MAV_SEVERITY" target="_blank" rel="noreferrer">MAV_SEVERITY</a> enum. In order of descending importance these are:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Emergency,</span></span>
<span class="line"><span>Alert,</span></span>
<span class="line"><span>Critical,</span></span>
<span class="line"><span>Error,</span></span>
<span class="line"><span>Warning,</span></span>
<span class="line"><span>Notice,</span></span>
<span class="line"><span>Info,</span></span>
<span class="line"><span>Debug,</span></span>
<span class="line"><span>Disabled,</span></span></code></pre></div></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>- Above we specify a separate external and internal log level, which are the levels displayed to GCS users and in the log file, respectively: \`{events::Log::Error, events::LogInternal::Info}\`.</span></span>
<span class="line"><span>  For the majority of cases you can pass a single log level, and this will be used for both exernal and internal cases.</span></span>
<span class="line"><span>There are cases it makes sense to have two different log levels.</span></span>
<span class="line"><span>For example an RTL failsafe action: the user should see it as Warning/Error, whereas in the log, it is an expected system response, so it can be set to \`Info\`.</span></span></code></pre></div></li><li><p><strong>Event Message</strong>:</p><ul><li>Single-line, short message of the event. It may contain template placeholders for arguments (e.g. <code>{1}</code>). For more information see below.</li></ul></li><li><p><strong>Event Description</strong>:</p><ul><li>Detailed, optional event description.</li><li>Can be multiple lines/paragraphs.</li><li>It may contain template placeholders for arguments (e.g. <code>{2}</code>) and supported tags (see below)</li></ul></li></ul><h4 id="arguments-and-enums" tabindex="-1">Arguments and Enums <a class="header-anchor" href="#arguments-and-enums" aria-label="Permalink to &quot;Arguments and Enums&quot;">​</a></h4><p>Events can have a fixed set of arguments that can be inserted into the message or description using template placeholders (e.g. <code>{2:.1m}</code> - see next section).</p><p>Valid types: <code>uint8_t</code>, <code>int8_t</code>, <code>uint16_t</code>, <code>int16_t</code>, <code>uint32_t</code>, <code>int32_t</code>, <code>uint64_t</code>, <code>int64_t</code> and <code>float</code>.</p><p>You can also use enumerations as arguments:</p><ul><li>PX4-specific/custom enumerations for events should be defined in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/lib/events/enums.json" target="_blank" rel="noreferrer">src/lib/events/enums.json</a>, and can then be used as event argument in the form of <code>events::send&lt;events::px4::enums::my_enum_t&gt;(...)</code>.</li><li>MAVLink &quot;common&quot; events are defined in <a href="https://github.com/mavlink/libevents/blob/master/events/common.json" target="_blank" rel="noreferrer">mavlink/libevents/events/common.json</a> and can be used as event argument in the form of <code>events::send&lt;events::common::enums::my_enum_t&gt;(...)</code>.</li></ul><h4 id="text-format" tabindex="-1">Text format <a class="header-anchor" href="#text-format" aria-label="Permalink to &quot;Text format&quot;">​</a></h4><p>Text format for event message description:</p><ul><li><p>characters can be escaped with \\</p><p>These have to be escaped: &#39;\\\\&#39;, &#39;\\&lt;&#39;, &#39;\\{&#39;.</p></li><li><p>supported tags:</p><ul><li><p>Profiles: <code>&lt;profile name=&quot;[!]NAME&quot;&gt;CONTENT&lt;/profile&gt;</code></p><p><code>CONTENT</code> will only be shown if the name matches the configured profile. This can be used for example to hide developer information from end-users.</p></li><li><p>URLs: <code>&lt;a [href=&quot;URL&quot;]&gt;CONTENT&lt;/a&gt;</code>. If <code>href</code> is not set, use <code>CONTENT</code> as <code>URL</code> (i.e.<code>&lt;a&gt;https://docs.px4.io&lt;/a&gt;</code> is interpreted as <code>&lt;a href=&quot;https://docs.px4.io&quot;&gt;https://docs.px4.io&lt;/a&gt;</code>)</p></li><li><p>Parameters: <code>&lt;param&gt;PARAM_NAME&lt;/param&gt;</code></p></li><li><p>no nested tags of the same type are allowed</p></li></ul></li><li><p>arguments: template placeholders that follow python syntax, with 1-based indexing (instead of 0)</p><ul><li><p>general form: <code>{ARG_IDX[:.NUM_DECIMAL_DIGITS][UNIT]}</code></p><p>UNIT:</p><ul><li>m: horizontal distance in meters</li><li>m_v: vertical distance in meters</li><li>m^2: area in m^2</li><li>m/s: speed in m/s</li><li>C: temperature in degrees celsius</li></ul></li><li><p><code>NUM_DECIMAL_DIGITS</code> only makes sense for real number arguments.</p></li></ul></li></ul><h2 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging&quot;">​</a></h2><p>Events are logged according to the internal log level, and <a href="./../log/flight_review.html">Flight Review</a> displays events.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Flight review downloads metadata based on PX4 master, so if a definition is not yet on master, it will only be able to display the event ID.</p></div><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>During PX4 build, only the code is added directly to the binary by the compiler (i.e. the event ID, log level(s) and any arguments).</p><p>The metadata for all events is built into a separate JSON metadata file (using a python script that scans the whole source code for event calls).</p><h3 id="publishing-event-metadata-to-a-gcs" tabindex="-1">Publishing Event Metadata to a GCS <a class="header-anchor" href="#publishing-event-metadata-to-a-gcs" aria-label="Permalink to &quot;Publishing Event Metadata to a GCS&quot;">​</a></h3><p>The event metadata JSON file is compiled into firmware (and/or hosted on the Internet), and made available to ground stations via the <a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer">MAVLink Component Metadata service</a>. This ensures that metadata is always up-to-date with the code running on the vehicle.</p><p>This process is the same as for <a href="./../advanced/parameters_and_configurations.html#publishing-parameter-metadata-to-a-gcs">parameter metadata</a>. For more information see <a href="./../advanced/px4_metadata.html">PX4 Metadata (Translation &amp; Publication)</a></p>`,36);function c(k,g,m,u,E,v){const s=i("Badge");return o(),t("div",null,[r,n(s,{type:"tip",text:"PX4 v1.13"}),d])}const b=a(h,[["render",c]]);export{f as __pageData,b as default};
