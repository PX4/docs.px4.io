import{_ as e,a,b as t,c as i}from"./chunks/qgc_hitl_autoconnect.CJljA_t2.js";import{_ as s,c as o,o as l,ab as n}from"./chunks/framework.CUflZczI.js";const C=JSON.parse('{"title":"Hardware in the Loop Simulation (HITL)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/simulation/hitl.md","filePath":"zh/simulation/hitl.md"}'),r={name:"zh/simulation/hitl.md"},h=n('<h1 id="hardware-in-the-loop-simulation-hitl" tabindex="-1">Hardware in the Loop Simulation (HITL) <a class="header-anchor" href="#hardware-in-the-loop-simulation-hitl" aria-label="Permalink to &quot;Hardware in the Loop Simulation (HITL)&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">HITL</p><p>is <a href="./../simulation/community_supported_simulators.html">community supported and maintained</a>. It may or may not work with current versions of PX4.</p><p>See <a href="./../dev_setup/dev_env.html">Toolchain Installation</a> for information about the environments and tools supported by the core development team.</p></div><p>硬件在环仿真模式 (HITL 或 HIL) 下 PX4 固件代码运行在真实的飞行控制器硬件平台上。 这种方法的优点是可以在实际硬件上测试大多数的实际飞行代码。</p><p>PX4 supports HITL for multicopters (using <a href="./../sim_jmavsim/">jMAVSim</a> or <a href="./../sim_gazebo_classic/">Gazebo Classic</a>) and VTOL (using Gazebo Classic).</p><p><a id="compatible_airframe"></a></p><h2 id="hitl兼容机架" tabindex="-1">HITL兼容机架 <a class="header-anchor" href="#hitl兼容机架" aria-label="Permalink to &quot;HITL兼容机架&quot;">​</a></h2><p>The set of compatible airframes vs simulators is:</p><table><thead><tr><th>机架</th><th><code>SYS_AUTOSTART</code></th><th>Gazebo Classic</th><th>jMAVSim</th></tr></thead><tbody><tr><td><a href="./../airframes/airframe_reference.html#copter_simulation_hil_quadcopter_x">HIL Standard VTOL QuadPlane</a></td><td>1002</td><td>Y</td><td>Y</td></tr><tr><td><a href="./../airframes/airframe_reference.html#vtol_standard_vtol_hil_standard_vtol_quadplane">HIL Standard VTOL QuadPlane</a></td><td>4001</td><td>Y</td><td></td></tr><tr><td><a href="./../airframes/airframe_reference.html#copter_quadrotor_x_generic_quadcopter">Generic Quadrotor x</a> copter</td><td>4011</td><td>Y</td><td>Y</td></tr></tbody></table><p><a id="simulation_environment"></a></p><h2 id="hitl-仿真环境" tabindex="-1">HITL 仿真环境 <a class="header-anchor" href="#hitl-仿真环境" aria-label="Permalink to &quot;HITL 仿真环境&quot;">​</a></h2><p>硬件在环仿真（HITL）模式下标准的 PX4 固件在真实的硬件上运行。 JMAVSim or Gazebo Classic (running on a development computer) are connected to the flight controller hardware via USB/UART. The simulator acts as gateway to share MAVLink data between PX4 and <em>QGroundControl</em>.</p><div class="info custom-block"><p class="custom-block-title">The simulator can also be connected via UDP if the flight controller has networking support and uses a stable, low-latency connection (e.g. a wired Ethernet connection - WiFi is usually not sufficiently reliable). For example, this configuration has been tested with PX4 running on a Raspberry Pi connected via Ethernet to the computer (a startup configuration that includes the command for running jMAVSim can be found <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/posix-configs/rpi/px4_hil.config" target="_blank" rel="noreferrer">here</a>).</p></div><p>The diagram below shows the simulation environment:</p><ul><li>A HITL configuration is selected (via <em>QGroundControl</em>) that doesn&#39;t start any real sensors.</li><li><em>jMAVSim</em> or <em>Gazebo Classic</em> are connected to the flight controller via USB.</li><li>The simulator is connected to <em>QGroundControl</em> via UDP and bridges its MAVLink messages to PX4.</li><li><em>Gazebo Classic</em> and <em>jMAVSim</em> can also connect to an offboard API and bridge MAVLink messages to PX4.</li><li>(Optional) A serial connection can be used to connect Joystick/Gamepad hardware via <em>QGroundControl</em>.</li></ul><p><img src="'+e+'" alt="HITL Setup - jMAVSim and Gazebo Classic"></p><h2 id="hitl-相比于-sitl" tabindex="-1">HITL 相比于 SITL <a class="header-anchor" href="#hitl-相比于-sitl" aria-label="Permalink to &quot;HITL 相比于 SITL&quot;">​</a></h2><p>相比之下， HITL 在正常飞控硬件平台上运行正常的处于 ”HITL 模式“ 的 PX4 固件。 仿真数据进入整个仿真系统的时间点与 SITL 有所不同。</p><p>By contrast, HITL runs normal PX4 firmware in &quot;HITL mode&quot;, on normal hardware. The simulation data enters the system at a different point than for SITL. Core modules like commander and sensors have HITL modes at startup that bypass some of the normal functionality.</p><p>完成所有的配置设定后 <strong>关闭</strong> <em>QGroundControl</em> 并断开飞控板与计算机的连接。</p><h2 id="配置-hitl" tabindex="-1">配置 HITL <a class="header-anchor" href="#配置-hitl" aria-label="Permalink to &quot;配置 HITL&quot;">​</a></h2><h3 id="jmavsim-gazebo-hitl-仿真环境" tabindex="-1">JMAVSim/Gazebo HITL 仿真环境 <a class="header-anchor" href="#jmavsim-gazebo-hitl-仿真环境" aria-label="Permalink to &quot;JMAVSim/Gazebo HITL 仿真环境&quot;">​</a></h3><ol><li><p>Connect the autopilot directly to <em>QGroundControl</em> via USB.</p></li><li><p>激活 HITL 模式</p><ol><li><p>打开 <strong>Setup &gt; Safety</strong> 选项卡。</p></li><li><p>Enable HITL mode by selecting <strong>Enabled</strong> from the <em>HITL Enabled</em> list:</p><p><img src="'+a+'" alt="QGroundControl HITL 配置"></p></li></ol></li><li><p>选择机架</p><ol><li><p>打开 <strong>Setup &gt; Airframes</strong> 选项卡。</p></li><li><p>选择一个你想要进行测试的 <a href="#compatible_airframe">兼容的机架</a> 。 Then click <strong>Apply and Restart</strong> on top-right of the <em>Airframe Setup</em> page.</p><p><img src="'+t+'" alt="选择机架"></p></li></ol></li><li><p>如有必要, 校准您的 RC 遥控器 或操纵杆。</p></li><li><p>设置 UDP</p><ol><li><p>Under the <em>General</em> tab of the settings menu, uncheck all <em>AutoConnect</em> boxes except for <strong>UDP</strong>.</p><p><img src="'+i+`" alt="GITL 模式 QGC 自动连接设置"></p></li></ol></li><li><p>(可选) 配置操纵杆和故障保护。 Set the following <a href="./../advanced_config/parameters.html">parameters</a> in order to use a joystick instead of an RC remote control transmitter:</p><ul><li><a href="./../advanced_config/parameter_reference.html#COM_RC_IN_MODE">COM_RC_IN_MODE</a> to &quot;Joystick/No RC Checks&quot;. 这允许操纵杆输入并禁用 RC 输入检查。</li><li><a href="./../advanced_config/parameter_reference.html#NAV_RCL_ACT">NAV_RCL_ACT</a> to &quot;Disabled&quot;. 这可确保在没有无线遥控的情况下运行 HITL 时 RC 失控保护不会介入。</li></ul></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <em>QGroundControl User Guide</em> also has instructions on <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/setup_view/joystick.html" target="_blank" rel="noreferrer">Joystick</a> and <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/virtual_joystick.html" target="_blank" rel="noreferrer">Virtual Joystick</a> setup.</p></div><p>Once configuration is complete, <strong>close</strong> <em>QGroundControl</em> and disconnect the flight controller hardware from the computer.</p><h3 id="x-plane-hitl-仿真环境" tabindex="-1">X-Plane HITL 仿真环境 <a class="header-anchor" href="#x-plane-hitl-仿真环境" aria-label="Permalink to &quot;X-Plane HITL 仿真环境&quot;">​</a></h3><p>总而言之， HITL 在真实硬件上运行标准 PX4 固件，而 SITL 实际上要比标准 PX4 系统执行更多的代码。</p><h4 id="gazebo-classic" tabindex="-1">Gazebo Classic <a class="header-anchor" href="#gazebo-classic" aria-label="Permalink to &quot;Gazebo Classic&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">Make sure <em>QGroundControl</em> is not running!</p></div><ol><li><p>Build PX4 with <a href="./../sim_gazebo_classic/">Gazebo Classic</a> (in order to build the Gazebo Classic plugins).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Firmware_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DONT_RUN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div></li><li><p>Open the vehicle model&#39;s sdf file (e.g. <strong>Tools/simulation/gazebo-classic/sitl_gazebo-classic/models/iris_hitl/iris_hitl.sdf</strong>).</p></li><li><p>找到文件的 <code>mavlink_interface plugin</code> 分区，将 <code>serialEnabled</code> 和 <code>hil_mode</code> 参数更改为 <code>true</code> 。</p><div class="info custom-block"><p class="custom-block-title">The serial device depends on what port is used to connect the vehicle to the computer (this is usually <code>/dev/ttyACM0</code>). An easy way to check on Ubuntu is to plug in the autopilot, open up a terminal, and type <code>dmesg | grep &quot;tty&quot;</code>. The correct device will be the last one shown.</p></div></li></ol><p>:::</p><ol><li><p>Set up the environment variables:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/setup_gazebo.bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/build/px4_sitl_default</span></span></code></pre></div><p>and run Gazebo Classic in HITL mode:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gazebo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds/hitl_iris.world</span></span></code></pre></div></li><li><p>Start <em>QGroundControl</em>. It should autoconnect to PX4 and Gazebo Classic.</p></li></ol><h4 id="jmavsim-仅适用于四旋翼无人机" tabindex="-1">jMAVSim (仅适用于四旋翼无人机) <a class="header-anchor" href="#jmavsim-仅适用于四旋翼无人机" aria-label="Permalink to &quot;jMAVSim (仅适用于四旋翼无人机)&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">Make sure <em>QGroundControl</em> is not running!</p></div><ol><li><p>将飞行控制器连接到计算机, 并等待其启动。</p></li><li><p>在 HITL 模式下运行 jMAVSim (r如有必要，修改串口号名称 <code>/dev/ttyACM0</code> - 比如，在 Mac OS 上该参数应为 <code>/dev/tty.usbmodem1</code>)： sh ./Tools/jmavsim_run.sh -q -d /dev/ttyACM0 -b 921600 -r 250</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/simulation/jmavsim/jmavsim_run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/ttyACM0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 921600</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Replace the serial port name <code>/dev/ttyACM0</code> as appropriate. On macOS this port would be <code>/dev/tty.usbmodem1</code>. On Windows (including Cygwin) it would be the COM1 or another port - check the connection in the Windows Device Manager.</p></div></li></ol><p>:::</p><ol><li>Start <em>QGroundControl</em>. 它应该会自动连接 PX4 和 Gazebo 。</li></ol><h2 id="在-hitl-仿真中执行自主飞行任务" tabindex="-1">在 HITL 仿真中执行自主飞行任务 <a class="header-anchor" href="#在-hitl-仿真中执行自主飞行任务" aria-label="Permalink to &quot;在 HITL 仿真中执行自主飞行任务&quot;">​</a></h2><p>You should be able to use <em>QGroundControl</em> to <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/fly_view/fly_view.html#missions" target="_blank" rel="noreferrer">run missions</a> and otherwise control the vehicle.</p>`,38),d=[h];function c(p,m,u,k,g,b){return l(),o("div",null,d)}const v=s(r,[["render",c]]);export{C as __pageData,v as default};
