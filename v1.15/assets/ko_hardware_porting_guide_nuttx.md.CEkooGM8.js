import{_ as t,c as s,o as a,ab as e}from"./chunks/framework.CUflZczI.js";const k=JSON.parse('{"title":"NuttX 보드 포팅 가이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/hardware/porting_guide_nuttx.md","filePath":"ko/hardware/porting_guide_nuttx.md"}'),i={name:"ko/hardware/porting_guide_nuttx.md"},r=e(`<h1 id="nuttx-보드-포팅-가이드" tabindex="-1">NuttX 보드 포팅 가이드 <a class="header-anchor" href="#nuttx-보드-포팅-가이드" aria-label="Permalink to &quot;NuttX 보드 포팅 가이드&quot;">​</a></h1><p>NuttX의 PX4를 포팅하려면, 하드웨어가 NuttX를 지원하여야 합니다. NuttX 프로젝트는 NuttX를 새로운 플랫폼으로 포팅하기 위한 <a href="https://cwiki.apache.org/confluence/display/NUTTX/Porting+Guide" target="_blank" rel="noreferrer">포팅 가이드</a>를 제공합니다.</p><p>다음 가이드에서는 기존 지원 하드웨어를 사용하거나, NuttX(<a href="https://github.com/PX4/PX4-Autopilot/tree/master/platforms/nuttx/src/px4" target="_blank" rel="noreferrer">PX4 기본 레이어</a> 포함)를 이미 포팅하였다고 가정합니다.</p><p>모든 보드를 대상으로 한 설정 파일, 링커 스크립트와 기타 필요한 설정은 제조사별 보드별 디렉터리 <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/boards/" target="_blank" rel="noreferrer">/boards</a> in a vendor- and board-specific directory (i.e. <strong>boards/<em>VENDOR</em>/<em>MODEL</em>/</strong>)).</p><p>다음 예는 NuttX 비행 콘트롤러에 대한 최근 <a href="./../hardware/reference_design.html">참조 설정</a>인 FMUv5를 사용합니다.</p><ul><li><strong>PX4-Autopilot</strong> 디렉토리에서 <code>make px4_fmu-v5_default</code>를 실행하면, FMUv5 설정이 빌드됩니다.</li><li>기본 FMUv5 설정 파일은 <a href="https://github.com/PX4/PX4-Autopilot/tree/master/boards/px4/fmu-v5" target="_blank" rel="noreferrer">/boards/px4/fmu-v5</a> 폴더에 있습니다. <ul><li>보드별 헤더(NuttX 핀 및 클록 구성): <a href="https://github.com/PX4/PX4-Autopilot/blob/master/boards/px4/fmu-v5/nuttx-config/include/board.h" target="_blank" rel="noreferrer">/boards/px4/fmu-v5/nuttx-config/include/board.h</a>.</li><li>보드별 헤더(PX4 구성): <a href="https://github.com/PX4/PX4-Autopilot/blob/master/boards/px4/fmu-v5/src/board_config.h" target="_blank" rel="noreferrer">/boards/px4/fmu-v5/src/board_config.h</a>.</li><li>NuttX OS 설정(NuttX menuconfig로 생성): <a href="https://github.com/PX4/PX4-Autopilot/blob/master/boards/px4/fmu-v5/nuttx-config/nsh/defconfig" target="_blank" rel="noreferrer">/boards/px4/fmu-v5/nuttx-config/nsh/defconfig</a>.</li><li>빌드 설정: <a href="https://github.com/PX4/PX4-Autopilot/blob/master/boards/px4/fmu-v5/default.cmake" target="_blank" rel="noreferrer">boards/px4/fmu-v5/default.cmake</a>.</li></ul></li></ul><h2 id="nuttx-메뉴-구성-설정" tabindex="-1">NuttX 메뉴 구성 설정 <a class="header-anchor" href="#nuttx-메뉴-구성-설정" aria-label="Permalink to &quot;NuttX 메뉴 구성 설정&quot;">​</a></h2><p>NuttX OS 구성을 수정하려면, PX4 단축키를 사용하여 <a href="https://bitbucket.org/patacongo/nuttx/src/master/" target="_blank" rel="noreferrer">menuconfig</a>를 사용할 수 있습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> menuconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qconfig</span></span></code></pre></div><p><a href="https://github.com/PX4/PX4-Autopilot/blob/master/Tools/setup/ubuntu.sh" target="_blank" rel="noreferrer">ubuntu.sh</a>을 사용하여 Ubuntu에 PX4를 설치하려면, <a href="https://bitbucket.org/nuttx/tools/src/master/" target="_blank" rel="noreferrer">NuttX 도구</a>에서 <em>kconfig</em> 도구를 설치하여야 합니다. you will also need to install <em>kconfig</em> tools from <a href="https://bitbucket.org/nuttx/tools/src/master/" target="_blank" rel="noreferrer">NuttX tools</a>.</p><div class="info custom-block"><p class="custom-block-title">The following steps are not required if using the <a href="https://hub.docker.com/r/px4io/px4-dev-nuttx/" target="_blank" rel="noreferrer">px4-dev-nuttx</a> docker container or have installed to macOS using our normal instructions (as these include<code>kconfig-mconf</code>).</p></div><p>임의의 디렉터리에서 다음 명령어를 실행합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://bitbucket.org/nuttx/tools.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tools/kconfig-frontends</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gperf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-mconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-nconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-gconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-qconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=/usr</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p><code>--prefix=/usr</code>은 특정 설치 위치를 결정합니다(<code>PATH</code> 환경 변수에 있어야 함). <code>--enable-mconf</code>와 <code>--enable-qconf</code> 옵션은 각각 <code>menuconfig</code>와 <code>qconfig</code> 옵션을 활성화합니다.</p><p><code>qconfig</code>를 실행하려면, 추가 Qt 종속성을 설치하여야 합니다.</p><h3 id="부트로더" tabindex="-1">부트로더 <a class="header-anchor" href="#부트로더" aria-label="Permalink to &quot;부트로더&quot;">​</a></h3><p>먼저 하드웨어 대상에 적합한 부트로더가 필요합니다.</p><ul><li>STM32H7: 부트로더는 NuttX를 기반으로 하며, PX4 펌웨어에 포함되어 있습니다. 예를 보려면 <a href="https://github.com/PX4/PX4-Autopilot/tree/master/boards/holybro/durandal-v1/nuttx-config/bootloader" target="_blank" rel="noreferrer">여기</a>를 참고하십시오.</li><li>다른 대상의 경우 <a href="https://github.com/PX4/Bootloader%EA%B0%80" target="_blank" rel="noreferrer">https://github.com/PX4/Bootloader가</a> 사용됩니다. 대상 추가 방법 예는 <a href="https://github.com/PX4/Bootloader/pull/155/files" target="_blank" rel="noreferrer">여기</a>를 참고하십시오. Then checkout the <a href="./../software_update/stm32_bootloader.html">building and flashing instructions</a>.</li></ul><h3 id="펌웨어-포팅-단계" tabindex="-1">펌웨어 포팅 단계 <a class="header-anchor" href="#펌웨어-포팅-단계" aria-label="Permalink to &quot;펌웨어 포팅 단계&quot;">​</a></h3><ol><li><p>작동 중인 <a href="./../dev_setup/dev_env.html">개발 설정</a> 여부와 NuttX menuconfig 도구를 설치여부를 확인하십시오(위 참조).</p></li><li><p>소스 코드를 다운로드하고 기존 대상을 빌드할 수 있는 지 확인합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5</span></span></code></pre></div></li><li><p>동일한(또는 유사한) CPU 유형을 사용하는 기존 대상을 복사합니다. 예: STM32F7의 경우</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boards/manufacturer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boards/px4/fmu-v5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boards/manufacturer/my-target-v1</span></span></code></pre></div><p><strong>manufacturer</strong>를 제조업체 이름으로 변경하고, <strong>my-target-v1</strong>을 보드 이름으로 변경합니다.</p></li></ol><p>다음으로 <strong>boards/manufacturer/my-target-v1</strong> 아래의 모든 파일을 살펴보고 보드에 따라 업데이트하여야 합니다.</p><ol><li><strong>firmware.prototype</strong>: 보드 ID 및 이름 업데이트</li><li><strong>default.cmake</strong>: 디렉토리 이름(<strong>my-target-v1</strong>)과 일치하도록 <strong>VENDOR</strong>와 <strong>MODEL</strong>을 업데이트합니다. 직렬 포트를 설정합니다.</li><li><code>make Manufacturer_my-target-v1 menuconfig</code>를 통한 NuttX(<strong>defconfig</strong>) 설정: CPU와 칩을 조정하고 주변 장치(UART, SPI, I2C, ADC)를 설정합니다.</li><li><strong>nuttx-config/include/board.h</strong>: NuttX 핀을 설정합니다. 여러 가지 핀 옵션이 있는 주변 장치에서는 NuttX는 핀 정보을 알아야 합니다. 칩별 핀맵 헤더 파일에 정의되어 있습니다(예: <a href="https://github.com/PX4/NuttX/blob/px4_firmware_nuttx-8.2/arch/arm/src/stm32f7/hardware/stm32f74xx75xx_pinmap.h" target="_blank" rel="noreferrer">stm32f74xx75xx_pinmap.h</a>).</li><li><strong>src</strong>: <strong>src</strong> 아래의 모든 파일을 살펴보고 필요에 따라 업데이트합니다(특히 <strong>board_config.h</strong>).</li><li><strong>init/rc.board_sensors</strong>: 보드에 부착된 센서를 시작합니다.</li></ol>`,22),n=[r];function o(l,h,p,d,c,u){return a(),s("div",null,n)}const f=t(i,[["render",o]]);export{k as __pageData,f as default};
