import{_ as p}from"./chunks/architecture_xrce-dds_ros2.5IQPlBJ0.js";import{_ as r}from"./chunks/ref_frames.C52lwBbQ.js";import{_ as o,E as h,c as k,m as s,J as a,w as e,ab as n,a as i,o as d}from"./chunks/framework.CUflZczI.js";const is=JSON.parse('{"title":"ROS 2 User Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/ros2/user_guide.md","filePath":"en/ros2/user_guide.md"}'),c={name:"en/ros2/user_guide.md"},g=n('<h1 id="ros-2-user-guide" tabindex="-1">ROS 2 User Guide <a class="header-anchor" href="#ros-2-user-guide" aria-label="Permalink to &quot;ROS 2 User Guide&quot;">​</a></h1><p>The ROS 2-PX4 architecture provides a deep integration between ROS 2 and PX4, allowing ROS 2 subscribers or publisher nodes to interface directly with PX4 uORB topics.</p><p>This topic provides an overview of the architecture and application pipeline, and explains how to setup and use ROS 2 with PX4.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>From PX4 v1.14, ROS 2 uses <a href="./../middleware/uxrce_dds.html">uXRCE-DDS</a> middleware, replacing the <em>FastRTPS</em> middleware that was used in version 1.13 (v1.13 does not support uXRCE-DDS).</p><p>The <a href="./../middleware/uxrce_dds.html#fast-rtps-to-uxrce-dds-migration-guidelines">migration guide</a> explains what you need to do in order to migrate ROS 2 apps from PX4 v1.13 to PX4 v1.14.</p><p>If you&#39;re still working on PX4 v1.13, please follow the instructions in the <a href="https://docs.px4.io/v1.13/en/ros/ros2_comm.html" target="_blank" rel="noreferrer">PX4 v1.13 Docs</a>.</p></div><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The application pipeline for ROS 2 is very straightforward, thanks to the use of the <a href="./../middleware/uxrce_dds.html">uXRCE-DDS</a> communications middleware.</p><p><img src="'+p+`" alt="Architecture uXRCE-DDS with ROS 2"></p><p>The uXRCE-DDS middleware consists of a client running on PX4 and an agent running on the companion computer, with bi-directional data exchange between them over a serial, UDP, TCP or custom link. The agent acts as a proxy for the client to publish and subscribe to topics in the global DDS data space.</p><p>The PX4 <a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a> is generated at build time and included in PX4 firmware by default. It includes both the &quot;generic&quot; micro XRCE-DDS client code, and PX4-specific translation code that it uses to publish to/from uORB topics. The subset of uORB messages that are generated into the client are listed in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">PX4-Autopilot/src/modules/uxrce_dds_client/dds_topics.yaml</a>. The generator uses the uORB message definitions in the source tree: <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/msg" target="_blank" rel="noreferrer">PX4-Autopilot/msg</a> to create the code for sending ROS 2 messages.</p><p>ROS 2 applications need to be built in a workspace that has the <em>same</em> message definitions that were used to create the uXRCE-DDS client module in the PX4 Firmware. You can include these by cloning the interface package <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a> into your ROS 2 workspace (branches in the repo correspond to the messages for different PX4 releases).</p><p>Note that the micro XRCE-DDS <em>agent</em> itself has no dependency on client-side code. It can be built from <a href="https://github.com/eProsima/Micro-XRCE-DDS-Agent" target="_blank" rel="noreferrer">source</a> either standalone or as part of a ROS build, or installed as a snap.</p><p>You will normally need to start both the client and agent when using ROS 2. Note that the uXRCE-DDS client is built into firmware by default but not started automatically except for simulator builds.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>In PX4v1.13 and earlier, ROS 2 was dependent on definitions in <a href="https://github.com/PX4/px4_ros_com" target="_blank" rel="noreferrer">px4_ros_com</a>. This repo is no longer needed, but does contain useful examples.</p></div><h2 id="installation-setup" tabindex="-1">Installation &amp; Setup <a class="header-anchor" href="#installation-setup" aria-label="Permalink to &quot;Installation &amp; Setup&quot;">​</a></h2><p>The supported ROS 2 platforms for PX4 development are ROS 2 &quot;Humble&quot; on Ubuntu 22.04, and ROS 2 &quot;Foxy&quot; on Ubuntu 20.04.</p><p>ROS 2 &quot;Humble&quot; is recommended because it is the current ROS 2 LTS distribution. ROS 2 &quot;Foxy&quot; reached end-of-life in May 2023, but is still stable and works with PX4.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>PX4 is not as well tested on Ubuntu 22.04 as it is on Ubuntu 20.04 (at time of writing), and Ubuntu 20.04 is needed if you want to use <a href="./../sim_gazebo_classic/">Gazebo Classic</a>.</p></div><p>To setup ROS 2 for use with PX4:</p><ul><li><a href="#install-px4">Install PX4</a> (to use the PX4 simulator)</li><li><a href="#install-ros-2">Install ROS 2</a></li><li><a href="#setup-micro-xrce-dds-agent-client">Setup Micro XRCE-DDS Agent &amp; Client</a></li><li><a href="#build-ros-2-workspace">Build &amp; Run ROS 2 Workspace</a></li></ul><p>Other dependencies of the architecture that are installed automatically, such as <em>Fast DDS</em>, are not covered.</p><h3 id="install-px4" tabindex="-1">Install PX4 <a class="header-anchor" href="#install-px4" aria-label="Permalink to &quot;Install PX4&quot;">​</a></h3><p>You need to install the PX4 development toolchain in order to use the simulator.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The only dependency ROS 2 has on PX4 is the set of message definitions, which it gets from <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">px4_msgs</a>. You only need to install PX4 if you need the simulator (as we do in this guide), or if you are creating a build that publishes custom uORB topics.</p></div><p>Set up a PX4 development environment on Ubuntu in the normal way:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./PX4-Autopilot/Tools/setup/ubuntu.sh</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span></span></code></pre></div><p>Note that the above commands will install the recommended simulator for your version of Ubuntu. If you want to install PX4 but keep your existing simulator installation, run <code>ubuntu.sh</code> above with the <code>--no-sim-tools</code> flag.</p><p>For more information and troubleshooting see: <a href="./../dev_setup/dev_env_linux_ubuntu.html">Ubuntu Development Environment</a> and <a href="./../dev_setup/building_px4.html">Download PX4 source</a>.</p><h3 id="install-ros-2" tabindex="-1">Install ROS 2 <a class="header-anchor" href="#install-ros-2" aria-label="Permalink to &quot;Install ROS 2&quot;">​</a></h3><p>To install ROS 2 and its dependencies:</p>`,29),u=s("p",null,"Install ROS 2.",-1),F=s("p",null,'To install ROS 2 "Humble" on Ubuntu 22.04:',-1),E=s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," update"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," && "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," locales")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," locale-gen"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," en_US"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," en_US.UTF-8")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," update-locale"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," LC_ALL=en_US.UTF-8"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," LANG=en_US.UTF-8")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," LANG"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"en_US.UTF-8")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," software-properties-common")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," add-apt-repository"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," universe")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," update"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," && "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," curl"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -y")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," curl"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -sSL"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," https://raw.githubusercontent.com/ros/rosdistro/master/ros.key"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -o"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /usr/share/keyrings/ros-archive-keyring.gpg")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"echo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "deb [arch=$('),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dpkg"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," --print-architecture"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},") signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"."),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /etc/os-release && "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"echo"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," $UBUNTU_CODENAME"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},') main"'),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," |"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," tee"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /etc/apt/sources.list.d/ros2.list"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," >"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /dev/null")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," update"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," && "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," upgrade"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -y")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ros-humble-desktop")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ros-dev-tools")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/humble/setup.bash"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," && "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"echo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "source /opt/ros/humble/setup.bash"'),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," >>"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," .bashrc")])])])],-1),y=s("p",null,[i("The instructions above are reproduced from the official installation guide: "),s("a",{href:"https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html",target:"_blank",rel:"noreferrer"},"Install ROS 2 Humble"),i(". You can install "),s("em",null,"either"),i(" the desktop ("),s("code",null,"ros-humble-desktop"),i(") "),s("em",null,"or"),i(" bare-bones versions ("),s("code",null,"ros-humble-ros-base"),i("), "),s("em",null,"and"),i(" the development tools ("),s("code",null,"ros-dev-tools"),i(").")],-1),m=s("p",null,'To install ROS 2 "Foxy" on Ubuntu 20.04:',-1),b=s("ul",null,[s("li",null,[i("Follow the official installation guide: "),s("a",{href:"https://index.ros.org/doc/ros2/Installation/Foxy/Linux-Install-Debians/",target:"_blank",rel:"noreferrer"},"Install ROS 2 Foxy"),i(".")])],-1),C=s("p",null,[i("You can install "),s("em",null,"either"),i(" the desktop ("),s("code",null,"ros-foxy-desktop"),i(") "),s("em",null,"or"),i(" bare-bones versions ("),s("code",null,"ros-foxy-ros-base"),i("), "),s("em",null,"and"),i(" the development tools ("),s("code",null,"ros-dev-tools"),i(").")],-1),_=n('<li><p>Some Python dependencies must also be installed (using <strong><code>pip</code></strong> or <strong><code>apt</code></strong>):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empy==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.3.4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyros-genmsg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setuptools</span></span></code></pre></div></li>',1),f=n(`<h3 id="setup-micro-xrce-dds-agent-client" tabindex="-1">Setup Micro XRCE-DDS Agent &amp; Client <a class="header-anchor" href="#setup-micro-xrce-dds-agent-client" aria-label="Permalink to &quot;Setup Micro XRCE-DDS Agent &amp; Client&quot;">​</a></h3><p>For ROS 2 to communicate with PX4, <a href="./../modules/modules_system.html#uxrce-dds-client">uXRCE-DDS client</a> must be running on PX4, connected to a micro XRCE-DDS agent running on the companion computer.</p><h4 id="setup-the-agent" tabindex="-1">Setup the Agent <a class="header-anchor" href="#setup-the-agent" aria-label="Permalink to &quot;Setup the Agent&quot;">​</a></h4><p>The agent can be installed onto the companion computer in a <a href="./../middleware/uxrce_dds.html#micro-xrce-dds-agent-installation">number of ways</a>. Below we show how to build the agent &quot;standalone&quot; from source and connect to a client running on the PX4 simulator.</p><p>To setup and start the agent:</p><ol><li><p>Open a terminal.</p></li><li><p>Enter the following commands to fetch and build the agent from source:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/eProsima/Micro-XRCE-DDS-Agent.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Micro-XRCE-DDS-Agent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ldconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/lib/</span></span></code></pre></div></li><li><p>Start the agent with settings for connecting to the uXRCE-DDS client running on the simulator:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MicroXRCEAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span></span></code></pre></div></li></ol><p>The agent is now running, but you won&#39;t see much until we start PX4 (in the next step).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can leave the agent running in this terminal! Note that only one agent is allowed per connection channel.</p></div><h4 id="start-the-client" tabindex="-1">Start the Client <a class="header-anchor" href="#start-the-client" aria-label="Permalink to &quot;Start the Client&quot;">​</a></h4><p>The PX4 simulator starts the uXRCE-DDS client automatically, connecting to UDP port 8888 on the local host.</p><p>To start the simulator (and client):</p>`,11),B=s("p",null,[i("Open a new terminal in the root of the "),s("strong",null,"PX4 Autopilot"),i(" repo that was installed above.")],-1),v=s("ul",null,[s("li",null,[s("p",null,[i("Start a PX4 "),s("a",{href:"./../sim_gazebo_gz/"},"Gazebo"),i(" simulation using:")]),s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gz_x500")])])])])])],-1),S=s("ul",null,[s("li",null,[s("p",null,[i("Start a PX4 "),s("a",{href:"./../sim_gazebo_classic/"},"Gazebo Classic"),i(" simulation using:")]),s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gazebo-classic")])])])])])],-1),w=n(`<p>The agent and client are now running they should connect.</p><p>The PX4 terminal displays the <a href="./../debug/system_console.html">NuttShell/PX4 System Console</a> output as PX4 boots and runs. As soon as the agent connects the output should include <code>INFO</code> messages showing creation of data writers:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>INFO  [uxrce_dds_client] synchronized with time offset 1675929429203524us</span></span>
<span class="line"><span>INFO  [uxrce_dds_client] successfully created rt/fmu/out/failsafe_flags data writer, topic id: 83</span></span>
<span class="line"><span>INFO  [uxrce_dds_client] successfully created rt/fmu/out/sensor_combined data writer, topic id: 168</span></span>
<span class="line"><span>INFO  [uxrce_dds_client] successfully created rt/fmu/out/timesync_status data writer, topic id: 188</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>The micro XRCE-DDS agent terminal should also start to show output, as equivalent topics are created in the DDS network:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>[1675929445.268957] info     | ProxyClient.cpp    | create_publisher         | publisher created      | client_key: 0x00000001, publisher_id: 0x0DA(3), participant_id: 0x001(1)</span></span>
<span class="line"><span>[1675929445.269521] info     | ProxyClient.cpp    | create_datawriter        | datawriter created     | client_key: 0x00000001, datawriter_id: 0x0DA(5), publisher_id: 0x0DA(3)</span></span>
<span class="line"><span>[1675929445.270412] info     | ProxyClient.cpp    | create_topic             | topic created          | client_key: 0x00000001, topic_id: 0x0DF(2), participant_id: 0x001(1)</span></span>
<span class="line"><span>...</span></span></code></pre></div><h3 id="build-ros-2-workspace" tabindex="-1">Build ROS 2 Workspace <a class="header-anchor" href="#build-ros-2-workspace" aria-label="Permalink to &quot;Build ROS 2 Workspace&quot;">​</a></h3><p>This section shows how create a ROS 2 workspace hosted in your home directory (modify the commands as needed to put the source code elsewhere).</p><p>The <a href="https://github.com/PX4/px4_ros_com" target="_blank" rel="noreferrer">px4_ros_com</a> and <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">px4_msgs</a> packages are cloned to a workspace folder, and then the <code>colcon</code> tool is used to build the workspace. The example is run using <code>ros2 launch</code>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The example builds the <a href="#ros-2-listener">ROS 2 Listener</a> example application, located in <a href="https://github.com/PX4/px4_ros_com" target="_blank" rel="noreferrer">px4_ros_com</a>. <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">px4_msgs</a> is needed too so that the example can interpret PX4 ROS 2 topics.</p></div><h4 id="building-the-workspace" tabindex="-1">Building the Workspace <a class="header-anchor" href="#building-the-workspace" aria-label="Permalink to &quot;Building the Workspace&quot;">​</a></h4><p>To create and build the workspace:</p>`,11),D=n(`<li><p>Open a new terminal.</p></li><li><p>Create and navigate into a new workspace directory using:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ws_sensor_combined/src/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ws_sensor_combined/src/</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>A naming convention for workspace folders can make it easier to manage workspaces.</p></div></li><li><p>Clone the example repository and <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">px4_msgs</a> to the <code>/src</code> directory (the <code>main</code> branch is cloned by default, which corresponds to the version of PX4 we are running):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/px4_msgs.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/px4_ros_com.git</span></span></code></pre></div></li>`,3),x=s("p",null,[i("Source the ROS 2 development environment into the current terminal and compile the workspace using "),s("code",null,"colcon"),i(":")],-1),A=s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"cd"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ..")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/humble/setup.bash")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"colcon"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")])])])],-1),P=s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"cd"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ..")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/foxy/setup.bash")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"colcon"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")])])])],-1),R=s("p",null,[i("This builds all the folders under "),s("code",null,"/src"),i(" using the sourced toolchain.")],-1),O=n('<h4 id="running-the-example" tabindex="-1">Running the Example <a class="header-anchor" href="#running-the-example" aria-label="Permalink to &quot;Running the Example&quot;">​</a></h4><p>To run the executables that you just built, you need to source <code>local_setup.bash</code>. This provides access to the &quot;environment hooks&quot; for the current workspace. In other words, it makes the executables that were just built available in the current terminal.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.html#source-the-overlay" target="_blank" rel="noreferrer">ROS2 beginner tutorials</a> recommend that you <em>open a new terminal</em> for running your executables.</p></div><p>In a new terminal:</p>',4),T=s("p",null,'Navigate into the top level of your workspace directory and source the ROS 2 environment (in this case "Humble"):',-1),X=s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"cd"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ~/ws_sensor_combined/")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/humble/setup.bash")])])])],-1),q=s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"cd"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ~/ws_sensor_combined/")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/foxy/setup.bash")])])])],-1),I=n('<li><p>Source the <code>local_setup.bash</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install/local_setup.bash</span></span></code></pre></div></li><li><p>Now launch the example. Note here that we use <code>ros2 launch</code>, which is described below.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ros2 launch px4_ros_com sensor_combined_listener.launch.py</span></span></code></pre></div></li>',2),N=n(`<p>If this is working you should see data being printed on the terminal/console where you launched the ROS listener:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RECEIVED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DATA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SENSOR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COMBINED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ts:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 870938190</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gyro_rad[0]:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.00341645</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gyro_rad[1]:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.00626475</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gyro_rad[2]:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -0.000515705</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gyro_integral_dt:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4739</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accelerometer_timestamp_relative:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accelerometer_m_s2[0]:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -0.273381</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accelerometer_m_s2[1]:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0949186</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accelerometer_m_s2[2]:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -9.76044</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accelerometer_integral_dt:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4739</span></span></code></pre></div><h2 id="controlling-a-vehicle" tabindex="-1">Controlling a Vehicle <a class="header-anchor" href="#controlling-a-vehicle" aria-label="Permalink to &quot;Controlling a Vehicle&quot;">​</a></h2><p>To control applications, ROS 2 applications:</p><ul><li>subscribe to (listen to) telemetry topics published by PX4</li><li>publish to topics that cause PX4 to perform some action.</li></ul><p>The topics that you can use are defined in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>, and you can get more information about their data in the <a href="./../msg_docs/">uORB Message Reference</a>. For example, <a href="./../msg_docs/VehicleGlobalPosition.html">VehicleGlobalPosition</a> can be used to get the vehicle global position, while <a href="./../msg_docs/VehicleCommand.html">VehicleCommand</a> can be used to command actions such as takeoff and land.</p><p>The <a href="#ros-2-example-applications">ROS 2 Example applications</a> examples below provide concrete examples of how to use these topics.</p><h2 id="compatibility-issues" tabindex="-1">Compatibility Issues <a class="header-anchor" href="#compatibility-issues" aria-label="Permalink to &quot;Compatibility Issues&quot;">​</a></h2><p>This section contains information that may affect how you write your ROS code.</p><h3 id="ros-2-subscriber-qos-settings" tabindex="-1">ROS 2 Subscriber QoS Settings <a class="header-anchor" href="#ros-2-subscriber-qos-settings" aria-label="Permalink to &quot;ROS 2 Subscriber QoS Settings&quot;">​</a></h3><p>ROS 2 code that subscribes to topics published by PX4 <em>must</em> specify a appropriate (compatible) QoS setting in order to listen to topics. Specifically, nodes should subscribe using the ROS 2 predefined QoS sensor data (from the <a href="#ros-2-listener">listener example source code</a>):</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rmw_qos_profile_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qos_profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rmw_qos_profile_sensor_data;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QoS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QoSInitialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qos_profile.history, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), qos_profile);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subscription_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;create_subscription</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_msgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SensorCombined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/fmu/out/sensor_combined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, qos,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre></div><p>This is needed because the ROS 2 default <a href="https://docs.ros.org/en/humble/Concepts/About-Quality-of-Service-Settings.html#qos-profiles" target="_blank" rel="noreferrer">Quality of Service (QoS) settings</a> are different from the settings used by PX4. Not all combinations of publisher-subscriber <a href="https://docs.ros.org/en/humble/Concepts/About-Quality-of-Service-Settings.html#qos-compatibilities" target="_blank" rel="noreferrer">Qos settings are possible</a>, and it turns out that the default ROS 2 settings for subscribing are not! Note that ROS code does not have to set QoS settings when publishing (the PX4 settings are compatible with ROS defaults in this case).</p><h3 id="ros-2-px4-frame-conventions" tabindex="-1">ROS 2 &amp; PX4 Frame Conventions <a class="header-anchor" href="#ros-2-px4-frame-conventions" aria-label="Permalink to &quot;ROS 2 &amp; PX4 Frame Conventions&quot;">​</a></h3><p>The local/world and body frames used by ROS and PX4 are different.</p><table><thead><tr><th>Frame</th><th>PX4</th><th>ROS</th></tr></thead><tbody><tr><td>Body</td><td>FRD (X <strong>F</strong>orward, Y <strong>R</strong>ight, Z <strong>D</strong>own)</td><td>FLU (X <strong>F</strong>orward, Y <strong>L</strong>eft, Z <strong>U</strong>p)</td></tr><tr><td>World</td><td>FRD or NED (X <strong>N</strong>orth, Y <strong>E</strong>ast, Z <strong>D</strong>own)</td><td>FLU or ENU (X <strong>E</strong>ast, Y <strong>N</strong>orth, Z <strong>U</strong>p)</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>See <a href="http://www.ros.org/reps/rep-0105.html" target="_blank" rel="noreferrer">REP105: Coordinate Frames for Mobile Platforms</a> for more information about ROS frames.</p></div><p>Both frames are shown in the image below (FRD on the left/FLU on the right).</p><p><img src="`+r+`" alt="Reference frames"></p><p>The FRD (NED) conventions are adopted on <strong>all</strong> PX4 topics unless explicitly specified in the associated message definition. Therefore, ROS 2 nodes that want to interface with PX4 must take care of the frames conventions.</p><ul><li><p>To rotate a vector from ENU to NED two basic rotations must be performed:</p><ul><li>first a pi/2 rotation around the <code>Z</code>-axis (up),</li><li>then a pi rotation around the <code>X</code>-axis (old East/new North).</li></ul></li><li><p>To rotate a vector from NED to ENU two basic rotations must be performed:</p></li><li><ul><li>first a pi/2 rotation around the <code>Z</code>-axis (down),</li><li>then a pi rotation around the <code>X</code>-axis (old North/new East). Note that the two resulting operations are mathematically equivalent.</li></ul></li><li><p>To rotate a vector from FLU to FRD a pi rotation around the <code>X</code>-axis (front) is sufficient.</p></li><li><p>To rotate a vector from FRD to FLU a pi rotation around the <code>X</code>-axis (front) is sufficient.</p></li></ul><p>Examples of vectors that require rotation are:</p><ul><li>all fields in <a href="./../msg_docs/TrajectorySetpoint.html">TrajectorySetpoint</a> message; ENU to NED conversion is required before sending them.</li><li>all fields in <a href="./../msg_docs/VehicleThrustSetpoint.html">VehicleThrustSetpoint</a> message; FLU to FRD conversion is required before sending them.</li></ul><p>Similarly to vectors, also quanternions representing the attitude of the vehicle (body frame) w.r.t. the world frame require conversion.</p><p><a href="https://github.com/PX4/px4_ros_com" target="_blank" rel="noreferrer">PX4/px4_ros_com</a> provides the shared library <a href="https://github.com/PX4/px4_ros_com/blob/main/include/px4_ros_com/frame_transforms.h" target="_blank" rel="noreferrer">frame_transforms</a> to easily perform such conversions.</p><h3 id="ros-gazebo-and-px4-time-synchronization" tabindex="-1">ROS, Gazebo and PX4 time synchronization <a class="header-anchor" href="#ros-gazebo-and-px4-time-synchronization" aria-label="Permalink to &quot;ROS, Gazebo and PX4 time synchronization&quot;">​</a></h3><p>By default, time synchronization between ROS 2 and PX4 is automatically managed by the <a href="https://micro-xrce-dds.docs.eprosima.com/en/latest/time_sync.html" target="_blank" rel="noreferrer">uXRCE-DDS middleware</a> and time synchronization statistics are available listening to the bridged topic <code>/fmu/out/timesync_status</code>. When the uXRCE-DDS client runs on a flight controller and the agent runs on a companion computer this is the desired behavior as time offsets, time drift, and communication latency, are computed and automatically compensated.</p><p>For Gazebo simulations PX4 uses the Gazebo <code>/clock</code> topic as <a href="./../sim_gazebo_gz/#px4-gazebo-time-synchronization">time source</a> instead. This clock is always slightly off-sync w.r.t. the OS clock (the real time factor is never exactly one) and it can can even run much faster or much slower depending on the <a href="http://sdformat.org/spec?elem=physics&amp;ver=1.9" target="_blank" rel="noreferrer">user preferences</a>. Note that this is different from the <a href="./../simulation/#lockstep-simulation">simulation lockstep</a> procedure adopted with Gazebo Classic.</p><p>ROS2 users have then two possibilities regarding the <a href="https://design.ros2.org/articles/clock_and_time.html" target="_blank" rel="noreferrer">time source</a> of their nodes.</p><h4 id="ros2-nodes-use-the-os-clock-as-time-source" tabindex="-1">ROS2 nodes use the OS clock as time source <a class="header-anchor" href="#ros2-nodes-use-the-os-clock-as-time-source" aria-label="Permalink to &quot;ROS2 nodes use the OS clock as time source&quot;">​</a></h4><p>This scenario, which is the one considered in this page and in the <a href="./offboard_control.html">offboard_control</a> guide, is also the standard behavior of the ROS2 nodes. The OS clock acts as time source and therefore it can be used only when the simulation real time factor is very close to one. The time synchronizer of the uXRCE-DDS client then bridges the OS clock on the ROS2 side with the Gazebo clock on the PX4 side. No further action is required by the user.</p><h4 id="ros2-nodes-use-the-gazebo-clock-as-time-source" tabindex="-1">ROS2 nodes use the Gazebo clock as time source <a class="header-anchor" href="#ros2-nodes-use-the-gazebo-clock-as-time-source" aria-label="Permalink to &quot;ROS2 nodes use the Gazebo clock as time source&quot;">​</a></h4><p>In this scenario, ROS2 also uses the Gazebo <code>/clock</code> topic as time source. This approach makes sense if the Gazebo simulation is running with real time factor different from one, or if ROS2 needs to directly interact with Gazebo. On the ROS2 side, direct interaction with Gazebo is achieved by the <a href="https://github.com/gazebosim/ros_gz" target="_blank" rel="noreferrer">ros_gz_bridge</a> package of the <a href="https://github.com/gazebosim/ros_gz" target="_blank" rel="noreferrer">ros_gz</a> repository. Read through the <a href="https://github.com/gazebosim/ros_gz#readme" target="_blank" rel="noreferrer">repo</a> and <a href="https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_bridge#readme" target="_blank" rel="noreferrer">package</a> READMEs to find out the right version that has to be installed depending on your ROS2 and Gazebo versions.</p><p>Once the package is installed and sourced, the node <code>parameter_bridge</code> provides the bridging capabilities and can be used to create an unidirectional <code>/clock</code> bridge:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ros_gz_bridge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameter_bridge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock</span></span></code></pre></div><p>At this point, every ROS2 node must be instructed to use the newly bridged <code>/clock</code> topic as time source instead of the OS one, this is done by setting the parameter <code>use_sim_time</code> (of <em>each</em> node) to <code>true</code> (see <a href="https://design.ros2.org/articles/clock_and_time.html" target="_blank" rel="noreferrer">ROS clock and Time design</a>).</p><p>This concludes the modifications required on the ROS2 side. On the PX4 side, you are only required to stop the uXRCE-DDS time synchronization, setting the parameter <a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_SYNCT">UXRCE_DDS_SYNCT</a> to <code>false</code>. By doing so, Gazebo will act as main and only time source for both ROS2 and PX4.</p><h2 id="ros-2-example-applications" tabindex="-1">ROS 2 Example Applications <a class="header-anchor" href="#ros-2-example-applications" aria-label="Permalink to &quot;ROS 2 Example Applications&quot;">​</a></h2><h3 id="ros-2-listener" tabindex="-1">ROS 2 Listener <a class="header-anchor" href="#ros-2-listener" aria-label="Permalink to &quot;ROS 2 Listener&quot;">​</a></h3><p>The ROS 2 <a href="https://github.com/PX4/px4_ros_com/tree/main/src/examples/listeners" target="_blank" rel="noreferrer">listener examples</a> in the <a href="https://github.com/PX4/px4_ros_com" target="_blank" rel="noreferrer">px4_ros_com</a> repo demonstrate how to write ROS nodes to listen to topics published by PX4.</p><p>Here we consider the <a href="https://github.com/PX4/px4_ros_com/blob/main/src/examples/listeners/sensor_combined_listener.cpp" target="_blank" rel="noreferrer">sensor_combined_listener.cpp</a> node under <code>px4_ros_com/src/examples/listeners</code>, which subscribes to the <a href="./../msg_docs/SensorCombined.html">SensorCombined</a> message.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><a href="#build-ros-2-workspace">Build ROS 2 Workspace</a> shows how to build and run this example.</p></div><p>The code first imports the C++ libraries needed to interface with the ROS 2 middleware and the header file for the <code>SensorCombined</code> message to which the node subscribes:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;rclcpp/rclcpp.hpp&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;px4_msgs/msg/sensor_combined.hpp&gt;</span></span></code></pre></div><p>Then it creates a <code>SensorCombinedListener</code> class that subclasses the generic <code>rclcpp::Node</code> base class.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> Sensor Combined uORB topic data callback</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SensorCombinedListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span></code></pre></div><p>This creates a callback function for when the <code>SensorCombined</code> uORB messages are received (now as micro XRCE-DDS messages), and outputs the content of the message fields each time the message is received.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SensorCombinedListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sensor_combined_listener&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		rmw_qos_profile_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qos_profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rmw_qos_profile_sensor_data;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QoS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QoSInitialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qos_profile.history, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), qos_profile);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		subscription_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;create_subscription</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_msgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SensorCombined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/fmu/out/sensor_combined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, qos,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> px4_msgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SensorCombined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UniquePtr</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RECEIVED SENSOR COMBINED DATA&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;=============================&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ts: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;timestamp    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gyro_rad[0]: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;gyro_rad[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gyro_rad[1]: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;gyro_rad[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gyro_rad[2]: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;gyro_rad[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gyro_integral_dt: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;gyro_integral_dt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;accelerometer_timestamp_relative: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;accelerometer_timestamp_relative </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;accelerometer_m_s2[0]: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;accelerometer_m_s2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;accelerometer_m_s2[1]: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;accelerometer_m_s2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;accelerometer_m_s2[2]: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;accelerometer_m_s2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;accelerometer_integral_dt: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg-&gt;accelerometer_integral_dt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The subscription sets a QoS profile based on <code>rmw_qos_profile_sensor_data</code>. This is needed because the default ROS 2 QoS profile for subscribers is incompatible with the PX4 profile for publishers. For more information see: <a href="#ros-2-subscriber-qos-settings">ROS 2 Subscriber QoS Settings</a>,</p></div><p>The lines below create a publisher to the <code>SensorCombined</code> uORB topic, which can be matched with one or more compatible ROS 2 subscribers to the <code>fmu/sensor_combined/out</code> ROS 2 topic.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_msgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SensorCombined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::SharedPtr subscription_;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>The instantiation of the <code>SensorCombinedListener</code> class as a ROS node is done on the <code>main</code> function.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Starting sensor_combined listener node...&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	setvbuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stdout, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _IONBF, BUFSIZ);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argc, argv);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SensorCombinedListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This particular example has an associated launch file at <a href="https://github.com/PX4/px4_ros_com/blob/main/launch/sensor_combined_listener.launch.py" target="_blank" rel="noreferrer">launch/sensor_combined_listener.launch.py</a>. This allows it to be launched using the <a href="#ros2-launch"><code>ros2 launch</code></a> command.</p><h3 id="ros-2-advertiser" tabindex="-1">ROS 2 Advertiser <a class="header-anchor" href="#ros-2-advertiser" aria-label="Permalink to &quot;ROS 2 Advertiser&quot;">​</a></h3><p>A ROS 2 advertiser node publishes data into the DDS/RTPS network (and hence to the PX4 Autopilot).</p><p>Taking as an example the <code>debug_vect_advertiser.cpp</code> under <code>px4_ros_com/src/advertisers</code>, first we import required headers, including the <code>debug_vect</code> msg header.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;chrono&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;rclcpp/rclcpp.hpp&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;px4_msgs/msg/debug_vect.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chrono_literals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Then the code creates a <code>DebugVectAdvertiser</code> class that subclasses the generic <code>rclcpp::Node</code> base class.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DebugVectAdvertiser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span></code></pre></div><p>The code below creates a function for when messages are to be sent. The messages are sent based on a timed callback, which sends two messages per second based on a timer.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	DebugVectAdvertiser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;debug_vect_advertiser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		publisher_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;create_publisher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_msgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::DebugVect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fmu/debug_vect/in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer_callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]()-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> debug_vect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> px4_msgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DebugVect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			debug_vect.timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chrono</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time_point_cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chrono</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">microseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chrono</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">steady_clock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time_since_epoch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), debug_vect.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			debug_vect.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			debug_vect.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			debug_vect.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			RCLCPP_INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\033</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[97m Publishing debug_vect: time: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%llu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> z: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\033</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[0m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                debug_vect.timestamp, debug_vect.x, debug_vect.y, debug_vect.z);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;publisher_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(debug_vect);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		timer_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create_wall_timer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, timer_callback);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimerBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SharedPtr timer_;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Publisher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_msgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DebugVect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::SharedPtr publisher_;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>The instantiation of the <code>DebugVectAdvertiser</code> class as a ROS node is done on the <code>main</code> function.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Starting debug_vect advertiser node...&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	setvbuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stdout, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _IONBF, BUFSIZ);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argc, argv);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DebugVectAdvertiser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="offboard-control" tabindex="-1">Offboard Control <a class="header-anchor" href="#offboard-control" aria-label="Permalink to &quot;Offboard Control&quot;">​</a></h3><p>For a complete reference example on how to use Offboard control with PX4, see: <a href="./../ros2/offboard_control.html">ROS 2 Offboard control example</a>.</p><h2 id="using-flight-controller-hardware" tabindex="-1">Using Flight Controller Hardware <a class="header-anchor" href="#using-flight-controller-hardware" aria-label="Permalink to &quot;Using Flight Controller Hardware&quot;">​</a></h2><p>ROS 2 with PX4 running on a flight controller is almost the same as working with PX4 on the simulator. The only difference is that you need to start both the agent <em>and the client</em>, with settings appropriate for the communication channel.</p><p>For more information see <a href="./../middleware/uxrce_dds.html#starting-agent-and-client">Starting uXRCE-DDS</a>.</p><h2 id="custom-uorb-topics" tabindex="-1">Custom uORB Topics <a class="header-anchor" href="#custom-uorb-topics" aria-label="Permalink to &quot;Custom uORB Topics&quot;">​</a></h2><p>ROS 2 needs to have the <em>same</em> message definitions that were used to create the uXRCE-DDS client module in the PX4 Firmware in order to interpret the messages. The definition are stored in the ROS 2 interface package <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a> and they are automatically synchronized by CI on the <code>main</code> and release branches. Note that all the messages from PX4 source code are present in the repository, but only those listed in <code>dds_topics.yaml</code> will be available as ROS 2 topics. Therefore,</p><ul><li><p>If you&#39;re using a main or release version of PX4 you can get the message definitions by cloning the interface package <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a> into your workspace.</p></li><li><p>If you&#39;re creating or modifying uORB messages you must manually update the messages in your workspace from your PX4 source tree. Generally this means that you would update <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>, clone the interface package, and then manually synchronize it by copying the new/modified message definitions from <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/msg" target="_blank" rel="noreferrer">PX4-Autopilot/msg</a> to its <code>msg</code> folders. Assuming that PX4-Autopilot is in your home directory <code>~</code>, while <code>px4_msgs</code> is in <code>~/px4_ros_com/src/</code>, then the command might be:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/px4_ros_com/src/px4_msgs/msg/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.msg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/PX4-Autopilot/mgs/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/px4_ros_com/src/px4_msgs/msg/</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Technically, <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a> completely defines the relationship between PX4 uORB topics and ROS 2 messages. For more information see <a href="./../middleware/uxrce_dds.html#dds-topics-yaml">uXRCE-DDS &gt; DDS Topics YAML</a>.</p></div></li></ul><h2 id="customizing-the-topic-namespace" tabindex="-1">Customizing the Topic Namespace <a class="header-anchor" href="#customizing-the-topic-namespace" aria-label="Permalink to &quot;Customizing the Topic Namespace&quot;">​</a></h2><p>Custom topic namespaces can be applied at build time (changing <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>) or at runtime (useful for multi vehicle operations):</p><ul><li>One possibility is to use the <code>-n</code> option when starting the <a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a> from command line. This technique can be used both in simulation and real vehicles.</li><li>A custom namespace can be provided for simulations (only) by setting the environment variable <code>PX4_UXRCE_DDS_NS</code> before starting the simulation.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Changing the namespace at runtime will append the desired namespace as a prefix to all <code>topic</code> fields in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>. Therefore, commands like:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uxrce_dds_client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uav_1</span></span></code></pre></div><p>or</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PX4_UXRCE_DDS_NS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">uav_1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gz_x500</span></span></code></pre></div><p>will generate topics under the namespaces:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/uav_1/fmu/in/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # for subscribers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/uav_1/fmu/out/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # for publishers</span></span></code></pre></div></div><h2 id="ros2-cli" tabindex="-1">ros2 CLI <a class="header-anchor" href="#ros2-cli" aria-label="Permalink to &quot;ros2 CLI&quot;">​</a></h2><p>The <a href="https://docs.ros.org/en/humble/Tutorials/Beginner-CLI-Tools.html" target="_blank" rel="noreferrer">ros2 CLI</a> is a useful tool for working with ROS. You can use it, for example, to quickly check whether topics are being published, and also inspect them in detail if you have <code>px4_msg</code> in the workspace. The command also lets you launch more complex ROS systems via a launch file. A few possibilities are demonstrated below.</p><h3 id="ros2-topic-list" tabindex="-1">ros2 topic list <a class="header-anchor" href="#ros2-topic-list" aria-label="Permalink to &quot;ros2 topic list&quot;">​</a></h3><p>Use <code>ros2 topic list</code> to list the topics visible to ROS 2:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> topic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span></code></pre></div><p>If PX4 is connected to the agent, the result will be a list of topic types:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/fmu/in/obstacle_distance</span></span>
<span class="line"><span>/fmu/in/offboard_control_mode</span></span>
<span class="line"><span>/fmu/in/onboard_computer_status</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>Note that the workspace does not need to build with <code>px4_msgs</code> for this to succeed; topic type information is part of the message payload.</p><h3 id="ros2-topic-echo" tabindex="-1">ros2 topic echo <a class="header-anchor" href="#ros2-topic-echo" aria-label="Permalink to &quot;ros2 topic echo&quot;">​</a></h3><p>Use <code>ros2 topic echo</code> to show the details of a particular topic.</p><p>Unlike with <code>ros2 topic list</code>, for this to work you must be in a workspace has built the <code>px4_msgs</code> and sourced <code>local_setup.bash</code> so that ROS can interpret the messages.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> topic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fmu/out/vehicle_status</span></span></code></pre></div><p>The command will echo the topic details as they update.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>---</span></span>
<span class="line"><span>timestamp: 1675931593364359</span></span>
<span class="line"><span>armed_time: 0</span></span>
<span class="line"><span>takeoff_time: 0</span></span>
<span class="line"><span>arming_state: 1</span></span>
<span class="line"><span>latest_arming_reason: 0</span></span>
<span class="line"><span>latest_disarming_reason: 0</span></span>
<span class="line"><span>nav_state_timestamp: 3296000</span></span>
<span class="line"><span>nav_state_user_intention: 4</span></span>
<span class="line"><span>nav_state: 4</span></span>
<span class="line"><span>failure_detector_status: 0</span></span>
<span class="line"><span>hil_state: 0</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>---</span></span></code></pre></div><h3 id="ros2-topic-hz" tabindex="-1">ros2 topic hz <a class="header-anchor" href="#ros2-topic-hz" aria-label="Permalink to &quot;ros2 topic hz&quot;">​</a></h3><p>You can get statistics about the rates of messages using <code>ros2 topic hz</code>. For example, to get the rates for <code>SensorCombined</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ros2 topic hz /fmu/out/sensor_combined</span></span></code></pre></div><p>The output will look something like:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 248.187</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  min:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.000s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.012s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> std</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.00147s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2724</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 248.006</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  min:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.000s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.012s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> std</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.00147s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2972</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 247.330</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  min:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.000s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.012s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> std</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.00148s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3212</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 247.497</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  min:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.000s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.012s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> std</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.00149s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3464</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 247.458</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  min:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.000s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.012s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> std</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.00149s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3712</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 247.485</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  min:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.000s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.012s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> std</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.00148s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> window:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3960</span></span></code></pre></div><h3 id="ros2-launch" tabindex="-1">ros2 launch <a class="header-anchor" href="#ros2-launch" aria-label="Permalink to &quot;ros2 launch&quot;">​</a></h3><p>The <code>ros2 launch</code> command is used to start a ROS 2 launch file. For example, above we used <code>ros2 launch px4_ros_com sensor_combined_listener.launch.py</code> to start the listener example.</p><p>You don&#39;t need to have a launch file, but they are very useful if you have a complex ROS 2 system that needs to start several components.</p><p>For information about launch files see <a href="https://docs.ros.org/en/humble/Tutorials/Intermediate/Launch/Creating-Launch-Files.html" target="_blank" rel="noreferrer">ROS 2 Tutorials &gt; Creating launch files</a></p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="missing-dependencies" tabindex="-1">Missing dependencies <a class="header-anchor" href="#missing-dependencies" aria-label="Permalink to &quot;Missing dependencies&quot;">​</a></h3><p>The standard installation should include all the tools needed by ROS 2.</p><p>If any are missing, they can be added separately:</p>`,103),z=n('<li><p><strong><code>colcon</code></strong> build tools should be in the development tools. It can be installed using:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-colcon-common-extensions</span></span></code></pre></div></li>',1),U=s("p",null,"The Eigen3 library used by the transforms library should be in the both the desktop and base packages. It should be installed as shown:",-1),V=s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ros-humble-eigen3-cmake-module")])])])],-1),L=s("div",{class:"language-sh vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"sh"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"sudo"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," apt"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ros-foxy-eigen3-cmake-module")])])])],-1),G=s("h2",{id:"additional-information",tabindex:"-1"},[i("Additional information "),s("a",{class:"header-anchor",href:"#additional-information","aria-label":'Permalink to "Additional information"'},"​")],-1),M=s("ul",null,[s("li",null,[s("a",{href:"https://www.youtube.com/watch?v=F5oelooT67E",target:"_blank",rel:"noreferrer"},"ROS 2 in PX4: Technical Details of a Seamless Transition to XRCE-DDS"),i(" - Pablo Garrido & Nuno Marques (youtube)")]),s("li",null,[s("a",{href:"https://github.com/ros2/ros2/wiki/DDS-and-ROS-middleware-implementations",target:"_blank",rel:"noreferrer"},"DDS and ROS middleware implementations")])],-1);function Q(Y,W,H,Z,$,j){const t=h("tab"),l=h("tabs");return d(),k("div",null,[g,s("ol",null,[s("li",null,[u,a(l,null,{default:e(()=>[a(t,{name:"humble"},{default:e(()=>[F,E,y]),_:1}),a(t,{name:"foxy"},{default:e(()=>[m,b,C]),_:1})]),_:1})]),_]),f,s("ol",null,[s("li",null,[B,a(l,null,{default:e(()=>[a(t,{name:"humble"},{default:e(()=>[v]),_:1}),a(t,{name:"foxy"},{default:e(()=>[S]),_:1})]),_:1})])]),w,s("ol",null,[D,s("li",null,[x,a(l,null,{default:e(()=>[a(t,{name:"humble"},{default:e(()=>[A]),_:1}),a(t,{name:"foxy"},{default:e(()=>[P]),_:1})]),_:1}),R])]),O,s("ol",null,[s("li",null,[T,a(l,null,{default:e(()=>[a(t,{name:"humble"},{default:e(()=>[X]),_:1}),a(t,{name:"foxy"},{default:e(()=>[q]),_:1})]),_:1})]),I]),N,s("ul",null,[z,s("li",null,[U,a(l,null,{default:e(()=>[a(t,{name:"humble"},{default:e(()=>[V]),_:1}),a(t,{name:"foxy"},{default:e(()=>[L]),_:1})]),_:1})])]),G,M])}const as=o(c,[["render",Q]]);export{is as __pageData,as as default};
