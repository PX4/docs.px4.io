import{_ as i,c as e,o as a,ab as s}from"./chunks/framework.CUflZczI.js";const m=JSON.parse('{"title":"시스템 장애 주입","description":"","frontmatter":{},"headers":[],"relativePath":"ko/debug/failure_injection.md","filePath":"ko/debug/failure_injection.md"}'),l={name:"ko/debug/failure_injection.md"},t=s(`<h1 id="시스템-장애-주입" tabindex="-1">시스템 장애 주입 <a class="header-anchor" href="#시스템-장애-주입" aria-label="Permalink to &quot;시스템 장애 주입&quot;">​</a></h1><p><a href="https://mavsdk.mavlink.io/main/en/cpp/api_reference/classmavsdk_1_1_failure.html" target="_blank" rel="noreferrer">MAVSDK 오류 플러그인</a>을 사용하는 프로그래밍 방식이나 <a href="./../debug/mavlink_shell.html#mavlink-shell">MAVLink 셸</a>과 같은 PX4 콘솔을 통하여, 수동으로 다양한 유형의 센서등과 같은 시스템 오류를 주입할 수 있습니다. This enables easier testing of <a href="./../config/safety.html">safety failsafe</a> behaviour, and more generally, of how PX4 behaves when systems and sensors stop working correctly.</p><p>실패 주입은 기본적으로 비활성화되어 있으며, <a href="./../advanced_config/parameter_reference.html#SYS_FAILURE_EN">SYS_FAILURE_EN</a> 매개변수를 사용하여 활성화할 수 있습니다.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>실패 주입은 아직 개발 중입니다. At time of writing (PX4 v1.14):</p><ul><li>시뮬레이션에서만 사용할 수 있습니다(실제 비행에서 실패 주입 모두 지원 예정).</li><li>It requires support in the simulator. It is supported in Gazebo Classic</li><li>많은 실패 유형이 광범위하게 구현되지 않았습니다. 이러한 경우 명령은 &quot;지원되지 않는&quot; 메시지와 함께 반환됩니다.</li></ul></div><h2 id="장애-시스템-명령" tabindex="-1">장애 시스템 명령 <a class="header-anchor" href="#장애-시스템-명령" aria-label="Permalink to &quot;장애 시스템 명령&quot;">​</a></h2><p>Failures can be injected using the <a href="./../modules/modules_command.html#failure">failure system command</a> from any PX4 console/shell, specifying both the target and type of the failure.</p><h3 id="구문" tabindex="-1">구문 <a class="header-anchor" href="#구문" aria-label="Permalink to &quot;구문&quot;">​</a></h3><p>The full syntax of the <a href="./../modules/modules_command.html#failure">failure</a> command is:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">componen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">failure_typ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">instance_numbe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span></span></code></pre></div><p>where:</p><ul><li><em>구성요소</em>: <ul><li>센서: <ul><li><code>gyro</code>: 자이로</li><li><code>accel</code>: 가속도계</li><li><code>mag</code>: 자기계</li><li><code>baro</code>: 기압계</li><li><code>gps</code>: GPS</li><li><code>optical_flow</code>: 광류 센서</li><li><code>vio</code>: 시각적 관성 주행 거리</li><li><code>distance_sensor</code>: 거리 센서(거리 측정기)</li><li><code>airspeed</code>: 대기속도 센서</li></ul></li><li>시스템: <ul><li><code>battery</code>: 배터리</li><li><code>motor</code>: 모터</li><li><code>servo</code>: 서보</li><li><code>avoidance</code>: 회피</li><li><code>rc_signal</code>: RC 신호</li><li><code>mavlink_signal</code>: MAVLink 신호(데이터 텔레메트리)</li></ul></li></ul></li><li><em>failure_type</em>: <ul><li><code>ok</code>: 정상적으로 게시합니다(실패 주입 비활성화).</li><li><code>off</code>: 게시를 중지합니다.</li><li><code>stuck</code>: 매번 같은 값을 보고합니다(센서 오작동을 <em>나타낼 수 있음</em>).</li><li><code>garbage</code>: 무작위 노이즈를 게시합니다. 초기화되지 않은 메모리를 읽는 것처럼 보입니다.</li><li><code>wrong</code>: 잘못된 값을 게시합니다(여전히 합리적으로 보이거나 &quot;쓰레기&quot;가 아님).</li><li><code>slow</code>: 낮은 속도로 게시합니다.</li><li><code>delayed</code>: 상당한 지연으로 유효한 데이터를 게시합니다.</li><li><code>intermittent</code>: 간헐적으로 게시합니다.</li></ul></li><li><em>instance number</em>(선택 사항): 영향을 받는 센서의 인스턴스 번호입니다. 0 (기본값) 지정된 유형의 모든 센서를 나타냅니다.</li></ul><h3 id="예" tabindex="-1">예 <a class="header-anchor" href="#예" aria-label="Permalink to &quot;예&quot;">​</a></h3><p>To simulate losing RC signal without having to turn off your RC controller:</p><ol><li><p>매개변수 <a href="./../advanced_config/parameter_reference.html#SYS_FAILURE_EN">SYS_FAILURE_EN</a>을 활성화합니다.</p></li><li><p>Enter the following commands on the MAVLink console or SITL <em>pxh shell</em>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fail RC (turn publishing off)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rc_signal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> off</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Restart RC publishing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rc_signal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ok</span></span></code></pre></div></li></ol><h2 id="mavsdk-실패-플러그인" tabindex="-1">MAVSDK 실패 플러그인 <a class="header-anchor" href="#mavsdk-실패-플러그인" aria-label="Permalink to &quot;MAVSDK 실패 플러그인&quot;">​</a></h2><p>The <a href="https://mavsdk.mavlink.io/main/en/cpp/api_reference/classmavsdk_1_1_failure.html" target="_blank" rel="noreferrer">MAVSDK failure plugin</a> can be used to programmatically inject failures. It is used in <a href="./../test_and_ci/integration_testing_mavsdk.html">PX4 Integration Testing</a> to simulate failure cases (for example, see <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/test/mavsdk_tests/autopilot_tester.cpp" target="_blank" rel="noreferrer">PX4-Autopilot/test/mavsdk_tests/autopilot_tester.cpp</a>).</p><p>The plugin API is a direct mapping of the failure command shown above, with a few additional error signals related to the connection.</p>`,17),n=[t];function o(r,h,d,c,p,k){return a(),e("div",null,n)}const g=i(l,[["render",o]]);export{m as __pageData,g as default};
