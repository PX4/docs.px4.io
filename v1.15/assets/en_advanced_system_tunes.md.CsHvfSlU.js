import{_ as e,a as t}from"./chunks/tune_musicmaker_ansi_output.CrgKVrrc.js";import{_ as s,c as i,o as a,ab as n}from"./chunks/framework.CUflZczI.js";const k=JSON.parse('{"title":"System Notification Tunes","description":"","frontmatter":{},"headers":[],"relativePath":"en/advanced/system_tunes.md","filePath":"en/advanced/system_tunes.md"}'),o={name:"en/advanced/system_tunes.md"},r=n(`<h1 id="system-notification-tunes" tabindex="-1">System Notification Tunes <a class="header-anchor" href="#system-notification-tunes" aria-label="Permalink to &quot;System Notification Tunes&quot;">​</a></h1><p>PX4 defines a number of <a href="./../getting_started/tunes.html">standard tones/tunes</a> that are used to provide audio notification for important system states and problems (e.g. system startup, arming success, battery warnings, etc.)</p><p>Tunes are specified using strings (in <a href="http://artscene.textfiles.com/ansimusic/information/ansimtech.txt" target="_blank" rel="noreferrer">ANSI Music notation</a>) and played by code using the <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/lib/tunes" target="_blank" rel="noreferrer">tunes</a> library. The tunes library also contains the list of default system tunes - see <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/lib/tunes/tune_definition.desc" target="_blank" rel="noreferrer">lib/tunes/tune_definition.desc</a>.</p><p>PX4 also has a module that can be used to play (test) the default tunes or a user defined tune.</p><p>This topic provides general guidance on how to create your own tunes and add to/replace the system notification tones/tunes.</p><h2 id="creating-tunes" tabindex="-1">Creating Tunes <a class="header-anchor" href="#creating-tunes" aria-label="Permalink to &quot;Creating Tunes&quot;">​</a></h2><p>Tune strings are defined using <a href="http://artscene.textfiles.com/ansimusic/information/ansimtech.txt" target="_blank" rel="noreferrer">ANSI Music notation</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>More information about the format can be found in <a href="https://en.wikibooks.org/wiki/QBasic/Appendix#PLAY" target="_blank" rel="noreferrer">QBasic PLAY statement</a> (Wikibooks) and has been reproduced in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/lib/tunes/tune_definition.desc" target="_blank" rel="noreferrer">tune_definition.desc</a>.</p></div><p>The easiest way to create a new tune is to use a music editor. This allows you to edit the music and play it back on your computer, then export it to a format that can be played by PX4.</p><p>ANSI music was popular in the days of ANSI BBS systems, and so the best editing tools are DOS utilities. On Windows, one option is to use <em>Melody Master</em> within <em>Dosbox</em>.</p><p>The steps for using the software are:</p><ol><li><p>Download <a href="http://www.dosbox.com/" target="_blank" rel="noreferrer">DosBox</a> and install the app</p></li><li><p>Download <a href="ftp://archives.thebbs.org/ansi_utilities/melody21.zip" target="_blank" rel="noreferrer">Melody Master</a> and unzip into a new directory</p></li><li><p>Open the <em>Dosbox</em> console</p></li><li><p>Mount the melody master directory in Dosbox as shown below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path_to_directory</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">elody21</span></span></code></pre></div></li><li><p>Start <em>Melody Master</em> with the following commands</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span></span></code></pre></div></li><li><p>You will then have the option to click through a few screens, then press <strong>1</strong> to display <em>Melody Master</em>: <img src="`+e+'" alt="Melody Master 2.1"></p><p>The lower half of the screen provides helpful advice on keyboard shortcuts for using the tool (arrows for moving in stave, and numbers for selecting the note length, etc.).</p></li><li><p>When you&#39;re ready to save the music:</p><ul><li>Press <strong>F2</strong> to give the tune a name and save it in the <em>/Music</em> sub folder of your Melody Master installation.</li><li>Press <strong>F7</strong>, the scroll down the list of output formats on the right to get to ANSI. The file will be exported to the <em>root</em> of the Melody Master directory (with the same name and a file-type specific extension).</li></ul></li><li><p>Open the file. The output might look like this:</p><p><img src="'+t+'" alt="ANSI Output from file"></p></li><li><p>The string that can be played in PX4 is the bit between <code>MNT</code> and <code>P64</code>: <code>150L1O3DL16CL32&lt;B&gt;C&lt;AEL16A</code></p></li></ol><h2 id="testing-tunes" tabindex="-1">Testing Tunes <a class="header-anchor" href="#testing-tunes" aria-label="Permalink to &quot;Testing Tunes&quot;">​</a></h2><p>When you&#39;re ready to try it out a new tune on PX4, use the <a href="./../modules/modules_system.html#tune-control">tune_control</a> library. For example, to test the tune we &quot;created&quot; above you would enter the following command on a console or shell (e.g. the <a href="./../debug/mavlink_shell.html">MAVLink Shell</a>):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tune_control</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> play</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;150L1O3DL16CL32&lt;B&gt;C&lt;AEL16A&quot;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Out of the box, the <code>tune_control</code> is only present on real hardware (not the simulator).</p></div><h2 id="replacing-existing-tunes" tabindex="-1">Replacing Existing Tunes <a class="header-anchor" href="#replacing-existing-tunes" aria-label="Permalink to &quot;Replacing Existing Tunes&quot;">​</a></h2><p>Tunes are defined within <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/lib/tunes/tune_definition.desc" target="_blank" rel="noreferrer">tune_definition.desc</a>.</p><p>If you just need to replace an existing tune, then you can replace the file in your own fork, and update the tune strings defined in <code>PX4_DEFINE_TUNE</code>.</p><h2 id="adding-a-new-tune" tabindex="-1">Adding a New Tune <a class="header-anchor" href="#adding-a-new-tune" aria-label="Permalink to &quot;Adding a New Tune&quot;">​</a></h2><p>TBD.</p>',21),l=[r];function h(p,d,c,u,m,g){return a(),i("div",null,l)}const y=s(o,[["render",h]]);export{k as __pageData,y as default};
