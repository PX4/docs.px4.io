import{_ as e,c as s,o as a,ab as t}from"./chunks/framework.CUflZczI.js";const k=JSON.parse('{"title":"Шаблон модуля для повноцінних додатків","description":"","frontmatter":{},"headers":[],"relativePath":"uk/modules/module_template.md","filePath":"uk/modules/module_template.md"}'),l={name:"uk/modules/module_template.md"},i=t(`<h1 id="шаблон-модуля-для-повноцінних-додатків" tabindex="-1">Шаблон модуля для повноцінних додатків <a class="header-anchor" href="#шаблон-модуля-для-повноцінних-додатків" aria-label="Permalink to &quot;Шаблон модуля для повноцінних додатків&quot;">​</a></h1><p>Програма може бути написана для запуску як <em>задача</em> (модуль з власним стеком і пріоритетом процесу) або як <em>задача робочої черги</em> (модуль, який виконується у потоці робочої черги, розділяючи стек і пріоритет потоку з іншими завданнями у робочій черзі). У більшості випадків можна використовувати завдання робочої черги, оскільки це мінімізує використання ресурсів.</p><div class="info custom-block"><p class="custom-block-title"><a href="./../concept/architecture.html#runtime-environment">Огляд архітектури &gt; середовища виконання</a> надає додаткову інформацію про завдання та завдання робочої черги.</p></div><div class="info custom-block"><p class="custom-block-title">Все, що ви дізнаєтесь з <a href="./../modules/hello_sky.html">Перший додаток</a>, є актуальним для написання повноцінної програми.</p></div><h2 id="завдання-робочоі-черги" tabindex="-1">Завдання робочої черги <a class="header-anchor" href="#завдання-робочоі-черги" aria-label="Permalink to &quot;Завдання робочої черги&quot;">​</a></h2><p>PX4-Autopilot містить шаблон для написання нової програми (модуля), яка запускається як <em>задача робочої черги</em>: <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/examples/work_item" target="_blank" rel="noreferrer">src/examples/work_item</a>.</p><p>Програма-задача робочої черги - це така сама програма, як і звичайна (задача), за винятком того, що їй потрібно вказати, що вона є задачею робочої черги, і запланувати свій запуск під час ініціалізації.</p><p>Приклад показує, як. У підсумку:</p><ol><li><p>Вкажіть залежність від бібліотеки робочих черг у файлі визначення cmake (<a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/examples/work_item/CMakeLists.txt" target="_blank" rel="noreferrer">CMakeLists.txt</a>):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>DEPENDS</span></span>
<span class="line"><span>   px4_work_queue</span></span></code></pre></div></li><li><p>На додаток до <code>ModuleBase</code>, завдання також має походити від <code>ScheduledWorkItem</code> (включається з <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/common/include/px4_platform_common/px4_work_queue/ScheduledWorkItem.hpp" target="_blank" rel="noreferrer">ScheduledWorkItem.hpp</a>)</p></li><li><p>Вкажіть чергу, до якої додати завдання у конструкторі ініціалізації. Приклад <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/examples/work_item/WorkItemExample.cpp#L42" target="_blank" rel="noreferrer">work_item</a> додає себе до робочої черги <code>wq_configurations::test1</code>, як показано нижче:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkItemExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkItemExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() :</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ModuleParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ScheduledWorkItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MODULE_NAME, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wq_configurations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::test1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Доступні робочі черги (<code>wq_configurations</code>) перелічено у <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/common/include/px4_platform_common/px4_work_queue/WorkQueueManager.hpp#L49" target="_blank" rel="noreferrer">WorkQueueManager.hpp</a>.</p></div></li></ol><p>:::</p><ol><li>Реалізуйте метод <code>ScheduledWorkItem::Run()</code>, щоб виконати &quot;work&quot;.</li><li>Реалізувати метод <code>task_spawn</code>, який вказує, що задача є робочою чергою (використовуючи id <code>task_id_is_work_queue</code>.</li><li>Заплануйте завдання робочої черги за допомогою одного з методів планування (у прикладі ми використовуємо <code>ScheduleOnInterval</code> з методу <code>init</code>).</li></ol><h2 id="задачі" tabindex="-1">Задачі <a class="header-anchor" href="#задачі" aria-label="Permalink to &quot;Задачі&quot;">​</a></h2><p>PX4/PX4-Autopilot містить шаблон для написання нового додатку (модуля), який запускається як задача на власному стеку:<a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/templates/template_module" target="_blank" rel="noreferrer">src/templates/template_module</a>.</p><p>Шаблон демонструє наступні додаткові функції/аспекти, які є необхідними або корисними для повноцінної роботи програми:</p><ul><li>Доступ до параметрів та реагування на оновлення параметрів.</li><li>підписки на uORB та очікування оновлень теми.</li><li>Керування завданням, яке виконується в фоновому режимі через <code>start</code>/<code>stop</code>/<code>status</code>. Команда <code>module start [&lt;arguments&gt;]</code> може бути безпосередньо додана до команди <a href="./../concept/system_startup.html">startup script</a>.</li><li>Парсинг аргументів командного рядка.</li><li>Документація: методи <code>PRINT_MODULE_*</code> служать для двох цілей (API задокументовано <a href="https://github.com/PX4/PX4-Autopilot/blob/v1.8.0/src/platforms/px4_module.h#L381" target="_blank" rel="noreferrer">у вихідному коді</a>): <ul><li>Вони використовуються для виведення інформації про використання командного рядка при введенні <code>module help</code> на консолі.</li><li>Вони автоматично витягуються скриптом для створення сторінки <a href="./../modules/modules_main.html">Modules &amp; Commands Reference</a>.</li></ul></li></ul>`,15),o=[i];function p(r,n,c,h,d,m){return a(),s("div",null,o)}const _=e(l,[["render",p]]);export{k as __pageData,_ as default};
