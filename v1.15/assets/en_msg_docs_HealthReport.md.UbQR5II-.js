import{_ as s,c as i,o as a,ab as n}from"./chunks/framework.CUflZczI.js";const c=JSON.parse('{"title":"HealthReport (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"en/msg_docs/HealthReport.md","filePath":"en/msg_docs/HealthReport.md"}'),e={name:"en/msg_docs/HealthReport.md"},t=n(`<h1 id="healthreport-uorb-message" tabindex="-1">HealthReport (UORB message) <a class="header-anchor" href="#healthreport-uorb-message" aria-label="Permalink to &quot;HealthReport (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/HealthReport.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 can_arm_mode_flags              # bitfield </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> each flight </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NAVIGATION_STATE_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arming is possible</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 can_run_mode_flags              # bitfield </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> each flight mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it can run</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 health_is_present_flags         # flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> each </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">health_component_t</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 health_warning_flags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 health_error_flags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># A component is required but missing, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> present</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 arming_check_warning_flags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 arming_check_error_flags</span></span></code></pre></div>`,3),h=[t];function l(p,r,k,E,o,d){return a(),i("div",null,h)}const _=s(e,[["render",l]]);export{c as __pageData,_ as default};
