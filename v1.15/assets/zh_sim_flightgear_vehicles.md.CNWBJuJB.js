import{_ as a,a as e,b as i,c as s}from"./chunks/tf-r1_towing.VSoc3hjo.js";import{_ as t,c as l,o as r,ab as n}from"./chunks/framework.CUflZczI.js";const y=JSON.parse('{"title":"FlightGear Vehicles","description":"","frontmatter":{},"headers":[],"relativePath":"zh/sim_flightgear/vehicles.md","filePath":"zh/sim_flightgear/vehicles.md"}'),o={name:"zh/sim_flightgear/vehicles.md"},h=n('<h1 id="flightgear-vehicles" tabindex="-1">FlightGear Vehicles <a class="header-anchor" href="#flightgear-vehicles" aria-label="Permalink to &quot;FlightGear Vehicles&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This simulator is <a href="./../simulation/community_supported_simulators.html">community supported and maintained</a>. It may or may not work with current versions of PX4.</p><p>See <a href="./../dev_setup/dev_env.html">Toolchain Installation</a> for information about the environments and tools supported by the core development team.</p></div><p>This topic lists/displays the vehicles supported by the PX4 <a href="./../sim_flightgear/">FlightGear</a> simulation, and the <code>make</code> commands required to run them (the commands are run from terminal in the <strong>PX4-Autopilot</strong> directory). The supported types are: plane, autogyro and rover (there are specific frames within these types).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For the full list of build targets run <code>make px4_sitl list_vmd_make_targets</code> (filter out those that start with <code>flightgear_</code>).</p></div><div class="info custom-block"><p class="custom-block-title">The <a href="./../sim_flightgear/">FlightGear</a> page shows how to install and use FlightGear in more detail (this page is a summary of vehicle-specific features).</p></div><h2 id="standard-plane" tabindex="-1">Standard Plane <a class="header-anchor" href="#standard-plane" aria-label="Permalink to &quot;Standard Plane&quot;">​</a></h2><p>FlightGear has models for many planes. The most suitable one for UAV development is currently the <a href="https://github.com/ThunderFly-aerospace/FlightGear-Rascal" target="_blank" rel="noreferrer">Rascal RC plane</a> (which also exists in multiple variants).</p><p><img src="'+a+'" alt="Rascal plane in FlightGear"></p><p>The variants differ mainly by the <a href="http://wiki.flightgear.org/Flight_Dynamics_Model" target="_blank" rel="noreferrer">FDM</a> model. All variants have a common feature selection table that can be activated by pressing the <code>=</code> key on the computer keyboard.</p><p>There is a pop-up table that could be used for advanced features activation.</p><p><img src="'+e+'" alt="Rascal plane FlightGear advanced options"></p><p>The most relevant option is:</p><ul><li>Smoke - generates a smoke trail to enhance the visibility of aircraft in the air (smoke and particles option needs to be activated in <strong>FG View &gt; rendering options &gt; Particles checkbox</strong>).</li><li>Trajectory markers - displays orthogonal markers along the trajectory of flight.</li></ul><p>Trajectory markers show the absolute flight path in the world coordinates, and the smoke trail shows the relative path in the air mass.</p><h3 id="rascal-110-yasim" tabindex="-1">Rascal 110 YASim <a class="header-anchor" href="#rascal-110-yasim" aria-label="Permalink to &quot;Rascal 110 YASim&quot;">​</a></h3><p>The primary variant of the Rascal model has a combustion piston-engine model. This results in a non-zero idle power causing a rotation of propeller on idle engine RPM.</p><p>The launch command is:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_nolockstep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flightgear_rascal</span></span></code></pre></div><h3 id="rascal-110-electric-yasim" tabindex="-1">Rascal 110 Electric YASim <a class="header-anchor" href="#rascal-110-electric-yasim" aria-label="Permalink to &quot;Rascal 110 Electric YASim&quot;">​</a></h3><p>A Rascal vehicle with an electric engine.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_nolockstep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flightgear_rascal-electric</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This variant needs the latest FlightGear code (sources at least from 26 April 2020). Otherwise, the FlightGear crashes because of an unexpected definition of electric engine.</p></div><h3 id="rascal-110-jsbsim" tabindex="-1">Rascal 110 JSBsim <a class="header-anchor" href="#rascal-110-jsbsim" aria-label="Permalink to &quot;Rascal 110 JSBsim&quot;">​</a></h3><p>Rascal JSBsim variant.</p><p>This variant does not have a direct <code>make</code> option but can be manually selected in the <strong>rascal.json</strong> configuration file (part of <a href="https://github.com/ThunderFly-aerospace/PX4-FlightGear-Bridge" target="_blank" rel="noreferrer">PX4-FlightGear-Bridge</a>). Simply change <code>Rascal110-YASim</code> to <code>Rascal110-JSBSim</code> in <a href="https://github.com/ThunderFly-aerospace/PX4-FlightGear-Bridge/blob/master/models/rascal.json#L2" target="_blank" rel="noreferrer">this file</a>.</p><h2 id="autogyro" tabindex="-1">Autogyro <a class="header-anchor" href="#autogyro" aria-label="Permalink to &quot;Autogyro&quot;">​</a></h2><p>The only UAV autogyro model supported by FlightGear is <a href="https://github.com/ThunderFly-aerospace/TF-G1" target="_blank" rel="noreferrer">TF-G1 Autogyro</a>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_nolockstep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flightgear_tf-g1</span></span></code></pre></div><p><img src="'+i+'" alt="TF-G1 in FlightGear"></p><h2 id="ackerman-vehicle-ugv-rover" tabindex="-1">Ackerman vehicle (UGV/Rover) <a class="header-anchor" href="#ackerman-vehicle-ugv-rover" aria-label="Permalink to &quot;Ackerman vehicle (UGV/Rover)&quot;">​</a></h2><h3 id="tf-r1-ground-support-rover" tabindex="-1">TF-R1 Ground support Rover <a class="header-anchor" href="#tf-r1-ground-support-rover" aria-label="Permalink to &quot;TF-R1 Ground support Rover&quot;">​</a></h3><p>This rover is equipped with a towing hitch and might be used for aero-towing of other vehicles.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_nolockstep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flightgear_tf-r1</span></span></code></pre></div><p><img src="'+s+`" alt="TF-R1 rover in FlightGear"></p><h2 id="quadrotor" tabindex="-1">Quadrotor <a class="header-anchor" href="#quadrotor" aria-label="Permalink to &quot;Quadrotor&quot;">​</a></h2><p>There is only an <a href="https://github.com/ThunderFly-aerospace/FlightGear-TF-Mx1" target="_blank" rel="noreferrer">incomplete multirotor model</a>. This is not yet usable (it is numerically unstable and needs an additional work).</p><h2 id="adding-a-new-vehicle" tabindex="-1">Adding a New Vehicle <a class="header-anchor" href="#adding-a-new-vehicle" aria-label="Permalink to &quot;Adding a New Vehicle&quot;">​</a></h2><p>A new vehicle model needs to be included as a git submodule into <a href="https://github.com/PX4/PX4-FlightGear-Bridge/tree/master/models" target="_blank" rel="noreferrer">PX4-FlightGear-Bridge/models/</a> directory. This directory contains an control channel definition <a href="https://github.com/PX4/PX4-FlightGear-Bridge/blob/master/models/rascal.json" target="_blank" rel="noreferrer">JSON file</a>.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;FgModel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Rascal110-YASim&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/ThunderFly-aerospace/FlightGear-Rascal/archive/master.zip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Controls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/controls/flight/aileron&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/controls/flight/elevator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/controls/flight/rudder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/controls/engines/engine/throttle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The file content meaning is as follows:</p><ul><li><code>FgModel</code> - a precise case sensitive name of the FlightGear model corresponding to &quot;XXXX-set.xml&quot; in the model directory (where XXXX is the model name).</li><li><code>Url</code> is optional and it is not currently used. It is intended for future use to auto-download the models from web</li><li><code>Controls</code> - the most important part of the process of adding a vehicle. This section contains the mapping between the PX4 mixer file and <a href="http://wiki.flightgear.org/Property_tree" target="_blank" rel="noreferrer">FlightGear property tree</a>. <ul><li>The first number in a list selects a PX4 mixer output.</li><li>Path string is a FlightGear variable location in the property tree.</li></ul></li><li>The last number in a list is a multiplier, allowing inversion or scaling of mixer input.</li></ul><p>After preparing all these files a new vehicle need to be included in the PX4 make system.</p><p>The PX4 configuration is in <a href="https://github.com/PX4/PX4-Autopilot/blob/c5341da8137f460c84f47f0e38293667ea69a6cb/platforms/posix/cmake/sitl_target.cmake#L164-L171" target="_blank" rel="noreferrer">/platforms/posix/cmake/sitl_target.cmake</a>. The new vehicle&#39;s json name should be added to the list.</p>`,43),p=[h];function c(d,k,g,u,m,F){return r(),l("div",null,p)}const b=t(o,[["render",c]]);export{y as __pageData,b as default};
