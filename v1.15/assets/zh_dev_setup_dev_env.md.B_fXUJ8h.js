import{_ as t,c as e,o as a,ab as l}from"./chunks/framework.CUflZczI.js";const p=JSON.parse('{"title":"安装文件和代码","description":"","frontmatter":{},"headers":[],"relativePath":"zh/dev_setup/dev_env.md","filePath":"zh/dev_setup/dev_env.md"}'),n={name:"zh/dev_setup/dev_env.md"},r=l('<h1 id="安装文件和代码" tabindex="-1">安装文件和代码 <a class="header-anchor" href="#安装文件和代码" aria-label="Permalink to &quot;安装文件和代码&quot;">​</a></h1><p>The <em>supported platforms</em> for PX4 development are:</p><ul><li><a href="./../dev_setup/dev_env_linux_ubuntu.html">Ubuntu Linux (22.04/20.04/18.04)</a> — Recommended</li><li><a href="./../dev_setup/dev_env_windows_wsl.html">Windows (10/11)</a> — via WSL2</li><li><a href="./../dev_setup/dev_env_mac.html">Linux</a></li></ul><h2 id="支持的编译目标" tabindex="-1">支持的编译目标 <a class="header-anchor" href="#支持的编译目标" aria-label="Permalink to &quot;支持的编译目标&quot;">​</a></h2><p>下表显示了您可以在每个操作系统上构建何种 PX平台的固件编译。</p><table><thead><tr><th>平台</th><th style="text-align:center;">Linux (Ubuntu)</th><th style="text-align:center;">Mac</th><th style="text-align:center;">Windows</th></tr></thead><tbody><tr><td><strong>NuttX based hardware:</strong> <a href="./../flight_controller/pixhawk_series.html">Pixhawk Series</a>, <a href="./../complete_vehicles_mc/crazyflie2.html">Crazyflie</a></td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Linux-based hardware:</strong> <a href="./../flight_controller/raspberry_pi_navio2.html">Raspberry Pi 2/3</a></td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td><strong>Simulation:</strong> <a href="./../sim_gazebo_gz/">Gazebo SITL</a></td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> <a href="./../sim_gazebo_classic/">Gazebo Classic SITL</a></td><td style="text-align:center;">X</td><td style="text-align:center;">X</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> <a href="./../simulation/ros_interface.html">ROS with Gazebo Classic</a></td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;">X</td></tr><tr><td><strong>Simulation:</strong> ROS 2 with Gazebo</td><td style="text-align:center;">X</td><td style="text-align:center;"></td><td style="text-align:center;">✓</td></tr></tbody></table><p>不同操作系统的开发环境的安装请参阅：</p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>如果你对 Docker 比较熟悉的话你也可以使用预先构建好的容器作为开发环境：<a href="./../test_and_ci/docker.html">Docker 容器</a>。</p><ul><li>Install <a href="./../dev_setup/vscode.html">VSCode</a> (if you prefer using an IDE to the command line).</li><li>Install the <a href="./../dev_setup/qgc_daily_build.html">QGroundControl Daily Build</a></li><li>Continue to <a href="./../dev_setup/building_px4.html">Building PX4 Software</a>.</li></ul>',10),d=[r];function i(s,o,h,c,_,u){return a(),e("div",null,d)}const m=t(n,[["render",i]]);export{p as __pageData,m as default};
