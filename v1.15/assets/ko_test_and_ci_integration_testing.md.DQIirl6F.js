import{_ as s,c as i,o as a,ab as t}from"./chunks/framework.CUflZczI.js";const c=JSON.parse('{"title":"ROS 통합 테스트","description":"","frontmatter":{},"headers":[],"relativePath":"ko/test_and_ci/integration_testing.md","filePath":"ko/test_and_ci/integration_testing.md"}'),n={name:"ko/test_and_ci/integration_testing.md"},l=t(`<h1 id="ros-통합-테스트" tabindex="-1">ROS 통합 테스트 <a class="header-anchor" href="#ros-통합-테스트" aria-label="Permalink to &quot;ROS 통합 테스트&quot;">​</a></h1><p>PX4의 ROS 기반 통합 테스트 방법을 설명합니다.</p><div class="info custom-block"><p class="custom-block-title"><a href="./../test_and_ci/integration_testing_mavsdk.html">MAVSDK Integration Testing</a> is preferred when writing new tests. ROS가 <em>사용</em> 사례(예: 객체 회피)에는 ROS 기반 통합 테스트 프레임워크를 사용합니다.</p><p>모든 PX4 통합 테스트는 <a href="./../test_and_ci/continous_integration.html">지속적 통합</a> 시스템에 의해 자동으로 실행됩니다.</p></div><h2 id="전제-조건" tabindex="-1">전제 조건 <a class="header-anchor" href="#전제-조건" aria-label="Permalink to &quot;전제 조건&quot;">​</a></h2><ul><li><a href="./../sim_jmavsim/">jMAVSim 시뮬레이터</a></li><li><a href="./../sim_gazebo_classic/">Gazebo Classic Simulator</a></li><li><a href="./../simulation/ros_interface.html">ROS와 MAVROS</a></li></ul><h2 id="테스트-실행" tabindex="-1">테스트 실행 <a class="header-anchor" href="#테스트-실행" aria-label="Permalink to &quot;테스트 실행&quot;">​</a></h2><p>MAVROS 테스트를 실행합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">catkin_w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/devel/setup.bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sitl_gazebo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test_targe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><code>test_target</code> is a makefile targets from the set: <em>tests_mission</em>, <em>tests_mission_coverage</em>, <em>tests_offboard</em> and <em>tests_avoidance</em>.</p><p><code>test/</code> 아래에 있는 테스트 스크립트를 직접 실행할 수도 있습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">catkin_w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/devel/setup.bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sitl_gazebo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test/&lt;test_bash_script&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test_launch_fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>예:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test/rostest_px4_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavros_posix_tests_offboard_posctl.test</span></span></code></pre></div><p>테스트를 GUI로 실행하여 진행 상황을 쉽게 확인할 수도 있습니다(기본적으로 테스트는 &quot;헤드리스&quot;로 실행됨).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test/rostest_px4_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavros_posix_tests_offboard_posctl.test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gui:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> headless:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p><strong>.test</strong> 파일은 <code>integrationtests/python_src/px4_it/mavros/</code>에 정의된 해당 Python 테스트를 실행합니다.</p><h2 id="신규-mavros-테스트-작성-python" tabindex="-1">신규 MAVROS 테스트 작성(Python) <a class="header-anchor" href="#신규-mavros-테스트-작성-python" aria-label="Permalink to &quot;신규 MAVROS 테스트 작성(Python)&quot;">​</a></h2><p>This section explains how to write a new python test using ROS 1/MAVROS, test it, and add it to the PX4 test suite.</p><p>기존 테스트를 예제(<a href="https://github.com/PX4/PX4-Autopilot/tree/master/integrationtests/python_src/px4_it/mavros" target="_blank" rel="noreferrer">integrationtests/python_src/px4_it/mavros/</a>)를 검토하십시오. 공식 ROS 문서에는 <a href="http://wiki.ros.org/unittest" target="_blank" rel="noreferrer">unittest</a>(이 테스트 모음의 기반이 됨)를 사용 방법을 설명합니다.</p><p>새 테스트를 작성하려면:</p><ol><li><p>아래의 빈 테스트 스켈레톤을 복사하여 새 테스트 스크립트를 작성합니다.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env python</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # [... LICENSE ...]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # @author Example Author &lt;author@example.com&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PKG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px4&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unittest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rospy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rosbag</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sensor_msgs.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NavSatFix</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MavrosNewTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unittest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     Test description</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         rospy.init_node(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test_node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">anonymous</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         rospy.wait_for_service(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mavros/cmd/arming&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         rospy.Subscriber(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mavros/global_position/global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NavSatFix, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.global_position_callback)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rospy.Rate(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 10hz</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.has_global_pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tearDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # General callback functions used in tests</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> global_position_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, data):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.has_global_pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;&quot;&quot;Test method description&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FIXME</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: hack to wait for simulation to be ready</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         while</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.has_global_pos:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rate.sleep()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TODO</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: execute test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rostest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     rostest.rosrun(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PKG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mavros_new_test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MavrosNewTest)</span></span></code></pre></div></li><li><p>새 테스트만 실행합니다.</p><ul><li><p>Start the simulator:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo/setup_gazebo.bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roslaunch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launch/mavros_posix_sitl.launch</span></span></code></pre></div></li><li><p>Run test (in a new shell):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo/setup_gazebo.bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rosrun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavros_new_test.py</span></span></code></pre></div></li></ul></li><li><p>시작 파일에 새 테스트 노드 추가</p><ul><li><code>test/</code>에서 새 <code>&lt;test_name&gt;.test</code> ROS 실행 파일을 만듭니다.</li><li>기본 스크립트 <em>rostest_px4_run.sh</em> 또는 <em>rostest_avoidance_run.sh</em> 중 하나를 사용하여 테스트 파일을 호출합니다.</li></ul></li><li><p>(Optional) Create a new target in the Makefile</p><ul><li>Open the Makefile</li><li>Search the <em>Testing</em> section</li><li>Add a new target name and call the test</li></ul><p>For example:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tests_&lt;new_test_target_name&gt;:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rostest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SRC_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/test/rostest_px4_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavros_posix_tests_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">new_tes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.test</span></span></code></pre></div></li></ol><p>위에서 설명한 대로 테스트를 실행합니다.</p>`,22),h=[l];function p(e,k,r,d,o,g){return a(),i("div",null,h)}const y=s(n,[["render",p]]);export{c as __pageData,y as default};
