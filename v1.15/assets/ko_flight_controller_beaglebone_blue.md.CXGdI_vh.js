import{_ as a}from"./chunks/BeagleBone_Blue_balloons.DHKOHdYX.js";import{_ as e,E as n,c as t,J as l,m as s,a as o,ab as h,o as p}from"./chunks/framework.CUflZczI.js";const C=JSON.parse('{"title":"비글본 블루","description":"","frontmatter":{},"headers":[],"relativePath":"ko/flight_controller/beaglebone_blue.md","filePath":"ko/flight_controller/beaglebone_blue.md"}'),r={name:"ko/flight_controller/beaglebone_blue.md"},c=s("h1",{id:"비글본-블루",tabindex:"-1"},[o("비글본 블루 "),s("a",{class:"header-anchor",href:"#비글본-블루","aria-label":'Permalink to "비글본 블루"'},"​")],-1),k=h('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>이 비행 컨트롤러에 대한 PX4 지원은 <a href="./../flight_controller/autopilot_experimental.html">테스트 단계</a>입니다. Contact the <a href="https://beagleboard.org/blue" target="_blank" rel="noreferrer">manufacturer</a> for hardware support or compliance issues.</p></div><p><a href="https://beagleboard.org/blue" target="_blank" rel="noreferrer">BeagleBone Blue</a>는 올인원 리눅스 기반 컴퓨터입니다. 로봇 공학에 최적화되어 있지만, 이 작고 저렴한 보드에는 비행 콘트롤러에 필요한 모든 센서와 주변 장치가 있습니다. 이 항목에서는 <a href="https://github.com/StrawsonDesign/librobotcontrol" target="_blank" rel="noreferrer">librobotcontrol</a> 로봇 패키지로 PX4를 실행하기 위한 보드 설정 방법을 설명합니다.</p><p><img src="'+a+`" alt="BeagleBone - 레이블이 있는 다이어그램"></p><h2 id="os-이미지" tabindex="-1">OS 이미지 <a class="header-anchor" href="#os-이미지" aria-label="Permalink to &quot;OS 이미지&quot;">​</a></h2><p><em>BeagleBone Blue</em> images can be found here:</p><ul><li><a href="https://beagleboard.org/latest-images" target="_blank" rel="noreferrer">가장 안정적인 OS 이미지</a>.</li><li><a href="https://rcn-ee.net/rootfs/bb.org/testing/" target="_blank" rel="noreferrer"> 테스트 OS 이미지</a>(자주 업데이트됨).</li></ul><p>플래시 OS 이미지에 대한 정보는 <a href="https://github.com/beagleboard/beaglebone-blue/wiki/Flashing-firmware" target="_blank" rel="noreferrer">이 페이지</a>를 참고하십시오. Other useful information can be found in the <a href="https://github.com/beagleboard/beaglebone-blue/wiki/Frequently-Asked-Questions-(FAQ)" target="_blank" rel="noreferrer">FAQ</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Optionally you can update to a realtime kernel, and if you do, re-check if <em>librobotcontrol</em> works properly with the realtime kernel.</p></div><p>The latest OS images at time of updating this document is <a href="https://debian.beagle.cc/images/bone-debian-10.3-iot-armhf-2020-04-06-4gb.img.xz" target="_blank" rel="noreferrer">bone-debian-10.3-iot-armhf-2020-04-06-4gb.img.xz</a>.</p><h2 id="크로스-컴파일러-빌드-권장" tabindex="-1">크로스 컴파일러 빌드 (권장) <a class="header-anchor" href="#크로스-컴파일러-빌드-권장" aria-label="Permalink to &quot;크로스 컴파일러 빌드 (권장)&quot;">​</a></h2><p>The recommended way to build PX4 for <em>BeagleBone Blue</em> is to compile on a development computer and upload the PX4 executable binary directly to the BeagleBone Blue.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이 접근 방식은 배포 속도와 사용 편의성 때문에 <a href="#native_builds">네이티브 빌드</a> 보다 권장됩니다.</p></div><p>:::note PX4 빌드에는 빌드에 자동으로 포함되는 <a href="http://strawsondesign.com/docs/librobotcontrol/" target="_blank" rel="noreferrer">librobotcontrol</a>이 필요합니다. 그러나, 필요한 경우 독립적으로 설치하고 테스트할 수 있습니다. :::</p><h3 id="beaglebone-blue-wifi-설정" tabindex="-1">Beaglebone Blue WIFI 설정 <a class="header-anchor" href="#beaglebone-blue-wifi-설정" aria-label="Permalink to &quot;Beaglebone Blue WIFI 설정&quot;">​</a></h3><p>보드에 쉽게 액세스하려면 Wi-Fi를 통해 네트워크에 연결할 수 있습니다.</p><p>절차는 다음과 같습니다 (보드에서 실행).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> su</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connmanctl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connmanctl&gt;scan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wifi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connmanctl&gt;services</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#(at this point you should see your network SSID appear.)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connmanctl&gt;agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connmanctl&gt;connect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SSI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Passphrase</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connmanctl&gt;quit</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">The format of the <code>&lt;SSID&gt;</code> above is normally the text &#39;wifi&#39; followed by a string of other characters. After entering the command you will be prompted to enter the wifi password.</p></div><h3 id="beaglebone에서-ssh-루트-로그인" tabindex="-1">Beaglebone에서 SSH 루트 로그인 <a class="header-anchor" href="#beaglebone에서-ssh-루트-로그인" aria-label="Permalink to &quot;Beaglebone에서 SSH 루트 로그인&quot;">​</a></h3><p>Root login can be enabled on the board with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> su</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PermitRootLogin yes&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /etc/ssh/sshd_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd</span></span></code></pre></div><h3 id="크로스-컴파일러-설정" tabindex="-1">크로스 컴파일러 설정 <a class="header-anchor" href="#크로스-컴파일러-설정" aria-label="Permalink to &quot;크로스 컴파일러 설정&quot;">​</a></h3><ol><li><p>First set up <em>rsync</em> (this is used to transfer files from the development computer to the target board over a network - WiFi or Ethernet). For <em>rsync</em> over SSH with key authentication, follow the steps here (on the development machine):</p><ol><li><p>이전에 생성하지 않은 경우 SSH 키를 생성합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ssh-keygen -t rsa</span></span></code></pre></div><ol><li>ENTER //no passphrase</li><li>ENTER</li><li>ENTER</li></ol></li><li><p><strong>/etc/hosts</strong>에서 BeagleBone Blue 보드를 <code>beaglebone</code>으로 정의하고 암호없는 SSH 액세스를 위해 공개 SSH 키를 보드에 복사합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ssh-copy-id debian@beaglebone</span></span></code></pre></div></li><li><p>또는 beaglebone의 IP를 직접 사용할 수 있습니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ssh-copy-id debian@&lt;IP&gt;</span></span></code></pre></div></li><li><p>확인 메시지가 표시되면 : yes</p></li><li><p>루트 비밀번호 입력</p></li></ol></li><li><p>크로스 컴파일러 설정</p><ol><li><p>툴체인 다운로드</p><ol><li><p>First install the toolchain into <em>/opt/bbblue_toolchain/gcc-arm-linux-gnueabihf</em>. Here is an example of using soft link to select which version of the toolchain you want to use:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/bbblue_toolchain/gcc-arm-linux-gnueabihf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/bbblue_toolchain</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/bbblue_toolchain/gcc-arm-linux-gnueabihf</span></span></code></pre></div><p>The ARM Cross Compiler for <em>BeagleBone Blue</em> can be found at <a href="https://www.linaro.org/downloads/#gnu_and_llvm" target="_blank" rel="noreferrer">Linaro Toolchain Binaries site</a>.</p></li></ol></li></ol></li></ol><div class="tip custom-block"><p class="custom-block-title">GCC</p><p>in the toolchain should be compatible with kernel in <em>BeagleBone Blue</em>. General rule of thumb is to choose a toolchain where version of GCC is not higher than version of GCC which comes with the OS image on <em>BeagleBone Blue</em>.</p></div><pre><code>     Download and unpack [gcc-linaro-13.0.0-2022.06-x86_64_arm-linux-gnueabihf.tar.xz](https://snapshots.linaro.org/gnu-toolchain/13.0-2022.06-1/arm-linux-gnueabihf/gcc-linaro-13.0.0-2022.06-x86_64_arm-linux-gnueabihf.tar.xz) to the bbblue_toolchain folder.

     Different ARM Cross Compiler versions for _BeagleBone Blue_ can be found at [Linaro Toolchain Binaries site](http://www.linaro.org/downloads/).

     \`\`\`sh
     wget https://snapshots.linaro.org/gnu-toolchain/13.0-2022.06-1/arm-linux-gnueabihf/gcc-linaro-13.0.0-2022.06-x86_64_arm-linux-gnueabihf.tar.xz
     tar -xf gcc-linaro-13.0.0-2022.06-x86_64_arm-linux-gnueabihf.tar.xz
     \`\`\`
</code></pre><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The GCC version of the toolchain should be compatible with kernel in <em>BeagleBone Blue</em>.</p></div><pre><code>     As a general rule of thumb is to choose a toolchain where the version of GCC is not higher than the version of GCC which comes with the OS image on _BeagleBone Blue_.

  1. Add it to the PATH in ~/.profile as shown below

     \`\`\`sh
     export PATH=$PATH:/opt/bbblue_toolchain/gcc-arm-linux-gnueabihf/gcc-linaro-13.0.0-2022.06-x86_64_arm-linux-gnueabihf/bin
     \`\`\`

     ::: info
</code></pre><p>Logout and Login to apply the change, or execute the same line on your current shell. :::</p><pre><code>  1. Setup other dependencies by downloading the PX4 source code and then running the setup scripts:

     \`\`\`\`
     git clone https://github.com/PX4/PX4-Autopilot.git --recursive
     ols
     \`\`\`

     You may have to edit the upload target to match with your setup:

     \`\`\`sh
     nano PX4-Autopilot/boards/beaglebone/blue/cmake/upload.cmake

     # in row 37 change debian@beaglebone.lan TO root@beaglebone (or root@&lt;IP&gt;)
     \`\`\`\`

     See the [Development Environment Setup](../dev_setup/dev_env_linux_ubuntu.md) instructions for additional information.
</code></pre><h3 id="교차-컴파일-및-업로드" tabindex="-1">교차 컴파일 및 업로드 <a class="header-anchor" href="#교차-컴파일-및-업로드" aria-label="Permalink to &quot;교차 컴파일 및 업로드&quot;">​</a></h3><p>Compile and Upload</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>make beaglebone_blue_default upload</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Without upload, files stored local in build folder.</p></div><p>To test the uploaded files, run the following commands on the <em>BeagleBone Blue</em> board:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/debian/px4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.config</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Currently <em>librobotcontrol</em> requires root access.</p></div><p><a id="native_builds"></a></p><h2 id="네이티브-빌드-선택-사항" tabindex="-1">네이티브 빌드(선택 사항) <a class="header-anchor" href="#네이티브-빌드-선택-사항" aria-label="Permalink to &quot;네이티브 빌드(선택 사항)&quot;">​</a></h2><p>You can also natively build PX4 builds directly on the BeagleBone Blue.</p><p>After acquiring the pre-built library,</p><ol><li>Select the <em>librobotcontrol</em> installation directory, and set it in the <code>LIBROBOTCONTROL_INSTALL_DIR</code> environment variable so that other unwanted headers will not be included</li><li>Install <strong>robotcontrol.h</strong> and <strong>rc/*</strong> into <code>$LIBROBOTCONTROL_INSTALL_DIR/include</code></li><li>사전 빌드된 기본 (ARM) 버전의 librobotcontrol.\\ *을 <code>$LIBROBOTCONTROL_INSTALL_DIR/lib</code> 폴더에 설치합니다.</li></ol><p>Run the following commands on the BeagleBone Blue (i.e. via SSH):</p><ol><li><p>종속성 설치:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">종속성</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 설치:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-empy</span></span></code></pre></div></li><li><p>PX4 펌웨어를 BeagleBone Blue에 복제합니다.</p></li><li><p><a href="./../dev_setup/dev_env_linux.html">표준 빌드 시스템 설치</a>를 계속 진행합니다.</p></li></ol><h2 id="changes-in-config" tabindex="-1">Changes in config <a class="header-anchor" href="#changes-in-config" aria-label="Permalink to &quot;Changes in config&quot;">​</a></h2><p>All changes can be made in de px4.config file directly on beaglebone. For example, you can change the WIFI to wlan.</p><div class="info custom-block"><p class="custom-block-title">If you want to change permanently, you have to change <strong>PX4-Autopilot/posix-configs/bbblue/px4.config</strong> on the Build Machine before build.</p></div><h2 id="부팅-중-자동-시작" tabindex="-1">부팅 중 자동 시작 <a class="header-anchor" href="#부팅-중-자동-시작" aria-label="Permalink to &quot;부팅 중 자동 시작&quot;">​</a></h2><p>Here is an example [/etc/rc.local]:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh -e</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># rc.local</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This script is executed at the end of each multiuser runlevel.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># value on error.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In order to enable or disable this script just change the execution</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bits.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># By default this script does nothing.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># wait for services to start up</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/bin/sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/debian/px4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home/debian/px4/bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/debian/px4/px4.config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/debian/px4/PX4.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>Below is a <em>systemd</em> service example [/lib/systemd/system/px4-quad-copter.service]:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Quadcopter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">After</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">networking.service</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> network-online.target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StartLimitIntervalSec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Conflicts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4-fixed-wing.service</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WorkingDirectory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/home/debian/px4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/home/debian/px4/bin/px4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/debian/px4/px4.config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Restart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">on-failure</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RestartSec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WantedBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">multi-user.target</span></span></code></pre></div><h3 id="기타" tabindex="-1">기타 <a class="header-anchor" href="#기타" aria-label="Permalink to &quot;기타&quot;">​</a></h3><h4 id="파워-서보-레일" tabindex="-1">파워 서보 레일 <a class="header-anchor" href="#파워-서보-레일" aria-label="Permalink to &quot;파워 서보 레일&quot;">​</a></h4><p>When PX4 starts, it automatically applies power to servos.</p><h4 id="독특한-기능" tabindex="-1">독특한 기능 <a class="header-anchor" href="#독특한-기능" aria-label="Permalink to &quot;독특한 기능&quot;">​</a></h4><p>BeagleBone Blue has some unique features such as multiple choices of WiFi interfaces and power sources. Refer to comments in <strong>/home/debian/px4/px4.config</strong> for usage of these features.</p><h4 id="sbus-신호-변환기" tabindex="-1">SBUS 신호 변환기 <a class="header-anchor" href="#sbus-신호-변환기" aria-label="Permalink to &quot;SBUS 신호 변환기&quot;">​</a></h4><p>SBUS signal from receiver (e.g., FrSky X8R) is an inverted signal. UARTs on BeagleBone Blue can only work with non-inverted 3.3V level signal. <a href="./../tutorials/linux_sbus.html">This tutorial</a> contains a SBUS signal inverter circuit.</p><h4 id="일반적인-연결" tabindex="-1">일반적인 연결 <a class="header-anchor" href="#일반적인-연결" aria-label="Permalink to &quot;일반적인 연결&quot;">​</a></h4><p>For a quadcopter with GPS and an SBUS receiver, here are typical connections:</p><ol><li><p>비글본 블루에서 모터 1, 2, 3 및 4의 ESC를 서보 출력의 채널 1, 2, 3 및 4에 연결합니다. 비글본 블루에서 ESC 커넥터에 전원 출력이 포함되어 있는 경우 핀, 제거 및 서보 채널의 전원 출력 핀에 연결하지 마십시오.</p></li><li><p>dsm2와 일치하는 커넥터가있는 경우 위에서 언급한 변환된 SBUS 신호를 dsm2 포트에 연결하고, 그렇지 않으면 사용 가능한 다른 UART 포트에 연결하고 <strong>/home/debian/px4/px4.config</strong>에서 해당 포트를 변경합니다.</p></li><li><p>GPS 모듈의 신호를 비글본 블루의 GPS 포트에 연결합니다 BeagleBone Blue에있는 GPS 포트의 신호 핀은 3.3V만 허용하므로 이에 적합한 GPS 모듈을 선택하십시오.</p></li></ol>`,61);function d(g,u,b,m,F,y){const i=n("LinkedBadge");return p(),t("div",null,[c,l(i,{type:"warning",text:"Experimental",url:"../flight_controller/autopilot_experimental.md"}),k])}const v=e(r,[["render",d]]);export{C as __pageData,v as default};
