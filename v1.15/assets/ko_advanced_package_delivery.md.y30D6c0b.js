import{_ as i}from"./chunks/payload_delivery_mission_architecture.CMtMSIWz.js";import{_ as o,E as t,c as s,J as n,m as e,a as c,ab as r,o as l}from"./chunks/framework.CUflZczI.js";const w=JSON.parse('{"title":"Package Delivery in Missions","description":"","frontmatter":{},"headers":[],"relativePath":"ko/advanced/package_delivery.md","filePath":"ko/advanced/package_delivery.md"}'),d={name:"ko/advanced/package_delivery.md"},h=e("h1",{id:"package-delivery-in-missions",tabindex:"-1"},[c("Package Delivery in Missions "),e("a",{class:"header-anchor",href:"#package-delivery-in-missions","aria-label":'Permalink to "Package Delivery in Missions"'},"​")],-1),p=r('<p>A package delivery mission is an extension of a waypoint mission, where a user can plan delivering a package as a waypoint.</p><p>This topic explains the architecture for the package delivery feature. It is intended for developers working on extending the architecture, for example to support new payload delivery mechanisms.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Currently only <a href="./../peripherals/gripper.html">Grippers</a> can be used for package delivery. Winches are not yet supported.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The detailed documentation on how to setup a package delivery mission plan can be found <a href="./../flying/package_delivery_mission.html">here</a>. Setup for the <code>payload_deliverer</code> module is covered in the documentation for the delivery mechanism, such as <a href="./../peripherals/gripper.html#px4-configuration">Gripper</a>.</p></div><h2 id="package-delivery-architecture-diagram" tabindex="-1">Package Delivery Architecture Diagram <a class="header-anchor" href="#package-delivery-architecture-diagram" aria-label="Permalink to &quot;Package Delivery Architecture Diagram&quot;">​</a></h2><p><img src="'+i+'" alt="Package delivery architecture overview"></p><p>Package Delivery feature is centered around the <a href="./../msg_docs/VehicleCommand.html">VehicleCommand</a> &amp; <a href="./../msg_docs/VehicleCommandAck.html">VehicleCommandAck</a> messages.</p><p>The central idea lies in having an entity that handles the <code>DO_GRIPPER</code> or <code>DO_WINCH</code> vehicle command, executes it and sends back an acknowledgement when the successful delivery is confirmed.</p><p>Because PX4 automatically broadcasts the <code>VehicleCommand</code> uORB message to a UART port configured to communicate in MAVLink as a <a href="https://mavlink.io/en/messages/common.html#COMMAND_LONG" target="_blank" rel="noreferrer"><code>COMMAND_LONG</code></a> message, an external payload can receive the command and execute it.</p><p>Likewise, since PX4 automatically translates the <a href="https://mavlink.io/en/messages/common.html#COMMAND_ACK" target="_blank" rel="noreferrer"><code>COMMAND_ACK</code></a> message coming in from an external source through a UART port configured for MAVLink into a <code>vehicle_command_ack</code> uORB message, an external payload&#39;s acknowledgement for a successful package deployment can be received by PX4&#39;s <code>navigator</code> module.</p><p>Below, each entity involved in the package delivery architecture is explained.</p><h2 id="navigator" tabindex="-1">Navigator <a class="header-anchor" href="#navigator" aria-label="Permalink to &quot;Navigator&quot;">​</a></h2><p>Navigator handles the reception of the vehicle command ACK (described below). Upon reception of a successful deployment ack message, it sets the flag in Mission block level to signal that the payload deployment has been successful.</p><p>This allows the mission to proceed to a next item (e.g. Waypoint) safely, as we are sure with the acknowledgement that the deployment has been successful.</p><h2 id="vehicle-command-ack" tabindex="-1">Vehicle Command ACK <a class="header-anchor" href="#vehicle-command-ack" aria-label="Permalink to &quot;Vehicle Command ACK&quot;">​</a></h2><p>We are waiting for the ACK coming from either internally (via <code>payload_deliverer</code> module), or externally (external entity sending the MAVLink message <code>COMMAND_ACK</code>) to determine if the package delivery action has been successful (either <code>DO_GRIPPER</code> or <code>DO_WINCH</code>).</p><h2 id="mission" tabindex="-1">Mission <a class="header-anchor" href="#mission" aria-label="Permalink to &quot;Mission&quot;">​</a></h2><p>The Gripper / Winch command is placed as a <code>Mission Item</code>. This is possible since all the Mission item has the <code>MAV_CMD</code> to execute (e.g. Land, Takeoff, Waypoint, etc) which can get set to either <code>DO_GRIPPER</code> or <code>DO_WINCH</code>.</p><p>In the Mission logic (green box above) if either Gripper/Winch mission item is reached, it implements brake_for_hold functionality (which sets the <code>valid</code> flag of the next mission item waypoint to <code>false</code>) for rotary wings (e.g. Multicopter) so that the vehicle would hold it&#39;s position while the deployment is getting executed.</p><p>For fixed-wing and other vehicles, no special braking condition is considered. So if you have a loiter mission item for a fixed-wing, it will execute the delivery whilst doing the loiter, and won’t come to a stop (as it’s impossible)</p><h2 id="mission-block" tabindex="-1">Mission Block <a class="header-anchor" href="#mission-block" aria-label="Permalink to &quot;Mission Block&quot;">​</a></h2><p><code>MissionBlock</code> is the parent class of <code>Mission</code> that handles the part &quot;Is Mission completed?&quot;.</p><p>This all performed in the <code>is_mission_item_reached_or_completed</code> function, to handle the time delay / mission item advancement.</p><p>Also it implements the actual issue_command function, which will issue a vehicle command corresponding to the mission item&#39;s <code>MAV_CMD</code>, which will then be received by an external payload or the <code>payload_deliverer</code> module internally.</p><h2 id="payload-deliverer" tabindex="-1">Payload Deliverer <a class="header-anchor" href="#payload-deliverer" aria-label="Permalink to &quot;Payload Deliverer&quot;">​</a></h2><p>This is a dedicated module that handles gripper / winch support, which is used for the standard <a href="./../flying/package_delivery_mission.html">package delivery mission plan</a>.</p><p>Setup for the <code>payload_deliverer</code> module is covered within setting up an actual package release mechanism setup documentation like <a href="./../peripherals/gripper.html#px4-configuration">Gripper</a>.</p>',27);function m(u,g,f,v,k,y){const a=t("Badge");return l(),s("div",null,[h,n(a,{type:"tip",text:"PX4 v1.14"}),p])}const x=o(d,[["render",m]]);export{w as __pageData,x as default};
