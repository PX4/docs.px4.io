import{_ as s,c as a,o as i,ab as e}from"./chunks/framework.CUflZczI.js";const b=JSON.parse('{"title":"Репозиторій моделей Gazebo (PX4-gazebo-models)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/sim_gazebo_gz/gazebo_models.md","filePath":"uk/sim_gazebo_gz/gazebo_models.md"}'),t={name:"uk/sim_gazebo_gz/gazebo_models.md"},o=e('<h1 id="репозиторіи-моделеи-gazebo-px4-gazebo-models" tabindex="-1">Репозиторій моделей Gazebo (PX4-gazebo-models) <a class="header-anchor" href="#репозиторіи-моделеи-gazebo-px4-gazebo-models" aria-label="Permalink to &quot;Репозиторій моделей Gazebo (PX4-gazebo-models)&quot;">​</a></h1><p>Репозиторій <a href="https://github.com/PX4/PX4-gazebo-models" target="_blank" rel="noreferrer">PX4-gazebo-models</a> використовується для зберігання моделей <a href="./../sim_gazebo_gz/">Gazebo</a> та світів, що підтримуються PX4.</p><ul><li>Моделі зберігаються в директорії <code>/models</code>, а світи - в директорії <code>/worlds</code>.</li><li>Python скрипт <a href="https://github.com/PX4/PX4-gazebo-models/blob/main/simulation-gazebo" target="_blank" rel="noreferrer">simulation-gazebo</a> використовується для <a href="./../sim_gazebo_gz/#standalone-mode">запуску Gazebo в автономному режимі</a>.</li></ul><p>Репозиторій <code>PX4-gazebo-models</code> включений у PX4 як підмодуль, а усі моделі доступні за замовчуванням при використанні &quot;звичайної&quot; цілі збірки для <code>make</code>, наприклад <code>make px4_sitl gz_x500</code>.</p><p>Для <a href="./../sim_gazebo_gz/#standalone-mode">автономних симуляцій</a> Gazebo спочатку потрібно отримати Python скрипт <a href="https://github.com/PX4/PX4-gazebo-models/blob/main/simulation-gazebo" target="_blank" rel="noreferrer">simulation-gazebo</a>, а потім він отримає моделі та світи у <code>~/.simulation-gazebo</code> якщо ця директорія відсутня.</p><h2 id="simulation-gazebo-скрипт-запуску-автономноі-симуляціі" tabindex="-1">simulation-gazebo (скрипт запуску автономної симуляції) <a class="header-anchor" href="#simulation-gazebo-скрипт-запуску-автономноі-симуляціі" aria-label="Permalink to &quot;simulation-gazebo (скрипт запуску автономної симуляції)&quot;">​</a></h2><p>Python скрипт <a href="https://github.com/PX4/PX4-gazebo-models/blob/main/simulation-gazebo" target="_blank" rel="noreferrer">simulation-gazebo</a> використовується для запуску Gazebo у <a href="./../sim_gazebo_gz/#standalone-mode">автономному режимі</a>. Скрипт може спілкуватися з екземпляром PX4 SITL на тому ж комп&#39;ютері за замовчуванням. Якщо аргументи скрипту встановлені правильно, він може також спілкуватися з будь-яким екземпляром PX4 на будь-якій машині в одній мережі.</p><p>Скрипт <code>simulation-gazebo</code> не потребує додаткових бібліотек і має працювати як є.</p><h3 id="основне-використання" tabindex="-1">Основне використання <a class="header-anchor" href="#основне-використання" aria-label="Permalink to &quot;Основне використання&quot;">​</a></h3><p>Скрипт за замовчуванням <code>simulation-script</code> може бути запущений як:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simulation-gazebo</span></span></code></pre></div><p>Він отримає моделі та світи з <a href="https://github.com/PX4/PX4-gazebo-models" target="_blank" rel="noreferrer">PX4 репозиторію моделей gazebo</a> у підкаталоги каталогу <code>~/.simulation-gazebo</code> при першому запуску (або точніше, якщо ця директорія не виявлена). Екземпляр <em>gz-server</em> буде запущено з використанням світу за замовчуванням &quot;сіра рівнина&quot;.</p><p>Система збірки автоматично не оновлюватиме локальну копію, якщо виявлено директорію <code>.simulation-gazebo</code>, але ви можете змусити її оновитися до останніх моделей та рухомих засобів передавши скрипту прапорець <code>overwrite</code>. В результаті команда виглядатиме приблизно так:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simulation-gazebo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --overwrite</span></span></code></pre></div><p>Ви можете під&#39;єднати рухомий засіб з підтримкою PX4 до екземпляра <em>gz-server</em> використовуючи кілька підходів:</p><ul><li><p>Запустіть PX4 використовуючи <code>PX4_GZ_STANDALONE=1 make px4_sitl gz_&lt;vehicle&gt;</code> в новому терміналі й побачите як засіб з&#39;являється у Gazebo.</p></li><li><p>Gazebo також має власний вбудований &quot;відтворювач ресурсів&quot;. Він може бути викликаний натисканням на три крапки у верхньому правому куті графічного інтерфейсу Gazebo. Там введіть &quot;resource spawner&quot; та у &quot;Fuel resources&quot; додайте власника &quot;px4&quot;. Ви можете перетягнути будь-яку PX4 модель у вашу симуляцію.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Ці моделі взяті з вебсервера, який називається <a href="https://app.gazebosim.org/dashboard" target="_blank" rel="noreferrer">Gazebo Fuel</a>, що по суті діє як онлайн база всіх світів та типів моделей, які можуть бути запущені у Gazebo.</p></div></li></ul><p>:::</p><p>Після перетягування рухомого засобу за вашим вибором в Gazebo запустіть PX4 SITL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PX4_SYS_AUTOSTART</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">airframe-number-of-choic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_GZ_MODEL_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vehicle-of-choic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ./build/px4_sitl_default/bin/px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span></span></code></pre></div><p>Що з&#39;єднає PX4 SITL із запущеним екземпляром Gazebo.</p><p>Весь наявний функціонал та гнучкість PX4 приданий та працює безпосередньо в екземплярі Gazebo.</p><h3 id="аргументи-командного-рядка" tabindex="-1">Аргументи командного рядка <a class="header-anchor" href="#аргументи-командного-рядка" aria-label="Permalink to &quot;Аргументи командного рядка&quot;">​</a></h3><p>Скрипту <code>simulation-gazebo</code> можна передати наступні аргументи:</p><ul><li><p><code>--world</code> Рядкова змінна яка позначає файл sdf що запускає світ симуляції. Аргумент за замовчуванням - &quot;default&quot;, який посилається на світ за замовчуванням.</p></li><li><p><code>--gz_partition</code> Рядкова змінна яка встановлює розділ gazebo в якому запускатись (додаткова інформація <a href="https://gazebosim.org/api/transport/13/envvars.html" target="_blank" rel="noreferrer">тут</a>)</p></li><li><p><code>--gz_ip</code> Рядкова змінна, яка встановлює IP адресу вихідного мережевого інтерфейсу (більше інформації <a href="https://gazebosim.org/api/transport/13/envvars.html" target="_blank" rel="noreferrer">тут</a>)</p></li><li><p><code>--interactive</code> Логічна змінна яка вимагає можливості запуску коду в інтерактивному режимі, дозволяючи користувацькі шляхи для <code>--model_download_source</code>. Якщо це не вказано, <code>--model_download_source</code> буде завантажувати тільки з Github репозиторію за замовчуванням.</p></li><li><p><code>--model_download_source</code> Рядкова змінна, яка встановлює шлях до директорії звідки будуть імпортуватися моделі. На цей момент це може бути лише локальний файловий каталог або http адреса. Джерело має закінчуватися файлом zip архіву моделі (наприклад: <a href="https://path/to/simulation/models/models.zip" target="_blank" rel="noreferrer">https://path/to/simulation/models/models.zip</a>).</p></li><li><p><code>--model_store</code> Рядкова змінна яка встановлює шлях до директорії зберігання моделі. Тут буде розміщений zip-файл, вказаний у <code>model_download_source</code>.</p></li><li><p><code>--overwrite</code> Логічна змінна, яка вказує, що у <code>.simulation-gazebo</code> слід оновити дані світів та рухомих засобів з репозиторію моделей gazebo.</p></li><li><p><code>--dryrun</code> Логічна змінна, яку можна вказати під час запуску тестів. Вона не надасть жодної взаємодії, і не запустить екземпляр gz-server.</p></li></ul><p>Жоден із цих аргументів не є необхідним для роботи <code>simulation-gazebo</code>. Вони необхідні, коли ви хочете завантажити власні моделі, інші світи або хочете запустити Gazebo і PX4 на окремих комп&#39;ютерах.</p><h2 id="приклад-запуск-на-одному-комп-ютері-з-кількома-терміналами" tabindex="-1">Приклад: Запуск на одному комп&#39;ютері з кількома терміналами <a class="header-anchor" href="#приклад-запуск-на-одному-комп-ютері-з-кількома-терміналами" aria-label="Permalink to &quot;Приклад: Запуск на одному комп&#39;ютері з кількома терміналами&quot;">​</a></h2><p>Цей приклад пояснює, як ви можете запустити автономний режим PX4 за допомогою двох терміналів на одному комп&#39;ютері.</p><ol><li><p>В одному терміналі запустіть</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PX4_GZ_STANDALONE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_SYS_AUTOSTART</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_SIM_MODEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gz_x500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_GZ_WORLD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">windy</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ./build/px4_sitl_default/bin/px4</span></span></code></pre></div></li><li><p>У вікні другого терміналу запустіть:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/simulation-gazebo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> windy</span></span></code></pre></div></li></ol><p>Не потрібно передавати додаткових параметрів скрипту simulation-gazebo щоб цей приклад працював, оскільки усі вузли Gazebo виконуються на одному комп&#39;ютері. Дивіться приклад складнішого сценарію з різними комп&#39;ютерами нижче.</p><h2 id="приклад-запуск-на-декількох-комп-ютерах" tabindex="-1">Приклад: Запуск на декількох комп&#39;ютерах <a class="header-anchor" href="#приклад-запуск-на-декількох-комп-ютерах" aria-label="Permalink to &quot;Приклад: Запуск на декількох комп&#39;ютерах&quot;">​</a></h2><p>Наступний приклад покаже як можна створити розподілену систему, що виконує PX4 на одному комп&#39;ютері в мережі (що називається &quot;PX4-host&quot;) та Gazebo на іншому (що називається &quot;Gazebo-host&quot;). Це призведе до того, що два вузли Gazebo будуть працювати на двох різних комп&#39;ютерах в одній мережі та спілкуватися з використанням бібліотеки <code>gz-transport</code>.</p><p>Спочатку ми повинні зрозуміти, яку IP-адресу ми можемо використовувати для відправлення повідомлень на обох комп&#39;ютерах.</p><p>Запустіть наступні команди на PX4-host:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iproute2</span></span></code></pre></div><p>Потім введіть:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span></span></code></pre></div><p>Якщо ви підключені до мережі через WiFi, то потрібна адреса зазвичай буде мати назву щось на зразок &quot;wlp12345&quot;. Запишіть адресу IPv4 для цього інтерфейсу відмітивши числа, вказані поруч з <code>inet</code>. Це має бути чотири числа, розділені крапками, за якими йде скісна риска та інше число. Правильна IPv4 адреса наприклад буде: <code>192.168.24.89/24</code>.</p><p>Вам потрібно лише перші чотири числа. Тому в цьому прикладі IP-адреса PX4-host буде: &quot;192.168.24.89&quot;. Зверніть увагу, якщо ви підключені через Ethernet, мережевий інтерфейс може починатися з <code>eth</code> або <code>en</code>, однак це не стандартизовано.</p><p>Повторіть ту саму процедуру на Gazebo-host та занотуйте другу адресу IPv4. Для цього прикладу ми візьмемо &quot;192.168.24.107&quot;.</p><p>Тепер ми можемо почати налаштовування обох комп&#39;ютерів. Спочатку налаштуємо PX4-host:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GZ_PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">relay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GZ_RELAY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168.24.107</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GZ_IP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168.24.89</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_GZ_STANDALONE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_SYS_AUTOSTART</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_SIM_MODEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gz_x500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_GZ_WORLD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">baylands</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ./build/px4_sitl_default/bin/px4</span></span></code></pre></div><p>Опис змінних середовища:</p><ul><li><code>GZ_PARTITION</code> декларує ім&#39;я розділу в якому два вузли gazebo будуть запущені. Він <strong>має</strong> бути тим самим для всіх під&#39;єднаних вузлів.</li><li><code>GZ_RELAY</code> вказує на цільову IP-адресу на іншому комп&#39;ютері (в цьому випадку - Gazebo-host). Ця змінна середовища необхідна для під&#39;єднання двох вузлів один до одного. Зверніть увагу, що це з&#39;єднання двостороннє, тому <code>GZ_RELAY</code> потрібно налаштувати тільки на один комп&#39;ютер.</li><li><code>GZ_IP</code> каже поточному комп&#39;ютеру який мережевий інтерфейс використовувати для відправлення повідомлень. Це потрібно при оголошенні рубрик або сервісів.</li></ul><p>Тепер ми можемо налаштувати Gazebo-host. Зверніть увагу, що фактичний порядок налаштування (спочатку PX4-host або спочатку Gazebo-host first) не важливий. Обидва будуть постійно шукати інші вузли Gazebo, поки вони не знайдуть одне одного. На Gazebo-host запустіть в терміналі:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/simulation-gazebo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --gz_partition</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> relay</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --gz_ip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.24.107</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> baylands</span></span></code></pre></div><p>Тут ми передаємо ті ж змінні середовища як аргументи. Зверніть увагу, що значення <code>--world</code> повинні бути однаковими для того, щоб мати можливість під&#39;єднатися. Якщо ви випадково встановили &quot;baylands&quot; на одному комп&#39;ютері та скажемо &quot;default&quot; на іншому, тоді два вузли не зможуть під&#39;єднатися.</p><p>Якщо все спрацювало правильно, тоді два комп&#39;ютери повинні бути з&#39;єднані й ви зможете запустити свій засіб у командному рядку на PX4-host.</p><p>Крім того, ви можете також налаштувати QGC і запускати свій рухомий засіб таким чином. На додаток можна також під&#39;єднати кілька PX4-host до одного Gazebo-host встановивши прапорець &quot;-i&quot;, як показано на сторінці [симуляції декількох засобів](. multi_vehicle_simulation.md). Для отримання додаткової інформації що стосується змінних середовища, ви також можете подивитися на <a href="https://gazebosim.org/api/transport/12/envvars.html" target="_blank" rel="noreferrer">документацію gz-transport</a>.</p><p>З&#39;єднання через VPN (а отже кількох мереж) також можливо, але на цей час не задокументовано.</p><h2 id="робочии-процес" tabindex="-1">Робочий процес <a class="header-anchor" href="#робочии-процес" aria-label="Permalink to &quot;Робочий процес&quot;">​</a></h2><p>Коли гілка вихідного коду об&#39;єднується з головною (це може бути додавання або видалення моделі, або щось на зразок зміни параметра), усі моделі, які отримали будь-які зміни будуть автоматично оновлені та завантажені в обліковий запис PX4 на <a href="https://app.gazebosim.org/PX4" target="_blank" rel="noreferrer">Gazebo Fuel</a>. Крім того, є процес, який можна використовувати для перевірки правильності будь-якого наданого файлу sdf.</p>',51),l=[o];function h(p,n,d,r,k,g){return i(),a("div",null,l)}const u=s(t,[["render",h]]);export{b as __pageData,u as default};
