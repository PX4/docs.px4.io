import{_ as n,a as h}from"./chunks/qgc_setup_summary_airframe_firmware.kT3azj50.js";import{_ as p}from"./chunks/qgc_goto.CCBc_PDF.js";import{_ as d,E as o,c,J as i,w as e,ab as t,o as r,m as a}from"./chunks/framework.CUflZczI.js";const w=JSON.parse('{"title":"Збірка програмного забезпечення PX4","description":"","frontmatter":{},"headers":[],"relativePath":"uk/dev_setup/building_px4.md","filePath":"uk/dev_setup/building_px4.md"}'),k={name:"uk/dev_setup/building_px4.md"},g=t('<h1 id="збірка-програмного-забезпечення-px4" tabindex="-1">Збірка програмного забезпечення PX4 <a class="header-anchor" href="#збірка-програмного-забезпечення-px4" aria-label="Permalink to &quot;Збірка програмного забезпечення PX4&quot;">​</a></h1><p>Збірку прошивки PX4 для цільових апаратних платформ та симуляції можна здійснити з вихідного коду в консолі або в IDE.</p><p>Вам потрібно зібрати PX4 для того, щоб використовувати <a href="./../simulation/README.html">симулятори</a>, або якщо ви хочете модифікувати PX4 і створити свою збірку. Якщо ви просто хочете спробувати PX4 на реальному обладнанні, тоді <a href="./../config/firmware.html">завантажте попередньо зібрані бінарні файли</a> за допомогою QGroundControl (не потрібно виконувати ці інструкції).</p><p>Перед виконанням цих інструкцій вам слід встановити <a href="./../dev_setup/dev_env.html">Інструментарій розробника</a> для вашої операційної системи та цільової апаратної платформи. Якщо у вас виникли проблеми після виконання цих кроків, див. розділ <a href="#troubleshooting">Усунення проблем</a> нижче. :::</p><h2 id="завантаження-вихідного-коду-px4" tabindex="-1">Завантаження вихідного коду PX4 <a class="header-anchor" href="#завантаження-вихідного-коду-px4" aria-label="Permalink to &quot;Завантаження вихідного коду PX4&quot;">​</a></h2><p>Вихідний код PX4 зберігається на Github в репозиторії <a href="https://github.com/PX4/PX4-Autopilot" target="_blank" rel="noreferrer">PX4/PX4-Autopilot</a>.</p><p>To get the <em>very latest</em> (<code>main</code> branch) version onto your computer, enter the following command into a terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><p>Note that you may already have done this when installing the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a></p><div class="info custom-block"><p class="custom-block-title">This is all you need to do in order to get the latest code. За потреби ви також можете <a href="./../contribute/git_examples.html#get-a-specific-release">отримати вихідний код певного релізу</a>. <a href="./../contribute/git_examples.html">Приклади GIT</a> пропонують значно більше інформації про роботу з релізами та внеску у PX4.</p></div><h2 id="first-build-using-a-simulator" tabindex="-1">First Build (Using a Simulator) <a class="header-anchor" href="#first-build-using-a-simulator" aria-label="Permalink to &quot;First Build (Using a Simulator)&quot;">​</a></h2><p>Спочатку ми зберемо цільову платформу симуляції з використанням консольного середовища. Це дозволяє нам перевірити налаштування системи перед її запуском на реальному обладнанні та IDE.</p><p>Navigate into the <strong>PX4-Autopilot</strong> directory. Depending on your operating system you will have installed either <a href="./../sim_gazebo_gz/">Gazebo SITL</a> or <a href="./../sim_gazebo_classic/">Gazebo Classic SITL</a> (if you don&#39;t know which you can try both).</p>',13),u=a("div",{class:"language-sh vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"sh"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gz_x500")])])])],-1),m=a("div",{class:"language-sh vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"sh"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gazebo-classic")])])])],-1),F=t('<p>This will bring up the PX4 console:</p><p><img src="'+n+'" alt="PX4 Console"></p><p>:::note Можливо, ще знадобиться запустити <em>QGroundControl</em> перед тим, як рушити далі, оскільки стандартне налаштування PX4 вимагає наявність звʼязку з наземним оператором перед злетом. Його можна завантажити <a href="https://docs.qgroundcontrol.com/master/en/getting_started/download_and_install.html" target="_blank" rel="noreferrer">звідси</a>. :::</p><p>The drone can be flown by typing the following command (as shown in the console above):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commander</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> takeoff</span></span></code></pre></div><p>The vehicle will take off and you&#39;ll see this in the simulator UI:</p>',6),_=t('<p>Дрон можна приземлити, набравши <code>commander land</code>. Зупинити симуляцію можна через клавіатурну комбінацію <strong>CTRL+C</strong> (або через введення <code>shutdown</code>).</p><p>Симуляція польоту з управлінням з боку наземного оператора є ближчою до реального запуску дрону. В польоті (режимі зльоту) натисніть на місце розташування на карті та пересуньте (увімкніть) повзунковий перемикач. Це перемістить літальний засіб.</p><p><img src="'+p+`" alt="QGroundControl GoTo"></p><h2 id="плати-на-основі-nuttx-pixhawk" tabindex="-1">Плати на основі NuttX / Pixhawk <a class="header-anchor" href="#плати-на-основі-nuttx-pixhawk" aria-label="Permalink to &quot;Плати на основі NuttX / Pixhawk&quot;">​</a></h2><h3 id="збірка-під-nuttx" tabindex="-1">Збірка під NuttX <a class="header-anchor" href="#збірка-під-nuttx" aria-label="Permalink to &quot;Збірка під NuttX&quot;">​</a></h3><p>Щоб зібрати прошивку для плат на основі NuttX або Pixhawk, перейдіть в директорію <strong>PX4-Autopilot</strong> та запустіть <code>make</code> з відповідними параметрами для вашої плати.</p><p>Наприклад, збірка для плат на основі <a href="./../flight_controller/pixhawk4.html">Pixhawk 4</a> запускається наступною командою:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span></span></code></pre></div><p>Успішне виконання виведе в консолі приблизно наступне в кінці:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> written</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[954/954] Creating /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default/px4_fmu-v4_default.px4</span></span></code></pre></div><p>Перша частина параметру збірки <code>px4_fmu-v4</code> вказує на програмне та апаратне забезпечення цільового контролера польоту. Суфікс, у цьому випадку - <code>_default</code>, вказує на <em>конфігурацію прошивки</em>, наприклад, підтримку або відсутність певних функцій.</p><p>:::note Суфікс <code>_default</code> вказувати не обовʼязково. Наприклад, вказування <code>px4_fmu-v5</code> чи <code>px4_fmu-v5_default</code> приведе до збірки тієї самої прошивки. :::</p><p>У наведеному нижче списку показано команди збірки для плат <a href="./../flight_controller/autopilot_pixhawk_standard.html">Pixhawk standard</a>:</p><ul><li><a href="./../flight_controller/pixhawk6x-rt.html">Holybro Pixhawk 6X-RT (FMUv6X)</a>: <code>make px4_fmu-v6xrt_default</code></li><li><a href="./../flight_controller/pixhawk6x.html">Holybro Pixhawk 6X (FMUv6X)</a>: <code>make px4_fmu-v6x_default</code></li><li><a href="./../flight_controller/pixhawk6c.html">Holybro Pixhawk 6C (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></li><li><a href="./../flight_controller/pixhawk6c_mini.html">Holybro Pixhawk 6C Mini (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></li><li><a href="./../flight_controller/holybro_pix32_v6.html">Holybro Pix32 v6 (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></li><li><a href="./../flight_controller/pixhawk5x.html">Holybro Pixhawk 5X (FMUv5X)</a>: <code>make px4_fmu-v5x_default</code></li><li><a href="./../flight_controller/pixhawk4.html">Pixhawk 4 (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/pixhawk4_mini.html">Pixhawk 4 Mini (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/cuav_v5_plus.html">CUAV V5+ (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/cuav_v5_nano.html">CUAV V5 nano (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/pixracer.html">Pixracer (FMUv4)</a>: <code>make px4_fmu-v4_default</code></li><li><a href="./../flight_controller/pixhawk3_pro.html">Pixhawk 3 Pro</a>: <code>make px4_fmu-v4pro_default</code></li><li><a href="./../flight_controller/pixhawk_mini.html">Pixhawk Mini</a>: <code>make px4_fmu-v3_default</code></li><li><a href="./../flight_controller/pixhawk-2.html">Pixhawk 2 (Cube Black) (FMUv3)</a>: <code>make px4_fmu-v3_default</code></li><li><a href="./../flight_controller/mro_pixhawk.html">mRo Pixhawk (FMUv3)</a>: <code>make px4_fmu-v3_default</code> (підтримка до 2MB флеш-памʼяті)</li><li><a href="./../flight_controller/holybro_pix32.html">Holybro pix32 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li><li><a href="./../flight_controller/pixfalcon.html">Pixfalcon (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li><li><a href="./../flight_controller/dropix.html">Dropix (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li><li><a href="./../flight_controller/pixhawk.html">Pixhawk 1 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Для збірки прошивки для цієї плати вам <strong>необхідно</strong> використовувати саме ту версію GCC, яка підтримується (наприклад, ту саму, що використовується у <a href="./../test_and_ci/docker.html">CI/docker</a>), або вилучити ці модулі зі збірки. Збірка прошивки за допомогою компілятора GCC, який не підтримується може зазнати невдачі, оскільки обсяг памʼяті, який займає PX4, близький до ліміту пам&#39;яті плати в 1 МБ.</p></div><ul><li>Pixhawk 1 з 2 Мб флеш-памʼяті: <code> make px4_fmu-v3_default</code></li></ul><p>Команди збірки для польотних контролерів з NuttX на основі плат відмінних від Pixhawk (та всіх інших плат) надаються в документації для окремих <a href="./../flight_controller/README.html">плат польотних контролерів</a>.</p><h3 id="завантаження-прошивки-прошивка-плати" tabindex="-1">Завантаження прошивки (Прошивка плати) <a class="header-anchor" href="#завантаження-прошивки-прошивка-плати" aria-label="Permalink to &quot;Завантаження прошивки (Прошивка плати)&quot;">​</a></h3><p>Додайте <code>upload</code> до команд make для завантаження скомпільованого двійкового файлу в апаратне забезпечення автопілоту через USB. Наприклад</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v4_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><p>Успішне виконання виведе в консолі приблизно наступне:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Erase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [======================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Програма:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [==================100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Перевірка</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [================================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Перезавантаження</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[100%] Built target upload</span></span></code></pre></div><h2 id="інші-плати" tabindex="-1">Інші плати <a class="header-anchor" href="#інші-плати" aria-label="Permalink to &quot;Інші плати&quot;">​</a></h2><p>Команди збірки для інших плат надані на <a href="./../flight_controller/README.html">сторінках плат відповідних польотних контролерів</a> (зазвичай під заголовком <em>Збірка прошивки</em>).</p><p>Список усіх конфігурацій й цілей можна викликати командою:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div><h2 id="компіляція-в-графічному-ide" tabindex="-1">Компіляція в графічному IDE <a class="header-anchor" href="#компіляція-в-графічному-ide" aria-label="Permalink to &quot;Компіляція в графічному IDE&quot;">​</a></h2><p><a href="./../dev_setup/vscode.html">VSCode</a> офіційно підтримується (і рекомендується) в якості IDE для PX4-розробки. VSCode просто налаштувати та може використатися для компіляції PX4 як для симуляцій так і для апаратних середовищ.</p><h2 id="усунення-проблем" tabindex="-1">Усунення проблем <a class="header-anchor" href="#усунення-проблем" aria-label="Permalink to &quot;Усунення проблем&quot;">​</a></h2><h3 id="загальні-помилки-збірки" tabindex="-1">Загальні помилки збірки <a class="header-anchor" href="#загальні-помилки-збірки" aria-label="Permalink to &quot;Загальні помилки збірки&quot;">​</a></h3><p>Більшість проблем при збірці спричинені залежними гілками коду які не збігаються або не до кінця очищеним середовищем збірки. Усунути такі помилки можна через оновлення цих гілок або командою <code>distclean</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> distclean</span></span></code></pre></div><h3 id="прошивка-переповнена-на-xxx-баит" tabindex="-1">Прошивка переповнена на XXX байт <a class="header-anchor" href="#прошивка-переповнена-на-xxx-баит" aria-label="Permalink to &quot;Прошивка переповнена на XXX байт&quot;">​</a></h3><p>Помилка <code>region &#39;flash&#39; overflowed by XXXX bytes</code> вказує на те, що обсяг прошивки перевищує обсяг доступної памʼяті для цільової платформи. Така помилка найчастіше виникає при виконанні команди <code>make px4_fmu-v2_default</code>, де обсяг памʼяті обмежений 1 МБ.</p><p>При збірці <em>vanilla</em> майстер-гілки (тобто &quot;чистої&quot; майстер-гілки), найімовірнішою причиною виникнення помилки є використання непідтримуваної версії GCC. У такому випадку встановіть версію, зазначену в <a href="./../dev_setup/dev_env.html">Інструментарій розробника</a>.</p><p>При збірці своєї гілки є ймовірність, що ви збільшили розмір прошивки вище ліміту 1 МБ. В цьому випадку вам доведеться видалити всі не потрібні при цій збірці модулі та драйвера.</p><h3 id="macos-помилка-надто-багато-відкритих-фаилів" tabindex="-1">macOS: Помилка &quot;надто багато відкритих файлів&quot; <a class="header-anchor" href="#macos-помилка-надто-багато-відкритих-фаилів" aria-label="Permalink to &quot;macOS: Помилка &quot;надто багато відкритих файлів&quot;&quot;">​</a></h3><p>MacOS дозволяє тримати за замовчуванням відкритими не більше 256 файлів в усіх запущених процесах. При збірці PX4 відкривається велика кількість файлів, тож може статися перевищення цього ліміту.</p><p>У ланцюжку збірки (build toolchain) зʼявиться повідомлення <code>Надто багато відкритих файлів</code>, як показано нижче:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/Cellar/gcc-arm-none-eabi/20171218/bin/../lib/gcc/arm-none-eabi/7.2.1/../../../../arm-none-eabi/bin/ld:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NuttX/nuttx/fs/libfs.a:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Too</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> many</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span></span></code></pre></div><p>Рішення полягає в збільшенні максимально дозволеної кількості відкритих файлів (наприклад, до 300). В macOS це можна зробити в <em>Terminal</em> для кожного сеансу:</p><ul><li><p>Запустіть цей скрипт <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/mac_set_ulimit.sh" target="_blank" rel="noreferrer">Tools/mac_set_ulimit.sh</a> або</p></li><li><p>Введіть наступну команду:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span></code></pre></div></li></ul><h3 id="macos-catalina-складнощі-при-використанні-cmake" tabindex="-1">macOS Catalina: Складнощі при використанні cmake <a class="header-anchor" href="#macos-catalina-складнощі-при-використанні-cmake" aria-label="Permalink to &quot;macOS Catalina: Складнощі при використанні cmake&quot;">​</a></h3><p>При роботі в macOS Catalina 10.15.1 можуть виникнути складнощі при збірці симулятору за допомогою <em>cmake</em>. Якщо у вас виникли проблеми на цій платформі, спробуйте виконати наступну команду в терміналі:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcode-select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/include/</span></span></code></pre></div><h3 id="ubuntu-18-04-помилки-компіляціі-пов-язані-з-arm-none-eabi-gcc" tabindex="-1">Ubuntu 18.04: Помилки компіляції пов&#39;язані з arm_none_eabi_gcc <a class="header-anchor" href="#ubuntu-18-04-помилки-компіляціі-пов-язані-з-arm-none-eabi-gcc" aria-label="Permalink to &quot;Ubuntu 18.04: Помилки компіляції пов&#39;язані з arm_none_eabi_gcc&quot;">​</a></h3><p>Проблеми збірки пов&#39;язані з <code>arm_none_eabi_gcc</code> можуть бути спричинені некоректною установкою інструментарію g++. Ви можете перевірити чи це так, перевіряючи чи є відсутні залежності:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>Приклад виводу bash з відсутніми залежностями:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span></span></code></pre></div><p>Це можна виправити видаливши та <a href="https://askubuntu.com/questions/1243252/how-to-install-arm-none-eabi-gdb-on-ubuntu-20-04-lts-focal-fossa" target="_blank" rel="noreferrer">перевстановивши компілятор</a>.</p><h3 id="ubuntu-18-04-visual-studio-code-не-може-спостерігати-за-змінами-в-коді-у-великому-робочому-середовищі" tabindex="-1">Ubuntu 18.04: &quot;Visual Studio Code не може спостерігати за змінами в коді у великому робочому середовищі <a class="header-anchor" href="#ubuntu-18-04-visual-studio-code-не-може-спостерігати-за-змінами-в-коді-у-великому-робочому-середовищі" aria-label="Permalink to &quot;Ubuntu 18.04: &quot;Visual Studio Code не може спостерігати за змінами в коді у великому робочому середовищі&quot;">​</a></h3><p>Дивіться <a href="./../dev_setup/vscode.html#troubleshooting">Visual Studio Code IDE (VSCode) &gt; Усунення проблем</a>.</p><h3 id="не-вдалося-імпортувати-пакети-python" tabindex="-1">Не вдалося імпортувати пакети Python <a class="header-anchor" href="#не-вдалося-імпортувати-пакети-python" aria-label="Permalink to &quot;Не вдалося імпортувати пакети Python&quot;">​</a></h3><p>Помилки &quot;Failed to import&quot; при виконанні команди <code>make px4_sitl jmavsim</code> вказує, що деякі пакети Python не встановлені (де очікується).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> named</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jinja2&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> may</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> need</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> using:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span></span></code></pre></div><p>Якщо ці залежності вже встановлені, це може бути тому, що на комп&#39;ютері є декілька версій Python (наприклад Python 2.7.16, Python 3.8.3) і модуль не існує в версії, яка використовується в інструментарії збірки.</p><p>Ви зможете виправити це явним чином встановивши залежності як показано:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyserial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numpy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pandas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyyaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyros-genmsg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packaging</span></span></code></pre></div><h2 id="цілі-збірки-px4" tabindex="-1">Цілі збірки PX4 <a class="header-anchor" href="#цілі-збірки-px4" aria-label="Permalink to &quot;Цілі збірки PX4&quot;">​</a></h2><p>Попередні розділи показали як ви можете запустити <em>make</em>, щоб зібрати ряд різних цілей, запустити симулятори, використати IDE і т. ін. Цей розділ показує як параметри <em>make</em> побудовані та як знайти доступний вибір варіантів.</p><p>Повний синтаксис для виклику <em>make</em> з певними налаштуваннями та файлом ініціалізації:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [VENDOR_][MODEL][_VARIANT] [VIEWER_MODEL_DEBUGGER_WORLD]</span></span></code></pre></div><p><strong>VENDOR_MODEL_VARIANT</strong>: (також відома як <code>CONFIGURATION_TARGET</code>)</p><ul><li><strong>VENDOR:</strong> Виробник плати: <code>px4</code>, <code>aerotenna</code>, <code>airmind</code>, <code>atlflight</code>, <code>auav</code>, <code>beaglebone</code>, <code>intel</code>, <code>nxp</code> тощо. Назва виробника для плат серій Pixhawk - <code>px4</code>.</li><li><strong>MODEL:</strong> <em>Модель плати</em>: <code>sitl</code>, <code>fmu-v2</code>, <code>fmu-v3</code>, <code>fmu-v4</code>, <code>fmu-v5</code>, <code>navio2</code> тощо.</li><li><strong>VARIANT:</strong> Вказує на певні налаштування: наприклад <code>bootloader</code>, <code>cyphal</code>, що містять компоненти, яких не має в <code>default</code> налаштуванні. Найчастіше це саме <code>default</code>, тому може бути опущене.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ви можете отримати список <em>всіх</em> доступних параметрів <code>CONFIGURATION_TARGET</code> використавши наступну команду:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div></div><p><strong>VIEWER_MODEL_DEBUGGER_WORLD:</strong></p><ul><li><strong>VIEWER:</strong> Це симуляція (&quot;оглядач&quot;) яку потрібно запустити та з&#39;єднатися з: <code>gz</code>, <code>gazebo</code>, <code>jmavsim</code>, <code>none</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>none</code> можна використовувати для запуску PX4 так очікування симуляції (jmavsim, Gazebo, Gazebo Classic або іншої симуляції). Наприклад <code>make px4_sitl none_iris</code> запустить PX4 без симуляції (але з планером iris).</p></div><ul><li><strong>MODEL:</strong> Модель <em>засобу</em> (наприклад <code>iris</code> (<em>default</em>), <code>rover</code>, <code>tailsitter</code> тощо), яка буде завантажена симуляцією. Змінна середовища <code>PX4_SIM_MODEL</code> буде встановлена в обрану модель, яка потім використовується в <a href="./../simulation/README.html#startup-scripts">скрипті запуску</a> для вибору відповідних параметрів.</li><li><strong>DEBUGGER:</strong> Налагоджувач який буде використано: <code>none</code> (<em>default</em>), <code>ide</code>, <code>gdb</code>, <code>lldb</code>, <code>ddd</code>, <code>valgrind</code>, <code>callgrind</code>. Для додаткової інформації дивіться <a href="./../debug/simulation_debugging.html">Налагодження симуляції</a>.</li><li><strong>WORLD:</strong> (тільки для Gazebo Classic). Встановити світ (<a href="https://github.com/PX4/PX4-SITL_gazebo-classic/tree/main/worlds" target="_blank" rel="noreferrer">PX4-Autopilot/Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds</a>), який завантажити. За замовчуванням це <a href="https://github.com/PX4/PX4-SITL_gazebo-classic/blob/main/worlds/empty.world" target="_blank" rel="noreferrer">empty.world</a>. Для отримання додаткової інформації див. <a href="./../sim_gazebo_classic/README.html#loading-a-specific-world">Gazebo Classic &gt; Завантаження певного світу</a>.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ви можете отримати список <em>всіх</em> доступних параметрів <code>VIEWER_MODEL_DEBUGGER_WORLD</code> використавши наступну команду:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_vmd_make_targets</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>Більшість значень у <code>CONFIGURATION_TARGET</code> та <code>VIEWER_MODEL_DEBUGGER</code> мають значення за замовчуванням і тому є необов&#39;язковими. Наприклад, <code>gazebo-classic</code> еквівалентна <code>gazebo-classic_iris</code> або <code>gazebo-classic_iris_none</code>.</li><li>Ви можете використати три підкреслювання, якщо хочете вказати значення за замовчуванням між двома іншими налаштуваннями. Наприклад, <code>gazebo-classic___gdb</code> еквівалентно <code>gazebo-classic_iris_gdb</code>.</li><li>Ви можете використати значення <code>none</code> для <code>VIEWER_MODEL_DEBUGGER</code> для запуску PX4 та очікування симуляції. Наприклад запустити PX4 з <code>make px4_sitl_default none</code> та jMAVSim за допомогою <code>./Tools/simulation/jmavsim/jmavsim_run.sh -l</code>.</li></ul></div><p>Параметри <code>VENDOR_MODEL_VARIANT</code> відображаються на певні файли налаштувань <em>px4board</em> у вихідному коду PX4 в директорії <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/boards" target="_blank" rel="noreferrer">/boards</a>. Зокрема <code>VENDOR_MODEL_VARIANT</code> відповідає файлу <strong>boards/VENDOR/MODEL/VARIANT.px4board</strong> (наприклад <code>px4_fmu-v5_default</code> відповідає <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/boards/px4/fmu-v5/default.px4board" target="_blank" rel="noreferrer">boards/px4/fmu-v5/default.px4board</a>).</p><p>Додаткові цілі збірки обговорюються в відповідних розділах:</p><ul><li><code>bloaty_compare_master</code>: <a href="./../debug/binary_size_profiling.html">Профілювання розміру бінарного файлу</a></li><li>...</li></ul><h2 id="версія-прошивки-та-git-теги" tabindex="-1">Версія прошивки та git теги <a class="header-anchor" href="#версія-прошивки-та-git-теги" aria-label="Permalink to &quot;Версія прошивки та git теги&quot;">​</a></h2><p><em>Версія прошивки</em> та <em>Користувацька версія прошивки</em> публікується за допомогою повідомлення MAVLink <a href="https://mavlink.io/en/messages/common.html#AUTOPILOT_VERSION" target="_blank" rel="noreferrer">AUTOPILOT_VERSION</a> та показується в панелі планера <em>QGroundControl</em> <strong>Налаштування &gt; Огляд</strong>:</p><p><img src="`+h+'" alt="Інформація прошивки"></p><p>Вони беруться під час збірки з поточного <em>тегу git</em> вашого репозиторію. Тег git повинно бути відформатовано як <code>&lt;PX4-version&gt;-&lt;vendor-version&gt;</code> (наприклад тег у малюнку вище встановлений у <code>v1.8.1-2.22.1</code>).</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Якщо ви використовуєте інший формат git тегів, інформацію про версії може бути показано неналежним чином.</p></div>',80);function b(f,v,C,y,E,x){const s=o("tab"),l=o("tabs");return r(),c("div",null,[g,i(l,null,{default:e(()=>[i(s,{name:"Gazebo Start [Gazebo SITL](../sim_gazebo_gz/index.md) using the following command:"},{default:e(()=>[u]),_:1}),i(s,{name:"Gazebo-Classic Start [Gazebo SITL](../sim_gazebo_gz/index.md) using the following command:"},{default:e(()=>[m]),_:1})]),_:1}),F,i(l,null,{default:e(()=>[i(s,{name:"Gazebo ![Gazebo UI with vehicle taking off](../../assets/toolchain/gazebo_takeoff.png)"}),i(s,{name:"Gazebo-Classic ![Gazebo Classic UI with vehicle taking off](../../assets/toolchain/gazebo_classic_takeoff.png)"})]),_:1}),_])}const T=d(k,[["render",b]]);export{w as __pageData,T as default};
