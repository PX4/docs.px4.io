import{_ as i,a as s}from"./chunks/jmavsim_windows_cygwin.CfDOigpC.js";import{_ as e,c as a,o as t,ab as n}from"./chunks/framework.CUflZczI.js";const F=JSON.parse('{"title":"Windows Development Environment (Cygwin-based)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/dev_setup/dev_env_windows_cygwin.md","filePath":"ko/dev_setup/dev_env_windows_cygwin.md"}'),l={name:"ko/dev_setup/dev_env_windows_cygwin.md"},o=n('<h1 id="windows-development-environment-cygwin-based" tabindex="-1">Windows Development Environment (Cygwin-based) <a class="header-anchor" href="#windows-development-environment-cygwin-based" aria-label="Permalink to &quot;Windows Development Environment (Cygwin-based)&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This development environment is <a href="./../advanced/community_supported_dev_env.html">community supported and maintained</a>. It may or may not work with current versions of PX4.</p><p>The toolchain was previously recommended, but does not work with PX4 v1.12 and later due to packaging issues. The <a href="./../dev_setup/dev_env_windows_wsl.html">Windows WSL2-Based Development Environment</a> should be used by preference.</p><p>See <a href="./../dev_setup/dev_env.html">Toolchain Installation</a> for information about the environments and tools supported by the core development team.</p></div><p>다음 지침은 Windows 10에서 (Cygwin 기반) PX4 개발 환경 설정 방법을 설명합니다. 이 환경은 다음을 위한 PX4를 구축하는 데 사용합니다.</p><ul><li>Pixhawk와 기타 NuttX 기반 하드웨어</li><li><a href="./../sim_jmavsim/">jMAVSim 시뮬레이션</a></li></ul><p><a id="installation"></a></p><h2 id="설치-방법" tabindex="-1">설치 방법 <a class="header-anchor" href="#설치-방법" aria-label="Permalink to &quot;설치 방법&quot;">​</a></h2><ol><li><p><a href="https://github.com/PX4/windows-toolchain/releases" target="_blank" rel="noreferrer">Github 릴리스</a> 또는 <a href="https://s3-us-west-2.amazonaws.com/px4-tools/PX4+Windows+Cygwin+Toolchain/PX4+Windows+Cygwin+Toolchain+0.9.msi" target="_blank" rel="noreferrer">Amazon S3</a>(빠른 다운로드)에서 바로 사용할 수 있는 MSI 설치 프로그램의 최신 버전을 다운로드합니다.</p></li><li><p>Run it, choose your desired installation location, let it install:</p><p><img src="'+i+`" alt="jMAVSimOnWindows"></p></li><li><p>Tick the box at the end of the installation to <em>clone the PX4 repository, build and run simulation with jMAVSim</em> (this simplifies the process to get you started).</p><div class="info custom-block"><p class="custom-block-title">If you missed this step you will need to <a href="#getting-started">clone the PX4-Autopilot repository manually</a>.</p></div></li></ol><p>:::</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>At time of writing the installer is missing some dependencies (and cannot yet be rebuilt to add them - see <a href="https://github.com/PX4/PX4-windows-toolchain/issues/31" target="_blank" rel="noreferrer">PX4-windows-toolchain#31</a>).</p><p>To add these yourself:</p><ol><li><p>도구 모음 설치 디렉터리로 이동합니다(기본값 <strong>C:\\PX4\\</strong>).</p></li><li><p>Run <strong>run-console.bat</strong> (double click) to start the linux-like Cygwin bash console</p></li><li><p>Enter the following command in the console:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kconfiglib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonschema</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> future</span></span></code></pre></div></li></ol></div><h2 id="시작하기" tabindex="-1">시작하기 <a class="header-anchor" href="#시작하기" aria-label="Permalink to &quot;시작하기&quot;">​</a></h2><p>The toolchain uses a specially configured console window (started by running the <strong>run-console.bat</strong> script) from which you can call the normal PX4 build commands:</p><ol><li><p>도구 모음 설치 디렉터리로 이동합니다(기본값 <strong>C:\\PX4\\</strong>).</p></li><li><p>Run <strong>run-console.bat</strong> (double click) to start the linux-like Cygwin bash console (you must use this console to build PX4).</p></li><li><p>Clone the PX4 PX4-Autopilot repository from within the console:</p><div class="info custom-block"><p class="custom-block-title">Skip this step if you ticked the installer option to <em>clone the PX4 repository, build and run simulation with jMAVSim</em>. Cloning only needs to be done once!</p></div></li></ol><p>:::</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clone the PX4-Autopilot repository into the home folder &amp; loads submodules in parallel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span></code></pre></div><p>You can now use the console/PX4-Autopilot repository to build PX4.</p><ol><li><p>For example, to run JMAVSim:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Navigate to PX4-Autopilot repo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Firmware</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and runs SITL simulation with jMAVSim to test the setup</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jmavsim</span></span></code></pre></div><p>The console will then display:</p><p><img src="`+s+`" alt="jMAVSimOnWindows"></p></li></ol><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>Once you have finished setting up the command-line toolchain:</p><ul><li>Install the <a href="./../dev_setup/qgc_daily_build.html">QGroundControl Daily Build</a></li><li><a href="./../dev_setup/building_px4.html">빌드 지침</a>을 계속 진행합니다.</li></ul><h2 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h2><h3 id="파일-모니터링-도구와-툴체인-속도" tabindex="-1">파일 모니터링 도구와 툴체인 속도 <a class="header-anchor" href="#파일-모니터링-도구와-툴체인-속도" aria-label="Permalink to &quot;파일 모니터링 도구와 툴체인 속도&quot;">​</a></h3><p>Antivirus and other background file monitoring tools can significantly slow down both installation of the toolchain and PX4 build times.</p><p>You may wish to halt them temporarily during builds (at your own risk).</p><h3 id="윈도우와-git-특수-사례" tabindex="-1">윈도우와 Git 특수 사례 <a class="header-anchor" href="#윈도우와-git-특수-사례" aria-label="Permalink to &quot;윈도우와 Git 특수 사례&quot;">​</a></h3><h4 id="windows-cr-lf-대-unix-lf-줄-끝" tabindex="-1">Windows CR+LF 대 Unix LF 줄 끝 <a class="header-anchor" href="#windows-cr-lf-대-unix-lf-줄-끝" aria-label="Permalink to &quot;Windows CR+LF 대 Unix LF 줄 끝&quot;">​</a></h4><p>We recommend that you force Unix style LF endings for every repository you&#39;re working with using this toolchain (and use an editor which preserves them when saving your changes - e.g. Eclipse or VS Code). Compilation of source files also works with CR+LF endings checked out locally, but there are cases in Cygwin (e.g. execution of shell scripts) that require Unix line endings (otherwise you get errors like <code>$&#39;\\r&#39;: Command not found.</code>). Luckily git can do this for you when you execute the two commands in the root directory of your repo:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.autocrlf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.eol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lf</span></span></code></pre></div><p>If you work with this toolchain on multiple repositories you can also set these two configurations globally for your machine:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>This is not recommended because it may affect any other (unrelated) git use on your Windows machine.</p><h4 id="유닉스-권한-실행-비트" tabindex="-1">유닉스 권한 실행 비트 <a class="header-anchor" href="#유닉스-권한-실행-비트" aria-label="Permalink to &quot;유닉스 권한 실행 비트&quot;">​</a></h4><p>Under Unix there&#39;s a flag in the permissions of each file that tells the OS whether or not the file is allowed to be executed. <em>git</em> under Cygwin supports and cares about that bit (even though the Windows NTFS file system does not use it). This often results in <em>git</em> finding &quot;false-positive&quot; differences in permissions. The resulting diff might look like this:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100644</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100755</span></span></code></pre></div><p>We recommend globally disabling the permission check on Windows to avoid the problem:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 머신에 대해 전역적으로 실행 비트 검사를 비활성화합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.fileMode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><p>For existing repositories that have this problem caused by a local configuration, additionally:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># remove the local option for this repository to apply the global one</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.filemode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># remove the local option for all submodules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foreach</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.filemode</span></span></code></pre></div>`,37),h=[o];function p(r,d,c,k,u,g){return t(),a("div",null,h)}const b=e(l,[["render",p]]);export{F as __pageData,b as default};
