import{_ as s,c as a,o as i,ab as e}from"./chunks/framework.CUflZczI.js";const m=JSON.parse('{"title":"UlogStreamAck (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/msg_docs/UlogStreamAck.md","filePath":"ko/msg_docs/UlogStreamAck.md"}'),t={name:"ko/msg_docs/UlogStreamAck.md"},n=e(`<h1 id="ulogstreamack-uorb-message" tabindex="-1">UlogStreamAck (UORB message) <a class="header-anchor" href="#ulogstreamack-uorb-message" aria-label="Permalink to &quot;UlogStreamAck (UORB message)&quot;">â€‹</a></h1><p>Ack a previously sent ulog_stream message that had the NEED_ACK flag set</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/UlogStreamAck.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Ack a previously sent ulog_stream message that had</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># the NEED_ACK flag set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp        # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int32 ACK_TIMEOUT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      # timeout waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> an ack until we retry to send the message [ms]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int32 ACK_MAX_TRIES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    # maximum amount of tries </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)send a message, each time waiting ACK_TIMEOUT ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint16 msg_sequence</span></span></code></pre></div>`,4),l=[n];function h(p,k,r,o,c,g){return i(),a("div",null,l)}const d=s(t,[["render",h]]);export{m as __pageData,d as default};
