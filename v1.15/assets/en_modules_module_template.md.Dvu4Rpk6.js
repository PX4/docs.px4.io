import{_ as e,c as t,o as a,ab as s}from"./chunks/framework.CUflZczI.js";const k=JSON.parse('{"title":"Module Template for Full Applications","description":"","frontmatter":{},"headers":[],"relativePath":"en/modules/module_template.md","filePath":"en/modules/module_template.md"}'),i={name:"en/modules/module_template.md"},o=s(`<h1 id="module-template-for-full-applications" tabindex="-1">Module Template for Full Applications <a class="header-anchor" href="#module-template-for-full-applications" aria-label="Permalink to &quot;Module Template for Full Applications&quot;">​</a></h1><p>An application can be written to run as either a <em>task</em> (a module with its own stack and process priority) or as a <em>work queue task</em> (a module that runs on a work queue thread, sharing the stack and thread priority with other tasks on the work queue). In most cases a work queue task can be used, as this minimizes resource usage.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><a href="./../concept/architecture.html#runtime-environment">Architectural Overview &gt; Runtime Environment</a> provides more information about tasks and work queue tasks.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>All the things learned in the <a href="./../modules/hello_sky.html">First Application Tutorial</a> are relevant for writing a full application.</p></div><h2 id="work-queue-task" tabindex="-1">Work Queue Task <a class="header-anchor" href="#work-queue-task" aria-label="Permalink to &quot;Work Queue Task&quot;">​</a></h2><p>PX4-Autopilot contains a template for writing a new application (module) that runs as a <em>work queue task</em>: <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/examples/work_item" target="_blank" rel="noreferrer">src/examples/work_item</a>.</p><p>A work queue task application is just the same as an ordinary (task) application, except that it needs to specify that it is a work queue task, and schedule itself to run during initialisation.</p><p>The example shows how. In summary:</p><ol><li><p>Specify the dependency on the work queue library in the cmake definition file (<a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/examples/work_item/CMakeLists.txt" target="_blank" rel="noreferrer">CMakeLists.txt</a>):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>DEPENDS</span></span>
<span class="line"><span>   px4_work_queue</span></span></code></pre></div></li><li><p>In addition to <code>ModuleBase</code>, the task should also derive from <code>ScheduledWorkItem</code> (included from <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/common/include/px4_platform_common/px4_work_queue/ScheduledWorkItem.hpp" target="_blank" rel="noreferrer">ScheduledWorkItem.hpp</a>)</p></li><li><p>Specify the queue to add the task to in the constructor initialisation. The <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/examples/work_item/WorkItemExample.cpp#L42" target="_blank" rel="noreferrer">work_item</a> example adds itself to the <code>wq_configurations::test1</code> work queue as shown below:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkItemExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkItemExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() :</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ModuleParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ScheduledWorkItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MODULE_NAME, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wq_configurations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::test1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The available work queues (<code>wq_configurations</code>) are listed in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/common/include/px4_platform_common/px4_work_queue/WorkQueueManager.hpp#L49" target="_blank" rel="noreferrer">WorkQueueManager.hpp</a>.</p></div></li><li><p>Implement the <code>ScheduledWorkItem::Run()</code> method to perform &quot;work&quot;.</p></li><li><p>Implement the <code>task_spawn</code> method, specifying that the task is a work queue (using the <code>task_id_is_work_queue</code> id.</p></li><li><p>Schedule the work queue task using one of the scheduling methods (in the example we use <code>ScheduleOnInterval</code> from within the <code>init</code> method).</p></li></ol><h2 id="tasks" tabindex="-1">Tasks <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;Tasks&quot;">​</a></h2><p>PX4/PX4-Autopilot contains a template for writing a new application (module) that runs as a task on its own stack: <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/templates/template_module" target="_blank" rel="noreferrer">src/templates/template_module</a>.</p><p>The template demonstrates the following additional features/aspects that are required or are useful for a full application:</p><ul><li>Accessing parameters and reacting to parameter updates.</li><li>uORB subscriptions and waiting for topic updates.</li><li>Controlling the task that runs in the background via <code>start</code>/<code>stop</code>/<code>status</code>. The <code>module start [&lt;arguments&gt;]</code> command can then be directly added to the <a href="./../concept/system_startup.html">startup script</a>.</li><li>Command-line argument parsing.</li><li>Documentation: the <code>PRINT_MODULE_*</code> methods serve two purposes (the API is documented <a href="https://github.com/PX4/PX4-Autopilot/blob/v1.8.0/src/platforms/px4_module.h#L381" target="_blank" rel="noreferrer">in the source code</a>): <ul><li>They are used to print the command-line usage when entering <code>module help</code> on the console.</li><li>They are automatically extracted via script to generate the <a href="./../modules/modules_main.html">Modules &amp; Commands Reference</a> page.</li></ul></li></ul>`,13),l=[o];function n(r,p,h,c,u,d){return a(),t("div",null,l)}const g=e(i,[["render",n]]);export{k as __pageData,g as default};
