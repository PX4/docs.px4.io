import{_ as o}from"./chunks/payload_delivery_mission_architecture.CMtMSIWz.js";import{_ as c,E as r,c as d,J as i,m as e,a as t,ab as p,o as l}from"./chunks/framework.CUflZczI.js";const P=JSON.parse('{"title":"Доставка пакунків у місіях","description":"","frontmatter":{},"headers":[],"relativePath":"uk/advanced/package_delivery.md","filePath":"uk/advanced/package_delivery.md"}'),n={name:"uk/advanced/package_delivery.md"},s=e("h1",{id:"доставка-пакунків-у-місіях",tabindex:"-1"},[t("Доставка пакунків у місіях "),e("a",{class:"header-anchor",href:"#доставка-пакунків-у-місіях","aria-label":'Permalink to "Доставка пакунків у місіях"'},"​")],-1),h=p('<p>Місія доставки пакунка - це розширення операції з шляховою точкою, де користувач може планувати призначення пакету в якості шляхової точки.</p><p>Ця тема пояснює архітектуру функції доставки пакету. Він призначений для розробників, які працюють над розширенням архітектури, наприклад, для підтримки нових механізмів доставки вантажу.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Зараз лише <a href="./../peripherals/gripper.html">Grippers</a> може бути використано для доставки пакету. Лебідки поки що не підтримуються.</p></div><p>:::note Детальну документацію з налаштування плану місії доставки пакетів можна знайти <a href="./../flying/package_delivery_mission.html">тут</a>. Підготовка для модуля <code>payload_deliverer</code> описана у документації для механізму доставки, наприклад, <a href="./../peripherals/gripper.html#px4-configuration">Gripper</a>. :::</p><h2 id="діаграма-архітектури-доставки-пакетів" tabindex="-1">Діаграма Архітектури доставки пакетів <a class="header-anchor" href="#діаграма-архітектури-доставки-пакетів" aria-label="Permalink to &quot;Діаграма Архітектури доставки пакетів&quot;">​</a></h2><p><img src="'+o+'" alt="Package delivery architecture overview"></p><p>Функціонал доставки пакетів зосереджений навколо повідомлень <a href="./../msg_docs/VehicleCommand.html">VehicleCommand</a> та <a href="./../msg_docs/VehicleCommandAck.html">VehicleCommandAck</a>.</p><p>Основна ідея полягає в наявності сутності, яка обробляє команду транспортного засобу <code>DO_GRIPPER</code> або <code>DO_WINCH</code>, виконує її і надсилає підтвердження, коли успішна доставка підтверджена.</p><p>Оскільки PX4 автоматично транслює повідомлення uORB <code>VehicleCommand</code> до UART-порту, налаштованого на комунікацію у форматі MAVLink як повідомлення <a href="https://mavlink.io/en/messages/common.html#COMMAND_LONG" target="_blank" rel="noreferrer"><code>COMMAND_LONG</code></a>, зовнішній навантаження може отримати команду і виконати її.</p><p>Аналогічно, оскільки PX4 автоматично перекладає повідомлення <a href="https://mavlink.io/en/messages/common.html#COMMAND_ACK" target="_blank" rel="noreferrer"><code>COMMAND_ACK</code></a>, що надходить зовнішнім джерелом через порт UART, налаштований на MAVLink, в uORB-повідомлення <code>vehicle_command_ack</code>, підтвердження зовнішнього навантаження про успішне розгортання пакета може бути отримано модулем <code>navigator</code> PX4.</p><p>Нижче є пояснено кожен об&#39;єкт, що бере участь в архітектурі доставки пакету.</p><h2 id="навігатор" tabindex="-1">Навігатор <a class="header-anchor" href="#навігатор" aria-label="Permalink to &quot;Навігатор&quot;">​</a></h2><p>Навігатор обробляє приймання команди ТЗ (описано нижче). Після отримання повідомлення про успішне розгортання воно встановлює прапорець на рівні блоку місії, щоб сигналізувати про успішне розгортання вантажу.</p><p>Це дозволяє місії перейти до наступного пункту (наприклад, Waypoint) безпечно, оскільки ми впевнені у підтвердженні успішного виконання розгортання.</p><h2 id="транспортнии-команднии-ack" tabindex="-1">Транспортний Командний ACK <a class="header-anchor" href="#транспортнии-команднии-ack" aria-label="Permalink to &quot;Транспортний Командний ACK&quot;">​</a></h2><p>Ми чекаємо на підтвердження (ACK), яке може прийти як внутрішнє (через модуль <code>payload_deliverer</code>), так і зовнішнє (зовнішня сутність відправляє повідомлення MAVLink <code>COMMAND_ACK</code>), щоб визначити, чи була успішною дія доставки пакету (або <code>DO_GRIPPER</code>, або <code>DO_WINCH</code>).</p><h2 id="місія" tabindex="-1">Місія <a class="header-anchor" href="#місія" aria-label="Permalink to &quot;Місія&quot;">​</a></h2><p>Команда «Захват/лебідка» розміщується як <code>предмет місії</code>. Це можливо, оскільки всі пункти місії мають команду <code>MAV_CMD</code> для виконання (наприклад, Land, Takeoff, Waypoint і т. д.), яку можна встановити на <code>DO_GRIPPER</code> або <code>DO_WINCH</code>.</p><p>У логіці місії (зелена рамка вище), якщо досягнуто будь-який пункт місії Gripper/Winch, вона використовує функціональність brake_for_hold (яка встановлює прапорець <code>valid</code> наступного пункту місії зупинки на значення <code>false</code>) для вертольотів (наприклад, багтротика), щоб транспортний засіб утримував своє положення, поки виконується розгортання.</p><p>Для фіксованих крил та інших транспортних засобів не розглядається жодна особлива умова зупинки. Для літаків з фіксованими крилами та інших типів транспортних засобів не передбачено жодних спеціальних умов щодо зупинки.</p><h2 id="блок-місіі" tabindex="-1">Блок Місії <a class="header-anchor" href="#блок-місіі" aria-label="Permalink to &quot;Блок Місії&quot;">​</a></h2><p><code>MissionBlock</code> є батьківським класом <code>Mission</code>, який відповідає за частину &quot;Чи завершена місія?&quot;.</p><p>Все це виконується у функції <code>is_mission_item_reached_or_completed</code>, щоб обробляти затримку часу / перехід до наступного пункту місії.</p><p>Також вона реалізує функцію issue_command, яка видасть команду транспортному засобу, відповідну команді <code>MAV_CMD</code> пункту місії, яку потім отримає зовнішній вантаж або модуль <code>payload_deliverer</code> внутрішньо.</p><h2 id="доставщик-вантажу" tabindex="-1">Доставщик Вантажу <a class="header-anchor" href="#доставщик-вантажу" aria-label="Permalink to &quot;Доставщик Вантажу&quot;">​</a></h2><p>Це спеціалізований модуль, який відповідає за підтримку захопника / лебідки, який використовується для стандартного <a href="./../flying/package_delivery_mission.html">плану місії доставки пакетів</a>.</p><p>Налаштування для модуля <code>payload_deliverer</code> описано у документації щодо налаштування реального механізму випуску пакету, такого як <a href="./../peripherals/gripper.html#px4-configuration">Gripper</a>.</p>',27);function _(m,f,k,u,v,g){const a=r("Badge");return l(),d("div",null,[s,i(a,{type:"tip",text:"PX4 v1.14"}),h])}const b=c(n,[["render",_]]);export{P as __pageData,b as default};
