import{_ as t}from"./chunks/pwm_limit_state_diagram.CDaRbPyU.js";import{_ as e,c as a,o as i,ab as r}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"PWM_limit State Machine","description":"","frontmatter":{},"headers":[],"relativePath":"en/concept/pwm_limit.md","filePath":"en/concept/pwm_limit.md"}'),s={name:"en/concept/pwm_limit.md"},o=r('<h1 id="pwm-limit-state-machine" tabindex="-1">PWM_limit State Machine <a class="header-anchor" href="#pwm-limit-state-machine" aria-label="Permalink to &quot;PWM_limit State Machine&quot;">​</a></h1><p>The<code>PWM_limit State Machine</code> controls PWM outputs as a function of pre-armed and armed inputs. Provides a delay between assertion of &quot;armed&quot; and a ramp-up of throttle on assertion of the armed signal.</p><h2 id="quick-summary" tabindex="-1">Quick Summary <a class="header-anchor" href="#quick-summary" aria-label="Permalink to &quot;Quick Summary&quot;">​</a></h2><p><strong>Inputs</strong></p><ul><li>armed: asserted to enable dangerous behaviors such as spinning propellers</li><li>pre-armed: asserted to enable benign behaviors such as moving control surfaces</li><li>this input overrides the current state</li><li>assertion of pre-armed immediately forces behavior of state ON, regardless of current state</li><li>deassertion of pre-armed reverts behavior to current state</li></ul><p><strong>States</strong></p><ul><li>INIT and OFF <ul><li>pwm outputs set to disarmed values.</li></ul></li><li>RAMP <ul><li>pwm outputs ramp from disarmed values to min values.</li></ul></li><li>ON <ul><li>pwm outputs set according to control values.</li></ul></li></ul><h2 id="state-transition-diagram" tabindex="-1">State Transition Diagram <a class="header-anchor" href="#state-transition-diagram" aria-label="Permalink to &quot;State Transition Diagram&quot;">​</a></h2><p><img src="'+t+'" alt="PWM Limit state machine diagram"></p>',9),n=[o];function l(m,c,u,d,p,h){return i(),a("div",null,n)}const b=e(s,[["render",l]]);export{g as __pageData,b as default};
