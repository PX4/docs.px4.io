import{_ as a}from"./chunks/hardware-rpi2.DmJQ5cOe.js";import{_ as e,E as t,c as n,J as l,m as s,a as h,ab as p,o}from"./chunks/framework.CUflZczI.js";const B=JSON.parse('{"title":"Raspberry Pi 2/3/4 Navio2 Autopilot","description":"","frontmatter":{},"headers":[],"relativePath":"zh/flight_controller/raspberry_pi_navio2.md","filePath":"zh/flight_controller/raspberry_pi_navio2.md"}'),r={name:"zh/flight_controller/raspberry_pi_navio2.md"},k=s("h1",{id:"raspberry-pi-2-3-4-navio2-autopilot",tabindex:"-1"},[h("Raspberry Pi 2/3/4 Navio2 Autopilot "),s("a",{class:"header-anchor",href:"#raspberry-pi-2-3-4-navio2-autopilot","aria-label":'Permalink to "Raspberry Pi 2/3/4 Navio2 Autopilot"'},"​")],-1),d=p('<div class="warning custom-block"><p class="custom-block-title">PX4 does not manufacture this (or any) autopilot. Contact the <a href="https://emlid.com/" target="_blank" rel="noreferrer">manufacturer</a> for hardware support or compliance issues.</p></div><p>This is the developer &quot;quickstart&quot; for Raspberry Pi 2/3/4 Navio2 autopilots. It allows you to build PX4 and transfer to the RasPi, or build natively.</p><p><img src="'+a+`" alt="Ra Pi Image"></p><h2 id="os-image" tabindex="-1">OS Image <a class="header-anchor" href="#os-image" aria-label="Permalink to &quot;OS Image&quot;">​</a></h2><p>Use the preconfigured <a href="https://docs.emlid.com/navio2/configuring-raspberry-pi" target="_blank" rel="noreferrer">Emlid Raspberry Pi OS image for Navio 2</a>. The default image will have most of the setup procedures shown below already done.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Make sure not to upgrade the system (more specifically the kernel). By upgrading, a new kernel can get installed which lacks the necessary HW support (you can check with <code>ls /sys/class/pwm</code>, the directory should not be empty).</p></div><h2 id="setting-up-access" tabindex="-1">Setting up Access <a class="header-anchor" href="#setting-up-access" aria-label="Permalink to &quot;Setting up Access&quot;">​</a></h2><p>The Raspberry Pi OS image has SSH setup already. Username is &quot;pi&quot; and password is &quot;raspberry&quot;. We assume that the username and password remain at their defaults for the purpose of this guide.</p><p>To setup the Pi to join your local wifi, follow <a href="https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md" target="_blank" rel="noreferrer">this guide</a>, or connect it via an ethernet cable.</p><p>To connect to your Pi via SSH, use the default username (<code>pi</code>) and hostname (<code>navio</code>). Alternatively (if this doesn&#39;t work), you can find the IP address of your RPi and specify it.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pi@navio.local</span></span></code></pre></div><p>or</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pi@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IP-ADDRES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="expand-the-filesystem" tabindex="-1">Expand the Filesystem <a class="header-anchor" href="#expand-the-filesystem" aria-label="Permalink to &quot;Expand the Filesystem&quot;">​</a></h2><p>Expand the file system to take advantage of the entire SD card by running:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> raspi-config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --expand-rootfs</span></span></code></pre></div><h2 id="disable-navio-rgb-overlay" tabindex="-1">Disable Navio RGB Overlay <a class="header-anchor" href="#disable-navio-rgb-overlay" aria-label="Permalink to &quot;Disable Navio RGB Overlay&quot;">​</a></h2><p>The existing Navio RGB overlay claims GPIOs used by PX4 for RGB Led. Edit <code>/boot/config.txt</code> by commenting the line enabling the <code>navio-rgb</code> overlay.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#dtoverlay=navio-rgb</span></span></code></pre></div><h2 id="testing-file-transfer" tabindex="-1">Testing file transfer <a class="header-anchor" href="#testing-file-transfer" aria-label="Permalink to &quot;Testing file transfer&quot;">​</a></h2><p>We use SCP to transfer files from the development computer to the target board over a network (WiFi or Ethernet).</p><p>To test your setup, try pushing a file from the development PC to the Pi over the network now. Make sure the Pi has network access, and you can SSH into it.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pi@navio.local:/home/pi/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.txt</span></span></code></pre></div><p>This should copy over a &quot;hello.txt&quot; file into the home folder of your Pi. Validate that the file was indeed copied, and you can proceed to the next step.</p><h2 id="px4-development-environment" tabindex="-1">PX4 Development Environment <a class="header-anchor" href="#px4-development-environment" aria-label="Permalink to &quot;PX4 Development Environment&quot;">​</a></h2><p>These instructions explain how to install a PX4 development environment for building RasPi on Ubuntu 18.04.</p><div class="warning custom-block"><p class="custom-block-title">PX4 binaries for Navio 2 can only be run on Ubuntu 18.04.</p><p>You can build PX4 using the GCC toolchain on Ubuntu 20.04, but the generated binary files are too new to run on actual Pi (as of September 2023). For more information see <a href="./../flight_controller/raspberry_pi_pilotpi_rpios.html#alternative-build-method-using-docker">PilotPi with Raspberry Pi OS Developer Quick Start &gt; Alternative build method using docker</a>.</p></div><h3 id="install-the-common-dependencies" tabindex="-1">Install the Common Dependencies <a class="header-anchor" href="#install-the-common-dependencies" aria-label="Permalink to &quot;Install the Common Dependencies&quot;">​</a></h3><p>To get the common dependencies for Raspberry Pi:</p><ol><li><p>Download <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/setup/ubuntu.sh" target="_blank" rel="noreferrer">ubuntu.sh</a> and <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/setup/requirements.txt" target="_blank" rel="noreferrer">requirements.txt</a> from the PX4 source repository (<strong>/Tools/setup/</strong>): </p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/PX4/PX4-Autopilot/release/1.15/Tools/setup/ubuntu.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/PX4/PX4-Autopilot/release/1.15/Tools/setup/requirements.txt</span></span></code></pre></div></li><li><p>Run <strong>ubuntu.sh</strong> in a terminal to get just the common dependencies:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-nuttx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-sim-tools</span></span></code></pre></div></li><li><p>Then setup a cross-compiler (either GCC or clang) as described in the following sections.</p></li></ol><h3 id="gcc-armhf" tabindex="-1">GCC (armhf) <a class="header-anchor" href="#gcc-armhf" aria-label="Permalink to &quot;GCC (armhf)&quot;">​</a></h3><p>Ubuntu software repository provides a set of pre-compiled toolchains. Note that Ubuntu Focal comes up with <code>gcc-9-arm-linux-gnueabihf</code> as its default installation which is not fully supported, so we must manually install <code>gcc-8-arm-linux-gnueabihf</code> and set it as the default toolchain. This guide also applies to earlier Ubuntu releases (Bionic). The following instruction assumes you haven&#39;t installed any version of arm-linux-gnueabihf, and will set up the default executable with <code>update-alternatives</code>. Install them with the terminal command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-8-arm-linux-gnueabihf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g++-8-arm-linux-gnueabihf</span></span></code></pre></div><p>Set them as default:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-alternatives</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/arm-linux-gnueabihf-gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm-linux-gnueabihf-gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/arm-linux-gnueabihf-gcc-8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --slave</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/arm-linux-gnueabihf-g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm-linux-gnueabihf-g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/arm-linux-gnueabihf-g++-8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-alternatives</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arm-linux-gnueabihf-gcc</span></span></code></pre></div><h3 id="gcc-aarch64" tabindex="-1">GCC (aarch64) <a class="header-anchor" href="#gcc-aarch64" aria-label="Permalink to &quot;GCC (aarch64)&quot;">​</a></h3><p>If you want to build PX4 for ARM64 devices, this section is required.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-8-aarch64-linux-gnu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g++-8-aarch64-linux-gnu</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-alternatives</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/aarch64-linux-gnu-gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aarch64-linux-gnu-gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/aarch64-linux-gnu-gcc-8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --slave</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/aarch64-linux-gnu-g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aarch64-linux-gnu-g++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/aarch64-linux-gnu-g++-8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-alternatives</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aarch64-linux-gnu-gcc</span></span></code></pre></div><h3 id="clang-optional" tabindex="-1">Clang (optional) <a class="header-anchor" href="#clang-optional" aria-label="Permalink to &quot;Clang (optional)&quot;">​</a></h3><p>First install GCC (needed to use clang).</p><p>We recommend you to get clang from the Ubuntu software repository, as shown below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clang</span></span></code></pre></div><p>Example below for building PX4 firmware out of tree, using <em>CMake</em>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PATH-TO-PX4-SR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/px4_raspberrypi_default_clang</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/px4_raspberrypi_default_clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unix Makefiles&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DCONFIG=px4_raspberrypi_default </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-UCMAKE_C_COMPILER </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DCMAKE_C_COMPILER=clang </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-UCMAKE_CXX_COMPILER </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DCMAKE_CXX_COMPILER=clang++ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">../..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span></code></pre></div><h2 id="building-the-code" tabindex="-1">Building the Code <a class="header-anchor" href="#building-the-code" aria-label="Permalink to &quot;Building the Code&quot;">​</a></h2><p>Specify the IP (or hostname) of your Pi using:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navio.local</span></span></code></pre></div><p>or</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">192.168.X.X</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">The value of the environment variable should be set before the build, or <code>make upload</code> will fail to find your Pi.</p></div><p>Build the executable file on your development machine:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emlid_navio2</span></span></code></pre></div><p>The &quot;px4&quot; executable file is in the directory <strong>build/emlid_navio2_default/</strong>. Make sure you can connect to your Pi over SSH, see <a href="#setting-up-access">instructions how to access your Pi</a> following the instructions for armhf under Raspberry Pi.</p><p>Then upload it with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emlid_navio2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><p>Then, connect over ssh and run it on the Pi (as root):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/px4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.config</span></span></code></pre></div><p>A successful build followed by executing PX4 will give you something like this:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">______</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  __</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   __</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ___</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ___</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\ \\ \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ \\ \\_</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">\\_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     \\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh&gt;</span></span></code></pre></div><h2 id="autostart" tabindex="-1">Autostart <a class="header-anchor" href="#autostart" aria-label="Permalink to &quot;Autostart&quot;">​</a></h2><p>To autostart px4, add the following to the file <strong>/etc/rc.local</strong> (adjust it accordingly if you use native build), right before the <code>exit 0</code> line:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.log</span></span></code></pre></div>`,62);function c(g,u,F,y,C,b){const i=t("LinkedBadge");return o(),n("div",null,[k,l(i,{type:"warning",text:"Experimental",url:"../flight_controller/autopilot_experimental.html"}),d])}const f=e(r,[["render",c]]);export{B as __pageData,f as default};
