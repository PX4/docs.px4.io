import{_ as e,a as i,b as t,c as l,d as a,e as o,f as s,g as n,h as r,i as p,j as g,k as c,l as h}from"./chunks/eclipse_svd_file_path.cFnbI5xs.js";import{_ as u,c as d,o as m,ab as b}from"./chunks/framework.CUflZczI.js";const j=JSON.parse('{"title":"Debugging with Eclipse and J-Link","description":"","frontmatter":{},"headers":[],"relativePath":"ko/debug/eclipse_jlink.md","filePath":"ko/debug/eclipse_jlink.md"}'),k={name:"ko/debug/eclipse_jlink.md"},f=b('<h1 id="debugging-with-eclipse-and-j-link" tabindex="-1">Debugging with Eclipse and J-Link <a class="header-anchor" href="#debugging-with-eclipse-and-j-link" aria-label="Permalink to &quot;Debugging with Eclipse and J-Link&quot;">​</a></h1><p>This topic explains how to setup and use <a href="https://gnu-mcu-eclipse.github.io/" target="_blank" rel="noreferrer">MCU Eclipse</a> with a <em>Segger Jlink adapter</em> to debug PX4 running on NuttX (e.g. Pixhawk series boards).</p><h2 id="필요한-하드웨어" tabindex="-1">필요한 하드웨어 <a class="header-anchor" href="#필요한-하드웨어" aria-label="Permalink to &quot;필요한 하드웨어&quot;">​</a></h2><ul><li><a href="https://www.segger.com/products/debug-probes/j-link/models/j-link-edu-mini/" target="_blank" rel="noreferrer">J-Link EDU Mini</a></li><li>Adapter to connect Segger JLink to Flight Controller <a href="./../debug/swd_debug.html">SWD Debug Port</a> (debug port).</li><li>Micro USB 케이블</li></ul><h2 id="설치" tabindex="-1">설치 <a class="header-anchor" href="#설치" aria-label="Permalink to &quot;설치&quot;">​</a></h2><h3 id="px4" tabindex="-1">PX4 <a class="header-anchor" href="#px4" aria-label="Permalink to &quot;PX4&quot;">​</a></h3><p>일반 지침에 따라 PX4를 설정합니다.</p><ul><li><a href="./../dev_setup/dev_env.html">Setup the PX4 Developer Environment/Toolchain</a> for your platform (e.g. for Linux see: <a href="./../dev_setup/dev_env_linux_ubuntu.html">Development Environment on Ubuntu LTS / Debian Linux</a>).</li><li><a href="./../dev_setup/building_px4.html">PX4를 다운로드</a>하고, 선택적으로 명령줄에서 빌드합니다.</li></ul><h3 id="eclipse" tabindex="-1">Eclipse <a class="header-anchor" href="#eclipse" aria-label="Permalink to &quot;Eclipse&quot;">​</a></h3><p>To install <em>Eclipse</em>:</p><ol><li><a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases/" target="_blank" rel="noreferrer">C/C++ 개발자를 위한 Eclipse CDT</a>(MCU GitHub)를 다운로드하십시오.</li><li>Eclipse 폴더의 압축을 풀고 적당한 폴더에 복사합니다(설치 스크립트를 실행할 필요가 없음).</li><li>Run <em>Eclipse</em> and choose a location for your initial workbench.</li></ol><h3 id="segger-jlink-도구" tabindex="-1">Segger Jlink 도구 <a class="header-anchor" href="#segger-jlink-도구" aria-label="Permalink to &quot;Segger Jlink 도구&quot;">​</a></h3><p>To install the <em>Segger Jlink</em> tools:</p><ol><li><a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack" target="_blank" rel="noreferrer">J-Link Software and Documentation Pack</a>을 운영체제에 해당(윈도우와 리눅스용이 있음)하는 버전으로 다운로드하고 설치하십시오. <ul><li>Linux에서 <strong>/usr/bin</strong>에 설치됩니다.</li></ul></li></ol><p>자세한 내용은 <a href="https://gnu-mcu-eclipse.github.io/debug/jlink/install/" target="_blank" rel="noreferrer">https://gnu-mcu-eclipse.github.io/debug/jlink/install/</a>을 참고하십시오.</p><h2 id="첫-사용" tabindex="-1">첫 사용 <a class="header-anchor" href="#첫-사용" aria-label="Permalink to &quot;첫 사용&quot;">​</a></h2><ol><li><p>Connect the <em>Segger JLink</em> to the host computer and the <a href="./../debug/swd_debug.html">flight controller debug port</a> (via an adapter).</p></li><li><p>비행 콘트롤러에 전원을 공급합니다.</p></li><li><p>Run <em>Eclipse</em>.</p></li><li><p><strong>파일 &gt; 가져오기 C/C++ &gt; 기존 코드를 Makefile 프로젝트</strong>로 만들고 <strong>다음</strong>을 클릭합니다.</p></li><li><p>Point it to the <strong>PX4-Autopilot</strong> folder and give it a name, then select <em>ARM Cross GCC</em> in the <em>Toolchain for Indexer Settings</em> and click <strong>Finish</strong>. 가져오기는 시간이 걸리며, 완료될 때까지 기다립니다.</p></li><li><p>Set the MCU settings: right-click on the top-level project in the Project Explorer, select <em>Properties</em> then under MCU choose <em>SEGGER J-Link Path</em>. 아래 스크린샷과 같이 설정합니다. <img src="'+e+'" alt="Eclipse: Segger J-Link 경로"></p></li><li><p>패키지를 업데이트합니다.</p><ul><li><p>Click the small icon on the top right called <em>Open Perspective</em> and open the <em>Packs</em> perspective. <img src="'+i+`" alt="Eclipse: Workspace"></p></li><li><p><strong>모두 업데이트</strong> 버튼을 클릭합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p></div></li></ul></li></ol><p>이것은 10분정도의 시간이 소요됩니다. 누락된 패키지에 대한 오류를 무시하십시오. :::</p><pre><code> ![Eclipse: Workspace Packs Perspective](../../assets/debug/eclipse_packs_perspective.jpg)
</code></pre><ul><li>STM32Fxx 장치는 Keil 폴더에 있습니다. 마우스 오른쪽 버튼을 클릭한 다음, F4 및 F7에 해당하는 장치에서 <strong>설치</strong>를 선택하여 설치합니다.</li></ul><ol><li><p>대상에 대한 디버깅 설정을 진행하십시오:</p><ul><li>Right click project and open the <em>Settings</em> (menu: <strong>C/C++ Build &gt; Settings</strong>)</li><li>Choose the <em>Devices</em> Tab, <em>Devices</em> section (Not <em>Boards</em>).</li><li>디버그하려는 FMU 칩을 찾으십시오.</li></ul><p><img src="`+t+'" alt="Eclipse: 설정에서 FMU 선택"></p></li><li><p>버그 기호 옆에 있는 작은 드롭다운으로 디버그 설정을 선택합니다.<img src="'+l+'" alt="Eclipse: 디버깅 설정"></p></li><li><p>Then select <em>GDB SEGGER J-Link Debugging</em> and then the <strong>New config</strong> button on the top left. <img src="'+a+'" alt="Eclipse: GDB Segger 디버깅 설정"></p></li><li><p>빌드 구성을 설정합니다.</p><ul><li><p>Give it a name and set the <em>C/C++ Application</em> to the corresponding <strong>.elf</strong> file.</p></li><li><p>Choose <em>Disable Auto build</em></p><div class="info custom-block"><p class="custom-block-title">INFO</p></div></li></ul></li></ol><p>Remember that you must build the target from the command line before starting a debug session. :::</p><p><img src="'+o+'" alt="Eclipse: GDB Segger 디버깅 설정"></p><ol><li><p>The <em>Debugger</em> and <em>Startup</em> tabs shouldn’t need any modifications (just verify your settings with the screenshots below)</p><p><img src="'+s+'" alt="Eclipse: GDB Segger 디버깅 설정: 디버거 탭"> <img src="'+n+'" alt="Eclipse: GDB Segger 디버깅 설정: 시작 탭"></p></li></ol><h2 id="segger-task-aware-debugging" tabindex="-1">SEGGER Task-aware debugging <a class="header-anchor" href="#segger-task-aware-debugging" aria-label="Permalink to &quot;SEGGER Task-aware debugging&quot;">​</a></h2><p>Task-aware debugging (also known as <a href="https://www.segger.com/products/debug-probes/j-link/tools/j-link-gdb-server/thread-aware-debugging/" target="_blank" rel="noreferrer">thread-aware debugging</a>) allows you to show the context of all running threads/tasks instead of just the stack current task. This is quite useful since PX4 tends to run many different tasks.</p><p>To enable this feature for use in Eclipse:</p><ol><li><p>You first need to enable <code>CONFIG_DEBUG_TCBINFO</code> in the NuttX configuration for your build (to expose the TCB offsets).</p><ul><li><p>Open a terminal in the root of your PX4-Autopilot source code</p></li><li><p>In the terminal, open <code>menuconfig</code> using the appropriate make target for the build. This will be something like:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boardguiconfig</span></span></code></pre></div><p>(See <a href="./../hardware/porting_guide_config.html#px4-menuconfig-setup">PX4 Menuconfig Setup</a> for more information) on using the config tools).</p></li><li><p>Ensure that the <em>Enable TCBinfo struct for debug</em> is selected as shown: <img src="'+r+'" alt="NuttX: Menuconfig: CONFIG_DEBUG_TCBINFO"></p></li></ul></li><li><p>Compile the <strong>jlink-nuttx.so</strong> library in the terminal by running the following command in the terminal: <code>make jlink-nuttx</code></p></li><li><p>Modify Eclipse to use this libary. In the <em>J-Link GDB Server Setup</em> configuration, update <strong>Other options</strong> to include <code>-rtos /home/&lt;PX4 path&gt;/Tools/jlink-nuttx.so</code>, as shown in the image below.</p><p><img src="'+p+'" alt="Eclipse: GDB Segger Debug config RTOS aware: debugger tab"></p></li><li><p>When running the debugger you should see now multiple threads instead of just one:</p><p><img src="'+g+'" alt="Eclipse: GDB Segger Debug config RTOS aware: debug session"></p></li></ol><h2 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h2><h3 id="패키지-관리자에-없는-대상-cpu" tabindex="-1">패키지 관리자에 없는 대상 CPU <a class="header-anchor" href="#패키지-관리자에-없는-대상-cpu" aria-label="Permalink to &quot;패키지 관리자에 없는 대상 CPU&quot;">​</a></h3><p>대상 CPU가 패키지 관리자에 표시되지 않으면, 레지스터 보기가 작동하도록 하려면 다음 단계가 필요할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이것은 일반적으로 발생하지 않아야 합니다(그러나 STM F7 컨트롤러에 연결할 때 일화적으로 보고되었습니다).</p></div><p>Adding missing SVD files for the <em>Peripheral View</em>:</p><ol><li><p>MCU Eclipse가 패키지를 저장하는 위치를 찾으십시오(<strong>환경 설정 &gt; C/C++ &gt; MCU 패키지</strong>).</p><p><img src="'+c+'" alt="Eclipse: MCU 패키지"></p></li><li><p><a href="http://www.keil.com/dd2/Pack/" target="_blank" rel="noreferrer">http://www.keil.com/dd2/Pack/</a> 에서 누락된 패키지를 다운로드하십시오</p></li><li><p>압축 해제 도구로 다운로드한 팩을 열고 <strong>/CMSIS/SVD</strong>에서 <strong>.SVD</strong> 파일의 압축을 풉니다.</p></li><li><p><strong>디버그 옵션 &gt; GDB SEGGER JLink 디버깅 &gt; SVD 경로</strong>에서 원하는 <strong>.SVD</strong> 파일을 선택하십시오.</p><p><img src="'+h+'" alt="Eclipse: SVD 파일 경로"></p></li></ol>',34),_=[f];function w(S,E,P,C,v,D){return m(),d("div",null,_)}const G=u(k,[["render",w]]);export{j as __pageData,G as default};
