import{_ as e,c as r,o as t,ab as a}from"./chunks/framework.CUflZczI.js";const m=JSON.parse('{"title":"I2C Bus (Development Overview)","description":"","frontmatter":{},"headers":[],"relativePath":"en/sensor_bus/i2c_development.md","filePath":"en/sensor_bus/i2c_development.md"}'),i={name:"en/sensor_bus/i2c_development.md"},s=a('<h1 id="i2c-bus-development-overview" tabindex="-1">I2C Bus (Development Overview) <a class="header-anchor" href="#i2c-bus-development-overview" aria-label="Permalink to &quot;I2C Bus (Development Overview)&quot;">​</a></h1><p>I2C is a packet-switched serial communication protocol that allows multiple master devices to connect to multiple slave devices using only 2 wires per connection. It is intended for attaching lower-speed peripheral ICs to processors and microcontrollers in short-distance, intra-board communication.</p><p>Pixhawk/PX4 support it for:</p><ul><li>Connecting off board components that require higher data rates than provided by a strict serial UART, such as rangefinders.</li><li>Compatibility with peripheral devices that only support I2C.</li><li>Allowing multiple devices to attach to a single bus (useful for conserving ports). For example, LEDs, Compass, rangefinders etc.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The page <a href="./../sensor_bus/i2c_general.html">Hardware &gt; I2C Peripherals</a> contains information about how to <em>use</em> (rather than integrate) I2C peripherals and solve common setup problems.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IMUs (accelerometers/gyroscopes) should not be attached via I2C (typically the <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus" target="_blank" rel="noreferrer">SPI</a> bus is used). The bus is not fast enough even with a single device attached to allow vibration filtering (for instance), and the performance degrades further with every additional device on the bus.</p></div><h2 id="integrating-i2c-devices" tabindex="-1">Integrating I2C Devices <a class="header-anchor" href="#integrating-i2c-devices" aria-label="Permalink to &quot;Integrating I2C Devices&quot;">​</a></h2><p>Drivers should <code>#include &lt;drivers/device/i2c.h&gt;</code> and then provide an implementation of the abstract base class <code>I2C</code> defined in <strong>I2C.hpp</strong> for the target hardware (i.e. for NuttX <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/lib/drivers/device/nuttx/I2C.hpp" target="_blank" rel="noreferrer">here</a>).</p><p>A small number of drivers will also need to include headers for their type of device (<strong>drv_*.h</strong>) in <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/drivers" target="_blank" rel="noreferrer">/src/drivers/</a> - e.g. <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/drivers/drv_led.h" target="_blank" rel="noreferrer">drv_led.h</a>.</p><p>To include a driver in firmware you must add the driver to the board-specific cmake file that corresponds to the target you want to build for. You can do this for a single driver:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>CONFIG_DRIVERS_DISTANCE_SENSOR_LIGHTWARE_LASER_I2C=y</span></span></code></pre></div><p>You can also include all drivers of a particular type.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>CONFIG_COMMON_DISTANCE_SENSOR=y</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For example, you can see/search for <code>CONFIG_DRIVERS_DISTANCE_SENSOR_LIGHTWARE_LASER_I2C</code> in the <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/boards/px4/fmu-v4/default.px4board" target="_blank" rel="noreferrer">px4_fmu-v4_default</a> configuration.</p></div><h2 id="i2c-driver-examples" tabindex="-1">I2C Driver Examples <a class="header-anchor" href="#i2c-driver-examples" aria-label="Permalink to &quot;I2C Driver Examples&quot;">​</a></h2><p>To find I2C driver examples, search for <strong>i2c.h</strong> in <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/drivers" target="_blank" rel="noreferrer">/src/drivers/</a>.</p><p>Just a few examples are:</p><ul><li><a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/drivers/distance_sensor/lightware_laser_i2c" target="_blank" rel="noreferrer">drivers/distance_sensor/lightware_laser_i2c</a> - I2C driver for <a href="./../sensor/sfxx_lidar.html">Lightware SF1XX LIDAR</a>.</li><li><a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/drivers/distance_sensor/lightware_laser_serial" target="_blank" rel="noreferrer">drivers/distance_sensor/lightware_laser_serial</a> - Serial driver for <a href="./../sensor/sfxx_lidar.html">Lightware SF1XX LIDAR</a>.</li><li><a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/drivers/barometer/ms5611" target="_blank" rel="noreferrer">drivers/ms5611</a> - I2C Driver for the MS5611 and MS6507 barometric pressure sensor connected via I2C (or SPI).</li></ul><h2 id="further-information" tabindex="-1">Further Information <a class="header-anchor" href="#further-information" aria-label="Permalink to &quot;Further Information&quot;">​</a></h2><ul><li><a href="https://en.wikipedia.org/wiki/I%C2%B2C" target="_blank" rel="noreferrer">I2C</a> (Wikipedia)</li><li><a href="https://learn.sparkfun.com/tutorials/i2c" target="_blank" rel="noreferrer">I2C Comparative Overview</a> (learn.sparkfun.com)</li><li><a href="./../middleware/drivers.html">Driver Framework</a></li></ul>',20),o=[s];function l(n,c,d,p,h,u){return t(),r("div",null,o)}const f=e(i,[["render",l]]);export{m as __pageData,f as default};
