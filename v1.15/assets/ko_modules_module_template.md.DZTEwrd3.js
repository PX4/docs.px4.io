import{_ as e,c as a,o as t,ab as s}from"./chunks/framework.CUflZczI.js";const m=JSON.parse('{"title":"전체 애플리케이션을 위한 모듈 템플릿","description":"","frontmatter":{},"headers":[],"relativePath":"ko/modules/module_template.md","filePath":"ko/modules/module_template.md"}'),i={name:"ko/modules/module_template.md"},l=s(`<h1 id="전체-애플리케이션을-위한-모듈-템플릿" tabindex="-1">전체 애플리케이션을 위한 모듈 템플릿 <a class="header-anchor" href="#전체-애플리케이션을-위한-모듈-템플릿" aria-label="Permalink to &quot;전체 애플리케이션을 위한 모듈 템플릿&quot;">​</a></h1><p>An application can be written to run as either a <em>task</em> (a module with its own stack and process priority) or as a <em>work queue task</em> (a module that runs on a work queue thread, sharing the stack and thread priority with other tasks on the work queue). 대부분은, 리소스 최소화를 위하여 작업 대기열을 사용합니다.</p><div class="info custom-block"><p class="custom-block-title"><a href="./../concept/architecture.html#runtime-environment">Architectural Overview &gt; Runtime Environment</a> provides more information about tasks and work queue tasks.</p></div><div class="info custom-block"><p class="custom-block-title">All the things learned in the <a href="./../modules/hello_sky.html">First Application Tutorial</a> are relevant for writing a full application.</p></div><h2 id="작업-대기열-작업" tabindex="-1">작업 대기열 작업 <a class="header-anchor" href="#작업-대기열-작업" aria-label="Permalink to &quot;작업 대기열 작업&quot;">​</a></h2><p><code>ModuleBase</code> 외에도 작업은 <code>ScheduledWorkItem</code>(<a href="https://github.com/PX4/PX4-Autopilot/blob/master/platforms/common/include/px4_platform_common/px4_work_queue/ScheduledWorkItem.hpp" target="_blank" rel="noreferrer">ScheduledWorkItem.hpp</a>에 포함)에서 파생되어야 합니다.</p><p>작업 대기열 작업 응용 프로그램은 작업 대기열 작업임을 지정하고 초기화중에 실행되도록 예약해야 한다는 점을 제외하고 일반(작업) 응용 프로그램과 동일합니다.</p><p>예제는 방법을 설명합니다. 요약:</p><ol><li><p>cmake 정의 파일(<a href="https://github.com/PX4/PX4-Autopilot/blob/master/src/examples/work_item/CMakeLists.txt" target="_blank" rel="noreferrer">CMakeLists.txt</a>)에서 작업 대기열 라이브러리에 대한 종속성을 지정합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>DEPENDS</span></span>
<span class="line"><span>   px4_work_queue</span></span></code></pre></div></li><li><p><code>ScheduledWorkItem::Run()</code> 메서드를 구현하여 &quot;작업&quot;을 수행합니다.</p></li><li><p>생성자 초기화에서 작업을 추가할 대기열을 지정합니다. <a href="https://github.com/PX4/PX4-Autopilot/blob/master/src/examples/work_item/WorkItemExample.cpp#L42" target="_blank" rel="noreferrer">work_item</a> 예제는 아래와 같이 <code>wq_configurations::test1</code> 작업 대기열에 추가됩니다.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkItemExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkItemExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() :</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ModuleParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ScheduledWorkItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MODULE_NAME, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wq_configurations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::test1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">The available work queues (<code>wq_configurations</code>) are listed in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/common/include/px4_platform_common/px4_work_queue/WorkQueueManager.hpp#L49" target="_blank" rel="noreferrer">WorkQueueManager.hpp</a>.</p></div></li></ol><p>:::</p><ol><li><code>ScheduledWorkItem::Run()</code> 메서드를 구현하여 &quot;작업&quot;을 수행합니다.</li><li><code>task_spawn</code> 메서드를 구현하여 작업이 작업 대기열임을 지정합니다(<code>task_id_is_work_queue</code> ID 사용).</li><li>예약 방법 중 하나를 사용하여 작업 대기열 작업을 예약합니다(예제에서는 <code>init</code> 방법 내에서 <code>ScheduleOnInterval</code> 사용).</li></ol><h2 id="작업" tabindex="-1">작업 <a class="header-anchor" href="#작업" aria-label="Permalink to &quot;작업&quot;">​</a></h2><p>문서: <code>PRINT_MODULE_*</code> 메서드는 두 가지 용도로 사용됩니다(API는 <a href="https://github.com/PX4/PX4-Autopilot/blob/v1.8.0/src/platforms/px4_module.h#L381" target="_blank" rel="noreferrer">소스 코드</a>에 문서화됨):</p><p>템플릿은 전체 애플리케이션에 필요하거나 유용한 다음과 같은 추가 기능/측면을 보여줍니다.</p><ul><li>매개변수에 액세스하고 매개변수 업데이트에 반응합니다.</li><li>uORB 구독 및 주제 업데이트 대기 중입니다.</li><li><code>시작</code>/<code>중지</code>/<code>상태</code>를 통해 백그라운드에서 실행되는 작업을 제어합니다. 그런 다음 <code>module start [&lt;arguments&gt;]</code> 명령을 직접 추가할 수 있습니다. <a href="./../concept/system_startup.html">시작 스크립트</a>.</li><li>명령줄 인수 구문 분석.</li><li>문서: <code>PRINT_MODULE_*</code> 메서드는 두 가지 용도로 사용됩니다(API는 <a href="https://github.com/PX4/PX4-Autopilot/blob/v1.8.0/src/platforms/px4_module.h#L381" target="_blank" rel="noreferrer">소스 코드</a>에 문서화됨): <ul><li>콘솔에서 <code>module help</code>를 입력할 때 명령줄 사용법을 인쇄합니다.</li><li>스크립트를 통해 자동으로 추출되어 <a href="./../modules/modules_main.html">모듈 &amp; 명령 참조</a> 페이지.</li></ul></li></ul>`,15),o=[l];function r(n,p,c,h,d,u){return t(),a("div",null,o)}const _=e(i,[["render",r]]);export{m as __pageData,_ as default};
