import{_ as s,c as i,o as a,ab as e}from"./chunks/framework.CUflZczI.js";const c=JSON.parse('{"title":"CameraCapture (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/msg_docs/CameraCapture.md","filePath":"ko/msg_docs/CameraCapture.md"}'),t={name:"ko/msg_docs/CameraCapture.md"},n=e(`<h1 id="cameracapture-uorb-message" tabindex="-1">CameraCapture (UORB message) <a class="header-anchor" href="#cameracapture-uorb-message" aria-label="Permalink to &quot;CameraCapture (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/CameraCapture.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp        # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_utc        # Capture time in UTC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GPS time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 seq                  # Image sequence number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float64 lat                 # Latitude in </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">degrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (WGS84)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float64 lon                 # Longitude in </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">degrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (WGS84)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 alt                 # </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Altitude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (AMSL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 ground_distance         # Altitude above </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ground</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (meters)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] q                    # Attitude of the camera relative to NED earth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fixed frame when using a gimbal, otherwise vehicle attitude</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int8 result                 # </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> failure, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camera does not provide feedback</span></span></code></pre></div>`,3),h=[n];function l(p,k,r,E,d,o){return a(),i("div",null,h)}const m=s(t,[["render",l]]);export{c as __pageData,m as default};
