import{_ as s,c as a,o as i,ab as t}from"./chunks/framework.CUflZczI.js";const m=JSON.parse('{"title":"HoverThrustEstimate (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/msg_docs/HoverThrustEstimate.md","filePath":"zh/msg_docs/HoverThrustEstimate.md"}'),e={name:"zh/msg_docs/HoverThrustEstimate.md"},n=t(`<h1 id="hoverthrustestimate-uorb-message" tabindex="-1">HoverThrustEstimate (UORB message) <a class="header-anchor" href="#hoverthrustestimate-uorb-message" aria-label="Permalink to &quot;HoverThrustEstimate (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/HoverThrustEstimate.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp                # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample         # time of corresponding sensor data last used </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> this estimate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 hover_thrust        # estimated hover thrust [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 hover_thrust_var    # estimated hover thrust variance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_innov     # innovation of the last acceleration fusion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_innov_var     # innovation variance of the last acceleration fusion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_innov_test_ratio  # normalized innovation squared test ratio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_noise_var     # vertical acceleration noise variance estimated form innovation residual</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> valid</span></span></code></pre></div>`,3),l=[n];function r(h,o,p,c,E,k){return i(),a("div",null,l)}const _=s(e,[["render",r]]);export{m as __pageData,_ as default};
