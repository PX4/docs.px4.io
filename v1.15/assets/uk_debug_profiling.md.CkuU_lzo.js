import{_ as s}from"./chunks/flamegraph-example.CBi_68T9.js";import{_ as i,c as a,o as e,ab as l}from"./chunks/framework.CUflZczI.js";const u=JSON.parse(`{"title":"Poor Man's Sampling Profiler","description":"","frontmatter":{},"headers":[],"relativePath":"uk/debug/profiling.md","filePath":"uk/debug/profiling.md"}`),p={name:"uk/debug/profiling.md"},h=l(`<h1 id="poor-man-s-sampling-profiler" tabindex="-1">Poor Man&#39;s Sampling Profiler <a class="header-anchor" href="#poor-man-s-sampling-profiler" aria-label="Permalink to &quot;Poor Man&#39;s Sampling Profiler&quot;">​</a></h1><p>Цей розділ описує, як ви можете використовувати <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/nuttx/Debug/poor-mans-profiler.sh" target="_blank" rel="noreferrer">Poor Man&#39;s Sampling Profiler</a> (PMSP) shell script для оцінки продуктивності PX4. Це реалізація відомого методу, яку спочатку винайшли <a href="https://poormansprofiler.org/" target="_blank" rel="noreferrer">Марк Callaghan і Domas Mituzas</a>.</p><h2 id="підхід" tabindex="-1">Підхід <a class="header-anchor" href="#підхід" aria-label="Permalink to &quot;Підхід&quot;">​</a></h2><p>PMSP - це оболонковий сценарій, який працює шляхом переривання виконання прошивки періодично для збору поточного стеку викликів. Відмічені трасування стеку додаються в текстовий файл. Після завершення вибірки (що зазвичай займає близько години або більше), зібрані стек-відстеження <em>згортаються</em>. Результатом <em>складання</em> є інший текстовий файл, який містить ті ж стекові відстеження, за винятком того, що всі схожі стекові відстеження (тобто ті, які були отримані в тій же точці в програмі) об&#39;єднуються, і фіксується кількість їх випадків. Згорнуті стеки потім подаються в сценарій візуалізації, для цього ми використовуємо <a href="http://www.brendangregg.com/flamegraphs.html" target="_blank" rel="noreferrer">FlameGraph - візуалізатор відкритого вихідного коду стеку викликів</a>.</p><h2 id="базове-використання" tabindex="-1">Базове використання <a class="header-anchor" href="#базове-використання" aria-label="Permalink to &quot;Базове використання&quot;">​</a></h2><h3 id="передумови" tabindex="-1">Передумови <a class="header-anchor" href="#передумови" aria-label="Permalink to &quot;Передумови&quot;">​</a></h3><p>Профілер покладається на GDB для запуску PX4 на вбудованій цілі. Так що перед профілюванням цілі, вам потрібно мати обладнання, яке ви хочете профілювати, і вам потрібно скомпілювати та завантажити прошивку на це обладнання. Вам потрібно мати <a href="./../debug/swd_debug.html#debug-probes">зонд для налагодження</a> (такий як зонд DroneCode), щоб запустити сервер GDB та взаємодіяти з платою.</p><h3 id="визначення-пристрою-відладки" tabindex="-1">Визначення пристрою відладки <a class="header-anchor" href="#визначення-пристрою-відладки" aria-label="Permalink to &quot;Визначення пристрою відладки&quot;">​</a></h3><p><code>poor-mans-profiler.sh</code> автоматично виявляє та використовує правильний USB-пристрій, якщо ви використовуєте його з <a href="./../debug/probe_bmp.html#dronecode-probe">DroneCode Probe</a>. Якщо ви використовуєте інший тип зонда, можливо, вам потрібно буде передати конкретний <em>пристрій</em>, на якому знаходиться відлагоджувач. Ви можете використовувати команду bash <code>ls -alh /dev/serial/by-id/</code> для переліку можливих пристроїв на Ubuntu. Наприклад, наступні пристрої перераховані з підключеними через USB Pixhawk 4 та DroneCode Probe:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user@ubuntu:~/PX4-Autopilot$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -alh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/serial/by-id/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">total</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drwxr-xr-x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18:57</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drwxr-xr-x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18:48</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lrwxrwxrwx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18:48</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usb-3D_Robotics_PX4_FMU_v5.x_0-if00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../ttyACM0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lrwxrwxrwx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18:57</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usb-Black_Sphere_Technologies_Black_Magic_Probe_BFCCB401-if00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../ttyACM1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lrwxrwxrwx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18:57</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usb-Black_Sphere_Technologies_Black_Magic_Probe_BFCCB401-if02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../ttyACM2</span></span></code></pre></div><p>У цьому випадку скрипт автоматично вибере пристрій з назвою <code>*Black_Magic_Probe*-if00</code>. Але якщо ви використовуєте інший пристрій, ви зможете знайти відповідний ідентифікатор у вищезазначеному переліку.</p><p>Потім передайте відповідний пристрій, використовуючи аргумент <code>--gdbdev</code>, як показано нижче:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./poor-mans-profiler.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --elf=build/px4_fmu-v4_default/px4_fmu-v4_default.elf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --nsamples=30000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --gdbdev=/dev/ttyACM2</span></span></code></pre></div><h3 id="запуск" tabindex="-1">Запуск <a class="header-anchor" href="#запуск" aria-label="Permalink to &quot;Запуск&quot;">​</a></h3><p>Основне використання профілера доступне через систему збірки. Наприклад, наступні командні збірки та профілі px4_fmu-v4pro ціль із 10000 зразками (отримання <em>FlameGraph</em> і додавання його до шляху, як це необхідно).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v4pro_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> profile</span></span></code></pre></div><p>Для більшого контролю над процесом побудови, включаючи встановлення кількості вибірок, див. <a href="#implementation">Реалізація</a>.</p><h2 id="розуміння-виводу" tabindex="-1">Розуміння виводу <a class="header-anchor" href="#розуміння-виводу" aria-label="Permalink to &quot;Розуміння виводу&quot;">​</a></h2><p>Знизу наведено знімок екрану прикладового виводу (зверніть увагу, що тут він не є інтерактивним):</p><p><img src="`+s+'" alt="FlameGraph Example"></p><p>На графіку пламені, горизонтальні рівні представляють рамки стеку, тоді як ширина кожної рамки пропорційна кількості разів, коли вона була вибрана. Зі свого боку, кількість разів, коли функцію виявилися вибраною, пропорційна тривалості множеній на частоту її виконання.</p><h2 id="можливі-проблеми" tabindex="-1">Можливі проблеми <a class="header-anchor" href="#можливі-проблеми" aria-label="Permalink to &quot;Можливі проблеми&quot;">​</a></h2><p>Сценарій був розроблений як тимчасове рішення, тому він має деякі проблеми. Будь ласка, будьте обережні з ними під час використання:</p><ul><li><p>Якщо GDB працює некоректно, скрипт може не виявити це і продовжити виконання. У цьому випадку, очевидно, не буде вироблено жодних придатних стеків. Щоб уникнути цього, користувач повинен періодично перевіряти файл <code>/tmp/pmpn-gdberr. og</code>, який містить stderr вихід останнього покликання GDB. У майбутньому сценарій слід змінити так, щоб він викликав GDB у тихому режимі, де він буде вказувати проблеми через свій код виходу.</p></li><li><p>Іноді GDB просто залишається назавжди, поки відбувається вибіркове збереження стеку. Під час цієї несправності ціль буде припинена на невизначений термін. Рішення полягає вручну переривати скрипт і знову запускати його з опцією <code>--append</code>. У майбутньому сценарій слід змінити, щоб накладати тайм-аут на кожне викликання GDB.</p></li><li><p>Багатопотокові середовища не підтримуються. Це не впливає на однопроцесорні вбудовані цілі, оскільки вони завжди виконуються в одному потоці, але це обмеження робить профілер несумісним з багатьма іншими програмами. У майбутньому папку стеку слід модифікувати для підтримки кількох стеків викликів на один зразок.</p></li></ul><h2 id="реалізація" tabindex="-1">Реалізація <a class="header-anchor" href="#реалізація" aria-label="Permalink to &quot;Реалізація&quot;">​</a></h2><p>Сценарій розташований за посиланням <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/platforms/nuttx/Debug/poor-mans-profiler.sh" target="_blank" rel="noreferrer">/platforms/nuttx/Debug/poor-mans-profiler.sh</a> Після запуску він виконає вказану кількість вибірок із вказаним інтервалом часу. Зібрані зразки будуть збережені в текстовому файлі у каталозі тимчасових файлів системи (зазвичай <code>/tmp</code>). Після завершення вибіркового відбору сценарій автоматично викличе папку стеку, вихід якої буде збережено в сусідньому файлі в тимчасовому каталозі. Якщо стеки були успішно згорнуті, сценарій викличе сценарій <em>FlameGraph</em> та збереже результат у взаємодійному файлі SVG. Зверніть увагу, що не всі переглядачі зображень підтримують інтерактивні зображення; рекомендується відкрити отриманий SVG у веб-переглядачі.</p><p>Сценарій FlameGraph повинен знаходитися в <code>PATH</code>, інакше PMSP відмовиться запускатися.</p><p>PMSP використовує GDB для збору стек-відстежень. На даний момент використовує <code>arm-none-eabi-gdb</code>, інші інструментальні набори можуть бути додані у майбутньому.</p><p>Для того щоб мати можливість відображати місця розташування пам&#39;яті на символи, сценарій повинен посилатися на виконуваний файл, який в даний момент працює на цільовому пристрої. Це робиться за допомогою опції <code>--elf=&lt;file&gt;</code>, яка очікує шлях (відносно кореня сховища), що вказує на місце розташування виконуваного в даний момент ELF.</p><p>Приклад використання:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./poor-mans-profiler.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --elf=build/px4_fmu-v4_default/px4_fmu-v4_default.elf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --nsamples=30000</span></span></code></pre></div><p>Зверніть увагу, що кожен запуск скрипта перезапише старі стеки. Якщо ви хочете додати до старих стеків замість їх перезапису, скористайтеся опцією <code>--append</code>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./poor-mans-profiler.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --elf=build/px4_fmu-v4_default/px4_fmu-v4_default.elf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --nsamples=30000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --append</span></span></code></pre></div><p>Як можна запідозрити, <code>--append</code> з <code>--nsamples=0</code> буде вказувати скрипту лише регенерувати SVG без доступу до цілі взагалі.</p><p>Будь ласка, прочитайте сценарій для більш глибокого розуміння того, як це працює.</p>',35),t=[h];function n(r,k,o,d,F,g){return e(),a("div",null,t)}const m=i(p,[["render",n]]);export{u as __pageData,m as default};
