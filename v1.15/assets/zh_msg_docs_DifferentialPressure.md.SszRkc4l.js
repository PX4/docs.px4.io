import{_ as s,c as e,o as i,ab as a}from"./chunks/framework.CUflZczI.js";const f=JSON.parse('{"title":"DifferentialPressure (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/msg_docs/DifferentialPressure.md","filePath":"zh/msg_docs/DifferentialPressure.md"}'),n={name:"zh/msg_docs/DifferentialPressure.md"},t=a(`<h1 id="differentialpressure-uorb-message" tabindex="-1">DifferentialPressure (UORB message) <a class="header-anchor" href="#differentialpressure-uorb-message" aria-label="Permalink to &quot;DifferentialPressure (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/DifferentialPressure.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp                     # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 device_id                     # unique device ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the sensor that does not change between power cycles</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 differential_pressure_pa     # differential pressure reading in </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pascals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (may be </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">negative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 temperature                  # Temperature provided by sensor in degrees Celsius, NAN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unknown</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 error_count                   # Number of errors detected by driver</span></span></code></pre></div>`,3),r=[t];function l(p,h,o,d,c,k){return i(),e("div",null,r)}const u=s(n,[["render",l]]);export{f as __pageData,u as default};
