import{_ as s,a as i}from"./chunks/jmavsim_windows_cygwin.CfDOigpC.js";import{_ as a,c as n,o as t,ab as e}from"./chunks/framework.CUflZczI.js";const y=JSON.parse('{"title":"Середовище розробки Windows (засноване на Cygwin)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/dev_setup/dev_env_windows_cygwin.md","filePath":"uk/dev_setup/dev_env_windows_cygwin.md"}'),l={name:"uk/dev_setup/dev_env_windows_cygwin.md"},p=e('<h1 id="середовище-розробки-windows-засноване-на-cygwin" tabindex="-1">Середовище розробки Windows (засноване на Cygwin) <a class="header-anchor" href="#середовище-розробки-windows-засноване-на-cygwin" aria-label="Permalink to &quot;Середовище розробки Windows (засноване на Cygwin)&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Це середовище розробки <a href="./../advanced/community_supported_dev_env.html">підтримується та утримується спільнотою</a>. Воно може працювати або не працювати з поточними версіями PX4.</p><p>Цей інструментарій був рекомендований раніше, але наразі не працює з PX4 v1.12 і новіше через проблеми з пакетами. Бажано використовувати <a href="./../dev_setup/dev_env_windows_wsl.html">Windows WSL2-Based Development Environment</a>.</p><p>Дивіться <a href="./../dev_setup/dev_env.html">Встановлення інструментарію</a> для отримання інформації про середовища та інструменти, які підтримуються основною командою розробників.</p></div><p>Наступні інструкції пояснюють як налаштувати (на базі Cygwin) середовище розробки на Windows 10 для PX4. Це середовище можна використовувати для створення PX4:</p><ul><li>Pixhawk та іншого апаратного забезпечення на основі NuttX</li><li><a href="./../sim_jmavsim/">Симуляція jMAVSim</a></li></ul><p><a id="installation"></a></p><h2 id="інструкціі-з-установки" tabindex="-1">Інструкції з установки <a class="header-anchor" href="#інструкціі-з-установки" aria-label="Permalink to &quot;Інструкції з установки&quot;">​</a></h2><ol><li><p>Завантажте останню версію готового до використання MSI інсталятора з: <a href="https://github.com/PX4/windows-toolchain/releases" target="_blank" rel="noreferrer">Github сторінки релізів</a> або <a href="https://s3-us-west-2.amazonaws.com/px4-tools/PX4+Windows+Cygwin+Toolchain/PX4+Windows+Cygwin+Toolchain+0.9.msi" target="_blank" rel="noreferrer">Amazon S3</a> (швидке завантаження).</p></li><li><p>Запустіть, оберіть потрібне місце установки, дочекайтесь встановлення:</p><p><img src="'+s+`" alt="jMAVSimOnWindows"></p></li><li><p>Позначте прапорець в кінці інсталяції <em>клонувати репозиторій PX4, зібрати та запустити симуляцію з jMAVSim</em> (це спрощує процес, щоб ви могли почати).</p></li></ol><p>:::note Якщо ви пропустили цей крок, потрібно <a href="#getting-started">клонувати репозиторій PX4-Autopilot вручну</a>. :::</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>На момент написання встановлювачу бракує деяких залежностей (й ви не можете зібрати та додати їх, дивіться <a href="https://github.com/PX4/PX4-windows-toolchain/issues/31" target="_blank" rel="noreferrer">PX4-windows-toolchain#31</a>).</p><p>Щоб додати їх самостійно:</p><ol><li><p>Перейдіть в директорію встановлення інструментів (за замовчуванням <strong>C:\\PX4\\</strong>)</p></li><li><p>Запустіть <strong>run-console.bat</strong> (подвійний клік), щоб запустити bash консоль у середовищі Cygwin подібному до Linux.</p></li><li><p>Введіть в консолі наступну команду:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kconfiglib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonschema</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> future</span></span></code></pre></div></li></ol></div><h2 id="початок-роботи" tabindex="-1">Початок роботи <a class="header-anchor" href="#початок-роботи" aria-label="Permalink to &quot;Початок роботи&quot;">​</a></h2><p>Інструментарій використовує спеціально налаштовану консоль (яка запускається скриптом <strong>run-console.bat</strong>) з якої ви можете запускати звичайні команди збірки PX4:</p><ol><li>Перейдіть в директорію встановлення інструментів (за замовчуванням <strong>C:\\PX4\\</strong>)</li><li>Запустіть <strong>run-console.bat</strong> (подвійний клік), щоб запустити bash консоль у Cygwin (потрібно використовувати цю консоль для збірки PX4).</li><li>Клонуйте репозиторій PX4 PX4-Autopilot з цієї консолі:</li></ol><p>:::note Пропустіть цей крок, якщо ви обрали у встановлювачі <em>клонувати репозитарій PX4, зібрати та запустити симуляцію з jMAVSim</em>. Клонування потрібно зробити тільки один раз! :::</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Клонувати репозиторій PX4-Autopilot в домашню теку &amp; підмодулі завантажують паралельно</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span></code></pre></div><p>Тепер можна використовувати консоль/PX4-Autopilot репозиторій для збірки PX4.</p><ol><li><p>Наприклад, для запуску JMAVSim:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Перейдіть до репозиторію PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Firmware</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Збирає і запускає SITL симуляцію з jMAVSim, щоб протестувати налаштування</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jmavsim</span></span></code></pre></div><p>Після цього консоль покаже:</p><p><img src="`+i+`" alt="jMAVSimOnWindows"></p></li></ol><h2 id="наступні-кроки" tabindex="-1">Наступні кроки <a class="header-anchor" href="#наступні-кроки" aria-label="Permalink to &quot;Наступні кроки&quot;">​</a></h2><p>Після того, як ви закінчите налаштування інструментів командного рядка:</p><ul><li>Install the <a href="./../dev_setup/qgc_daily_build.html">QGroundControl Daily Build</a></li><li>Переходьте до <a href="./../dev_setup/building_px4.html">інструкцій збірки</a>.</li></ul><h2 id="усунення-проблем" tabindex="-1">Усунення проблем <a class="header-anchor" href="#усунення-проблем" aria-label="Permalink to &quot;Усунення проблем&quot;">​</a></h2><h3 id="інструменти-моніторингу-фаилів-проти-швидкості-інструментарію" tabindex="-1">Інструменти моніторингу файлів проти швидкості інструментарію <a class="header-anchor" href="#інструменти-моніторингу-фаилів-проти-швидкості-інструментарію" aria-label="Permalink to &quot;Інструменти моніторингу файлів проти швидкості інструментарію&quot;">​</a></h3><p>Антивірус та інші інструменти моніторингу файлів у фоні можуть суттєво сповільнити встановлення інструментів та збірки PX4.</p><p>Можливо знадобиться тимчасово зупинити їх під час збірки (на власний розсуд).</p><h3 id="особливі-випадки-windows-git" tabindex="-1">Особливі випадки Windows &amp; Git <a class="header-anchor" href="#особливі-випадки-windows-git" aria-label="Permalink to &quot;Особливі випадки Windows &amp; Git&quot;">​</a></h3><h4 id="символи-закінчення-рядків-windows-cr-lf-проти-unix-lf" tabindex="-1">Символи закінчення рядків Windows CR+LF проти Unix LF <a class="header-anchor" href="#символи-закінчення-рядків-windows-cr-lf-проти-unix-lf" aria-label="Permalink to &quot;Символи закінчення рядків Windows CR+LF проти Unix LF&quot;">​</a></h4><p>Ми рекомендуємо примусити використання закінчення рядків Unix LF для кожного репозиторію, з яким ви працюєте з цим інструментарієм (також використовуйте редактор, який залишає їх незмінними під час збереження змін, тобто Eclipse або VSCode). Компіляція файлів вихідного коду також працює з закінченнями рядків CR+LF отриманих локально, але є випадки у Cygwin (наприклад виконання скриптів оболонки) які потребують закінчення рядків Unix (інакше ви отримаєте помилки типу <code>$&#39;\\r&#39;: Command not found.</code>). На щастя, git може це зробити для вас, якщо виконаєте дві команди в кореневому каталозі вашого репозиторію:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.autocrlf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.eol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lf</span></span></code></pre></div><p>Якщо ви працюєте з цим інструментарієм в декількох репозиторіях, ви також можете встановити ці дві конфігурації глобально для вашого комп&#39;ютера:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>Це не рекомендується, оскільки це може вплинути на будь-які інші (непов&#39;язані) випадки використання git на вашій Windows машині.</p><h4 id="біт-виконання-прав-доступу-unix" tabindex="-1">Біт виконання прав доступу Unix <a class="header-anchor" href="#біт-виконання-прав-доступу-unix" aria-label="Permalink to &quot;Біт виконання прав доступу Unix&quot;">​</a></h4><p>Під Unix є прапорець в правах доступу кожного файлу, який вказує на те, чи дозволено файлу виконуватись. <em>git</em> під Cygwin підтримує і враховує цей біт (навіть якщо файлова система Windows NTFS не використовує його). Це часто призводить до того що <em>git</em> знаходить &quot;хибнопозитивну&quot; різницю в правах доступу. Вивід diff в результаті може виглядати так:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100644</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100755</span></span></code></pre></div><p>Ми рекомендуємо відключити глобально перевірку прав доступу у Windows, щоб уникнути проблем:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># глобально відключити перевірку біту виконання для комп&#39;ютера</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.fileMode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><p>Для наявних репозиторіїв, що мають цю проблему викликану локальною конфігурацією, додатково виконайте:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># прибрати локальну конфігурацію, щоб застосувати глобальну</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.filemode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># прибрати локальну конфігурацію для всіх підмодулів</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foreach</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.filemode</span></span></code></pre></div>`,37),h=[p];function o(d,k,r,c,g,F){return t(),n("div",null,h)}const m=a(l,[["render",o]]);export{y as __pageData,m as default};
