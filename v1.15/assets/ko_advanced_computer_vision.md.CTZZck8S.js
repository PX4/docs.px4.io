import{_ as e,c as a,o,ab as i}from"./chunks/framework.CUflZczI.js";const f=JSON.parse('{"title":"컴퓨터 비전(광류 센서, 움직임 감지, 관성 주행 시각 측정, 회피)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/advanced/computer_vision.md","filePath":"ko/advanced/computer_vision.md"}'),t={name:"ko/advanced/computer_vision.md"},r=i('<h1 id="컴퓨터-비전-광류-센서-움직임-감지-관성-주행-시각-측정-회피" tabindex="-1">컴퓨터 비전(광류 센서, 움직임 감지, 관성 주행 시각 측정, 회피) <a class="header-anchor" href="#컴퓨터-비전-광류-센서-움직임-감지-관성-주행-시각-측정-회피" aria-label="Permalink to &quot;컴퓨터 비전(광류 센서, 움직임 감지, 관성 주행 시각 측정, 회피)&quot;">​</a></h1><p><a href="https://en.wikipedia.org/wiki/Computer_vision" target="_blank" rel="noreferrer">컴퓨터 비전</a>은 컴퓨터가 시각 데이터를 활용하여 실제 환경을 이해하는 기술입니다.</p><p>PX4 uses computer vision systems (primarily running on <a href="./../companion_computer/">Companion Computers</a>) in order to support the following features:</p><ul><li><a href="#optical-flow">광류(Optical flow)</a>는 2D 속도 추정을 제공합니다(아래로 향하는 카메라와 아래로 향하는 거리 센서 사용).</li><li><a href="#motion-capture">Motion Capture</a> provides 3D pose estimation using a vision system that is <em>external</em> to the vehicle. 주로 실내 내비게이션에 사용됩니다.</li><li><a href="#visual-inertial-odometry-vio">Visual Inertial Odometry</a>는 온보드 비전 시스템과 IMU를 사용하여 3D 자세 및 속도 추정을 제공합니다. It is used for navigation when GNSS position information is absent or unreliable.</li><li><a href="./../computer_vision/obstacle_avoidance.html">장애물 회피</a>는 계획된 경로를 비행시 장애물 주위를 탐색합니다(현재 임무가 지원됨). This uses <a href="https://github.com/PX4/PX4-Avoidance" target="_blank" rel="noreferrer">PX4/PX4-Avoidance</a> running on a companion computer.</li><li><a href="./../computer_vision/collision_prevention.html">충돌 방지</a>는 장애물에 충돌하기 전에 차량을 멈추는 데 사용됩니다(주로 수동 모드에서 비행할 때).</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./../complete_vehicles/px4_vision_kit.html">PX4 Vision Autonomy Development Kit</a>(Holybro)는 PX4에서 컴퓨터 비전으로 작업하는 개발자를 위한 강력하고 저렴한 키트입니다. It comes with no pre-installed software, but does include an example implementation of obstacle avoidance to demonstrate the capabilities of the platform.</p></div><h2 id="모션-캡쳐" tabindex="-1">모션 캡쳐 <a class="header-anchor" href="#모션-캡쳐" aria-label="Permalink to &quot;모션 캡쳐&quot;">​</a></h2><p>Motion Capture (MoCap) is a technique for estimating the 3D <em>pose</em> (position and orientation) of a vehicle using a positioning mechanism that is <em>external</em> to the vehicle. MoCap systems most commonly detect motion using infrared cameras, but other types of cameras, Lidar, or Ultra Wideband (UWB) may also be used.</p><div class="info custom-block"><p class="custom-block-title">MoCap is commonly used to navigate a vehicle in situations where GPS is absent (e.g. indoors), and provides position relative to a <em>local</em> coordinate system.</p></div><p>MoCap 기술에 대해 더 알아보려면 다음을 참고하십시오:</p><ul><li><a href="./../ros/external_position_estimation.html">외부 위치 추정</a></li><li><a href="./../tutorials/motion-capture.html">움직임 감지(Motion Capture)기술을 활용한 비행 (VICON, Optitrack)</a></li><li><a href="./../advanced_config/tuning_the_ecl_ekf.html#external-vision-system">EKF &gt; 외부 비전 시스템</a></li></ul><h2 id="시각적-관성-주행-거리-측정-vio" tabindex="-1">시각적 관성 주행 거리 측정(VIO) <a class="header-anchor" href="#시각적-관성-주행-거리-측정-vio" aria-label="Permalink to &quot;시각적 관성 주행 거리 측정(VIO)&quot;">​</a></h2><p>Visual Inertial Odometry (VIO) is used for estimating the 3D <em>pose</em> (position and orientation) and <em>velocity</em> of a moving vehicle relative to a <em>local</em> starting position. 보통 GPS가 빠졌거나 (예: 실내) 신뢰할 수 없을 때(예: 다리 아래로 비행할 경우) 기체 운행에 활용합니다.</p><p>VIO uses <a href="https://en.wikipedia.org/wiki/Visual_odometry" target="_blank" rel="noreferrer">Visual Odometry</a> to estimate vehicle <em>pose</em> from visual information, combined with inertial measurements from an IMU (to correct for errors associated with rapid vehicle movement resulting in poor image capture).</p><p>:::note VIO와 <a href="#motion-capture">MoCap</a>의 한 가지 차이점은 VIO 카메라/IMU가 차량 기반이며 추가로 속도 정보를 제공하는 것입니다. :::</p><p>PX4의 VIO 설정 방법을 더 알아보려면 다음을 참고하십시오:</p><ul><li><a href="./../advanced_config/tuning_the_ecl_ekf.html#external-vision-system">EKF &gt; 외부 비전 시스템</a></li><li><a href="./../peripherals/camera_t265_vio.html">T265 설정 안내서</a></li></ul><h2 id="광류" tabindex="-1">광류 <a class="header-anchor" href="#광류" aria-label="Permalink to &quot;광류&quot;">​</a></h2><p><a href="./../sensor/optical_flow.html">광류 센서(Optical Flow)</a> 기술로 2차원 평면상의 속도를 추정합니다(아래 방향으로 향한 카메라와 아래 방향으로 향한 거리 센서 활용).</p><p>광류 센서 기술을 더 알아보려면 다음을 참고하십시오.</p><ul><li><a href="./../sensor/optical_flow.html">광류</a></li><li><a href="./../advanced_config/tuning_the_ecl_ekf.html#optical-flow">EKF &gt; 광류</a></li></ul><h2 id="comparisons" tabindex="-1">Comparisons <a class="header-anchor" href="#comparisons" aria-label="Permalink to &quot;Comparisons&quot;">​</a></h2><h3 id="optical-flow-vs-vio-for-local-position-estimation" tabindex="-1">Optical Flow vs VIO for Local Position Estimation <a class="header-anchor" href="#optical-flow-vs-vio-for-local-position-estimation" aria-label="Permalink to &quot;Optical Flow vs VIO for Local Position Estimation&quot;">​</a></h3><p>Both these techniques use cameras and measure differences between frames. Optical flow uses a downward facing camera, while VIO uses a stereo camera or a 45 degree tracking camera. Assuming both are well calibrated, which is better for local position estimation?</p><p>The consensus <a href="https://discuss.px4.io/t/vio-vs-optical-flow/34680" target="_blank" rel="noreferrer">appears to be</a>:</p><p>Optical flow:</p><ul><li>Downward facing optical flow gives you a planar velocity thats corrected for angular velocity with the gyro.</li><li>Requires an accurate distance to the ground and assumes a planar surface. Given those conditions it can be just as accurate/reliable as VIO (such as indoor flight)</li><li>Is more robust than VIO as it has fewer states.</li><li>Is significantly cheaper and easier to set up as it only requires a flow sensor, a rangefinder, and setting up a few parameters (which can be connected to the flight controller).</li></ul><p>VIO:</p><ul><li>Is more expensive to purchase and harder to set up. It requires a separate companion computer, calibration, software, configuration and so on.</li><li>Will be less effective if there are no point features to track (in practice the real world generally has point features).</li><li>Is more flexible, allowing additional features such as obstacle avoidance and mapping.</li></ul><p>A combination (fusing both) is probably the most reliable, though not necessary in most real-world scenarios. Normally you will select the system that suits your operating environment, required features, and cost constraints:</p><ul><li>Use VIO if you plan on flying outdoors without GPS (or outdoors and indoors), or if you need to support obstacle avoidance and other computer vision features.</li><li>Use Optical Flow if you plan on only flying indoors (without GPS) and cost is an important consideration.</li></ul><h2 id="외부-참고-자료" tabindex="-1">외부 참고 자료 <a class="header-anchor" href="#외부-참고-자료" aria-label="Permalink to &quot;외부 참고 자료&quot;">​</a></h2><ul><li><a href="https://github.com/robin-shaun/XTDrone/blob/master/README.en.md" target="_blank" rel="noreferrer">XTDrone</a> - 컴퓨터 비전용 ROS + PX4 시뮬레이션 환경입니다. <a href="https://www.yuque.com/xtdrone/manual_en" target="_blank" rel="noreferrer">XTDrone 설명서</a>에 시작에 필요한 모든 내용이 들어있습니다!</li></ul>',32),n=[r];function s(l,c,p,m,h,u){return o(),a("div",null,n)}const v=e(t,[["render",s]]);export{f as __pageData,v as default};
