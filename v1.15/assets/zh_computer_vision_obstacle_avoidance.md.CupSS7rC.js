import{_ as e,c as a,o as i,ab as o}from"./chunks/framework.CUflZczI.js";const _=JSON.parse('{"title":"避障功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh/computer_vision/obstacle_avoidance.md","filePath":"zh/computer_vision/obstacle_avoidance.md"}'),t={name:"zh/computer_vision/obstacle_avoidance.md"},r=o('<h1 id="避障功能" tabindex="-1">避障功能 <a class="header-anchor" href="#避障功能" aria-label="Permalink to &quot;避障功能&quot;">​</a></h1><p><em>自主避障</em> 可以使载具在沿预定路线前进时，能够自动绕开障碍物。</p><p>该功能需要运行计算机视觉软件的机载计算机。 该软件对期望路线重新规划，在导航绕开障碍物，并选取最佳路径。</p><p>自主避障适用于自动化模式，目前仅支持多旋翼飞行器的 <a href="#mission_mode">任务Missions</a> 和 <a href="#offboard_mode">Offboard</a> 模式。</p><p>本文将阐述怎样在这两种模式中设置自主避障功能。</p><h2 id="局限-能力" tabindex="-1">局限 / 能力 <a class="header-anchor" href="#局限-能力" aria-label="Permalink to &quot;局限 / 能力&quot;">​</a></h2><ul><li>自主避障的最大速度当前约为 3m/s（由于计算避障路径的开销）。</li></ul><p>:::note 避障可以使用 <em>局部规划器</em> 以约 30Hz 的速度发出消息，并且以约 3m/s的速度移动）或全局规划器（以约 10Hz 和任务速度发出消息，自主避障速度约为 1-1.5 m/s）。 :::</p><p><a id="offboard_mode"></a></p><h2 id="offboard模式避障" tabindex="-1">Offboard模式避障 <a class="header-anchor" href="#offboard模式避障" aria-label="Permalink to &quot;Offboard模式避障&quot;">​</a></h2><p>PX4 在 <a href="./../flight_modes/offboard.html">Offboard 模式</a>中支持自主避障功能。</p><p>期望路径来自在配套计算机上运行的一个 <a href="./../ros/README.html">ROS</a> 节点。 并传递给自主避障模块（另一个 ROS 节点）。 避障软件将规划路径通过 <code>SET_POSITION_TARGET_LOCAL_NED</code> 消息流发送给飞行控制栈。</p><p>PX4中唯一需要的配置是将 PX4 设置为 <em>Offboard 模式</em>。</p><p>机载计算机中的硬件设置和软/硬件配置在 Github 仓库 <a href="https://github.com/PX4/PX4-Avoidance" target="_blank" rel="noreferrer">PX4/avoidance</a> 中已经提供。</p><p><a id="mission_mode"></a></p><h2 id="任务模式避障" tabindex="-1">任务模式避障 <a class="header-anchor" href="#任务模式避障" aria-label="Permalink to &quot;任务模式避障&quot;">​</a></h2><p>PX4支持 <a href="./../flight_modes/mission.html">任务模式</a> 避障，需要使用一台独立的运行避障软件的机载计算机配合。</p><h3 id="任务模式的变化" tabindex="-1">任务模式的变化 <a class="header-anchor" href="#任务模式的变化" aria-label="Permalink to &quot;任务模式的变化&quot;">​</a></h3><p>在开启自主避障功能时，任务模式的行为和原本规划的行为会有<em>些许不同</em>。</p><p>激活避障之后的不同之处有：</p><ul><li>飞机距离目标航点小于阈值半径，即判定为抵达，不考虑航向。 <ul><li>在普通任务模式下，飞机必须沿某一航向抵达目标航点（比如从上一航点沿直线靠近）。 开启自主避障后该约束失效，因为避障算法完全控制了飞机的航向，并且飞机始终在当前视野中移动。</li></ul></li><li>PX4 starts emitting a new current/next waypoint once the previous waypoint is reached (i.e. as soon as the vehicle enters its acceptance radius).</li><li>If a waypoint is <em>inside</em> an obstacle it may be unreachable (and the mission will be stuck). <ul><li>如果飞机在上一航点与当前航点连线上的投影经过了当前航点，阈值半径将被放大，当前航点将被标记为抵达。</li><li>If the vehicle is within the x-y acceptance radius, the altitude acceptance is modified such that the mission progresses (even if it is not in the altitude acceptance radius).</li></ul></li><li>The original mission speed (as set in <em>QGroundControl</em>/PX4) is ignored. 速度将由避障软件决定： <ul><li><em>local planner</em> mission speed is around 3 m/s.</li><li><em>global planner</em> mission speed is around 1-1.5 m/s.</li></ul></li></ul><p>If PX4 stops receiving setpoint updates for more than half a second it will switch into <a href="./../flight_modes_mc/hold.html">Hold mode</a>.</p><h3 id="px4-配置" tabindex="-1">PX4 配置 <a class="header-anchor" href="#px4-配置" aria-label="Permalink to &quot;PX4 配置&quot;">​</a></h3><p>PX4 通过 <a href="./../advanced_config/parameters.html">设置</a> 参数 <a href="./../advanced_config/parameter_reference.html#COM_OBS_AVOID">COM_OBS_AVOID</a> 为1 来使能自主避障功能。</p><p>:::note <code>COM_OBS_AVOID</code> 还使能了 <a href="./../computer_vision/safe_landing.html">安全着陆</a>，以及使用了 PX4 <a href="./../computer_vision/path_planning_interface.html">Path Planning Offboard Interface</a> （轨迹接口）将外部路径规划服务与 PX4 集成的其他功能。 :::</p><h2 id="机载计算机设置" tabindex="-1">机载计算机设置 <a class="header-anchor" href="#机载计算机设置" aria-label="Permalink to &quot;机载计算机设置&quot;">​</a></h2><p>Companion-side hardware setup and hardware/software configuration is provided in the <a href="https://github.com/PX4/PX4-Avoidance" target="_blank" rel="noreferrer">PX4/PX4-Avoidance</a> Github repo.</p><p>Obstacle avoidance in missions can use either the <em>local planner</em> or <em>global planner</em> (the local planner is recommended/better performing).</p><p><a id="interface"></a></p><h2 id="自主避障接口" tabindex="-1">自主避障接口 <a class="header-anchor" href="#自主避障接口" aria-label="Permalink to &quot;自主避障接口&quot;">​</a></h2><p>PX4 使用 <a href="./../computer_vision/path_planning_interface.html">Path Planning Offboard Interface</a> 集成机载计算机中的路径规划服务（包括 <a href="./../computer_vision/obstacle_avoidance.html#mission_mode">任务中自主避障</a>，<a href="./../computer_vision/safe_landing.html">安全着陆</a> 以及更多的服务）。</p><p>The interface (messages sent) between PX4 and the companion are <em>exactly</em> the same as for any other path planning services.</p><h2 id="支持的硬件" tabindex="-1">支持的硬件 <a class="header-anchor" href="#支持的硬件" aria-label="Permalink to &quot;支持的硬件&quot;">​</a></h2><p>Tested companion computers and cameras are listed in <a href="https://github.com/PX4/PX4-Avoidance#run-on-hardware" target="_blank" rel="noreferrer">PX4/PX4-Avoidance</a>.</p>',34),n=[r];function s(l,h,d,c,p,m){return i(),a("div",null,n)}const u=e(t,[["render",s]]);export{_ as __pageData,u as default};
