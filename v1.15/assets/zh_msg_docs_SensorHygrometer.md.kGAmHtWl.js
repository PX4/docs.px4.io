import{_ as s,c as e,o as a,ab as i}from"./chunks/framework.CUflZczI.js";const k=JSON.parse('{"title":"SensorHygrometer (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/msg_docs/SensorHygrometer.md","filePath":"zh/msg_docs/SensorHygrometer.md"}'),t={name:"zh/msg_docs/SensorHygrometer.md"},n=i(`<h1 id="sensorhygrometer-uorb-message" tabindex="-1">SensorHygrometer (UORB message) <a class="header-anchor" href="#sensorhygrometer-uorb-message" aria-label="Permalink to &quot;SensorHygrometer (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/SensorHygrometer.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp          # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 device_id          # unique device ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the sensor that does not change between power cycles</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32  temperature      # Temperature provided by </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Celsius)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 humidity          # Humidity provided by sensor</span></span></code></pre></div>`,3),r=[n];function o(l,p,h,c,d,m){return a(),e("div",null,r)}const E=s(t,[["render",o]]);export{k as __pageData,E as default};
