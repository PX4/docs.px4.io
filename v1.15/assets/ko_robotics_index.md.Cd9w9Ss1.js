import{_ as e,c as i,o,ab as t}from"./chunks/framework.CUflZczI.js";const f=JSON.parse('{"title":"로봇공학","description":"","frontmatter":{},"headers":[],"relativePath":"ko/robotics/index.md","filePath":"ko/robotics/index.md"}'),a={name:"ko/robotics/index.md"},r=t('<h1 id="로봇공학" tabindex="-1">로봇공학 <a class="header-anchor" href="#로봇공학" aria-label="Permalink to &quot;로봇공학&quot;">​</a></h1><p>Drone APIs let you write code to control and integrate with PX4-powered vehicles, without having to understand intimate details of the vehicle and flight stack, or having to think about safety-critical behaviour.</p><p>PX4는 <a href="https://mavsdk.mavlink.io/" target="_blank" rel="noreferrer">MAVSDK</a> 및 <a href="./../ros/README.html">ROS</a>를 포함하는 로봇 공학 API와 함께 사용할 수 있습니다. Drone APIs allow you to do this using high level instructions in your programming language of choice, and the code can then run on-vehicle in a <a href="./../companion_computer/">companion computer</a> or from a ground station. Under the the hood the APIs communicate with PX4 using <a href="./../middleware/mavlink.html">MAVLink</a> or <a href="./../middleware/uxrce_dds.html">uXRCE-DDS</a>.</p><p>PX4 supports the following SDKs/Robotics tools:</p><ul><li><a href="https://mavsdk.mavlink.io/" target="_blank" rel="noreferrer">MAVSDK</a></li><li><a href="./../ros/">ROS 2</a></li><li><a href="./../ros/">ROS 1</a></li></ul><h2 id="what-api-should-i-use" tabindex="-1">What API should I use? <a class="header-anchor" href="#what-api-should-i-use" aria-label="Permalink to &quot;What API should I use?&quot;">​</a></h2><p>We recommend using MAVSDK where possible, primarily because it is far more intuitive and easier to learn. It can also run on more operating systems and less performant-hardware.</p><p>You may prefer ROS if you already know how to use it, or if you want to leverage pre-existing integrations (for example computer vision tasks). More generally, ROS is likely to be a better choice for tasks that require very low latency or a deeper integration with PX4 than is provided by MAVLink.</p><p>The main difference are:</p><ul><li><strong>MAVSDK:</strong><ul><li>Intuitive and optimised for drones, with a small learning curve and easy setup.</li><li>You can write apps in C++, Python, Swift, Java, Go, and more.</li><li>Runs on resource-constrained hardware</li><li>Runs on broad range of OSs, including Android, Linux, Windows.</li><li>Communicates over MAVLink. <ul><li>Stable and widely supported.</li><li>Limited to MAVLink services - needed information may not be exposed.</li><li>Latency may be too high for some use cases.</li></ul></li></ul></li><li><strong>ROS:</strong><ul><li>General-purpose robotics API that has been extended to support drone integration: <ul><li>Conceptually not as well optimised for drones</li><li>Significant learning curve</li></ul></li><li>Many pre-existing libraries: useful for code-reuse.</li><li>Supports C++ and Python libraries</li><li>Runs on Linux</li><li>ROS 2 is the latest version, which connects via DDS. <ul><li>DDS interface layer allows deep integration into any aspect of PX4 that is exposed as a UORB topic (almost everything).</li><li>Can provide much lower latency.</li><li>Still under development. At time of writing requires a deeper understanding of PX4 than ROS 1</li></ul></li><li>ROS 1 is the older version that can connect over MAVLink or via ROS 2. Users are encouraged to update to ROS 2 for new projects.</li></ul></li></ul>',10),n=[r];function l(s,d,u,h,c,p){return o(),i("div",null,n)}const g=e(a,[["render",l]]);export{f as __pageData,g as default};
