import{_ as s,c as a,o as e,ab as i}from"./chunks/framework.CUflZczI.js";const u=JSON.parse('{"title":"외부 모듈(별도)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/advanced/out_of_tree_modules.md","filePath":"ko/advanced/out_of_tree_modules.md"}'),t={name:"ko/advanced/out_of_tree_modules.md"},l=i(`<h1 id="외부-모듈-별도" tabindex="-1">외부 모듈(별도) <a class="header-anchor" href="#외부-모듈-별도" aria-label="Permalink to &quot;외부 모듈(별도)&quot;">​</a></h1><p>외부 모듈은 개발자가 PX4 펌웨어에 추가(또는 업데이트)하려는 독점 모듈을 관리/그룹화할 수 있는 편리한 메커니즘을 제공합니다. 외부 모듈은 내부 모듈과 같이 사용할 수 있으며, uORB로 내부 모듈과 상호 작용할 수 있습니다.</p><p>PX4 빌드에 외부(&quot;out of tree&quot;) 모듈을 추가하는 방법을 설명합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>가능하면, 변경 사항을 PX4에 제공할 것을 권장합니다!</p></div><h2 id="사용법" tabindex="-1">사용법 <a class="header-anchor" href="#사용법" aria-label="Permalink to &quot;사용법&quot;">​</a></h2><p>외부 모듈을 만들려면:</p><ul><li><p>Create an <em>external directory</em> folder for grouping the external modules:</p><ul><li>이것은 <strong>PX4-Autopilot</strong> 트리 외부 위치에 있을 수 있습니다.</li><li><strong>PX4-Autopilot</strong>과 구조가 동일하여야 합니다(즉, <strong>src</strong>라는 디렉토리를 포함하여야 함).</li><li>나중에 <code>EXTERNAL_MODULES_LOCATION</code>을 사용하여 이 디렉토리를 참조합니다.</li></ul></li><li><p>기존 모듈(예: <strong>examples/px4_simple_app</strong>)을 외부 디렉토리에 복사하거나 새 모듈을 직접 만듭니다.</p></li><li><p>Rename the module (including <code>MODULE</code> in <strong>CMakeLists.txt</strong>) or remove it from the existing PX4-Autopilot <em>cmake</em> build config. 이것은 내부 모듈과의 충돌을 피하기 위한 것입니다.</p></li><li><p>콘텐츠가 있는 외부 디렉터리에 <strong>CMakeLists.txt</strong> 파일을 추가합니다.</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_module_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules/&lt;new_module&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div></li><li><p>내부의 <code>modules/&lt;new_module&gt;/CMakeLists.txt</code>에 <code>EXTERNAL</code> 줄을 추가합니다. 예를 들면, <code>px4_add_module()</code>와 같습니다.</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">px4_add_module(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MODULE modules__test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MAIN test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  STACK_MAIN 2000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SRCS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      px4_simple_app.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  DEPENDS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      platforms__common</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EXTERNAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span></code></pre></div></li></ul><h2 id="별도-uorb-메시지-정의" tabindex="-1">별도 uORB 메시지 정의 <a class="header-anchor" href="#별도-uorb-메시지-정의" aria-label="Permalink to &quot;별도 uORB 메시지 정의&quot;">​</a></h2><p>uORB 메시지는 트리 외부에서 정의할 수 있습니다. 이를 위해서는 <code>$EXTERNAL_MODULES_LOCATION/msg</code> 폴더가 있어야 합니다.</p><ul><li><p>새 메시지 정의를 <code>$EXTERNAL_MODULES_LOCATION/msg</code> 디렉토리에 배치합니다. 이러한 새로운 트리 외부 메시지 정의의 형식은 다른 모든 <a href="./../middleware/uorb.html#adding-a-new-topic">uORB 메시지 정의</a>와 동일합니다.</p></li><li><p>콘텐츠가 포함된 <code>$EXTERNAL_MODULES_LOCATION/msg/CMakeLists.txt</code> 파일을 추가합니다.</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_msg_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message1&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message2&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message3&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><p>여기서 <code>&lt;message#&gt;.msg</code>는 처리되고 uORB 메시지 생성에 사용되는 uORB 메시지 정의 파일의 이름입니다.</p></li></ul><p>외부 uORB 메시지는 일반 uORB 메시지와 동일한 위치에 생성됩니다. uORB 주제 헤더는 <code>&lt;build_dir&gt;/uORB/topics/</code>에 생성되며, 메시지 소스 파일은 <code>&lt;build_dir&gt;/msg/topics_sources/</code>에서 생성됩니다.</p><p>새 uORB 메시지는 <a href="./../middleware/uorb.html#adding-a-new-topic">여기</a>에 설명된 대로, 다른 uORB 메시지처럼 사용할 수 있습니다.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>외부 uORB 메시지 정의는 일반 uORB 메시지와 같은 이름을 가질 수 없습니다.</p></div><h2 id="외부-모듈-및-uorb-메시지-빌드" tabindex="-1">외부 모듈 및 uORB 메시지 빌드 <a class="header-anchor" href="#외부-모듈-및-uorb-메시지-빌드" aria-label="Permalink to &quot;외부 모듈 및 uORB 메시지 빌드&quot;">​</a></h2><p><code>make px4_sitl EXTERNAL_MODULES_LOCATION=&lt;path&gt;</code>을 실행합니다.</p><p>다른 빌드 대상을 사용할 수 있지만, 빌드 디렉토리가 아직 존재하지 않아야 합니다. If it already exists, you can also just set the <em>cmake</em> variable in the build folder.</p><p>차후 추가 빌드 과정에서는 <code>EXTERNAL_MODULES_LOCATION</code> 값을 지정할 필요가 없습니다.</p>`,17),n=[l];function p(o,d,c,h,r,E){return e(),a("div",null,n)}const g=s(t,[["render",p]]);export{u as __pageData,g as default};
