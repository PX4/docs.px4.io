import{_ as t,c as e,o as a,ab as l}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"파일 및 코드 설치개발자 환경 설정 (툴체인)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/dev_setup/dev_env.md","filePath":"ko/dev_setup/dev_env.md"}'),r={name:"ko/dev_setup/dev_env.md"},n=l('<h1 id="파일-및-코드-설치개발자-환경-설정-툴체인" tabindex="-1">파일 및 코드 설치개발자 환경 설정 (툴체인) <a class="header-anchor" href="#파일-및-코드-설치개발자-환경-설정-툴체인" aria-label="Permalink to &quot;파일 및 코드 설치개발자 환경 설정 (툴체인)&quot;">​</a></h1><p>The <em>supported platforms</em> for PX4 development are:</p><ul><li><a href="./../dev_setup/dev_env_linux_ubuntu.html">Ubuntu Linux (22.04/20.04/18.04)</a> — Recommended</li><li><a href="./../dev_setup/dev_env_windows_wsl.html">Windows (10/11)</a> — via WSL2</li><li><a href="./../dev_setup/dev_env_mac.html">Mac OS</a></li></ul><h2 id="지원-대상" tabindex="-1">지원 대상 <a class="header-anchor" href="#지원-대상" aria-label="Permalink to &quot;지원 대상&quot;">​</a></h2><p>아래 표는 각 OS에서 구축 가능한 PX 대상을 보여줍니다.</p><table><thead><tr><th>대상</th><th style="text-align:center;">Linux (Ubuntu)</th><th style="text-align:center;">Mac</th><th style="text-align:center;">윈도우</th></tr></thead><tbody><tr><td><strong>NuttX based hardware:</strong> <a href="./../flight_controller/pixhawk_series.html">Pixhawk Series</a>, <a href="./../complete_vehicles_mc/crazyflie2.html">Crazyflie</a></td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Linux 기반 하드웨어:</strong> <a href="./../flight_controller/raspberry_pi_navio2.html">Raspberry Pi 2/3</a></td><td style="text-align:center;">✓</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td><strong>Simulation:</strong> <a href="./../sim_gazebo_gz/">Gazebo SITL</a></td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> <a href="./../sim_gazebo_classic/">Gazebo Classic SITL</a></td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> <a href="./../simulation/ros_interface.html">ROS with Gazebo Classic</a></td><td style="text-align:center;">✓</td><td style="text-align:center;"></td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> ROS 2 with Gazebo</td><td style="text-align:center;">✓</td><td style="text-align:center;"></td><td style="text-align:center;">✓</td></tr></tbody></table><p>숙련된 Docker 사용자는 지속적 통합 시스템 <a href="./../test_and_ci/docker.html">Docker Containers</a>컨테이너로 빌드할 수 있습니다.</p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>위의 명령줄 도구 모음 중 하나를 설정하고, 다음 단계를 실행합니다.</p><ul><li><a href="./../dev_setup/vscode.html">VSCode</a>를 설치합니다(명령줄에 IDE 사용을 선호하는 경우).</li><li>Install the <a href="./../dev_setup/qgc_daily_build.html">QGroundControl Daily Build</a></li><li><a href="./../dev_setup/building_px4.html">PX4 소프트웨어를 구축</a>합니다.</li></ul>',10),d=[n];function i(s,o,c,h,_,u){return a(),e("div",null,d)}const m=t(r,[["render",i]]);export{g as __pageData,m as default};
