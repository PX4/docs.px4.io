import{_ as r}from"./chunks/architecture_xrce-dds_ros2.5IQPlBJ0.js";import{_ as p,E as n,c as d,J as i,m as e,w as a,a as s,ab as o,o as c}from"./chunks/framework.CUflZczI.js";const U=JSON.parse('{"title":"uXRCE-DDS (PX4-ROS 2/DDS Bridge)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/middleware/uxrce_dds.md","filePath":"zh/middleware/uxrce_dds.md"}'),u={name:"zh/middleware/uxrce_dds.md"},k=e("h1",{id:"uxrce-dds-px4-ros-2-dds-bridge",tabindex:"-1"},[s("uXRCE-DDS (PX4-ROS 2/DDS Bridge) "),e("a",{class:"header-anchor",href:"#uxrce-dds-px4-ros-2-dds-bridge","aria-label":'Permalink to "uXRCE-DDS (PX4-ROS 2/DDS Bridge)"'},"​")],-1),g=o('<div class="info custom-block"><p class="custom-block-title">INFO</p><p>uXRCE-DDS replaces the <a href="https://docs.px4.io/v1.13/en/middleware/micrortps.html#rtps-dds-interface-px4-fast-rtps-dds-bridge" target="_blank" rel="noreferrer">Fast-RTPS Bridge</a> used in PX4 v1.13. 该特性可支持PX4和ROS2之间的快速、可靠的集成， 并且使ROS2应用程序更容易获得飞行器信息并向其发送命令。</p></div><p>PX4 uses uXRCE-DDS middleware to allow <a href="./../middleware/uorb.html">uORB messages</a> to be published and subscribed on a companion computer as though they were <a href="./../ros2/user_guide.html">ROS 2</a> topics. This provides a fast and reliable integration between PX4 and ROS 2, and makes it much easier for ROS 2 applications to get vehicle information and send commands.</p><p>PX4 uses an XRCE-DDS implementation that leverages <a href="https://micro-xrce-dds.docs.eprosima.com/en/stable/introduction.html" target="_blank" rel="noreferrer">eProsima Micro XRCE-DDS</a>.</p><p>The following guide describes the architecture and various options for setting up the client and agent. 代理端(Agent)充当客户端的代理，使其能够在DDS全局数据空间中发布和订阅话题。</p><h2 id="软件架构" tabindex="-1">软件架构 <a class="header-anchor" href="#软件架构" aria-label="Permalink to &quot;软件架构&quot;">​</a></h2><p>The uXRCE-DDS middleware consists of a client running on PX4 and an agent running on the companion computer, with bi-directional data exchange between them over a serial or UDP link. The agent acts as a proxy for the client, enabling it to publish and subscribe to topics in the global DDS data space.</p><p><img src="'+r+`" alt="Architecture uXRCE-DDS with ROS 2"></p><p>In order for PX4 uORB topics to be shared on the DDS network you will need <em>uXRCE-DDS client</em> running on PX4, connected to the <em>micro XRCE-DDS agent</em> running on the companion.</p><p>The PX4 <a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a> publishes to/from a defined set of uORB topics to the global DDS data space.</p><p>代理(Agent)本身不依赖客户端测代码，可以独立于PX4或ROS编译或安装。</p><p>The agent itself has no dependency on client-side code and can be built and/or installed independent of PX4 or ROS.</p><p>Code that wants to subscribe/publish to PX4 does have a dependency on client-side code; it requires uORB message definitions that match those used to create the PX4 uXRCE-DDS client so that it can interpret the messages.</p><h2 id="代码生成" tabindex="-1">代码生成 <a class="header-anchor" href="#代码生成" aria-label="Permalink to &quot;代码生成&quot;">​</a></h2><p>The PX4 <a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a> is generated at build time and included in PX4 firmare by default. The agent has no dependency on client code. It can be built standalone or in a ROS 2 workspace, or installed as a snap package on Ubuntu.</p><p>PX4 main分支或release版本构建将自动从当前分支的 <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a> 中导出 uORB 消息子集。</p><p>PX4 main or release builds automatically export the set of uORB messages definitions in the build to an associated branch in <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a>.</p><p>ROS 2 applications need to be built in a workspace that includes the <em>same</em> message definitions that were used to create the uXRCE-DDS client module in the PX4 Firmware. 所有这些方法都需要获取 <em>全部</em> 与客户端通信所需的依赖项 (例如FastCDR)。 Note that all code generation associated with the messages is handled by ROS 2.</p><h2 id="micro-xrce-dds-agent-installation" tabindex="-1">Micro XRCE-DDS Agent Installation <a class="header-anchor" href="#micro-xrce-dds-agent-installation" aria-label="Permalink to &quot;Micro XRCE-DDS Agent Installation&quot;">​</a></h2><p>The Micro XRCE-DDS Agent can be installed on the companion computer using a binary package, built and installed from source, or built and run from within a ROS 2 workspace. All of these methods fetch <em>all</em> the dependencies needed to communicate with the client (such as FastCDR)</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The official (and more complete) installation guide is the Eprosima: <a href="https://micro-xrce-dds.docs.eprosima.com/en/latest/installation.html" target="_blank" rel="noreferrer">micro XRCE-DDS Installation Guide</a>. This section summarises the options that have been tested with PX4 during creation of these docs.</p></div><h3 id="源码安装" tabindex="-1">源码安装 <a class="header-anchor" href="#源码安装" aria-label="Permalink to &quot;源码安装&quot;">​</a></h3><p>On Ubuntu you can build from source and install the Agent standalone using the following commands:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/eProsima/Micro-XRCE-DDS-Agent.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Micro-XRCE-DDS-Agent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ldconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/lib/</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>There are various build configuration options linked from the corresponding topic in the <a href="https://micro-xrce-dds.docs.eprosima.com/en/latest/installation.html#installing-the-agent-standalone" target="_blank" rel="noreferrer">official guide</a>, but these have not been tested.</p></div><p>使用以下命令从 Ubuntu 的 snap 软件包安装：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MicroXRCEAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span></span></code></pre></div><h3 id="从-snap-软件包安装" tabindex="-1">从 Snap 软件包安装 <a class="header-anchor" href="#从-snap-软件包安装" aria-label="Permalink to &quot;从 Snap 软件包安装&quot;">​</a></h3><p>Install from a snap package on Ubuntu using the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> microxrce-ds-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --edge</span></span></code></pre></div><p>To start the agent with settings for connecting to the uXRCE-DDS client running on the simulator (note that the command name is different than if you build the agent locally):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">micro-xrce-dds-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>At time of writing the stable of version installed from snap connects to PX4 but reports errors creating topics. The development version, fetched using <code>--edge</code> above, does work.</p></div><h3 id="build-run-within-ros-2-workspace" tabindex="-1">Build/Run within ROS 2 Workspace <a class="header-anchor" href="#build-run-within-ros-2-workspace" aria-label="Permalink to &quot;Build/Run within ROS 2 Workspace&quot;">​</a></h3><p>The agent can be built and launched within a ROS 2 workspace (or build standalone and launched from a workspace. You must already have installed ROS 2 following the instructions in: <a href="./../ros2/user_guide.html#install-ros-2">ROS 2 User Guide &gt; Install ROS 2</a>.</p><p>To build the agent within ROS:</p>`,35),m=o(`<li><p>Create a workspace directory for the agent:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/px4_ros_uxrce_dds_ws/src</span></span></code></pre></div></li><li><p>Clone the source code for the eProsima <a href="https://github.com/eProsima/Micro-XRCE-DDS-Agent" target="_blank" rel="noreferrer">Micro-XRCE-DDS-Agent</a> to the <code>/src</code> directory (the <code>main</code> branch is cloned by default):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/px4_ros_uxrce_dds_ws/src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/eProsima/Micro-XRCE-DDS-Agent.git</span></span></code></pre></div></li>`,2),b=e("p",null,[s("Source the ROS 2 development environment, and compile the workspace using "),e("code",null,"colcon"),s(":")],-1),y=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/humble/setup.bash")]),s(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"colcon"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")])])])],-1),f=e("p",null,":::",-1),F=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/foxy/setup.bash")]),s(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"colcon"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")])])])],-1),E=e("p",null,": :::",-1),_=e("p",null,[s("This builds all the folders under "),e("code",null,"/src"),s(" using the sourced toolchain.")],-1),C=e("p",null,"To run the micro XRCE-DDS agent in the workspace:",-1),v=e("p",null,[s("Source the "),e("code",null,"local_setup.bash"),s(" to make the executables available in the terminal (also "),e("code",null,"setup.bash"),s(" if using a new terminal).")],-1),D=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/humble/setup.bash")]),s(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install/local_setup.bash")])])])],-1),S=e("p",null,":::",-1),R=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /opt/ros/foxy/setup.bash")]),s(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"source"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install/local_setup.bash")])])])],-1),w=o(`<p>: :::</p><ol><li><p>Start the agent with settings for connecting to the uXRCE-DDS client running on the simulator:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MicroXRCEAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span></span></code></pre></div></li></ol><h2 id="starting-agent-and-client" tabindex="-1">Starting Agent and Client <a class="header-anchor" href="#starting-agent-and-client" aria-label="Permalink to &quot;Starting Agent and Client&quot;">​</a></h2><h3 id="starting-the-agent" tabindex="-1">Starting the Agent <a class="header-anchor" href="#starting-the-agent" aria-label="Permalink to &quot;Starting the Agent&quot;">​</a></h3><p>The agent is used to connect to the client over a particular channel, such as UDP or a serial connection. The channel settings are specified when the agent is started, using command line options. These are documented in the eProsima user guide: <a href="https://micro-xrce-dds.docs.eprosima.com/en/latest/agent.html#agent-cli" target="_blank" rel="noreferrer">Micro XRCE-DDS Agent &gt; Agent CLI</a>. Note that the agent supports many channel options, but PX4 only supports UDP and serial connections.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You should create a single instance of the agent for each channel over which you need to connect.</p></div><p>For example, the PX4 simulator runs the uXRCE-DDS client over UDP on port 8888, so to connect to the simulator you would start the agent with the command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MicroXRCEAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span></span></code></pre></div><p>When working with real hardware, the setup depends on the hardware, OS, and channel. For example, if you&#39;re using the RasPi <code>UART0</code> serial port, you might connect using this command (based on the information in <a href="https://www.raspberrypi.com/documentation/computers/configuration.html#configuring-uarts" target="_blank" rel="noreferrer">Raspberry Pi Documentation &gt; Configuring UARTS</a>):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MicroXRCEAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serial</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/AMA0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 921600</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For more information about setting up communications channels see <a href="./../companion_computer/pixhawk_companion.html#serial-port-setup">Pixhawk + Companion Setup &gt; Serial Port setup</a>, and sub-documents.</p></div><h3 id="starting-the-client" tabindex="-1">Starting the Client <a class="header-anchor" href="#starting-the-client" aria-label="Permalink to &quot;Starting the Client&quot;">​</a></h3><p>The uXRCE-DDS client module (<a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a>) is included by default in all firmware and the simulator. This must be started with appropriate settings for the communication channel that you wish to use to communicate with the agent.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The simulator automatically starts the client on localhost UDP port <code>8888</code> using the default uxrce-dds namespace.</p></div><p>The configuration can be done using the <a href="./../advanced_config/parameter_reference.html#uxrce-dds-client">UXRCE-DDS parameters</a>:</p><ul><li><p><a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_CFG">UXRCE_DDS_CFG</a>: Set the port to connect on, such as <code>TELEM2</code>, <code>Ethernet</code>, or <code>Wifi</code>.</p></li><li><p>If using an Ethernet connection:</p><ul><li><p><a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_PRT">UXRCE_DDS_PRT</a>: Use this to specify the agent UDP listening port. The default value is <code>8888</code>.</p></li><li><p><a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_AG_IP">UXRCE_DDS_AG_IP</a>: Use this to specify the IP address of the agent. The IP address must be provided in <code>int32</code> format as PX4 does not support string parameters. The default value is <code>2130706433</code> which corresponds to the <em>localhost</em> <code>127.0.0.1</code>.</p><p>You can use <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/convert_ip.py" target="_blank" rel="noreferrer">Tools/convert_ip.py</a> to convert between the formats:</p><ul><li><p>To obtain the <code>int32</code> version of an IP in decimal dot notation the command is:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./PX4-Autopilot/Tools/convert_ip.py</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> decimal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> notatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>To get the IP address in decimal dot notation from the <code>int32</code> version:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./PX4-Autopilot/Tools/convert_ip.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> int32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> notatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li></ul></li></ul></li><li><p>If using a serial connection:</p><ul><li><a href="./../advanced_config/parameter_reference.html#SER_TEL2_BAUD">SER_TEL2_BAUD</a>, <a href="./../advanced_config/parameter_reference.html#SER_URT6_BAUD">SER_URT6_BAUD</a> (and so on): Use the <code>_BAUD</code> parameter associated with the serial port to set the baud rate. For example, you&#39;d set a value for <code>SER_TEL2_BAUD</code> if you are connecting to the companion using <code>TELEM2</code>. For more information see <a href="./../peripherals/serial_configuration.html#serial-port-configuration">Serial port configuration</a>.</li></ul></li><li><p>Some setups might also need these parameters to be set:</p><ul><li><a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_KEY">UXRCE_DDS_KEY</a>: The uXRCE-DDS key. If you&#39;re working in a multi-client, single agent configuration, each client should have a unique non-zero key. This is primarily important for multi-vehicle simulations, where all clients are connected in UDP to the same agent. (See the <a href="https://micro-xrce-dds.docs.eprosima.com/en/stable/client_api.html#session" target="_blank" rel="noreferrer">official eprosima documentation</a> , <code>uxr_init_session</code>.)</li><li><a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_DOM_ID">UXRCE_DDS_DOM_ID</a>: The DDS domain ID. This provides a logical separation between DDS networks, and can be used to separate clients on different networks. By default, ROS 2 operates on ID 0.</li><li><a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_PTCFG">UXRCE_DDS_PTCFG</a>: uXRCE-DDS participant configuration. It allows to restrict the visibility of the DDS topics to the <em>localhost</em> only and to use user-customized participant configuration files stored on the agent side.</li><li><a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_SYNCT">UXRCE_DDS_SYNCT</a>: Bridge time synchronization enable. The uXRCE-DDS client module can synchronize the timestamp of the messages exchanged over the bridge. This is the default configuration. In certain situations, for example during <a href="./../ros2/user_guide.html#ros-gazebo-and-px4-time-synchronization">simulations</a>, this feature may be disabled.</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Many ports are already have a default configuration. To use these ports you must first disable the existing configuration:</p><ul><li><code>TELEM1</code> and <code>TELEM2</code> are set up by default to connect via MAVLink to a GCS and a companion computer (respectively). Disable by setting <a href="./../advanced_config/parameter_reference.html#MAV_0_CONFIG">MAV_0_CONFIG=0</a> or <a href="./../advanced_config/parameter_reference.html#MAV_1_CONFIG">MAV_1_CONFIG=0</a> to zero. See <a href="./../peripherals/mavlink_peripherals.html">MAVLink Peripherals</a> for more information.</li><li>Other ports can similarly be configured. See <a href="./../peripherals/serial_configuration.html#serial-port-configuration">Serial port configuration</a>.</li></ul></div><p>Once set, you may need to reboot PX4 for the parameters to take effect. They will then persist through subsequent reboots.</p><p>You can also start the <a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a> using a command line. This can be called as part of <a href="./../concept/system_startup.html">System Startup</a> or through the <a href="./../debug/mavlink_shell.html">MAVLink Shell</a> (or a system console). This method is useful when you need to set a custom client namespace, as no parameter is provided for this purpose. For example, the following command can be used to connect via Ethernet to a remote host at <code>192.168.0.100:8888</code> and to set the client namespace to <code>/drone/</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uxrce_dds_client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.0.100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> drone</span></span></code></pre></div><p>Options <code>-p</code> or <code>-h</code> are used to bypass <code>UXRCE_DDS_PRT</code> and <code>UXRCE_DDS_AG_IP</code>.</p><h4 id="starting-the-client-in-simulation" tabindex="-1">Starting the Client in Simulation <a class="header-anchor" href="#starting-the-client-in-simulation" aria-label="Permalink to &quot;Starting the Client in Simulation&quot;">​</a></h4><p>The simulator <a href="./../concept/system_startup.html">startup logic</a> (<a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/ROMFS/px4fmu_common/init.d-posix/rcS" target="_blank" rel="noreferrer">init.d-posix/rcS</a>) uses the client startup commands for single and <a href="./../ros2/multi_vehicle.html">multi vehicle simulations</a>, enabling the setting of appropriate instance ids and DDS namespaces. By default the client is started on localhost UDP port <code>8888</code> with no additional namespace.</p><p>Environment variables are provided that override some <a href="./../advanced_config/parameter_reference.html#uxrce-dds-client">UXRCE-DDS parameters</a>. These allow users to create custom startup files for their simulations:</p><ul><li><code>PX4_UXRCE_DDS_NS</code>: Use this to specify the topic <a href="#customizing-the-topic-namespace">namespace</a>.</li><li><code>ROS_DOMAIN_ID</code>: Use this to replace <a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_DOM_ID">UXRCE_DDS_DOM_ID</a>.</li><li><code>PX4_UXRCE_DDS_PORT</code>: Use this to replace <a href="./../advanced_config/parameter_reference.html#UXRCE_DDS_PRT">UXRCE_DDS_PRT</a>.</li></ul><p>For example, the following command can be used to start a Gazebo simulation with che client operating on the DDS domain <code>3</code>, port <code>9999</code> and topic namespace <code>drone</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ROS_DOMAIN_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_UXRCE_DDS_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_UXRCE_DDS_NS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">drone</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gz_x500</span></span></code></pre></div><h2 id="supported-uorb-messages" tabindex="-1">Supported uORB Messages <a class="header-anchor" href="#supported-uorb-messages" aria-label="Permalink to &quot;Supported uORB Messages&quot;">​</a></h2><p>The set of <a href="./../msg_docs/">PX4 uORB topics</a> that are exposed through the client are set in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>.</p><p>The topics are release specific (support is compiled into <a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a> at build time). While most releases should support a very similar set of messages, to be certain you would need to check the yaml file for your particular release.</p><p>Note that ROS 2/DDS needs to have the <em>same</em> message definitions that were used to create the uXRCE-DDS client module in the PX4 Firmware in order to interpret the messages. The message definitions are stored in the ROS 2 interface package <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a>, and they are automatically synchronized by CI on the <code>main</code> and release branches. Note that all the messages from PX4 source code are present in the repository, but only those listed in <code>dds_topics.yaml</code> will be available as ROS 2 topics. Therefore,</p><ul><li><p>If you&#39;re using a main or release version of PX4 you can get the message definitions by cloning the interface package <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a> into your workspace.</p></li><li><p>If you&#39;re creating or modifying uORB messages you must manually update the messages in your workspace from your PX4 source tree. Generally this means that you would update <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>, clone the interface package, and then manually synchronize it by copying the new/modified message definitions from <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/msg" target="_blank" rel="noreferrer">PX4-Autopilot/msg</a> to its <code>msg</code> folders. Assuming that PX4-Autopilot is in your home directory <code>~</code>, while <code>px4_msgs</code> is in <code>~/px4_ros_com/src/</code>, then the command might be:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/px4_ros_com/src/px4_msgs/msg/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.msg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/PX4-Autopilot/mgs/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/px4_ros_com/src/px4_msgs/msg/</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Technically, <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a> completely defines the relationship between PX4 uORB topics and ROS 2 messages. For more information see <a href="#dds-topics-yaml">DDS Topics YAML</a> below.</p></div></li></ul><p>:::</p><h2 id="customizing-the-topic-namespace" tabindex="-1">Customizing the Topic Namespace <a class="header-anchor" href="#customizing-the-topic-namespace" aria-label="Permalink to &quot;Customizing the Topic Namespace&quot;">​</a></h2><p>Custom topic namespaces can be applied at build time (changing <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>) or at runtime (which is useful for multi vehicle operations):</p><ul><li>One possibility is to use the <code>-n</code> option when starting the <a href="./../modules/modules_system.html#uxrce-dds-client">uxrce_dds_client</a> from command line. This technique can be used both in simulation and real vehicles.</li><li>A custom namespace can be provided for simulations (only) by setting the environment variable <code>PX4_UXRCE_DDS_NS</code> before starting the simulation.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Changing the namespace at runtime will append the desired namespace as a prefix to all <code>topic</code> fields in <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>. Therefore, commands like:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uxrce_dds_client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uav_1</span></span></code></pre></div><p>or</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PX4_UXRCE_DDS_NS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">uav_1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gz_x500</span></span></code></pre></div><p>will generate topics under the namespaces:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/uav_1/fmu/in/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # for subscribers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/uav_1/fmu/out/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # for publishers</span></span></code></pre></div></div><h2 id="px4-ros-2-qos-settings" tabindex="-1">PX4 ROS 2 QoS Settings <a class="header-anchor" href="#px4-ros-2-qos-settings" aria-label="Permalink to &quot;PX4 ROS 2 QoS Settings&quot;">​</a></h2><p>PX4 QoS settings for publishers are incompatible with the default QoS settings for ROS 2 subscribers. So if ROS 2 code needs to subscribe to a uORB topic, it will need to use compatible QoS settings. One example of which is shown in <a href="./../ros2/user_guide.html#ros-2-subscriber-qos-settings">ROS 2 User Guide &gt; ROS 2 Subscriber QoS Settings</a>.</p><p>PX4 uses the following QoS settings for publishers:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uxrQoS_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .durability </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UXR_DURABILITY_TRANSIENT_LOCAL,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .reliability </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UXR_RELIABILITY_BEST_EFFORT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UXR_HISTORY_KEEP_LAST,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .depth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>PX4 uses the following QoS settings for subscribers:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uxrQoS_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .durability </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UXR_DURABILITY_VOLATILE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .reliability </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UXR_RELIABILITY_BEST_EFFORT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UXR_HISTORY_KEEP_LAST,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .depth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queue_depth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>ROS 2 uses the following QoS settings (by default) for publishers and subscriptions: &quot;keep last&quot; for history with a queue size of 10, &quot;reliable&quot; for reliability, &quot;volatile&quot; for durability, and &quot;system default&quot; for liveliness. Deadline, lifespan, and lease durations are also all set to &quot;default&quot;.</p><h2 id="dds-topics-yaml" tabindex="-1">DDS Topics YAML <a class="header-anchor" href="#dds-topics-yaml" aria-label="Permalink to &quot;DDS Topics YAML&quot;">​</a></h2><p>The PX4 yaml file <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a> defines the set of PX4 uORB topics that are built into firmware and published. More precisely, it completely defines the relationship/pairing between PX4 uORB and ROS 2 messages.</p><p>The file is structured as follows:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">publications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/fmu/out/collision_constraints</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4_msgs::msg::CollisionConstraints</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/fmu/out/vehicle_odometry</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4_msgs::msg::VehicleOdometry</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/fmu/out/vehicle_status</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4_msgs::msg::VehicleStatus</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/fmu/out/vehicle_trajectory_waypoint_desired</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4_msgs::msg::VehicleTrajectoryWaypoint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">subscriptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/fmu/in/offboard_control_mode</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4_msgs::msg::OffboardControlMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/fmu/in/vehicle_trajectory_waypoint</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4_msgs::msg::VehicleTrajectoryWaypoint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">subscriptions_multi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/fmu/in/vehicle_optical_flow_vel</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4_msgs::msg::VehicleOpticalFlowVel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ...</span></span></code></pre></div><p>Each (<code>topic</code>,<code>type</code>) pairs defines:</p><ol><li>A new <code>publication</code>, <code>subscription</code>, or <code>subscriptions_multi</code>, depending on the list to which it is added.</li><li>The topic <em>base name</em>, which <strong>must</strong> coincide with the desired uORB topic name that you want to publish/subscribe. It is identified by the last token in <code>topic:</code> that starts with <code>/</code> and does not contains any <code>/</code> in it. <code>vehicle_odometry</code>, <code>vehicle_status</code> and <code>offboard_control_mode</code> are examples of base names.</li><li>The topic <a href="https://design.ros2.org/articles/topic_and_service_names.html#namespaces" target="_blank" rel="noreferrer">namespace</a>. By default it is set to: <ul><li><code>/fmu/out/</code> for topics that are <em>published</em> by PX4.</li><li><code>/fmu/in/</code> for topics that are <em>subscribed</em> by PX4.</li></ul></li><li>The message type (<code>VehicleOdometry</code>, <code>VehicleStatus</code>, <code>OffboardControlMode</code>, etc.) and the ROS 2 package (<code>px4_msgs</code>) that is expected to provide the message definition.</li></ol><p><code>subscriptions</code> and <code>subscriptions_multi</code> allow us to choose the uORB topic instance that ROS 2 topics are routed to: either a shared instance that may also be getting updates from internal PX4 uORB publishers, or a separate instance that is reserved for ROS2 publications, respectively. Without this mechanism all ROS 2 messages would be routed to the <em>same</em> uORB topic instance (because ROS 2 does not have the concept of <a href="./../middleware/uorb.html#multi-instance">multiple topic instances</a>), and it would not be possible for PX4 subscribers to differentiate between streams from ROS 2 or PX4 publishers.</p><p>Add a topic to the <code>subscriptions</code> section to:</p><ul><li>Create a unidirectional route going from the ROS2 topic to the <em>default</em> instance (instance 0) of the associated uORB topic. For example, it creates a ROS2 subscriber of <code>/fmu/in/vehicle_odometry</code> and a uORB publisher of <code>vehicle_odometry</code>.</li><li>If other (internal) PX4 modules are already publishing on the same uORB topic instance as the ROS2 publisher, the instance&#39;s subscribers will receive all streams of messages. The uORB subscriber will not be able to determine if an incoming message was published by PX4 or by ROS2.</li><li>This is the desired behavior when the ROS2 publisher is expected to be the sole publisher on the topic instance (for example, replacing an internal publisher to the topic during offboard control), or when the source of multiple publishing streams does not matter.</li></ul><p>Add a topic to the <code>subscriptions_multi</code> section to:</p><ul><li>Create a unidirectional route going from the ROS2 topic to a <em>new</em> instance of the associated uORB topic. For example, if <code>vehicle_odometry</code> has already <code>2</code> instances, it creates a ROS2 subscriber of <code>/fmu/in/vehicle_odometry</code> and a uORB publisher on instance <code>3</code> of <code>vehicle_odometry</code>.</li><li>This ensures that no other internal PX4 module will publish on the same instance used by uXRCE-DDS. The subscribers will be able to subscribe to the desired instance and distinguish between publishers.</li><li>Note, however, that this guarantees separation between PX4 and ROS2 publishers, not among multiple ROS2 publishers. In that scenario, their messages will still be routed to the same instance.</li><li>This is the desired behavior, for example, when you want PX4 to log the readings of two equal sensors; they will both publish on the same topic, but one will use instance 0 and the other will use instance 1.</li></ul><p>You can arbitrarily change the configuration. For example, you could use different default namespaces or use a custom package to store the message definitions.</p><h2 id="fast-rtps-to-uxrce-dds-migration-guidelines" tabindex="-1">Fast-RTPS to uXRCE-DDS Migration Guidelines <a class="header-anchor" href="#fast-rtps-to-uxrce-dds-migration-guidelines" aria-label="Permalink to &quot;Fast-RTPS to uXRCE-DDS Migration Guidelines&quot;">​</a></h2><p>These guidelines explain how to migrate from using PX4 v1.13 <a href="./../middleware/micrortps.html">Fast-RTPS</a> middleware to PX4 v1.14 <code>uXRCE-DDS</code> middleware. These are useful if you have <a href="https://docs.px4.io/v1.13/en/ros/ros2_comm.html" target="_blank" rel="noreferrer">ROS 2 applications written for PX4 v1.13</a>, or you have used Fast-RTPS to interface your applications to PX4 <a href="https://docs.px4.io/v1.13/en/middleware/micrortps.html#agent-in-an-offboard-fast-dds-interface-ros-independent" target="_blank" rel="noreferrer">directly</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This section contains migration-specific information. You should also read the rest of this page to properly understand uXRCE-DDS.</p></div><h4 id="dependencies-do-not-need-to-be-removed" tabindex="-1">Dependencies do not need to be removed <a class="header-anchor" href="#dependencies-do-not-need-to-be-removed" aria-label="Permalink to &quot;Dependencies do not need to be removed&quot;">​</a></h4><p>uXRCE-DDS does not need the dependencies that were required for Fast-RTPS, such as those installed by following the topic <a href="https://docs.px4.io/v1.13/en/dev_setup/fast-dds-installation.html" target="_blank" rel="noreferrer">Fast DDS Installation</a>. You can keep them if you want, without affecting your uXRCE-DDS applications.</p><p>If you do choose to remove the dependencies, take care not to remove anything that is used by applications (for example, Java).</p><h4 id="rtps-targets-have-been-removed" tabindex="-1"><code>_rtps</code> targets have been removed <a class="header-anchor" href="#rtps-targets-have-been-removed" aria-label="Permalink to &quot;\`_rtps\` targets have been removed&quot;">​</a></h4><p>Anywhere you previously used a build target with extension <code>_rtps</code>, such as <code>px4_fmu-v5_rtps</code> or <code>px4_sitl_rtps</code>, you can now use the equivalent default target (for these cases <code>px4_fmu-v5_default</code> and <code>px4_sitl_default</code>).</p><p>The make targets with extension <code>_rtps</code> were used to build firmware that included client side RTPS code. The uXRCE-DDS middleware is included by default in builds for most boards, so you no longer need a special firmware to work with ROS 2.</p><p>To check if your board has the middleware, look for <code>CONFIG_MODULES_UXRCE_DDS_CLIENT=y</code> in the <code>.px4board</code> file of your board. Those files are nested in <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/boards" target="_blank" rel="noreferrer">PX4-Autopilot/boards</a>.</p><p>If it is not present, or if it is set to <code>n</code>, then you have to clone the PX4 repo, modify the board configuration and manually <a href="./../dev_setup/building_px4.html">compile</a> the firmware.</p><h4 id="new-client-module-and-new-start-parameters" tabindex="-1">New client module and new start parameters <a class="header-anchor" href="#new-client-module-and-new-start-parameters" aria-label="Permalink to &quot;New client module and new start parameters&quot;">​</a></h4><p>As the client is implemented by a new PX4 module, you now have new parameters to start it. Take a look at the <a href="#starting-the-client">client startup section</a> to learn how this is done.</p><h4 id="new-file-for-setting-which-topics-are-published" tabindex="-1">New file for setting which topics are published <a class="header-anchor" href="#new-file-for-setting-which-topics-are-published" aria-label="Permalink to &quot;New file for setting which topics are published&quot;">​</a></h4><p>The list of topics that are published and subscribed for a particular firmware is now managed by the <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topic.yaml</a> configuration file, which replaces <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.13/msg/tools/urtps_bridge_topics.yaml" target="_blank" rel="noreferrer">urtps_bridge_topics.yaml</a></p><p>See <a href="#supported-uorb-messages">Supported uORB Messages</a> and <a href="#dds-topics-yaml">DDS Topics YAML</a> sections for more information.</p><h4 id="topics-no-longer-need-to-be-synced-between-client-and-agent" tabindex="-1">Topics no longer need to be synced between client and agent. <a class="header-anchor" href="#topics-no-longer-need-to-be-synced-between-client-and-agent" aria-label="Permalink to &quot;Topics no longer need to be synced between client and agent.&quot;">​</a></h4><p>The list of bridged topics between agent and client no longer needs to be synced for ROS 2, so the <code>update_px4_ros2_bridge.sh</code> script is no longer needed.</p><h4 id="default-topic-naming-convention-has-changed" tabindex="-1">Default topic naming convention has changed <a class="header-anchor" href="#default-topic-naming-convention-has-changed" aria-label="Permalink to &quot;Default topic naming convention has changed&quot;">​</a></h4><p>The topic naming format changed:</p><ul><li>Published topics: <code>/fmu/topic-name/out</code> (Fast-RTPS) to <code>/fmu/out/topic-name</code> (XRCE-DDS).</li><li>Subscribed topics: <code>/fmu/topic-name/in</code>(Fast-RTPS) to <code>/fmu/in/topic-name</code> (XRCE-DDS).</li></ul><p>You should update your application to the new convention.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You might also edit <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topic.yaml</a> to revert to the old convention. This is not recommended because it means that you would have to always use custom firmware.</p></div><h4 id="xrce-dds-agent" tabindex="-1">XRCE-DDS-Agent <a class="header-anchor" href="#xrce-dds-agent" aria-label="Permalink to &quot;XRCE-DDS-Agent&quot;">​</a></h4><p>The XRCE-DDS agent is &quot;generic&quot; and independent of PX4: <a href="https://micro-xrce-dds.docs.eprosima.com/en/latest/agent.html" target="_blank" rel="noreferrer">micro-xrce-dds-agent</a>. There are many ways to install it on your PC / companion computer - for more information see the <a href="#micro-xrce-dds-agent-installation">dedicated section</a>.</p><h4 id="application-specific-changes" tabindex="-1">Application-Specific Changes <a class="header-anchor" href="#application-specific-changes" aria-label="Permalink to &quot;Application-Specific Changes&quot;">​</a></h4><p>If you where not using ROS 2 alongside the agent (<a href="https://docs.px4.io/v1.13/en/middleware/micrortps.html#agent-in-an-offboard-fast-dds-interface-ros-independent" target="_blank" rel="noreferrer">Fast DDS Interface ROS-Independent</a>), then you need to migrate to <a href="https://fast-dds.docs.eprosima.com/en/latest/index.html" target="_blank" rel="noreferrer">eProsima Fast DDS</a>.</p><p>ROS 2 applications still need to compile alongside the PX4 messages, which you do by adding the <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">px4_msgs</a> package to your workspace. You can remove the <a href="https://github.com/PX4/px4_ros_com" target="_blank" rel="noreferrer">px4_ros_com</a> package as it is no longer needed, other than for example code.</p><p>In your ROS 2 nodes, you will need to:</p><ul><li><p>Update the <a href="#px4-ros-2-qos-settings">QoS</a> of your publishers and subscribers as PX4 does not use the ROS 2 default settings.</p></li><li><p>Change the names of your topics, unless you edited <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topic.yaml</a>.</p></li><li><p>Remove everything related to time synchronization, as XRCE-DDS automatically takes care of agent/client time synchronization.</p><p>In C++ applications you can set the <code>timestamp</code> field of your messages like this:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg.timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_clock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nanoseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>In Python applications you can set the <code>timestamp</code> field of your messages like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg.timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_clock().now().nanoseconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><h2 id="helpful-resources" tabindex="-1">Helpful Resources <a class="header-anchor" href="#helpful-resources" aria-label="Permalink to &quot;Helpful Resources&quot;">​</a></h2><ul><li><a href="https://www.youtube.com/watch?v=F5oelooT67E" target="_blank" rel="noreferrer">ROS 2 in PX4: Technical Details of a Seamless Transition to XRCE-DDS</a> - Pablo Garrido &amp; Nuno Marques (youtube)</li><li><a href="https://gist.github.com/julianoes/adbf76408663829cd9aed8d14c88fa29" target="_blank" rel="noreferrer">PX4 ROS 2 offboard tutorial</a> (Github gist - JulianOes)</li><li><a href="https://github.com/Jaeyoung-Lim/px4-offboard/blob/2d784532fd323505ac8a6e53bb70145600d367c4/doc/ROS2_PX4_Offboard_Tutorial.md" target="_blank" rel="noreferrer">ROS 2 PX4 Offboard Tutorial</a> (Jaeyoung-Lim).&lt;!--- Some of this might be useful. I&#39;d like to see a real example first.</li></ul><h2 id="setting-up-the-bridge-with-real-hardware" tabindex="-1">Setting up the bridge with real hardware <a class="header-anchor" href="#setting-up-the-bridge-with-real-hardware" aria-label="Permalink to &quot;Setting up the bridge with real hardware&quot;">​</a></h2><p>This section is work-in-progress.</p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="client-reports-that-selected-uart-port-is-busy" tabindex="-1">Client reports that selected UART port is busy <a class="header-anchor" href="#client-reports-that-selected-uart-port-is-busy" aria-label="Permalink to &quot;Client reports that selected UART port is busy&quot;">​</a></h3><p>If the selected UART port is busy, it&#39;s possible that the MAVLink application is already being used. If both MAVLink and RTPS connections are required you will have to either move the connection to use another port or using the available protocol splitter for PX4 and companion computers.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>A quick/temporary fix to allow bridge testing during development is to stop MAVLink from <em>NuttShell</em>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop-all</span></span></code></pre></div></div><h3 id="enable-uart-on-a-companion-computer" tabindex="-1">Enable UART on a companion computer <a class="header-anchor" href="#enable-uart-on-a-companion-computer" aria-label="Permalink to &quot;Enable UART on a companion computer&quot;">​</a></h3><p>For UART transport on a Raspberry Pi or any other companion computer you will have to enable the serial port:</p><ol><li><p>Make sure the <code>userid</code> (default is pi on a Raspberry Pi) is a member of the <code>dialout</code> group:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groups</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dialout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pi</span></span></code></pre></div></li><li><p>For the Raspberry Pi in particular, you need to stop the GPIO serial console that is using the port:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> raspi-config</span></span></code></pre></div><p>In the menu showed go to <strong>Interfacing options &gt; Serial</strong>. Select <strong>NO</strong> for <em>Would you like a login shell to be accessible over serial?</em>. Valid and reboot.</p></li><li><p>Check UART in kernel:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/config.txt</span></span></code></pre></div><p>And make sure that the <code>enable_uart</code> value is set to 1:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> enable_uart=1</span></span></code></pre></div></li></ol><p>--&gt;</p>`,98);function B(P,X,x,T,A,O){const h=n("Badge"),t=n("tab"),l=n("tabs");return c(),d("div",null,[k,i(h,{type:"tip",text:"PX4 v1.14"}),g,e("ol",null,[m,e("li",null,[b,i(l,null,{default:a(()=>[i(t,{name:"humble"},{default:a(()=>[y]),_:1})]),_:1})])]),f,i(t,{name:"foxy"},{default:a(()=>[F]),_:1}),E,_,C,e("ol",null,[e("li",null,[v,i(l,null,{default:a(()=>[i(t,{name:"humble"},{default:a(()=>[D]),_:1})]),_:1})])]),S,i(t,{name:"foxy"},{default:a(()=>[R]),_:1}),w])}const M=p(u,[["render",B]]);export{U as __pageData,M as default};
