import{_ as e,c as t,o as i,ab as o}from"./chunks/framework.CUflZczI.js";const _=JSON.parse('{"title":"多旋翼设定值调整（轨迹生成器）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/config_mc/mc_trajectory_tuning.md","filePath":"zh/config_mc/mc_trajectory_tuning.md"}'),a={name:"zh/config_mc/mc_trajectory_tuning.md"},n=o('<h1 id="多旋翼设定值调整-轨迹生成器" tabindex="-1">多旋翼设定值调整（轨迹生成器） <a class="header-anchor" href="#多旋翼设定值调整-轨迹生成器" aria-label="Permalink to &quot;多旋翼设定值调整（轨迹生成器）&quot;">​</a></h1><p>This document provides an overview of the multicopter tuning parameters that change the <em>user experience</em>: how fast the vehicle reacts to stick movements or direction changes in missions, the maximum allowed velocity, etc.</p><p>In other words, this topic explains how to tune the parameters that affect the value of a <em>desired setpoint</em> rather than those that affect how well the vehicle <em>tracks</em> the setpoint).</p><p>生成这些设定点的算法称为“轨迹生成器”。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>本指南适用于高级用户/专家。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Follow the instructions in the <a href="./../config_mc/pid_tuning_guide_multicopter.html">Multicopter PID Tuning Guide</a> <em>before</em> doing any of the tuning described here. 请不要试图通过调整这些参数来修复错误的轨迹或抖动。</p></div><h2 id="综述" tabindex="-1">综述 <a class="header-anchor" href="#综述" aria-label="Permalink to &quot;综述&quot;">​</a></h2><p>The input to the P/PID controller is a <em>desired setpoint</em> that the vehicle should attempt to track. <a href="./../config_mc/pid_tuning_guide_multicopter.html">PID 调参</a>（“底层调参”）旨在减少期望设定值和机体状态估计值之间的误差。</p><p>The <em>desired setpoint</em> passed to the P/PID controller is itself calculated from a <em>demanded setpoint</em> based on a stick position (in RC modes) or from a mission command. 要求设定值可能会改变得很快（例如，如果用户“一下子”将摇杆从零移动到最大值）。 如果缓慢调整相应的目标设定值, 飞行器的特性就会更好。</p><p><em>Setpoint value tuning</em> (&quot;higher level tuning&quot;) is used to specify the mapping between the <em>demanded</em> and the <em>desired</em> setpoints - i.e. defining the &quot;ramp&quot; at which the desired setpoint follows the demanded setpoint.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./../config_mc/pid_tuning_guide_multicopter.html">P/PID 增益</a>整定不当会导致机体不稳定。 Poorly tuned <em>setpoint values</em> cannot result in instability, but may result in either very jerky or very unresponsive reactions to setpoint changes.</p></div><p><a id="modes"></a></p><h2 id="飞行模式轨迹支持" tabindex="-1">飞行模式轨迹支持 <a class="header-anchor" href="#飞行模式轨迹支持" aria-label="Permalink to &quot;飞行模式轨迹支持&quot;">​</a></h2><p><a href="./../flight_modes/mission.html">任务模式</a>始终使用<a href="./../config_mc/mc_jerk_limited_type_trajectory.html">加加速度限制型</a>轨迹。</p><p><a href="./../flight_modes_mc/position.html">Position mode</a> supports the <a href="#position-mode-implementations">implementations</a> listed below. It uses the acceleration based mapping by default; other types can be set using <a href="./../advanced_config/parameter_reference.html#MPC_POS_MODE">MPC_POS_MODE</a>.</p><p><a href="./../flight_modes_mc/altitude.html">Altitude mode</a> similarly supports the <a href="#altitude-mode-implementations">implementations</a> selected by <a href="./../advanced_config/parameter_reference.html#MPC_POS_MODE">MPC_POS_MODE</a>, but <em>only</em> for smoothing the vertical component (i.e. when controlling the altitude).</p><p>其他模式不支持轨迹调整。</p><h2 id="position-mode-implementations" tabindex="-1">Position Mode Implementations <a class="header-anchor" href="#position-mode-implementations" aria-label="Permalink to &quot;Position Mode Implementations&quot;">​</a></h2><p>The following list provides an <em>overview</em> of the different implementations of how the stick input is interpreted and turned into trajectory setpoints:</p><ul><li>Acceleration based (Default) <ul><li>Horizontal stick input mapped to acceleration setpoints.</li><li>Intuitive stick feel because it&#39;s like pushing the vehicle around.</li><li>No unexpected tilt changes upon reaching travel speed velocity.</li><li>Vertical stick input mapped with jerk-limited trajectory.</li><li>Set in position mode using <code>MPC_POS_MODE=4</code>.</li></ul></li><li><a href="./../config_mc/mc_jerk_limited_type_trajectory.html">Jerk-limited</a><ul><li>Used when smooth motion is required (e.g.: filming, mapping, cargo).</li><li>Generates symmetric smooth S-curves where the jerk and acceleration limits are always guaranteed.</li><li>May not be suitable for vehicles/use-cases that require a faster response - e.g. race quads.</li><li>Set in position mode using <code>MPC_POS_MODE=3</code>.</li></ul></li><li><strong>Simple position control</strong><ul><li>Sticks map directly to velocity setpoints without smoothing.</li><li>Useful for velocity control tuning.</li><li>Set in position mode using <code>MPC_POS_MODE=0</code>.</li></ul></li></ul><h2 id="altitude-mode-implementations" tabindex="-1">Altitude Mode Implementations <a class="header-anchor" href="#altitude-mode-implementations" aria-label="Permalink to &quot;Altitude Mode Implementations&quot;">​</a></h2><p>Analogously to <a href="#position-mode-implementations">position mode implementations</a> these are the implementations for interpreting vertical stick input:</p><ul><li><a href="./../config_mc/mc_jerk_limited_type_trajectory.html">Jerk-limited</a><ul><li>Smoothed vertical input.</li><li>Set in altitude mode with <code>MPC_POS_MODE</code> 3 or 4.</li></ul></li><li><strong>Simple altitude control</strong><ul><li>Unsmoothed vertical input.</li><li>Set in altitude mode only when using <code>MPC_POS_MODE=0</code>.</li></ul></li></ul>',23),l=[n];function s(r,m,c,d,p,h){return i(),t("div",null,l)}const f=e(a,[["render",s]]);export{_ as __pageData,f as default};
