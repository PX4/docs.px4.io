import{_ as a,c as s,o as e,ab as i}from"./chunks/framework.CUflZczI.js";const m=JSON.parse('{"title":"系统启动","description":"","frontmatter":{},"headers":[],"relativePath":"zh/concept/system_startup.md","filePath":"zh/concept/system_startup.md"}'),t={name:"zh/concept/system_startup.md"},o=i(`<h1 id="系统启动" tabindex="-1">系统启动 <a class="header-anchor" href="#系统启动" aria-label="Permalink to &quot;系统启动&quot;">​</a></h1><p>PX4 系统的启动由 shell 脚本文件控制。 在 NuttX 平台上这些脚本文件位于 <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/ROMFS/px4fmu_common/init.d" target="_blank" rel="noreferrer">ROMFS/px4fmu_common/init.d</a> 文件夹下 - 该文件夹下的部分脚本文件也适用于 Posix (Linux/MacOS) 平台。 仅适用于 Posix 平台的启动脚本文件可以在 <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/ROMFS/px4fmu_common/init.d-posix" target="_blank" rel="noreferrer">ROMFS/px4fmu_common/init.d-posix</a> 文件夹下找到。</p><p>上述文件夹中以数字和下划线为文件名开头的脚本文件（例如，<code>10000_airplane</code>）都是封装好的机架构型配置文件。 这些文件在编译时会被导出至 <code>airframes.xml</code> 文件中，<a href="http://qgroundcontrol.com" target="_blank" rel="noreferrer">QGroundControl</a> 通过解析该 xml 文件得到可以在 UI 界面上进行选择的机架构型。 Adding a new configuration is covered <a href="./../dev_airframes/adding_a_new_frame.html">here</a>.</p><p>其它的文件则是系统常规启动逻辑的一部分。 在启动过程中第一个被系统执行的脚本文件是 <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/ROMFS/px4fmu_common/init.d/rcS" target="_blank" rel="noreferrer">init.d/rcS</a> （Posix 平台则为 <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/ROMFS/px4fmu_common/init.d-posix/rcS" target="_blank" rel="noreferrer">init.d-posix/rcS</a> on Posix)），该脚本会调用所有的其它脚本。</p><p>根据 PX4 运行的操作系统将本文后续内容分成了如下各小节。</p><h2 id="posix-linux-macos" tabindex="-1">Posix (Linux/MacOS) <a class="header-anchor" href="#posix-linux-macos" aria-label="Permalink to &quot;Posix (Linux/MacOS)&quot;">​</a></h2><p>在 Posix 操作系统上，系统的 shell 将会作为脚本文件的解释器（例如， 在 Ubuntu 中 /bin/sh 与 Dash 建立了符号链接）。 为了使 PX4 可以在 Posix 中正常运行，需要做到以下几点：</p><ul><li>PX4 的各个模块需要看起来像系统的单个可执行文件。 这一点可以通过创建符号链接做到。 每一个模块都根据命名规则： <code>px4-&lt;module&gt; -&gt; px4</code> 在编译文件夹 <code>bin</code> 下创建了相应的符号链接。 在执行命令时，系统将检查命令的二进制路径 (<code>argv[0]</code>)，如果系统发现该命令是 PX4 的一个模块（命令名称以 <code>px4-</code> 起头），那么系统将会把这个命令发送给 PX4 主实例（见下文）。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>px4-</code> 前缀用于避免与系统命令的冲突 (例如) <code>关机</code>), 它也允许通过输入 <code>px4-&lt;TAB&gt;</code> 并使用tab键来完成命令自动填充。</p></div><ul><li>Shell 需要知道在那里可以找到上述符号链接。 为此，在运行启动脚本前会将包含符号链接文件的 <code>bin</code> 目录添加至操作系统的 <code>PATH</code> 环境变量中。</li><li>Shell 将每个模块作为一个新的 (客户端) 进程进行启动， 每个客户端进程都需要与 PX4 主实例（服务器）进行通讯，实际的模块以线程的形式运行。 该过程通过 <a href="http://man7.org/linux/man-pages/man7/unix.7.html" target="_blank" rel="noreferrer">UNIX socket</a> 实现。 服务器侦听一个 socket，然后客户端将连接该 socket 并通过它发送指令。 服务器收到客户端的指令后将指令运行的输出结果及返回代码重新发送给客户端。</li><li>启动脚本直接调用各模块，例如 <code>commander start</code>, 而不使用 <code>px4-</code> 这个前缀。 这一点可以通过设置别名（aliase）来实现：<code>bin/px4-alias.sh</code> 文件会给每一个模块以 <code>alias &lt;module&gt;=px4-&lt;module&gt;</code> 的形式设置好模块的别名。</li><li><code>rcS</code> 脚本由 PX4 主实例调用执行。 该脚本并不开启任何模块，它仅仅首先更新 <code>PATH</code> 环境变量然后以 <code>rcS</code> 文件作为值参数开启操作系统的 shell 。</li><li>除此之外，在进行多飞行器仿真时还可以启动多个服务器实例。 客户端可通过 <code>--instance</code> 选择服务器实例。 该实例可通过 <code>$px4_instance</code> 变量在脚本中使用。</li></ul><p>当 PX4 在操作系统上处于运行状态时可以从任意终端直接运行各个模块。 例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Firmwar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/build/px4_sitl_default/bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./px4-commander</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> takeoff</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./px4-listener</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sensor_accel</span></span></code></pre></div><h3 id="dynamic-modules" tabindex="-1">Dynamic Modules <a class="header-anchor" href="#dynamic-modules" aria-label="Permalink to &quot;Dynamic Modules&quot;">​</a></h3><p>通常，所有模块都被编入一个 PX4 可执行程序。 然而，在Posix上，可以将模块编译成单独的文件，可以使用 <code>dyn</code> 命令加载到 PX4。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dyn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./test.px4mod</span></span></code></pre></div><h2 id="nuttx" tabindex="-1">NuttX <a class="header-anchor" href="#nuttx" aria-label="Permalink to &quot;NuttX&quot;">​</a></h2><p>软件组件的失效可以不中止 PX4 系统的启动， 这一特性可以在启动脚本中使用 <code>set +e</code> 来实现。</p><h3 id="替换系统的启动文件" tabindex="-1">替换系统的启动文件 <a class="header-anchor" href="#替换系统的启动文件" aria-label="Permalink to &quot;替换系统的启动文件&quot;">​</a></h3><p>软件组件的失效不会中止 PX4 系统的启动， 可以在启动脚本中使用 <code>set +e</code> 来控制。</p><p>连接至 <a href="./../debug/system_console.html">系统控制台（system console）</a> 后重启飞控板可以进行对系统启动引导序列进行调试。 由此生成的启动引导日志文件中包含了引导序列的详细信息，同时也应包含了解释启动中止的线索。</p><h4 id="启动失败的常见原因" tabindex="-1">启动失败的常见原因 <a class="header-anchor" href="#启动失败的常见原因" aria-label="Permalink to &quot;启动失败的常见原因&quot;">​</a></h4><ul><li>For custom applications: The system was out of RAM. Run the <code>free</code> command to see the amount of free RAM.</li><li>A software fault or assertion resulting in a stack trace</li></ul><h3 id="自定义系统的启动文件" tabindex="-1">自定义系统的启动文件 <a class="header-anchor" href="#自定义系统的启动文件" aria-label="Permalink to &quot;自定义系统的启动文件&quot;">​</a></h3><p>可以通过在microSD卡中创建新的配置文件 <code>/etc/rc.xt</code>来替换整个启动过程(旧配置中的任何内容都不会自动启动，如果该文件为空，则不会启动任何内容)。</p><p>根据默认启动程序来进行定制化是一个比较好地开始。 文档如下。</p><h3 id="自定义系统的启动文件-1" tabindex="-1">自定义系统的启动文件 <a class="header-anchor" href="#自定义系统的启动文件-1" aria-label="Permalink to &quot;自定义系统的启动文件&quot;">​</a></h3><p>自定义系统启动的最佳方式是引入一个 <a href="./../dev_airframes/adding_a_new_frame.html">新机架配置</a>。 机架配置文件可以在固件中，也可以在SD卡上。</p><p>如果您只需要“调整”现有的配置，如启动另一个应用程序或设置几个参数的值， 您可以在 <code>/etc/</code> 目录中创建两个文件来处理：</p><ul><li><a href="#customizing-the-configuration-config-txt">/etc/config.txt</a>: 修改参数值</li><li><a href="#starting-additional-applications-extras-txt">/etc/extras.txt</a>: 启动应用程序</li></ul><p>文件具体信息在后面介绍。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>系统启动文件是 UNIX 文件，该文件要求以UNIX规范的LF作为行结束符。 如果在Windows上编辑，需要使用合适的编辑器。</p></div><p>:::note 这些文件在 PX4 代码中被引用为 <code>/fs/microsd/etc/config.txt</code> 和 <code>/fs/microsd/etc/extras.xt</code>, microsd卡的根文件夹路径为 <code>/fs/microsd</code>。 :::</p><h4 id="自定义配置-config-txt" tabindex="-1">自定义配置（config.txt） <a class="header-anchor" href="#自定义配置-config-txt" aria-label="Permalink to &quot;自定义配置（config.txt）&quot;">​</a></h4><p><code>config.txt</code> 文件可以用来修改参数。 It is loaded after the main system has been configured and <em>before</em> it is booted.</p><p>例如，您可以在 SD 卡上创建一个文件， <code>etc/config.txt</code> 该文件设置的参数值如下所示：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PWM_MAIN_DIS3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PWM_MAIN_MIN3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1120</span></span></code></pre></div><h4 id="启动附加应用程序-extras-txt" tabindex="-1">启动附加应用程序 (extras.txt) <a class="header-anchor" href="#启动附加应用程序-extras-txt" aria-label="Permalink to &quot;启动附加应用程序 (extras.txt)&quot;">​</a></h4><p><code>extras.txt</code> 可用于在主系统启动后启动额外的应用程序。 通常，额外启动的将是有效载荷控制器或类似的可选自定义组件。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在系统启动文件中调用未知命令可能导致启动失败。 通常情况下系统在启动失败后不会发送 mavlink 消息，在这种情况下请检查系统控制台上输出的的错误消息。</p></div><p>下面的示例演示了如何启动自定义应用程序:</p><ul><li><p>在 SD 卡上创建一个文件 <code>etc/extras.txt</code> ，包含如下内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">custom_app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div></li><li><p>搭配使用 <code>set +e</code> 和 <code>set -e</code> 可以将命令设置为可选命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +e</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optional_app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Will not result in boot failure if optional_app is unknown or fails</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mandatory_app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Will abort boot if mandatory_app is unknown or fails</span></span></code></pre></div></li></ul>`,41),l=[o];function n(p,c,r,d,h,k){return e(),s("div",null,l)}const g=a(t,[["render",n]]);export{m as __pageData,g as default};
