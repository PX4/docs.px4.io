import{_ as s,c as i,o as a,ab as e}from"./chunks/framework.CUflZczI.js";const F=JSON.parse('{"title":"PX4 도커 컨테이너","description":"","frontmatter":{},"headers":[],"relativePath":"ko/test_and_ci/docker.md","filePath":"ko/test_and_ci/docker.md"}'),t={name:"ko/test_and_ci/docker.md"},n=e(`<h1 id="px4-도커-컨테이너" tabindex="-1">PX4 도커 컨테이너 <a class="header-anchor" href="#px4-도커-컨테이너" aria-label="Permalink to &quot;PX4 도커 컨테이너&quot;">​</a></h1><p>Docker containers are provided for the complete <a href="./../dev_setup/dev_env.html#supported-targets">PX4 development toolchain</a> including NuttX and Linux based hardware, <a href="./../sim_gazebo_classic/">Gazebo Classic</a> simulation, and <a href="./../simulation/ros_interface.html">ROS</a>.</p><p><a href="#px4_containers">도커 컨테이너</a>를 사용하여 Linux 컴퓨터에서 빌드하는 방법을 설명합니다.</p><div class="info custom-block"><p class="custom-block-title">Dockerfiles and README can be found on <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github here</a>. <a href="https://hub.docker.com/u/px4io/" target="_blank" rel="noreferrer">Docker Hub</a>에서 자동으로 빌드됩니다.</p></div><h2 id="전제-조건" tabindex="-1">전제 조건 <a class="header-anchor" href="#전제-조건" aria-label="Permalink to &quot;전제 조건&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">PX4 containers are currently only supported on Linux (if you don&#39;t have Linux you can run the container <a href="#virtual_machine">inside a virtual machine</a>). 기본 Linux 이미지에는 X-Server가 포함되어 있지 않으므로, <code>boot2docker</code>를 사용하지 마십시오.</p></div><p>Linux 컴퓨터에 <a href="https://docs.docker.com/installation/" target="_blank" rel="noreferrer">Docker를 설치</a>합니다. 가급적이면 Docker에서 유지 관리하는 패키지 저장소를 사용하여 최신 안정 버전을 다운로드 하십시오. <em>엔터프라이즈 에디션</em> 또는 (무료) <em>커뮤니티 에디션</em>을 사용할 수 있습니다.</p><p><em>Ubuntu</em>에 비프로덕션 설정을 로컬로 설치하는 경우 Docker를 설치하는 가장 빠르고 쉬운 방법은 아래와 같이 <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script" target="_blank" rel="noreferrer">편리한 스크립트</a>를 사용하는 것입니다(대체 설치 방법은 같은 페이지):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get.docker.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span></code></pre></div><p>기본 설치에서는 루트 사용자로 <em>Docker</em>를 호출하여야 합니다(예: <code>sudo</code> 사용). However, for building the PX4 firmware we suggest to <a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noreferrer">use docker as a non-root user</a>. 그렇게하면, docker를 사용한 후 빌드 폴더를 관리자가 소유하지 않습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create docker group (may not be required)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add your user to the docker group.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Log in/out again before using docker!</span></span></code></pre></div><p><a id="px4_containers"></a></p><h2 id="컨테이너-계층" tabindex="-1">컨테이너 계층 <a class="header-anchor" href="#컨테이너-계층" aria-label="Permalink to &quot;컨테이너 계층&quot;">​</a></h2><p>The available containers are on <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github here</a>.</p><p>이를 통하여 다양한 빌드 대상 및 구성을 테스트할 수 있습니다(포함된 도구는 이름에서 유추할 수 있음). The containers are hierarchical, such that containers have the functionality of their parents. For example, the partial hierarchy below shows that the docker container with nuttx build tools (<code>px4-dev-nuttx-focal</code>) does not include ROS 2, while the simulation containers do:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>- px4io/px4-dev-base-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-simulation-focal</span></span>
<span class="line"><span>    - px4io/px4-dev-ros-noetic</span></span>
<span class="line"><span>      - px4io/px4-dev-ros2-foxy</span></span>
<span class="line"><span>  - px4io/px4-dev-ros2-rolling</span></span>
<span class="line"><span>- px4io/px4-dev-base-jammy</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-jammy</span></span></code></pre></div><p>The most recent version can be accessed using the <code>latest</code> tag: <code>px4io/px4-dev-nuttx-focal:latest</code> (available tags are listed for each container on <em>hub.docker.com</em>. For example, the <code>px4io/px4-dev-nuttx-focal</code> tags can be found <a href="https://hub.docker.com/r/px4io/px4-dev-nuttx-focal/tags?page=1&amp;ordering=last_updated" target="_blank" rel="noreferrer">here</a>).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>일반적으로 최근 컨테이너를 사용하여야 하지만 반드시 <code>최신 버전</code>일 필요는 없습니다(너무 자주 변경됨). PX4 소스 코드를 다음과 같이 <strong>src/PX4-Autopilot</strong>에 이미 다운로드했음을 가정합니다:</p><h2 id="도커-컨테이너-활용" tabindex="-1">도커 컨테이너 활용 <a class="header-anchor" href="#도커-컨테이너-활용" aria-label="Permalink to &quot;도커 컨테이너 활용&quot;">​</a></h2><p>도커 컨테이너에서 실행되는 툴체인을 사용하여 호스트 컴퓨터에서 PX4 빌드 방법을 설명합니다. PX4 소스 코드를 <strong>src/PX4-Autopilot</strong>에 미리 다운로드하여야 합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span></code></pre></div><h3 id="보조-스크립트-docker-run-sh" tabindex="-1">보조 스크립트(docker_run.sh) <a class="header-anchor" href="#보조-스크립트-docker-run-sh" aria-label="Permalink to &quot;보조 스크립트(docker_run.sh)&quot;">​</a></h3><p>컨테이너를 사용하는 가장 쉬운 방법은 <a href="https://github.com/PX4/PX4-Autopilot/blob/master/Tools/docker_run.sh" target="_blank" rel="noreferrer">docker_run.sh</a> 도우미 스크립트를 사용하는 것입니다. 이 스크립트는 PX4 빌드 명령을 인수로 사용합니다(예: <code>make 테스트</code>). 적절한 컨테이너 및 합리적인 환경 설정의 최신 버전(하드 코딩됨)으로 도커를 시작합니다.</p><p>예를 들어, SITL을 빌드하려면 다음을 호출합니다(<strong>/PX4-Autopilot</strong> 디렉토리 내에서).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;make px4_sitl_default&#39;</span></span></code></pre></div><p>또는 NuttX 도구 체인을 사용하여 bash 세션을 시작합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bash&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>스크립트 실행시에 <em>Docker</em>에 대하여 자세하게 알 필요는 없습니다. 그러나, 특별히 견고하지는 않습니다! <a href="#manual_start">아래 섹션</a>에 설명된 수동 접근 방식이 더 유연하며, 스크립트에 문제가 있는 경우에 사용합니다. <code>-–privileged</code> 옵션을 사용하면 호스트의 장치(예: 조이스틱, CPU)에 자동으로 접근합니다.</p><p><a id="manual_start"></a></p><h3 id="도커-수동-호출" tabindex="-1">도커 수동 호출 <a class="header-anchor" href="#도커-수동-호출" aria-label="Permalink to &quot;도커 수동 호출&quot;">​</a></h3><p>일반적인 명령어 구문은 다음과 같습니다. 이것은 X 포워딩을 지원하는 Docker 컨테이너를 실행합니다(컨테이너 내부에서 시뮬레이션 GUI를 사용할 수 있게 함). 컴퓨터의 디렉토리 <code>&lt;host_src&gt;</code>을 컨테이너 내부의 <code>&lt;container_src&gt;</code>으로 매핑하고, <em>QGroundControl</em>을 연결하는 데 필요한 UDP 포트를 전달합니다. <code>--privileged</code> 옵션을 사용하면 호스트의 장치(예: 조이스틱 및 GPU)에 자동으로 액세스할 수 있습니다. 장치를 연결/연결 해제하는 경우에는 컨테이너를 다시 시작하여야 합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable access to xhost from the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host_sr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_sr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 14570:14570/udp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local_container_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">containe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build_comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>여기서,</p><ul><li><code>&lt;host_src&gt;</code>: 컨테이너에서 <code>&lt;container_src&gt;</code>에 매핑될 호스트 컴퓨터 디렉터리입니다. 이것은 일반적으로 <strong>PX4-Autopilot</strong> 디렉토리입니다.</li><li><code>&lt;container_src&gt;</code>: 컨테이너 내부에서 공유(소스) 디렉토리의 위치입니다.</li><li><code>&lt;local_container_name&gt;</code>: 생성 중인 도커 컨테이너의 이름입니다. 나중에 컨테이너를 다시 참조해야 하는 경우에 사용할 수 있습니다.</li><li><code>&lt;container&gt;:&lt;tag&gt;</code>: 시작할 버전 태그가 있는 컨테이너입니다(예: <code>px4io/px4-dev-ros:2017-10-23</code>).</li><li><code>&lt;build_command&gt;</code>: 새 컨테이너에서 호출할 명령어입니다. 예: <code>bash</code>는 컨테이너에서 bash 쉘을 실행합니다.</li></ul><p>아래의 예는 호스트 컴퓨터에서 bash 셸을 열고, <strong>~/src/PX4-Autopilot</strong> 디렉터리를 공유하는 방법을 설명합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable access to xhost from the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run docker and open bash shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/src/PX4-Autopilot:/src/PX4-Autopilot/:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--network </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name=px4-ros </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4io/px4-dev-ros2-foxy:2022-07-31</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>We use the host network mode to avoid conflicts between the UDP port access control when using QGroundControl on the same system as the docker container.</p></div></div></div><div class="info custom-block"><p class="custom-block-title">If you encounter the error &quot;Can&#39;t open display: :0&quot;, <code>DISPLAY</code> may need to be set to a different value. On Linux (XWindow) hosts you can change <code>-e DISPLAY=:0</code> to <code>-e DISPLAY=$DISPLAY</code>. On other hosts you might iterate the value of <code>0</code> in <code>-e DISPLAY=:0</code> until the &quot;Can&#39;t open display: :0&quot; error goes away.</p></div><p>모든 것이 잘 실행되면, 새로운 bash 쉘이 실행됩니다. 예를 들어 SITL을 실행하여 모든 것이 작동하는 지 확인하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/PX4-Autopilot</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #This is &lt;container_src&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div><h3 id="컨테이너-재진입" tabindex="-1">컨테이너 재진입 <a class="header-anchor" href="#컨테이너-재진입" aria-label="Permalink to &quot;컨테이너 재진입&quot;">​</a></h3><p><code>docker run</code> 명령은 새 컨테이너를 생성합니다. 변경 사항을 유지하는 이 컨테이너로 돌아가려면 다음을 실행하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># start the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># open a new bash shell in this container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>컨테이너에 연결된 여러 셸이 필요한 경우에는 새 셸을 열고 마지막 명령을 다시 실행합니다.</p><h3 id="컨테이너-정리" tabindex="-1">컨테이너 정리 <a class="header-anchor" href="#컨테이너-정리" aria-label="Permalink to &quot;컨테이너 정리&quot;">​</a></h3><p>때로는 컨테이너를 완전히 비워야 합니다. 이름을 사용하여 정리할 수 있습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><p>이름이 기억나지 않으면, 아래와 같이 비활성 컨테이너 ID를 나열한 다음 삭제합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">45eeb98f1dd9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 45eeb98f1dd9</span></span></code></pre></div><h3 id="qgroundcontrol" tabindex="-1">QGroundControl <a class="header-anchor" href="#qgroundcontrol" aria-label="Permalink to &quot;QGroundControl&quot;">​</a></h3><p>시뮬레이션 인스턴스를 실행시에는 도커 컨테이너 내부의 SITL과 호스트에서 <em>QGroundControl</em>을 통해 제어하려면 네트워크를 수동으로 설정하여야 합니다. <em>QGroundControl</em>에 자동으로 연결되지 않습니다.</p><p>In <em>QGroundControl</em>, navigate to <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/settings_view.html" target="_blank" rel="noreferrer">Settings</a> and select Comm Links. ::: ::: 포트는 사용된 <a href="https://github.com/PX4/PX4-Autopilot/blob/master/ROMFS/px4fmu_common/init.d-posix/rcS" target="_blank" rel="noreferrer">구성</a>에 따라 다릅니다. IP 주소는 도커 컨테이너 중 하나이며, 기본 네트워크는 172.17.0.1/16입니다. 도커 컨테이너의 IP 주소는 다음 명령으로 찾을 수 있습니다(컨테이너 이름이 <code>mycontainer</code>라고 가정).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Spaces between double curly braces above should be not be present (they are needed to avoid a UI rendering problem in gitbook).</p></div><h3 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h3><h4 id="권한-에러" tabindex="-1">권한 에러 <a class="header-anchor" href="#권한-에러" aria-label="Permalink to &quot;권한 에러&quot;">​</a></h4><p>컨테이너는 기본 사용자(일반적으로 &quot;루트&quot;) 계정으로 파일을 생성합니다. 이것 때문에, 호스트 컴퓨터의 사용자가 컨테이너에서 생성한 파일에 액세스할 수 없는 상황이 발생합니다.</p><p>위의 예는 <code>--env=LOCAL_USER_ID=&quot;$(id -u)&quot;</code> 줄을 사용하여 호스트의 사용자와 동일한 UID를 가진 사용자를 컨테이너에 생성합니다. 이렇게 하면 컨테이너 내에서 생성된 모든 파일을 호스트에서 액세스할 수 있습니다.</p><h4 id="그래픽-드라이버-문제" tabindex="-1">그래픽 드라이버 문제 <a class="header-anchor" href="#그래픽-드라이버-문제" aria-label="Permalink to &quot;그래픽 드라이버 문제&quot;">​</a></h4><p>It&#39;s possible that running Gazebo Classic will result in a similar error message like the following:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libGL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> driver:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swrast</span></span></code></pre></div><p>이 경우 호스트 시스템의 기본 그래픽 드라이버를 설치합니다. 올바른 드라이버를 다운로드하여 컨테이너 내부에 설치합니다. Nvidia 드라이버의 경우 다음 명령어를 사용합니다(그렇지 않으면 설치 프로그램이 호스트에서 로드된 모듈을 보고 진행을 거부합니다).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./NVIDIA-DRIVER.run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ui=none</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-kernel-module</span></span></code></pre></div><p>이에 대한 자세한 내용은 <a href="http://gernotklingler.com/blog/howto-get-hardware-accelerated-opengl-support-docker/" target="_blank" rel="noreferrer">여기</a>를 참고하십시오.</p><p><a id="virtual_machine"></a></p><h2 id="가상-머신-지원" tabindex="-1">가상 머신 지원 <a class="header-anchor" href="#가상-머신-지원" aria-label="Permalink to &quot;가상 머신 지원&quot;">​</a></h2><p>최신 Linux 배포판에서는 정상적으로 작동하여야 합니다.</p><p>다음 설정은 테스트 되었습니다.</p><ul><li>VMWare Fusion 및 Ubuntu 14.04가 포함된 OS X(Parallels에서 GUI를 지원하는 Docker 컨테이너로 인해 X-Server가 충돌함).</li></ul><p><strong>메모리</strong></p><p>가상 머신에 최소 4GB 메모리를 사용하십시오.</p><p><strong>컴파일 문제</strong></p><p>다음과 같은 오류로 컴파일이 실패하는 경우:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reproducible,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> likely</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hardware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> problem.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> internal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Killed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (program </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cc1plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>병렬 빌드를 비활성화하십시오.</p><p><strong>VM 호스트에서 Docker 제어를 허용합니다.</strong></p><p><code>/etc/defaults/docker</code>에 다음 줄을 추가합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} -H unix:///var/run/docker.sock -H 0.0.0.0:2375&quot;</span></span></code></pre></div><p>이제 호스트 운영체제에서 도커를 제어할 수 있습니다:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DOCKER_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tcp://</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip of your VM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:2375</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run some docker command to see if it works, e.g. ps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div>`,61),l=[n];function h(p,k,r,o,d,c){return a(),i("div",null,l)}const u=s(t,[["render",h]]);export{F as __pageData,u as default};
