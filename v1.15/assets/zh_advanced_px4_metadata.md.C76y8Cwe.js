import{_ as a}from"./chunks/actuator_metadata_processing.C1EC5ZrI.js";import{_ as e,c as t,o as r,ab as o}from"./chunks/framework.CUflZczI.js";const b=JSON.parse('{"title":"PX4 元数据","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced/px4_metadata.md","filePath":"zh/advanced/px4_metadata.md"}'),l={name:"zh/advanced/px4_metadata.md"},n=o('<h1 id="px4-元数据" tabindex="-1">PX4 元数据 <a class="header-anchor" href="#px4-元数据" aria-label="Permalink to &quot;PX4 元数据&quot;">​</a></h1><p>PX4 使用并生成人类和机器可读的元数据:</p><ul><li><a href="./../advanced_config/parameters.html">参数</a> 配置 PX4 的行为。 <ul><li>一个参数由一个 ID 字符串表示，并映射到 PX4 中存储的一个值。</li><li>相关的元数据包含对设置的描述，可能的取值，有关值如何呈现的信息 (比如位掩码)。</li></ul></li><li><a href="./../concept/events_interface.html">Events</a> 提供事件通知，例如失效保护的原因，电池低电量告警，校准结束等等。 <ul><li>事件是由一个 id 表示，并且发送带有日志级别和一些参数。</li><li>相关的元数据包括每个事件的消息、描述和参数列表 (包括它们的类型)。</li></ul></li><li><a href="./../config/actuators.html">Actuators</a> 配置自定义飞行器的特定几何形状，将执行器和电机绑定到飞控的输出，并测试执行器和电机响应。 <ul><li>元数据包含所支持的飞行器几何形状信息，驱动输出列表，以及如何配置它们。</li><li><em>QGroundControl</em> 地面站使用该信息动态构建配置界面。</li></ul></li></ul><p>元数据和元数据翻译与外部系统共享，例如 QGroundControl 地面站，使其能够显示有关参数和事件的信息，并配置飞行器几何形状和执行器输出映射。</p><p>本节解释了您如何定义元数据并翻译成字符串 (以及&quot;仅供您参考&quot;，它是如何工作的)。</p><h2 id="元数据翻译" tabindex="-1">元数据翻译 <a class="header-anchor" href="#元数据翻译" aria-label="Permalink to &quot;元数据翻译&quot;">​</a></h2><p>在 Crowdin 项目 <a href="https://crowdin.com/project/px4-metadata-translations" target="_blank" rel="noreferrer">PX4-Metadata-Translations</a> 中翻译 PX4 元数据。 更多关于 PX4 和 Crowdin 信息请参阅<a href="./../contribute/translation.html">Translation</a>。</p><h2 id="元数据定义" tabindex="-1">元数据定义 <a class="header-anchor" href="#元数据定义" aria-label="Permalink to &quot;元数据定义&quot;">​</a></h2><p>PX4 元数据是在 PX4 源代码及其相关数据中定义的。 这可以通过在 C/C++ 注释中使用特殊标记来指示元数据字段及其值，或者使用 YAML 文件来完成。</p><p>更多信息请参阅每种数据类型的章节：</p><ul><li><a href="./../advanced/parameters_and_configurations.html#creating-defining-parameters">参数与配置&gt; 创建/定义参数</a></li><li><a href="./../concept/events_interface.html">事件接口</a></li><li><a href="#actuator-metadata">执行器元数据</a>（下文）</li></ul><h2 id="元数据工具链" tabindex="-1">元数据工具链 <a class="header-anchor" href="#元数据工具链" aria-label="Permalink to &quot;元数据工具链&quot;">​</a></h2><p>处理元数据的过程对所有元数据类型都是相同的。</p><p>每次构建 PX4 时，元数据都会被收集到 JSON 文件中。</p><p>对于大多数飞控（因为大多数都有足够的可用 FLASH 存储空间），JSON文件经过 xz 压缩并存储在生成的二进制文件中。 然后使用 MAVLink <a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer">Component Metadata Protocol</a>共享该文件。 使用组件元数据协议确保接收者总是能够为运行在载具的代码获取最新元数据。 事件元数据也会被添加到日志文件中，允许日志分析工具 (如飞行回放) 使用正确的元数据来显示事件。</p><p>内存受限的飞控二进制文件不会在二进制文件中存储参数元数据，而是引用存储在<code>px4-travis.s3.amazonaws.com</code>上的相同数据。 例如，这适用于<a href="./../flight_controller/omnibus_f4_sd.html">Umnibus F4 SD</a>。 元数据是通过 <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/.github/workflows/metadata.yml" target="_blank" rel="noreferrer">github CI</a> 上传的，用于所有构建目标（因此只有在参数被合并到主体后才能使用）。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can identify memory constrained boards because they specify <code>CONFIG_BOARD_CONSTRAINED_FLASH=y</code> in their <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/boards/omnibus/f4sd/default.px4board" target="_blank" rel="noreferrer">px4board definition file</a>.</p><p>如果在 FLASH 受限板上进行自定义开发，您可以调整此处的 URL 以指向另一台服务器<a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/lib/component_information/CMakeLists.txt#L41" target="_blank" rel="noreferrer">here</a>。</p></div><p>如果载具上没有显示参数元数据，则使用 <code>px4-travis.s3.amazonaws.com</code> 上的元数据。 它也可以用作后退，以避免对低速遥测链接进行非常缓慢的下载。</p><p>用于 CI 构建 <code>main</code> 分支的元数据 JSON 文件也拷贝到了 github 仓库：<a href="https://github.com/PX4/PX4-Metadata-Translations/" target="_blank" rel="noreferrer">PX4/PX4-Metadata-Translations</a>。 这与Crowdin集成，用于获取翻译，这些翻译存储在 <a href="https://github.com/PX4/PX4-Metadata-Translations/tree/main/translated" target="_blank" rel="noreferrer">translated</a> 文件夹中，每种语言都有 xz 压缩的翻译文件。 这些是由载具的组件元数据引用的，并在需要时下载。 有关更多信息，请参阅 <a href="https://github.com/PX4/PX4-Metadata-Translations/" target="_blank" rel="noreferrer">PX4-Metadata-Translations</a> 和 <a href="https://mavlink.io/en/services/component_information.html#translation" target="_blank" rel="noreferrer">Component Metadata Protocol &gt; Translation</a>。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>主分支的参数 XML 文件通过 CI 复制到 QGC 源代码树中，并在没有通过组件元数据协议获取到元数据的情况下用作后备方案 (该方法早于组件元数据协议)。</p></div><h3 id="元数据执行器" tabindex="-1">元数据执行器 <a class="header-anchor" href="#元数据执行器" aria-label="Permalink to &quot;元数据执行器&quot;">​</a></h3><p>下面的图表显示了执行器元数据是如何从源代码中集成和如何被 QGroundControl 使用的：</p><p><img src="'+a+'" alt="执行器元数据"></p><ul><li><strong>Left</strong>: 元数据在不同模快的 <code>module.yml</code> 文件中定义。 <code>control_allocator</code> 模块定义几何形状，而每个输出驱动程序则定义其通道集和配置参数。 <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/validation/module_schema.yaml" target="_blank" rel="noreferrer">schema file</a> 描写了这些 yaml 文件的结构。</li><li><strong>Middle</strong>: 在构建时间, 当前构建目标的所有已启用模块的 <code>module.yml</code> 文件都会被解析并变成一个驱动程序。 使用 <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/module_config/generate_actuators_metadata.py" target="_blank" rel="noreferrer">Tools/module_config/generate_actuators_metadata.py</a>脚本的文件。 这里还有<a href="https://github.com/mavlink/mavlink/blob/master/component_metadata/actuators.schema.json" target="_blank" rel="noreferrer">schema file</a>。</li><li><strong>Right</strong>: 运行时，QGroundControl 通过 MAVLink 组件元数据 API 请求 JSON 文件(上文已经描述)。</li></ul><h2 id="更多信息" tabindex="-1">更多信息： <a class="header-anchor" href="#更多信息" aria-label="Permalink to &quot;更多信息：&quot;">​</a></h2><ul><li><a href="./../advanced/parameters_and_configurations.html">参数和配置</a></li><li><a href="./../concept/events_interface.html">事件接口</a></li><li><a href="./../contribute/translation.html">翻译</a></li><li><a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer">组件元数据协议</a> (mavlink.io)</li><li><a href="https://github.com/PX4/PX4-Metadata-Translations/" target="_blank" rel="noreferrer">PX4 元数据翻译</a> (Github)</li></ul>',26),i=[n];function s(c,h,d,m,p,f){return r(),t("div",null,i)}const g=e(l,[["render",s]]);export{b as __pageData,g as default};
