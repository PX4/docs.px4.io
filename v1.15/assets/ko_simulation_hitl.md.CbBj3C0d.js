import{_ as i,a,b as e,c as t}from"./chunks/qgc_hitl_autoconnect.CJljA_t2.js";import{_ as s,c as o,o as l,ab as n}from"./chunks/framework.CUflZczI.js";const f=JSON.parse('{"title":"Hardware in the Loop Simulation (HITL)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/simulation/hitl.md","filePath":"ko/simulation/hitl.md"}'),r={name:"ko/simulation/hitl.md"},h=n('<h1 id="hardware-in-the-loop-simulation-hitl" tabindex="-1">Hardware in the Loop Simulation (HITL) <a class="header-anchor" href="#hardware-in-the-loop-simulation-hitl" aria-label="Permalink to &quot;Hardware in the Loop Simulation (HITL)&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">HITL</p><p>is <a href="./../simulation/community_supported_simulators.html">community supported and maintained</a>. It may or may not work with current versions of PX4.</p><p>See <a href="./../dev_setup/dev_env.html">Toolchain Installation</a> for information about the environments and tools supported by the core development team.</p></div><p>HITL(Hardware-in-the-Loop)은 일반 PX4 펌웨어가 실제 비행 콘트롤러 하드웨어에서 실행되는 시뮬레이션 모드입니다. 이 접근 방식은 실제 하드웨어에서 대부분의 실제 비행 코드를 테스트할 수 있습니다.</p><p>PX4 supports HITL for multicopters (using <a href="./../sim_jmavsim/">jMAVSim</a> or <a href="./../sim_gazebo_classic/">Gazebo Classic</a>) and VTOL (using Gazebo Classic).</p><p><a id="compatible_airframe"></a></p><h2 id="hitl-호환-기체" tabindex="-1">HITL 호환 기체 <a class="header-anchor" href="#hitl-호환-기체" aria-label="Permalink to &quot;HITL 호환 기체&quot;">​</a></h2><p>The set of compatible airframes vs simulators is:</p><table><thead><tr><th>기체</th><th><code>SYS_AUTOSTART</code></th><th>Gazebo Classic</th><th>jMAVSim</th></tr></thead><tbody><tr><td><a href="./../airframes/airframe_reference.html#copter_simulation_hil_quadcopter_x">HIL 쿼드콥터 X</a></td><td>1001</td><td>예</td><td>예</td></tr><tr><td><a href="./../airframes/airframe_reference.html#vtol_standard_vtol_hil_standard_vtol_quadplane">HIL 표준 VTOL QuadPlane</a></td><td>1002</td><td>예</td><td></td></tr><tr><td><a href="./../airframes/airframe_reference.html#copter_quadrotor_x_generic_quadcopter">일반 쿼드콥터 x</a> 콥터</td><td>4001</td><td>예</td><td>예</td></tr></tbody></table><p><a id="simulation_environment"></a></p><h2 id="hitl-시뮬레이션-환경" tabindex="-1">HITL 시뮬레이션 환경 <a class="header-anchor" href="#hitl-시뮬레이션-환경" aria-label="Permalink to &quot;HITL 시뮬레이션 환경&quot;">​</a></h2><p>HITL(Hardware-in-the-Loop) 시뮬레이션을 사용하여, 일반 PX4 펌웨어가 실제 하드웨어에서 실행됩니다. JMAVSim or Gazebo Classic (running on a development computer) are connected to the flight controller hardware via USB/UART. The simulator acts as gateway to share MAVLink data between PX4 and <em>QGroundControl</em>.</p><div class="info custom-block"><p class="custom-block-title">The simulator can also be connected via UDP if the flight controller has networking support and uses a stable, low-latency connection (e.g. a wired Ethernet connection - WiFi is usually not sufficiently reliable). 예를 들어, 이 설정은 이더넷으로 컴퓨터에 연결된 라즈베리파이에서 실행되는 PX4로 테스트되었습니다(jMAVSim 실행 명령이 포함된 시작 설정은 <a href="https://github.com/PX4/PX4-Autopilot/blob/master/posix-configs/rpi/px4_hil.config" target="_blank" rel="noreferrer">여기</a>를 참고).</p></div><p>아래 다이어그램은 시뮬레이션 환경을 나타냅니다.</p><ul><li>A HITL configuration is selected (via <em>QGroundControl</em>) that doesn&#39;t start any real sensors.</li><li><em>jMAVSim</em> or <em>Gazebo Classic</em> are connected to the flight controller via USB.</li><li>The simulator is connected to <em>QGroundControl</em> via UDP and bridges its MAVLink messages to PX4.</li><li><em>Gazebo Classic</em> and <em>jMAVSim</em> can also connect to an offboard API and bridge MAVLink messages to PX4.</li><li>(Optional) A serial connection can be used to connect Joystick/Gamepad hardware via <em>QGroundControl</em>.</li></ul><p><img src="'+i+'" alt="HITL Setup - jMAVSim and Gazebo Classic"></p><h2 id="hitl-대-sitl" tabindex="-1">HITL 대 SITL <a class="header-anchor" href="#hitl-대-sitl" aria-label="Permalink to &quot;HITL 대 SITL&quot;">​</a></h2><p>SITL은 시뮬레이션 환경의 컴퓨터에서 실행되며, 해당 환경에서 제작된 펌웨어를 사용합니다. 시뮬레이터에서 가공의 환경 데이터를 제공하는 시뮬레이션 드라이버 이외의 시스템은 정상적으로 작동합니다.</p><p>이와 대조적으로, HITL은 일반 하드웨어의 &quot;HITL 모드&quot;에서 일반 PX4 펌웨어를 실행합니다. 시뮬레이션 데이터는 SITL과 다른 지점에서 시스템에 입력됩니다. 커맨더 및 센서와 같은 핵심 모듈에는 시작 시 정상적인 기능 중 일부를 우회하는 HITL 모드가 있습니다.</p><p>요약하면, HITL은 표준 펌웨어를 사용하여 실제 하드웨어에서 PX4를 실행하고, SITL은 실제로 더 많은 표준 시스템 코드를 실행합니다.</p><h2 id="hitl-설정" tabindex="-1">HITL 설정 <a class="header-anchor" href="#hitl-설정" aria-label="Permalink to &quot;HITL 설정&quot;">​</a></h2><h3 id="px4-설정" tabindex="-1">PX4 설정 <a class="header-anchor" href="#px4-설정" aria-label="Permalink to &quot;PX4 설정&quot;">​</a></h3><ol><li><p>Connect the autopilot directly to <em>QGroundControl</em> via USB.</p></li><li><p>HITL 모드를 활성화합니다.</p><ol><li><p><strong>설정 열기 &gt; 안전</strong> 섹션을 오픈합니다.</p></li><li><p>Enable HITL mode by selecting <strong>Enabled</strong> from the <em>HITL Enabled</em> list:</p><p><img src="'+a+'" alt="QGroundControl HITL 설정"></p></li></ol></li><li><p>기체를 선택합니다.</p><ol><li><p><strong>설정 &gt; 기체</strong>를 오픈합니다.</p></li><li><p>테스트할 <a href="#compatible_airframe">호환 기체</a>를 선택합니다. Then click <strong>Apply and Restart</strong> on top-right of the <em>Airframe Setup</em> page.</p><p><img src="'+e+'" alt="기체를 선택합니다."></p></li></ol></li><li><p>필요한 경우 RC 또는 조이스틱을 보정합니다.</p></li><li><p>UDP를 설정합니다.</p><ol><li><p>Under the <em>General</em> tab of the settings menu, uncheck all <em>AutoConnect</em> boxes except for <strong>UDP</strong>.</p><p><img src="'+t+`" alt="QGC HITL 자동 연결 설정"></p></li></ol></li><li><p>(선택 사항) 조이스틱과 안정장치를 설정합니다. RC 리모콘 송신기 대신 조이스틱을 사용하려면 이 <a href="./../advanced_config/parameters.html">매개변수</a>를 설정하십시오.</p><ul><li><a href="./../advanced_config/parameter_reference.html#COM_RC_IN_MODE">COM_RC_IN_MODE</a>를 &quot;조이스틱/RC 검사 없음&quot;으로 변경합니다. 이것은 조이스틱 입력을 허용하고, RC 입력을 비활성화합니다.</li><li><a href="./../advanced_config/parameter_reference.html#NAV_RCL_ACT">NAV_RCL_ACT</a>를 &#39;사용 안 함&#39;으로 설정합니다. 무선 제어로 HITL을 실행하지 않으면, RC 안전장치가 간섭하지 않습니다.</li></ul></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <em>QGroundControl User Guide</em> also has instructions on <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/setup_view/joystick.html" target="_blank" rel="noreferrer">Joystick</a> and <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/virtual_joystick.html" target="_blank" rel="noreferrer">Virtual Joystick</a> setup.</p></div><p>Once configuration is complete, <strong>close</strong> <em>QGroundControl</em> and disconnect the flight controller hardware from the computer.</p><h3 id="시뮬레이터별-설정" tabindex="-1">시뮬레이터별 설정 <a class="header-anchor" href="#시뮬레이터별-설정" aria-label="Permalink to &quot;시뮬레이터별 설정&quot;">​</a></h3><p>다음 섹션을 참고하여 특정 시뮬레이터에 대하여 설정하십시오.</p><h4 id="gazebo-classic" tabindex="-1">Gazebo Classic <a class="header-anchor" href="#gazebo-classic" aria-label="Permalink to &quot;Gazebo Classic&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">Make sure <em>QGroundControl</em> is not running!</p></div><ol><li><p>Build PX4 with <a href="./../sim_gazebo_classic/">Gazebo Classic</a> (in order to build the Gazebo Classic plugins).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Firmware_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DONT_RUN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div></li><li><p>Open the vehicle model&#39;s sdf file (e.g. <strong>Tools/simulation/gazebo-classic/sitl_gazebo-classic/models/iris_hitl/iris_hitl.sdf</strong>).</p></li><li><p>필요한 경우 <code>serialDevice</code> 매개변수(<code>/dev/ttyACM0</code>)를 변경합니다.</p><div class="info custom-block"><p class="custom-block-title">The serial device depends on what port is used to connect the vehicle to the computer (this is usually <code>/dev/ttyACM0</code>). Ubuntu를 확인하는 쉬운 방법은 자동조종장치를 연결후, 터미널에서 <code>dmesg | grep &quot;tty&quot;</code>를 실행합니다.. 올바른 장치가 마지막에 표시됩니다.</p></div></li></ol><p>:::</p><ol><li><p>환경 변수를 설정합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/setup_gazebo.bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/build/px4_sitl_default</span></span></code></pre></div><p>and run Gazebo Classic in HITL mode:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gazebo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds/hitl_iris.world</span></span></code></pre></div></li><li><p>Start <em>QGroundControl</em>. It should autoconnect to PX4 and Gazebo Classic.</p></li></ol><h4 id="jmavsim-쿼드콥터-전용" tabindex="-1">jMAVSim(쿼드콥터 전용) <a class="header-anchor" href="#jmavsim-쿼드콥터-전용" aria-label="Permalink to &quot;jMAVSim(쿼드콥터 전용)&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">Make sure <em>QGroundControl</em> is not running!</p></div><ol><li><p>비행 콘트롤러를 컴퓨터에 연결하고, 부팅시까지 기다립니다.</p></li><li><p>jMAVSim를 HITL 모드에서 실행:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/simulation/jmavsim/jmavsim_run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/ttyACM0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 921600</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Replace the serial port name <code>/dev/ttyACM0</code> as appropriate. MacOS에서 이 포트는 <code>/dev/tty.usbmodem1</code>입니다. Windows(Cygwin 포함)에서는 COM1 또는 다른 포트입니다. Windows 장치 관리자에서 확인하십시오.</p></div></li></ol><p>:::</p><ol><li>Start <em>QGroundControl</em>. PX4와 jMAVSim에 자동으로 연결되어야 합니다.</li></ol><h2 id="hitl에서-자율-임무-비행" tabindex="-1">HITL에서 자율 임무 비행 <a class="header-anchor" href="#hitl에서-자율-임무-비행" aria-label="Permalink to &quot;HITL에서 자율 임무 비행&quot;">​</a></h2><p>You should be able to use <em>QGroundControl</em> to <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/fly_view/fly_view.html#missions" target="_blank" rel="noreferrer">run missions</a> and otherwise control the vehicle.</p>`,38),p=[h];function d(c,m,u,k,g,b){return l(),o("div",null,p)}const v=s(r,[["render",d]]);export{f as __pageData,v as default};
