import{_ as s,c as a,o as e,ab as i}from"./chunks/framework.CUflZczI.js";const u=JSON.parse('{"title":"Зовнішні модулі (Out-of-Tree)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/advanced/out_of_tree_modules.md","filePath":"uk/advanced/out_of_tree_modules.md"}'),t={name:"uk/advanced/out_of_tree_modules.md"},l=i(`<h1 id="зовнішні-модулі-out-of-tree" tabindex="-1">Зовнішні модулі (Out-of-Tree) <a class="header-anchor" href="#зовнішні-модулі-out-of-tree" aria-label="Permalink to &quot;Зовнішні модулі (Out-of-Tree)&quot;">​</a></h1><p>Зовнішні модулі забезпечують зручний механізм для розробників для керування/групування власних модулів, які вони хочуть додати до (або оновити в) прошивки PX4. Зовнішні модулі можуть використовувати ті ж самі включення, що й внутрішні модулі, і можуть взаємодіяти з внутрішніми модулями через uORB.</p><p>У цій темі пояснюється, як додати зовнішній модуль (&quot;out of tree&quot;) до збірки PX4.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ми закликаємо вас внести ваші зміни до PX4, де це можливо!</p></div><h2 id="використання" tabindex="-1">Використання <a class="header-anchor" href="#використання" aria-label="Permalink to &quot;Використання&quot;">​</a></h2><p>Щоб створити зовнішній модуль:</p><ul><li><p>Створіть папку <em>зовнішнього каталогу</em>, щоб згрупувати зовнішні модулі:</p><ul><li>Його можна знайти будь-де за межами дерева <strong>PX4-Autopilot</strong>.</li><li>Він повинен мати таку ж структуру, як <strong>PX4-Autopilot</strong> (тобто він повинен містити каталог з назвою <strong>src</strong>).</li><li>Пізніше ми звернемося до цього каталогу за допомогою <code>EXTERNAL_MODULES_LOCATION</code>.</li></ul></li><li><p>Скопіюйте існуючий модуль (наприклад, <strong>examples/px4_simple_app</strong>) до зовнішнього каталогу або безпосередньо створіть новий модуль.</p></li><li><p>Перейменуйте модуль (включаючи <code>MODULE</code> у <strong>CMakeLists.txt</strong>) або видаліть його з існуючої конфігурації збірки <em>cmake</em> PX4-Autopilot. Це щоб уникнути конфліктів з внутрішніми модулями.</p></li><li><p>Додайте файл <strong>CMakeLists.txt</strong> у зовнішній каталозі з вмістом:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_module_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules/&lt;new_module&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div></li><li><p>Додайте рядок <code>EXTERNAL</code> до <code>modules/&lt;new_module&gt;/CMakeLists.txt</code> у <code>px4_add_module()</code>, наприклад так:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">px4_add_module(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MODULE modules__test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MAIN test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  STACK_MAIN 2000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SRCS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      px4_simple_app.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  DEPENDS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      platforms__common</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EXTERNAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span></code></pre></div></li></ul><h2 id="визначення-повідомлень-поза-деревами-uorb" tabindex="-1">Визначення повідомлень поза деревами uORB <a class="header-anchor" href="#визначення-повідомлень-поза-деревами-uorb" aria-label="Permalink to &quot;Визначення повідомлень поза деревами uORB&quot;">​</a></h2><p>Повідомлення uORB також можна визначати поза деревом. Для цього має існувати папка <code>$EXTERNAL_MODULES_LOCATION/msg</code>.</p><ul><li><p>Розмістіть усі нові визначення повідомлень у каталозі <code>$EXTERNAL_MODULES_LOCATION/msg</code>. Формат цих нових визначень повідомлень поза деревом такий самий, як і для будь-якого іншого <a href="./../middleware/uorb.html#adding-a-new-topic">визначення повідомлень uORB</a>.</p></li><li><p>Додати файл <code>$EXTERNAL_MODULES_LOCATION/msg/CMakeLists.txt</code> з змістом:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_msg_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message1&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message2&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message3&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><p>Нове повідомлення uORB можна використовувати як будь-яке інше повідомлення uORB, як описано <code>тут</code>.</p></li></ul><p>Поза деревом повідомлень uORB будуть створені в тих же місцях, що й звичайні повідомлення uORB. Заголовки тем uORB генеруються в <code>&lt;build_dir&gt;/uORB/topics/</code>, а вихідні файли повідомлень – створено в <code>&lt;build_dir&gt;/msg/topics_sources/</code>.</p><p>Нові повідомлення uORB можна використовувати як будь-які інші повідомлення uORB, як описано <a href="./../middleware/uorb.html#adding-a-new-topic">тут</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Визначення повідомлень поза деревом uORB не можуть мати ті ж самі назви, що й будь-які звичайні повідомлення uORB.</p></div><h2 id="побудова-зовнішніх-модулів-та-повідомлень-uorb" tabindex="-1">Побудова зовнішніх модулів та повідомлень uORB <a class="header-anchor" href="#побудова-зовнішніх-модулів-та-повідомлень-uorb" aria-label="Permalink to &quot;Побудова зовнішніх модулів та повідомлень uORB&quot;">​</a></h2><p>Виконайте <code>make px4_sitl EXTERNAL_MODULES_LOCATION=&lt;path&gt;</code>.</p><p>Будь-яку іншу ціль збірки можна використовувати, але каталог для збирання не повинен існувати. Якщо вона вже існує, ви також можете просто встановити змінну <em>cmake</em> у папці збірки.</p><p>Для наступних поступових збірок <code>EXTERNAL_MODULES_LOCATION</code> не потрібно вказувати.</p>`,17),n=[l];function p(o,d,c,h,r,E){return e(),a("div",null,n)}const _=s(t,[["render",p]]);export{u as __pageData,_ as default};
