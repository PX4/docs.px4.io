import{_ as e,a as t}from"./chunks/px4_arch_fc_companion.BWVvemTR.js";import{_ as o,c as a,o as r,ab as s}from"./chunks/framework.CUflZczI.js";const v=JSON.parse('{"title":"PX4 System Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"en/concept/px4_systems_architecture.md","filePath":"en/concept/px4_systems_architecture.md"}'),n={name:"en/concept/px4_systems_architecture.md"},i=s('<h1 id="px4-system-architecture" tabindex="-1">PX4 System Architecture <a class="header-anchor" href="#px4-system-architecture" aria-label="Permalink to &quot;PX4 System Architecture&quot;">​</a></h1><p>The sections below provide high-level overview of the PX4 hardware and software stack for two &quot;typical&quot; PX4 systems; one that has just a flight controller, and another that has a flight controller and a companion computer (also known as a &quot;mission computer&quot;).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <a href="./../concept/architecture.html">PX4 Architectural Overview</a> provides information about the flight stack and middleware. Offboard APIs are covered in <a href="./../ros/">ROS</a> and <a href="https://mavsdk.mavlink.io/main/en/" target="_blank" rel="noreferrer">MAVSDK</a>.</p></div><h2 id="flight-controller-only" tabindex="-1">Flight Controller (only) <a class="header-anchor" href="#flight-controller-only" aria-label="Permalink to &quot;Flight Controller (only)&quot;">​</a></h2><p>The diagram below provides a high level overview of a typical &quot;simple&quot; PX4 system based around a flight controller.</p><p><img src="'+e+'" alt="PX4 architecture - FC only system"></p><p>The hardware consists of</p><ul><li><a href="./../flight_controller/">Flight controller</a> (running the PX4 flight stack). This often includes internal IMUs, compass and barometer.</li><li><a href="./../peripherals/esc_motors.html">Motor ESCs</a> connected to <a href="./../peripherals/pwm_escs_and_servo.html">PWM outputs</a>, <a href="./../dronecan/escs.html">DroneCAN</a> (DroneCAN allows two-way communication, not single direction as shown) or some other bus.</li><li>Sensors (<a href="./../gps_compass/">GPS</a>, <a href="./../gps_compass/">compass</a>, distance sensors, barometers, optical flow, barometers, ADSB transponders, etc.) connected via I2C, SPI, CAN, UART etc.</li><li><a href="./../camera/">Camera</a> or other payload. Cameras can be connected to PWM outputs or via MAVLink.</li><li><a href="./../telemetry/">Telemetry radios</a> for connecting to a ground station computer/software.</li><li><a href="./../getting_started/rc_transmitter_receiver.html">RC Control System</a> for manual control</li></ul><p>The left hand side of the diagram shows the software stack, which is horizontally aligned (approximately) with the hardware parts of the diagram.</p><ul><li>The ground station computer typically runs <a href="./../getting_started/px4_basic_concepts.html#qgc">QGroundControl</a> (or some other ground station software). It may also run robotics software like <a href="https://mavsdk.mavlink.io/" target="_blank" rel="noreferrer">MAVSDK</a> or <a href="./../ros/">ROS</a>.</li><li>The PX4 flight stack running on the flight controller includes <a href="./../modules/modules_driver.html">drivers</a>, <a href="./../modules/modules_communication.html">comms modules</a>, <a href="./../modules/modules_controller.html">controllers</a>, <a href="./../modules/modules_controller.html">estimators</a> and other <a href="./../modules/modules_main.html">middleware and system modules</a>.</li></ul><h2 id="fc-and-companion-computer" tabindex="-1">FC and Companion Computer <a class="header-anchor" href="#fc-and-companion-computer" aria-label="Permalink to &quot;FC and Companion Computer&quot;">​</a></h2><p>The diagram below shows a PX4 system that includes both a flight controller and a companion computer (here referred to as a &quot;mission computer&quot;).</p><p><img src="'+t+'" alt="PX4 architecture - FC + Companion Computer"></p><p>The flight controller runs the normal PX4 flight stack, while a companion computer provides advanced features that utilise <a href="./../computer_vision/">computer vision</a>. The two systems are connected using a fast serial or IP link, and typically communicate using the <a href="https://mavlink.io/en/" target="_blank" rel="noreferrer">MAVLink protocol</a>. Communications with the ground stations and the cloud are usually routed via the companion computer (e.g. using the <a href="https://github.com/mavlink-router/mavlink-router" target="_blank" rel="noreferrer">MAVLink Router</a> (from Intel)).</p><p>PX4 systems typically run a Linux OS on the companion computer. Linux is a much better platform for &quot;general&quot; software development than NuttX; there are many more Linux developers and a lot of useful software has already been written (e.g. for computer vision, communications, cloud integrations, hardware drivers). Companion computers sometimes run Android for the same reason.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The diagram shows a cloud or ground station connection via LTE, an approach that has been used a number of PX4-based systems. PX4 does not deliver software specifically for LTE and/or cloud integration (this requires custom development).</p></div>',16),l=[i];function c(h,m,u,d,p,f){return r(),a("div",null,l)}const y=o(n,[["render",c]]);export{v as __pageData,y as default};
