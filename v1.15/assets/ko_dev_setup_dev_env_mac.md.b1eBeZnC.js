import{_ as s,c as i,o as a,ab as e}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"MacOS 개발 환경","description":"","frontmatter":{},"headers":[],"relativePath":"ko/dev_setup/dev_env_mac.md","filePath":"ko/dev_setup/dev_env_mac.md"}'),t={name:"ko/dev_setup/dev_env_mac.md"},l=e(`<h1 id="macos-개발-환경" tabindex="-1">MacOS 개발 환경 <a class="header-anchor" href="#macos-개발-환경" aria-label="Permalink to &quot;MacOS 개발 환경&quot;">​</a></h1><p>아래에서 macOS용 PX4 개발 환경 설정 방법을 설명합니다. PX4 빌드에 사용되어 집니다.</p><ul><li>Pixhawk와 기타 NuttX 기반 하드웨어</li><li><a href="./../sim_gazebo_classic/">Gazebo Classic Simulation</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이 설정은 PX4 개발 팀에서 지원합니다. To build other targets you will need to use a <a href="./../dev_setup/dev_env.html#supported-targets">different OS</a> (or an <a href="./../advanced/community_supported_dev_env.html">unsupported development environment</a>).</p></div><h2 id="영상-가이드" tabindex="-1">영상 가이드 <a class="header-anchor" href="#영상-가이드" aria-label="Permalink to &quot;영상 가이드&quot;">​</a></h2><p>@<a href="https://youtu.be/tMbMGiMs1cQ" target="_blank" rel="noreferrer">유투브</a></p><h2 id="base-setup" tabindex="-1">Base Setup <a class="header-anchor" href="#base-setup" aria-label="Permalink to &quot;Base Setup&quot;">​</a></h2><p>The &quot;base&quot; macOS setup installs the tools needed for building firmware, and includes the common tools that will be needed for installing/using the simulators.</p><h3 id="environment-setup" tabindex="-1">Environment Setup <a class="header-anchor" href="#environment-setup" aria-label="Permalink to &quot;Environment Setup&quot;">​</a></h3><details class="details custom-block"><summary>Details</summary><p>애플 M1 맥북 사용자 Apple M1 Macbook이 있는 경우 x86 터미널을 설정하여 터미널을 x86으로 실행해야 합니다.</p><ol><li>유틸리티 폴더(<strong>Finder &gt; 이동 메뉴 &gt; 유틸리티</strong>)에서 터미널 애플리케이션을 찾습니다.</li><li>Select <em>Terminal.app</em> and right-click on it, then choose <strong>Duplicate</strong>.</li><li>Rename the duplicated Terminal app, e.g. to <em>x86 Terminal</em></li><li>Now select the renamed <em>x86 Terminal</em> app and right-click and choose *<em>Get Info</em></li><li><strong>Rosetta를 사용하여 열기</strong> 확인란을 선택하고, 창을 닫습니다.</li><li>Run the <em>x86 Terminal</em> as usual, which will fully support the current PX4 toolchain</li></ol></details><p>First set up the environment</p><ol><li><p>Enable more open files by appending the following line to the <code>~/.zshenv</code> file (creating it if necessary):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.zshenv</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">If you don&#39;t do this, the build toolchain may report the error: <code>&quot;LD: too many open files&quot;</code></p></div></li></ol><p>:::</p><ol><li><p>Enforce Python 3 by appending the following lines to <code>~/.zshenv</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Point pip3 to MacOS system python 3 pip</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pip3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/usr/bin/pip3</span></span></code></pre></div></li></ol><h3 id="공통-도구" tabindex="-1">공통 도구 <a class="header-anchor" href="#공통-도구" aria-label="Permalink to &quot;공통 도구&quot;">​</a></h3><p>To setup the environment to be able to build for Pixhawk/NuttX hardware (and install the common tools for using simulators):</p><ol><li><p>Install Homebrew by following these <a href="https://brew.sh" target="_blank" rel="noreferrer">installation instructions</a>.</p></li><li><p>Run these commands in your shell to install the common tools:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4/px4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4-dev</span></span></code></pre></div></li><li><p>Install the required Python packages:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># install required packages using pip3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyserial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numpy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pandas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyyaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyros-genmsg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packaging</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kconfiglib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> future</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonschema</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># if this fails with a permissions error, your Python install is in a system path - use this command instead:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyserial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numpy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pandas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyyaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyros-genmsg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packaging</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kconfiglib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> future</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonschema</span></span></code></pre></div></li></ol><h2 id="gazebo-classic-simulation" tabindex="-1">Gazebo Classic Simulation <a class="header-anchor" href="#gazebo-classic-simulation" aria-label="Permalink to &quot;Gazebo Classic Simulation&quot;">​</a></h2><p>To setup the environment for <a href="./../sim_gazebo_classic/">Gazebo Classic</a> simulation:</p><ol><li><p>Run the following commands in your shell:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tbb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i.bak</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/disable! date:/s/^/  /; /disable! date:/s/./#/3&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)/Library/Taps/homebrew/homebrew-core/Formula/tbb@2020.rb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tbb@2020</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tbb@2020</span></span></code></pre></div><p>jMAVSim과 함께 SITL 시뮬레이션을 사용하려면, 최신 버전의 Java(예: Java 15)를 설치합니다. They can be removed once it is fixed (along with this note). :::</p></li><li><p>To install SITL simulation with Gazebo Classic:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cask</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> temurin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cask</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xquartz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4-sim-gazebo</span></span></code></pre></div></li><li><p>Run the macOS setup script: <code>PX4-Autopilot/Tools/setup/macos.sh</code> The easiest way to do this is to clone the PX4 source, and then run the script from the directory, as shown:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot/Tools/setup</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> macos.sh</span></span></code></pre></div></li></ol><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>Once you have finished setting up the command-line toolchain:</p><ul><li><a href="./../dev_setup/vscode.html">VSCode</a>를 설치합니다(명령줄에 IDE 사용을 선호하는 경우).</li><li>Install the <a href="./../dev_setup/qgc_daily_build.html">QGroundControl Daily Build</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <em>daily build</em> includes development tools that are hidden in release builds. 또한, 릴리스 빌드에서 아직 지원되지 않는 새로운 PX4 기능에 대한 액세스를 제공할 수도 있습니다.</p></div><ul><li><a href="./../dev_setup/building_px4.html">빌드 지침</a>을 계속 진행합니다.</li></ul>`,25),n=[l];function h(p,k,o,r,d,F){return a(),i("div",null,n)}const u=s(t,[["render",h]]);export{g as __pageData,u as default};
