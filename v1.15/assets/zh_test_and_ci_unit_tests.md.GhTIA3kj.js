import{_ as s,c as i,o as a,ab as t}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"zh/test_and_ci/unit_tests.md","filePath":"zh/test_and_ci/unit_tests.md"}'),n={name:"zh/test_and_ci/unit_tests.md"},e=t(`<h1 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h1><p>我们鼓励开发人员在开发的每个模块时编写单元测试，包括添加新功能，修复错误和重构。</p><p>或者，也可以直接从 bash 运行完整的单元测试：</p><ol><li>Unit tests with <a href="https://github.com/google/googletest/blob/main/docs/primer.md" target="_blank" rel="noreferrer">Google Test</a> (&quot;GTest&quot;) - tests that have minimal, internal-only dependencies</li><li>在 <strong>test_[description].cpp</strong> 中包括基本 unittest-class<code>&amp;lt;unit_test.h&amp;gt;</code> 以及为新功能编写测试所需的所有文件。</li><li>软件在环(SITL)单元测试。 这些测试需要运行在完整的SITL环境中， 运行起来更慢，更难调试，所以建议尽可能使用GTest代替。</li></ol><h2 id="编写测试" tabindex="-1">编写测试 <a class="header-anchor" href="#编写测试" aria-label="Permalink to &quot;编写测试&quot;">​</a></h2><p>要查看 px4 shell 中可用测试的完整列表，请执行以下操作：</p><p>创建新的单元测试步骤如下：</p><ol><li>单元测试分成三个部分：设置、运行、检查结果。 每个单元测试都应该测试一个特定行为或设置案例，如果测试失败，则很明显你的测试代码有错误。 请尽可能遵循这些标准。</li><li>Copy and rename the example unit test <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/modules/mc_att_control/AttitudeControl/AttitudeControlTest.cpp" target="_blank" rel="noreferrer">AttitudeControlTest</a> to the directory the code to be tested is in.</li><li>将新文件到该目录的<code>CMakeLists.txt</code>文件中。 文件看起来像<code>px4_add_unit_gtest(SRC MyNewUnitTest.cpp LINKLIBS &lt;library_to_be_tested&gt;)</code></li><li>添加你想要的测试功能。 这包括了添加所需的头文件、新测试(每个测试都应该有单独的名称)，并加入相关逻辑，运行测试代码并验证其行为是否符合预期。</li><li>如果需要添加新的依赖库，只要在如上所说的CMakeLists文件中<code>LINKLIBS</code>后面加入库的名字。</li></ol><p>可以通用 <code>make tests</code>命令来运行所有测试，然后在 <code>build/px4_sitl_test/unit-MyNewUnit</code>目录中找到二进行制文件。 也可以直接通过调试器中运行。</p><h2 id="写一个gtest功能测试" tabindex="-1">写一个GTest功能测试 <a class="header-anchor" href="#写一个gtest功能测试" aria-label="Permalink to &quot;写一个GTest功能测试&quot;">​</a></h2><p>当测试或测试的组件依赖参数、uORB 消息、或更高级的GTest功能的时候，应当使用GTest功能测试。 Additionally, functional tests can contain local usage of STL data structures (although be careful of platform differences between e.g. macOS and Linux).</p><p>创建一个新的功能测试步骤如下：</p><ol><li>一般来说（与单元测试类似）功能测试应分为三个部分：设置，运行，检查结果。 每个单元测试都应该测试一个特定行为或设置案例，如果测试失败，则很明显你的测试代码有错误。 请尽可能遵循这些标准。</li><li>Copy and rename the example functional test <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/lib/parameters/ParameterTest.cpp" target="_blank" rel="noreferrer">ParameterTest</a> to the directory the code to be tested is in.</li><li>将ParameterTest 重命名为更符合你正在测试的代码功能。</li><li>将新文件到该目录的<code>CMakeLists.txt</code>文件中。 文件内容看起来像 <code>px4_add_functional_gtest(SRC MyNewFunctionalTest.cpp LINKLIBS &lt;library_to_be_tested&gt;)</code></li><li>添加你想要的测试功能。 这包括了，添加特定的头文件、新测试（每个测试都应该使用不同的命名），并设置相关逻辑，运行测试代码并验证是否符合预期。</li><li>如果需要添加新的依赖库，只要在如上所说的CMakeLists文件中LINKLIBS后面加入库的名字。</li></ol><p>可以通用<code>make tests</code>命令来运行所有测试，然后在 <code>build/px4_sitl_test/functional-MyNewFunctional</code>目录中找到二进行制文件。 也可以直接通过调试器中运行。 It can be run directly in a debugger, however be careful to only run one test per executable invocation using the <a href="https://github.com/google/googletest/blob/main/docs/advanced.md#running-a-subset-of-the-tests" target="_blank" rel="noreferrer">--gtest_filter=&lt;regex&gt;</a> arguments, as some parts of the uORB and parameter libraries don&#39;t clean themselves up perfectly and may result in undefined behavior if set up multiple times.</p><h2 id="写一个软件在环-sitl-单元测试" tabindex="-1">写一个软件在环（SITL）单元测试 <a class="header-anchor" href="#写一个软件在环-sitl-单元测试" aria-label="Permalink to &quot;写一个软件在环（SITL）单元测试&quot;">​</a></h2><p>当需要所有的飞行控制组件：驱动、时间或者更多时，应该SITL单元测试。 这些测试运行较慢(每个模块至少1秒+)，同时难以测试，所以仅在必要时使用它们。</p><p>创建一个新的SITL单元测试步骤如下：</p><ol><li><p>Examine the sample <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/include/unit_test.h" target="_blank" rel="noreferrer">Unittest-class</a>.</p></li><li><p>Create a new .cpp file within <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/systemcmds/tests" target="_blank" rel="noreferrer">tests</a> with name <strong>test_[description].cpp</strong>.</p></li><li><p>在 <strong>test_ [description].cpp</strong> 中，实现各种测试。</p></li><li><p>在 <strong>test_ [description].cpp</strong> 中实现 <code>run_tests（）</code> 方法，其中将运行每个测试[1,2，...]。</p></li><li><p>在 <code>[Description]Test</code> 类中，声明公共方法 <code>virtual bool run_tests（）</code>。</p></li><li><p>在 <code>[Description]Test</code> 类中，声明测试相关特征所需的所有私有方法（<code>test1（）</code>，<code>test2（）</code>，...）。</p></li><li><p>在 <strong>test_ [description].cpp</strong> 的底部声明测试。</p></li><li><p>在 <strong>test_ [description].cpp</strong> 中，实现各种测试。</p></li><li><p>在 <strong>test_ [description].cpp</strong> 的底部声明测试。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ut_declare_test_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test_[description], [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]Test)</span></span></code></pre></div><p>下面是一个模板：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unit_test.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[new feature].h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unit_test.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> #include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[new feature].h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]Test : public UnitTest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run_tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ut_run_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ut_run_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_tests_failed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ut_declare_test_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test_[description], [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]Test)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ut_run_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ut_run_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_tests_failed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ut_declare_test_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test_[description], [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]Test)</span></span></code></pre></div><p>Note that <code>ut_[name of one of the unit test functions]</code> corresponds to one of the unittest functions defined within <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/include/unit_test.h" target="_blank" rel="noreferrer">unit_test.h</a>.</p></li><li><p>Within <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/systemcmds/tests/tests_main.h" target="_blank" rel="noreferrer">tests_main.h</a> define the new test:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test_[description](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv[]);</span></span></code></pre></div></li><li><p>Within <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/systemcmds/tests/tests_main.c" target="_blank" rel="noreferrer">tests_main.c</a> add description name, test function and option:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} tests[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[description]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, test_[description], OPTION},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>OPTION</code> can be <code>OPT_NOALLTEST</code>,<code>OPT_NOJIGTEST</code> or <code>0</code> and is considered if within px4 shell one of the two commands are called: \`\`\`bash pxh&gt; tests all</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span></span></code></pre></div><p>或</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jig</span></span></code></pre></div><p>If a test has option <code>OPT_NOALLTEST</code>, then that test will be excluded when calling <code>tests all</code>. The same is true for <code>OPT_NOJITEST</code> when command <code>test jig</code> is called. 选项“0”表示从不排除测试，这是大多数开发人员想要使用的。 The same is true for <code>OPT_NOJITEST</code> when command <code>test jig</code> is called. Option <code>0</code> means that the test is never excluded, which is what most developer want to use.</p></li><li><p>Add the test <code>test_[description].cpp</code> to the <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/src/systemcmds/tests/CMakeLists.txt" target="_blank" rel="noreferrer">CMakeLists.txt</a>.</p></li></ol><h2 id="在本地计算机上进行测试" tabindex="-1">在本地计算机上进行测试 <a class="header-anchor" href="#在本地计算机上进行测试" aria-label="Permalink to &quot;在本地计算机上进行测试&quot;">​</a></h2><p>Run the complete list of GTest Unit Tests, GTest Functional Tests and SITL Unit Tests right from bash:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span></span></code></pre></div><p>单独的 GTest 测试二进制文件处于<code>build/px4_sitl_test/</code> 目录中，可以直接在大多数IDE的调试器中运行。</p><p>使用以下命令对ctest名称使用正则表达式对要运行的测试子集进行筛选：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span></span></code></pre></div><p>例如：</p><ul><li><code>make tests TESTFILTER=unit</code> only run GTest unit tests</li><li><code>make tests TESTFILTER=sitl</code> only run simulation tests</li><li><code>make tests TESTFILTER=Attitude</code> only run the <code>AttitudeControl</code> test</li></ul>`,26),l=[e];function p(h,k,r,o,d,c){return a(),i("div",null,l)}const u=s(n,[["render",p]]);export{g as __pageData,u as default};
