import{_ as s,c as i,o as a,ab as e}from"./chunks/framework.CUflZczI.js";const F=JSON.parse('{"title":"PX4 Docker 容器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/test_and_ci/docker.md","filePath":"zh/test_and_ci/docker.md"}'),t={name:"zh/test_and_ci/docker.md"},n=e(`<h1 id="px4-docker-容器" tabindex="-1">PX4 Docker 容器 <a class="header-anchor" href="#px4-docker-容器" aria-label="Permalink to &quot;PX4 Docker 容器&quot;">​</a></h1><p>Docker containers are provided for the complete <a href="./../dev_setup/dev_env.html#supported-targets">PX4 development toolchain</a> including NuttX and Linux based hardware, <a href="./../sim_gazebo_classic/">Gazebo Classic</a> simulation, and <a href="./../simulation/ros_interface.html">ROS</a>.</p><p>本主题说明如何使用 <a href="#px4_containers">available docker containers</a> 访问本地 Linux 计算机中的构建环境。</p><div class="info custom-block"><p class="custom-block-title">Dockerfiles and README can be found on <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github here</a>. 您可以使用 <em>Enterprise Edition</em> 或（free）<em>Community Edition</em>。</p></div><h2 id="系统必备组件" tabindex="-1">系统必备组件 <a class="header-anchor" href="#系统必备组件" aria-label="Permalink to &quot;系统必备组件&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">PX4 containers are currently only supported on Linux (if you don&#39;t have Linux you can run the container <a href="#virtual_machine">inside a virtual machine</a>). Do not use <code>boot2docker</code> with the default Linux image because it contains no X-Server.</p></div><p>默认安装要求您以 root 用户身份调用 * Docker*（即使用<code>sudo</code>）。 如果您希望 <a href="https://docs.docker.com/engine/installation/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noreferrer">use Docker as a non-root user</a>，您可以选择将用户添加到“docker”组，然后注销或者登陆：</p><p>下面列出了可用的本地编辑（来自 <a href="https://github.com/PX4/containers/blob/master/docker/px4-dev/README.md#container-hierarchy" target="_blank" rel="noreferrer">Github</a>）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get.docker.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span></code></pre></div><p>可以使用 <code>latest</code> 标记访问最新版本：<code>px4io/px4-dev-ros:latest</code>（为 <em>hub.docker.com</em> 上的每个容器列出可用标记。 However, for building the PX4 firmware we suggest to <a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noreferrer">use docker as a non-root user</a>. That way, your build folder won&#39;t be owned by root after using docker.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">＃创建</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 组（可能不是必需的）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">＃将您的用户添加到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 组。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USER</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">＃在使用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 之前再次登录/注销！</span></span></code></pre></div><p><a id="px4_containers"></a></p><h2 id="本地编辑层次结构" tabindex="-1">本地编辑层次结构 <a class="header-anchor" href="#本地编辑层次结构" aria-label="Permalink to &quot;本地编辑层次结构&quot;">​</a></h2><p>The available containers are on <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github here</a>.</p><p>使用容器的最简单方法是通过 <a href="https://github.com/PX4/Firmware/blob/master/Tools/docker_run.sh" target="_blank" rel="noreferrer">docker_run.sh</a> 帮助程序脚本。 The containers are hierarchical, such that containers have the functionality of their parents. For example, the partial hierarchy below shows that the docker container with nuttx build tools (<code>px4-dev-nuttx-focal</code>) does not include ROS 2, while the simulation containers do:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>- px4io/px4-dev-base-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-simulation-focal</span></span>
<span class="line"><span>    - px4io/px4-dev-ros-noetic</span></span>
<span class="line"><span>      - px4io/px4-dev-ros2-foxy</span></span>
<span class="line"><span>  - px4io/px4-dev-ros2-rolling</span></span>
<span class="line"><span>- px4io/px4-dev-base-jammy</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-jammy</span></span></code></pre></div><p>The most recent version can be accessed using the <code>latest</code> tag: <code>px4io/px4-dev-nuttx-focal:latest</code> (available tags are listed for each container on <em>hub.docker.com</em>. For example, the <code>px4io/px4-dev-nuttx-focal</code> tags can be found <a href="https://hub.docker.com/r/px4io/px4-dev-nuttx-focal/tags?page=1&amp;ordering=last_updated" target="_blank" rel="noreferrer">here</a>).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Typically you should use a recent container, but not necessarily the <code>latest</code> (as this changes too often).</p></div><h2 id="使用-docker-容器" tabindex="-1">使用 Docker 容器 <a class="header-anchor" href="#使用-docker-容器" aria-label="Permalink to &quot;使用 Docker 容器&quot;">​</a></h2><p>典型命令的语法如下所示。 这将运行一个支持 X 指令的 Docker 容器（使容器内部的模拟 GUI 可用）。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/Firmware.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Firmware</span></span></code></pre></div><h3 id="助手脚本-docker-run-sh" tabindex="-1">助手脚本（docker_run.sh） <a class="header-anchor" href="#助手脚本-docker-run-sh" aria-label="Permalink to &quot;助手脚本（docker_run.sh）&quot;">​</a></h3><p>The easiest way to use the containers is via the <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/docker_run.sh" target="_blank" rel="noreferrer">docker_run.sh</a> helper script. This script takes a PX4 build command as an argument (e.g. <code>make tests</code>). It starts up docker with a recent version (hard coded) of the appropriate container and sensible environment settings.</p><p>下面的具体示例显示了如何打开 bash shell 并在主机上共享目录 <strong>〜/src/Firmware</strong>。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;make px4_sitl_default&#39;</span></span></code></pre></div><p>Or to start a bash session using the NuttX toolchain:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bash&#39;</span></span></code></pre></div><p><code>docker run</code> 命令只能用于创建新容器。 要重新进入此容器（将保留您的更改），只需执行以下操作： The manual approach discussed in the <a href="#manual_start">section below</a> is more flexible and should be used if you have any problems with the script. :::</p><p><a id="manual_start"></a></p><h3 id="手动调用-docker" tabindex="-1">手动调用 Docker <a class="header-anchor" href="#手动调用-docker" aria-label="Permalink to &quot;手动调用 Docker&quot;">​</a></h3><p>The syntax of a typical command is shown below. This runs a Docker container that has support for X forwarding (makes the simulation GUI available from inside the container). It maps the directory <code>&lt;host_src&gt;</code> from your computer to <code>&lt;container_src&gt;</code> inside the container and forwards the UDP port needed to connect <em>QGroundControl</em>. With the <code>-–privileged</code> option it will automatically have access to the devices on your host (e.g. a joystick and GPU). If you connect/disconnect a device you have to restart the container.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable access to xhost from the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">host_src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">container_src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 14556:14556/udp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">local_container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build_command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Where,</p><ul><li><code>&lt;host_src&gt;</code>: The host computer directory to be mapped to <code>&lt;container_src&gt;</code> in the container. This should normally be the <strong>PX4-Autopilot</strong> directory.</li><li><code>&lt;container_src&gt;</code>: The location of the shared (source) directory when inside the container.</li><li><code>&lt;local_container_name&gt;</code>: A name for the docker container being created. This can later be used if we need to reference the container again.</li><li><code>&lt;container&gt;:&lt;tag&gt;</code>: The container with version tag to start - e.g.: <code>px4io/px4-dev-ros:2017-10-23</code>.</li><li><code>&lt;build_command&gt;</code>: The command to invoke on the new container. E.g. <code>bash</code> is used to open a bash shell in the container.</li></ul><p>The concrete example below shows how to open a bash shell and share the directory <strong>~/src/PX4-Autopilot</strong> on the host computer.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable access to xhost from the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run docker and open bash shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/src/PX4-Autopilot:/src/PX4-Autopilot/:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--network </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name=px4-ros </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4io/px4-dev-ros2-foxy:2022-07-31</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>We use the host network mode to avoid conflicts between the UDP port access control when using QGroundControl on the same system as the docker container.</p></div><div class="info custom-block"><p class="custom-block-title">If you encounter the error &quot;Can&#39;t open display: :0&quot;, <code>DISPLAY</code> may need to be set to a different value. On Linux (XWindow) hosts you can change <code>-e DISPLAY=:0</code> to <code>-e DISPLAY=$DISPLAY</code>. On other hosts you might iterate the value of <code>0</code> in <code>-e DISPLAY=:0</code> until the &quot;Can&#39;t open display: :0&quot; error goes away.</p></div><p>运行模拟实例时，例如在 docker 容器内的 SITL 并通过 <em>QGroundControl</em> 从主机控制它，必须手动设置通信链接。 <em>QGroundControl</em> 的自动连接功能在此处不起作用。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/PX4-Autopilot</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #This is &lt;container_src&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div><h3 id="重新进入容器" tabindex="-1">重新进入容器 <a class="header-anchor" href="#重新进入容器" aria-label="Permalink to &quot;重新进入容器&quot;">​</a></h3><p>The <code>docker run</code> command can only be used to create a new container. To get back into this container (which will retain your changes) simply do:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># start the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># open a new bash shell in this container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>If you need multiple shells connected to the container, just open a new shell and execute that last command again.</p><h3 id="清理容器" tabindex="-1">清理容器 <a class="header-anchor" href="#清理容器" aria-label="Permalink to &quot;清理容器&quot;">​</a></h3><p>Sometimes you may need to clear a container altogether. You can do so using its name:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><p>If you can&#39;t remember the name, then you can list inactive container ids and then delete them, as shown below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">45eeb98f1dd9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 45eeb98f1dd9</span></span></code></pre></div><h3 id="qgroundcontrol" tabindex="-1">QGroundControl <a class="header-anchor" href="#qgroundcontrol" aria-label="Permalink to &quot;QGroundControl&quot;">​</a></h3><p>When running a simulation instance e.g. SITL inside the docker container and controlling it via <em>QGroundControl</em> from the host, the communication link has to be set up manually. The autoconnect feature of <em>QGroundControl</em> does not work here.</p><p>In <em>QGroundControl</em>, navigate to <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/settings_view.html" target="_blank" rel="noreferrer">Settings</a> and select Comm Links. Create a new link that uses the UDP protocol. The port depends on the used <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/ROMFS/px4fmu_common/init.d-posix/rcS" target="_blank" rel="noreferrer">configuration</a> e.g. port 14570 for the SITL config. The IP address is the one of your docker container, usually 172.17.0.1/16 when using the default network. The IP address of the docker container can be found with the following command (assuming the container name is <code>mycontainer</code>):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Spaces between double curly braces above should be not be present (they are needed to avoid a UI rendering problem in gitbook).</p></div><h3 id="故障处理" tabindex="-1">故障处理 <a class="header-anchor" href="#故障处理" aria-label="Permalink to &quot;故障处理&quot;">​</a></h3><h4 id="权限错误" tabindex="-1">权限错误 <a class="header-anchor" href="#权限错误" aria-label="Permalink to &quot;权限错误&quot;">​</a></h4><p>The container creates files as needed with a default user - typically &quot;root&quot;. This can lead to permission errors where the user on the host computer is not able to access files created by the container.</p><p>The example above uses the line <code>--env=LOCAL_USER_ID=&quot;$(id -u)&quot;</code> to create a user in the container with the same UID as the user on the host. This ensures that all files created within the container will be accessible on the host.</p><h4 id="图形驱动问题" tabindex="-1">图形驱动问题 <a class="header-anchor" href="#图形驱动问题" aria-label="Permalink to &quot;图形驱动问题&quot;">​</a></h4><p>It&#39;s possible that running Gazebo Classic will result in a similar error message like the following:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libGL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> driver:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swrast</span></span></code></pre></div><p>In that case the native graphics driver for your host system must be installed. Download the right driver and install it inside the container. For Nvidia drivers the following command should be used (otherwise the installer will see the loaded modules from the host and refuse to proceed):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./NVIDIA-DRIVER.run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ui=none</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-kernel-module</span></span></code></pre></div><p>如果编译失败，则出现以下错误：</p><p><a id="virtual_machine"></a></p><h2 id="虚拟机支持" tabindex="-1">虚拟机支持 <a class="header-anchor" href="#虚拟机支持" aria-label="Permalink to &quot;虚拟机支持&quot;">​</a></h2><p>尝试禁用并行构建。</p><p>The following configuration is tested:</p><ul><li>OS X with VMWare Fusion and Ubuntu 14.04 (Docker container with GUI support on Parallels make the X-Server crash).</li></ul><p><strong>Memory</strong></p><p>Use at least 4GB memory for the virtual machine.</p><p><strong>Compilation problems</strong></p><p>If compilation fails with errors like this:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">这个错误是不可复现的，可能是硬件或操作系统问题。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reproducible,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> likely</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hardware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> problem.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> internal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Killed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (program </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cc1plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Try disabling parallel builds.</p><p><strong>Allow Docker Control from the VM Host</strong></p><p>Edit <code>/etc/defaults/docker</code> and add this line:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} -H unix:///var/run/docker.sock -H 0.0.0.0:2375&quot;</span></span></code></pre></div><p>You can then control docker from your host OS:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DOCKER_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tcp://&amp;lt;ip of your VM&amp;gt;:2375</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run some docker command to see if it works, e.g. ps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div>`,80),h=[n];function l(p,o,r,k,d,c){return a(),i("div",null,h)}const u=s(t,[["render",l]]);export{F as __pageData,u as default};
