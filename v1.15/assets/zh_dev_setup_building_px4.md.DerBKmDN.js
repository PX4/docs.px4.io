import{_ as h,a as r}from"./chunks/qgc_setup_summary_airframe_firmware.kT3azj50.js";import{_ as p}from"./chunks/qgc_goto.CCBc_PDF.js";import{_ as d,E as n,c,m as i,J as s,w as e,a as t,ab as l,o as k}from"./chunks/framework.CUflZczI.js";const G=JSON.parse('{"title":"编译 PX4 软件","description":"","frontmatter":{},"headers":[],"relativePath":"zh/dev_setup/building_px4.md","filePath":"zh/dev_setup/building_px4.md"}'),u={name:"zh/dev_setup/building_px4.md"},g=i("h1",{id:"编译-px4-软件",tabindex:"-1"},[t("编译 PX4 软件 "),i("a",{class:"header-anchor",href:"#编译-px4-软件","aria-label":'Permalink to "编译 PX4 软件"'},"​")],-1),m=i("p",null,"PX4 firmware can be built from source code on the console or in an IDE, for both simulated and hardware targets.",-1),F=i("p",null,[t("You need to build PX4 in order to use "),i("a",{href:"./../simulation/"},"simulators"),t(", or if you want to modify PX4 and create a custom build. If you just want to try out PX4 on real hardware then "),i("a",{href:"./../config/firmware.html"},"load the prebuilt binaries"),t(" using QGroundControl (there is no need to follow these instructions).")],-1),f={class:"info custom-block"},b=l('<p class="custom-block-title">Before following these instructions you must first install the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a> for your host operating system and target hardware. If you have any problems after following these steps see the <a href="#troubleshooting">Troubleshooting</a> section below. 若要在您的计算机上获得<em>最新的</em>版本，请在终端中输入以下命令：</p><h2 id="下载-px4-源代码" tabindex="-1">下载 PX4 源代码 <a class="header-anchor" href="#下载-px4-源代码" aria-label="Permalink to &quot;下载 PX4 源代码&quot;">​</a></h2><p>The PX4 source code is stored on Github in the <a href="https://github.com/PX4/PX4-Autopilot" target="_blank" rel="noreferrer">PX4/PX4-Autopilot</a> repository.</p><p>To get the <em>very latest</em> (<code>main</code> branch) version onto your computer, enter the following command into a terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><p>Note that you may already have done this when installing the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a></p>',6),_={class:"info custom-block"},y=l('<p class="custom-block-title">This is all you need to do in order to get the latest code. If needed you can also <a href="./../contribute/git_examples.html#get-a-specific-release">get the source code specific to a particular release</a>. <a href="./../contribute/git_examples.html">GIT Examples</a> provides a lot more information working with releases and contributing to PX4. 这使我们能够在进入真正的硬件和 IDE 之前验证系统设置。</p><h2 id="first-build-using-a-simulator" tabindex="-1">First Build (Using a Simulator) <a class="header-anchor" href="#first-build-using-a-simulator" aria-label="Permalink to &quot;First Build (Using a Simulator)&quot;">​</a></h2><p>首先我们要用控制台（小黑窗）来构建一个模拟模拟目标 This allows us to validate the system setup before moving on to real hardware and an IDE.</p><p>Navigate into the <strong>PX4-Autopilot</strong> directory. Depending on your operating system you will have installed either <a href="./../sim_gazebo_gz/">Gazebo SITL</a> or <a href="./../sim_gazebo_classic/">Gazebo Classic SITL</a> (if you don&#39;t know which you can try both).</p>',4),v=i("div",{class:"language-sh vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"sh"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gz_x500")])])])],-1),C=i("div",{class:"language-sh vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"sh"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gazebo-classic")])])])],-1),E=i("p",null,"::::",-1),x=i("p",null,"This will bring up the PX4 console:",-1),B=i("p",null,[i("img",{src:h,alt:"PX4 Console"})],-1),w={class:"info custom-block"},P=l('<p class="custom-block-title">You may need to start <em>QGroundControl</em> before proceeding, as the default PX4 configuration requires a ground control connection before takeoff. This can be <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html" target="_blank" rel="noreferrer">downloaded from here</a>. 运行成功后将输出类似结束：</p><p>The drone can be flown by typing the following command (as shown in the console above):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commander</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> takeoff</span></span></code></pre></div><p>The vehicle will take off and you&#39;ll see this in the simulator UI:</p>',4),T=l('<p>::::</p><p>The drone can be landed by typing <code>commander land</code> and the whole simulation can be stopped by doing <strong>CTRL+C</strong> (or by entering <code>shutdown</code>).</p><p>Flying the simulation with the ground control station is closer to the real operation of the vehicle. Click on a location in the map while the vehicle is flying (takeoff flight mode) and enable the slider. This will reposition the vehicle.</p><p><img src="'+p+`" alt="QGroundControl GoTo"></p><h2 id="基于nuttx-pixhawk-的飞控板" tabindex="-1">基于NuttX / Pixhawk 的飞控板 <a class="header-anchor" href="#基于nuttx-pixhawk-的飞控板" aria-label="Permalink to &quot;基于NuttX / Pixhawk 的飞控板&quot;">​</a></h2><h3 id="获取特定发行版本" tabindex="-1">获取特定发行版本 <a class="header-anchor" href="#获取特定发行版本" aria-label="Permalink to &quot;获取特定发行版本&quot;">​</a></h3><p>下面的列表是常见飞控板的生成命令：</p><p>For example, to build for <a href="./../flight_controller/pixhawk4.html">Pixhawk 4</a> hardware you could use the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span></span></code></pre></div><p>A successful run will end with similar output to:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> written</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[954/954] Creating /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default/px4_fmu-v4_default.px4</span></span></code></pre></div><p>The first part of the build target <code>px4_fmu-v4</code> indicates the target flight controller hardware for the firmware. The suffix, in this case <code>_default</code>, indicates a firmware <em>configuration</em>, such as supporting or omitting particular features.</p><div class="info custom-block"><p class="custom-block-title">The <code>_default</code> suffix is optional. For example, <code>make px4_fmu-v5</code> and <code>px4_fmu-v5_default</code> result in the same firmware. 若要在您的计算机上获得<em>最新的</em>版本，请在终端中输入以下命令：</p><p>The following list shows the build commands for the <a href="./../flight_controller/autopilot_pixhawk_standard.html">Pixhawk standard</a> boards:</p><ul><li><a href="./../flight_controller/pixhawk6x-rt.html">Holybro Pixhawk 6X-RT (FMUv6X)</a>: <code>make px4_fmu-v6xrt_default</code></li><li><a href="./../flight_controller/pixhawk6x.html">Holybro Pixhawk 6X (FMUv6X)</a>: <code>make px4_fmu-v6x_default</code></li><li><a href="./../flight_controller/pixhawk6c.html">Holybro Pixhawk 6C (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></li><li><a href="./../flight_controller/pixhawk6c_mini.html">Holybro Pixhawk 6C Mini (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></li><li><a href="./../flight_controller/holybro_pix32_v6.html">Holybro Pix32 v6 (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></li><li><a href="./../flight_controller/pixhawk5x.html">Holybro Pixhawk 5X (FMUv5X)</a>: <code>make px4_fmu-v5x_default</code></li><li><a href="./../flight_controller/pixhawk4.html">Pixhawk 4 (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/pixhawk4_mini.html">Pixhawk 4 Mini (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/cuav_v5_plus.html">CUAV V5+ (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/cuav_v5_nano.html">CUAV V5 nano (FMUv5)</a>: <code>make px4_fmu-v5_default</code></li><li><a href="./../flight_controller/pixracer.html">Pixracer (FMUv4)</a>: <code>make px4_fmu-v4_default</code></li><li><a href="./../flight_controller/pixhawk3_pro.html">Pixhawk 3 Pro</a>: <code>make px4_fmu-v4pro_default</code></li><li><a href="./../flight_controller/pixhawk_mini.html">Pixhawk Mini</a>: <code>make px4_fmu-v3_default</code></li><li><a href="./../flight_controller/pixhawk-2.html">Pixhawk 2 (Cube Black) (FMUv3)</a>: <code>make px4_fmu-v3_default</code></li><li><a href="./../flight_controller/mro_pixhawk.html">mRo Pixhawk (FMUv3)</a>: <code>make px4_fmu-v3_default</code> (supports 2MB Flash)</li><li><a href="./../flight_controller/holybro_pix32.html">Holybro pix32 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li><li><a href="./../flight_controller/pixfalcon.html">Pixfalcon (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li><li><a href="./../flight_controller/dropix.html">Dropix (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li><li><a href="./../flight_controller/pixhawk.html">Pixhawk 1 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>must</strong> use a supported version of GCC to build this board (e.g. the same as used by <a href="./../test_and_ci/docker.html">CI/docker</a>) or remove modules from the build. Building with an unsupported GCC may fail, as PX4 is close to the board&#39;s 1MB flash limit. 若要在您的计算机上获得<em>最新的</em>版本，请在终端中输入以下命令：</p><ul><li>Pixhawk 1 with 2 MB flash: <code>make px4_fmu-v3_default</code></li></ul><p>Build commands for non-Pixhawk NuttX fight controllers (and for all other-boards) are provided in the documentation for the individual <a href="./../flight_controller/README.html">flight controller boards</a>.</p><h3 id="将固件烧录到飞控板" tabindex="-1">将固件烧录到飞控板 <a class="header-anchor" href="#将固件烧录到飞控板" aria-label="Permalink to &quot;将固件烧录到飞控板&quot;">​</a></h3><p>Append <code>upload</code> to the make commands to upload the compiled binary to the autopilot hardware via USB. For example</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v4_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><p>并上传：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Erase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Verify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rebooting.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[100%] Built target upload</span></span></code></pre></div><h2 id="其他飞控板" tabindex="-1">其他飞控板 <a class="header-anchor" href="#其他飞控板" aria-label="Permalink to &quot;其他飞控板&quot;">​</a></h2><p>Build commands for other boards are given the <a href="./../flight_controller/">board-specific flight controller pages</a> (usually under a heading <em>Building Firmware</em>).</p><p>You can also list all configuration targets using the command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div><h2 id="用图形界面-ide-编译" tabindex="-1">用图形界面 IDE 编译 <a class="header-anchor" href="#用图形界面-ide-编译" aria-label="Permalink to &quot;用图形界面 IDE 编译&quot;">​</a></h2><p><a href="./../dev_setup/vscode.html">VSCode</a> is the officially supported (and recommended) IDE for PX4 development. It is easy to set up and can be used to compile PX4 for both simulation and hardware environments.</p><h2 id="qt-creator-功能" tabindex="-1">Qt Creator 功能 <a class="header-anchor" href="#qt-creator-功能" aria-label="Permalink to &quot;Qt Creator 功能&quot;">​</a></h2><h3 id="将固件烧录到飞控板-1" tabindex="-1">将固件烧录到飞控板 <a class="header-anchor" href="#将固件烧录到飞控板-1" aria-label="Permalink to &quot;将固件烧录到飞控板&quot;">​</a></h3><p>Many build problems are caused by either mismatching submodules or an incompletely cleaned-up build environment. Updating the submodules and doing a <code>distclean</code> can fix these kinds of errors:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.config</span></span></code></pre></div><h3 id="ocpoc-zynq-mini" tabindex="-1">OcPoC-Zynq Mini <a class="header-anchor" href="#ocpoc-zynq-mini" aria-label="Permalink to &quot;OcPoC-Zynq Mini&quot;">​</a></h3><p>The <code>region &#39;flash&#39; overflowed by XXXX bytes</code> error indicates that the firmware is too large for the target hardware platform. This is common for <code>make px4_fmu-v2_default</code> builds, where the flash size is limited to 1MB.</p><p>If you&#39;re building the <em>vanilla</em> master branch, the most likely cause is using an unsupported version of GCC. In this case, install the version specified in the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a> instructions.</p><p>If building your own branch, it is possibly you have increased the firmware size over the 1MB limit. In this case you will need to remove any drivers/modules that you don&#39;t need from the build.</p><h3 id="parrot-bebop" tabindex="-1">Parrot Bebop <a class="header-anchor" href="#parrot-bebop" aria-label="Permalink to &quot;Parrot Bebop&quot;">​</a></h3><p>MacOS allows a default maximum of 256 open files in all running processes. The PX4 build system opens a large number of files, so you may exceed this number.</p><p>The build toolchain will then report <code>Too many open files</code> for many files, as shown below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Firmware</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emlid_navio2_native</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # for native build</span></span></code></pre></div><p>The solution is to increase the maximum allowed number of open files (e.g. to 300). You can do this in the macOS <em>Terminal</em> for each session:</p><ul><li><p>Run this script <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/mac_set_ulimit.sh" target="_blank" rel="noreferrer">Tools/mac_set_ulimit.sh</a>, or</p></li><li><p>Enter this command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span></code></pre></div></li></ul><h3 id="qt-creator-提供符号跳转、自动补全和编译固件的功能。" tabindex="-1">Qt creator 提供符号跳转、自动补全和编译固件的功能。 <a class="header-anchor" href="#qt-creator-提供符号跳转、自动补全和编译固件的功能。" aria-label="Permalink to &quot;Qt creator 提供符号跳转、自动补全和编译固件的功能。&quot;">​</a></h3><p>As of macOS Catalina 10.15.1 there may be problems when trying to build the simulator with <em>cmake</em>. If you have build problems on this platform then try run the following command in your terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcode-select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/include/</span></span></code></pre></div><h3 id="基于-qurt-snapdragon-的飞控板" tabindex="-1">基于 QuRT / Snapdragon 的飞控板 <a class="header-anchor" href="#基于-qurt-snapdragon-的飞控板" aria-label="Permalink to &quot;基于 QuRT / Snapdragon 的飞控板&quot;">​</a></h3><p>Build issues related to <code>arm_none_eabi_gcc</code>may be due to a broken g++ toolchain installation. You can verify that this is the case by checking for missing dependencies using:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">br /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">______  __   __    ___</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ___</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\ \\ \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ \\ \\_</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">\\_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     \\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Example of bash output with missing dependencies:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span></span></code></pre></div><p>This can be resolved by removing and <a href="https://askubuntu.com/questions/1243252/how-to-install-arm-none-eabi-gdb-on-ubuntu-20-04-lts-focal-fossa" target="_blank" rel="noreferrer">reinstalling the compiler</a>.</p><h3 id="ubuntu-18-04-visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace" tabindex="-1">Ubuntu 18.04: Visual Studio Code is unable to watch for file changes in this large workspace <a class="header-anchor" href="#ubuntu-18-04-visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace" aria-label="Permalink to &quot;Ubuntu 18.04: Visual Studio Code is unable to watch for file changes in this large workspace&quot;">​</a></h3><p>See <a href="./../dev_setup/vscode.html#troubleshooting">Visual Studio Code IDE (VSCode) &gt; Troubleshooting</a>.</p><h3 id="failed-to-import-python-packages" tabindex="-1">Failed to import Python packages <a class="header-anchor" href="#failed-to-import-python-packages" aria-label="Permalink to &quot;Failed to import Python packages&quot;">​</a></h3><p>&quot;Failed to import&quot; errors when running the <code>make px4_sitl jmavsim</code> command indicates that some Python packages are not installed (where expected).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> named</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jinja2&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> may</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> need</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> using:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span></span></code></pre></div><p>If you have already installed these dependencies this may be because there is more than one Python version on the computer (e.g. Python 2.7.16 Python 3.8.3), and the module is not present in the version used by the build toolchain.</p><p>You should be able to fix this by explicitly installing the dependencies as shown:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyserial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numpy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pandas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyyaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyros-genmsg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packaging</span></span></code></pre></div><h2 id="px4-创建生成目标" tabindex="-1">PX4 创建生成目标 <a class="header-anchor" href="#px4-创建生成目标" aria-label="Permalink to &quot;PX4 创建生成目标&quot;">​</a></h2><p>The previous sections showed how you can call <em>make</em> to build a number of different targets, start simulators, use IDEs etc. This section shows how <em>make</em> options are constructed and how to find the available choices.</p><p>The full syntax to call <em>make</em> with a particular configuration and initialization file is:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [VENDOR_][MODEL][_VARIANT] [VIEWER_MODEL_DEBUGGER_WORLD]</span></span></code></pre></div><p><strong>VENDOR_MODEL_VARIANT</strong>: (also known as <code>CONFIGURATION_TARGET</code>)</p><ul><li><strong>VENDOR:</strong> The manufacturer of the board: <code>px4</code>, <code>aerotenna</code>, <code>airmind</code>, <code>atlflight</code>, <code>auav</code>, <code>beaglebone</code>, <code>intel</code>, <code>nxp</code>, etc. The vendor name for Pixhawk series boards is <code>px4</code>.</li><li><strong>MODEL:</strong> The <em>board model</em> &quot;model&quot;: <code>sitl</code>, <code>fmu-v2</code>, <code>fmu-v3</code>, <code>fmu-v4</code>, <code>fmu-v5</code>, <code>navio2</code>, etc.</li><li><strong>VARIANT:</strong> Indicates particular configurations: e.g. <code>bootloader</code>, <code>cyphal</code>, which contain components that are not present in the <code>default</code> configuration. Most commonly this is <code>default</code>, and may be omitted.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can get a list of <em>all</em> available <code>CONFIGURATION_TARGET</code> options using the command below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div></div></div></div><p><strong>VIEWER_MODEL_DEBUGGER_WORLD:</strong></p><ul><li><strong>VIEWER:</strong> This is the simulator (&quot;viewer&quot;) to launch and connect: <code>gz</code>, <code>gazebo</code>, <code>jmavsim</code>, <code>none</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>none</code> can be used if you want to launch PX4 and wait for a simulator (jmavsim, Gazebo, Gazebo Classic, or some other simulator). For example, <code>make px4_sitl none_iris</code> launches PX4 without a simulator (but with the iris airframe). 若要在您的计算机上获得<em>最新的</em>版本，请在终端中输入以下命令：</p><ul><li><strong>MODEL:</strong> The <em>vehicle</em> model to use (e.g. <code>iris</code> (<em>default</em>), <code>rover</code>, <code>tailsitter</code>, etc), which will be loaded by the simulator. 环境变量 <code>PX4_SIM_MODEL</code> 将设置为所选模型。 然后在 <a href="#scripts">启动脚本 </a> 中使用该模型来选择适当的参数。</li><li><strong>DEBUGGER:</strong> Debugger to use: <code>none</code> (<em>default</em>), <code>ide</code>, <code>gdb</code>, <code>lldb</code>, <code>ddd</code>, <code>valgrind</code>, <code>callgrind</code>. 有关详细信息，请参阅 &lt; 0&gt;Simulation 调试 &lt;/0&gt;。</li><li><strong>WORLD:</strong> (Gazebo Classic only). Set the world (<a href="https://github.com/PX4/PX4-SITL_gazebo-classic/tree/main/worlds" target="_blank" rel="noreferrer">PX4-Autopilot/Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds</a>) that is loaded. Default is <a href="https://github.com/PX4/PX4-SITL_gazebo-classic/blob/main/worlds/empty.world" target="_blank" rel="noreferrer">empty.world</a>. For more information see <a href="./../sim_gazebo_classic/#loading-a-specific-world">Gazebo Classic &gt; Loading a Specific World</a>.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can get a list of <em>all</em> available <code>VIEWER_MODEL_DEBUGGER_WORLD</code> options using the command below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_vmd_make_targets</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>Most of the values in the <code>CONFIGURATION_TARGET</code> and <code>VIEWER_MODEL_DEBUGGER</code> have defaults, and are hence optional. For example, <code>gazebo-classic</code> is equivalent to <code>gazebo-classic_iris</code> or <code>gazebo-classic_iris_none</code>.</li><li>You can use three underscores if you want to specify a default value between two other settings. For example, <code>gazebo-classic___gdb</code> is equivalent to <code>gazebo-classic_iris_gdb</code>.</li><li>You can use a <code>none</code> value for <code>VIEWER_MODEL_DEBUGGER</code> to start PX4 and wait for a simulator. For example start PX4 using <code>make px4_sitl_default none</code> and jMAVSim using <code>./Tools/simulation/jmavsim/jmavsim_run.sh -l</code>.</li></ul></div><p>The <code>VENDOR_MODEL_VARIANT</code> options map to particular <em>px4board</em> configuration files in the PX4 source tree under the <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/boards" target="_blank" rel="noreferrer">/boards</a> directory. Specifically <code>VENDOR_MODEL_VARIANT</code> maps to a configuration file <strong>boards/VENDOR/MODEL/VARIANT.px4board</strong> (e.g. <code>px4_fmu-v5_default</code> corresponds to <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/boards/px4/fmu-v5/default.px4board" target="_blank" rel="noreferrer">boards/px4/fmu-v5/default.px4board</a>).</p><p>Additional make targets are discussed in relevant sections:</p><ul><li><code>bloaty_compare_master</code>: <a href="./../debug/binary_size_profiling.html">Binary Size Profiling</a></li><li>...</li></ul><h2 id="列出所有发行版本-标签-sh-git-tag-l" tabindex="-1">列出所有发行版本（标签） sh git tag -l <a class="header-anchor" href="#列出所有发行版本-标签-sh-git-tag-l" aria-label="Permalink to &quot;列出所有发行版本（标签） sh git tag -l&quot;">​</a></h2><p>The <em>PX4 Firmware Version</em> and <em>Custom Firmware Version</em> are published using the MAVLink <a href="https://mavlink.io/en/messages/common.html#AUTOPILOT_VERSION" target="_blank" rel="noreferrer">AUTOPILOT_VERSION</a> message, and displayed in the <em>QGroundControl</em> <strong>Setup &gt; Summary</strong> airframe panel:</p><p><img src="`+r+'" alt="Firmware info"></p><p>These are extracted at build time from the active <em>git tag</em> for your repo tree. The git tag should be formatted as <code>&lt;PX4-version&gt;-&lt;vendor-version&gt;</code> (e.g. the tag in the image above was set to <code>v1.8.1-2.22.1</code>).</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you use a different git tag format, versions information may not be displayed properly.</p></div>',25);function A(D,I,X,q,R,S){const a=n("tab"),o=n("tabs");return k(),c("div",null,[g,m,F,i("div",f,[b,i("div",_,[y,s(o,null,{default:e(()=>[s(a,{name:"Gazebo Start [Gazebo SITL](../sim_gazebo_gz/index.md) using the following command:"},{default:e(()=>[v]),_:1})]),_:1})])]),s(a,{name:"Gazebo-Classic Start [Gazebo SITL](../sim_gazebo_gz/index.md) using the following command:"},{default:e(()=>[C]),_:1}),E,x,B,i("div",w,[P,s(o,null,{default:e(()=>[s(a,{name:"Gazebo ![Gazebo UI with vehicle taking off](../../assets/toolchain/gazebo_takeoff.png)"})]),_:1})]),s(a,{name:"Gazebo-Classic ![Gazebo Classic UI with vehicle taking off](../../assets/toolchain/gazebo_classic_takeoff.png)"}),T])}const O=d(u,[["render",A]]);export{G as __pageData,O as default};
