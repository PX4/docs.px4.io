import{_ as i,c as a,o as t,ab as e}from"./chunks/framework.CUflZczI.js";const b=JSON.parse('{"title":"Середовище розробки Windows Cygwin (Інструкції з обслуговування)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/dev_setup/dev_env_windows_cygwin_packager_setup.md","filePath":"uk/dev_setup/dev_env_windows_cygwin_packager_setup.md"}'),s={name:"uk/dev_setup/dev_env_windows_cygwin_packager_setup.md"},l=e(`<h1 id="середовище-розробки-windows-cygwin-інструкціі-з-обслуговування" tabindex="-1">Середовище розробки Windows Cygwin (Інструкції з обслуговування) <a class="header-anchor" href="#середовище-розробки-windows-cygwin-інструкціі-з-обслуговування" aria-label="Permalink to &quot;Середовище розробки Windows Cygwin (Інструкції з обслуговування)&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Це середовище розробки <a href="./../advanced/community_supported_dev_env.html">підтримується та утримується спільнотою</a>. Воно може працювати або не працювати з поточними версіями PX4.</p><p>Дивіться <a href="./../dev_setup/dev_env.html">Встановлення інструментарію</a> для отримання інформації про середовища та інструменти, які підтримуються основною командою розробників.</p></div><p>Ця тема пояснює, як побудувати та розширити середовище розробки, яке використовується для <a href="./../dev_setup/dev_env_windows_cygwin.html">середовища розробника Windows (заснованого на Cygwin)</a> яке вже не підтримується.</p><h2 id="додаткова-інформація" tabindex="-1">Додаткова інформація <a class="header-anchor" href="#додаткова-інформація" aria-label="Permalink to &quot;Додаткова інформація&quot;">​</a></h2><h3 id="можливості-проблеми" tabindex="-1">Можливості / Проблеми <a class="header-anchor" href="#можливості-проблеми" aria-label="Permalink to &quot;Можливості / Проблеми&quot;">​</a></h3><p>Відомо що наступні можливості працюють (версія 2.0):</p><ul><li>Збірка та запуск SITL з jMAVSim зі значно кращою ефективністю, ніж у VM (створюється нативний бінарний файл Windows <strong>px4.exe</strong>).</li><li>Збірка та завантаження NuttX збірок (напр.: px4_fmu-v2 та px4_fmu-v4)</li><li>Перевірка стилю з <em>astyle</em> (підтримує команду: <code>make format</code>)</li><li>Автодоповнення в командному рядку</li><li>Неінвазивний встановлювач! Встановлювач НЕ впливає на систему і глобальний шлях (лише змінює вибрану директорію установки, наприклад **C:\\PX4** і використовує тимчасовий локальний шлях).</li><li>Встановлювач підтримує оновлення до нової версії зі збереженням ваших особистих змін у теці інструментарію.</li></ul><p>Відсутні:</p><ul><li>Симуляція: Gazebo та ROS не підтримуються.</li><li>Підтримуються лише збірки NuttX і JMAVSim/SITL.</li><li><a href="https://github.com/orgs/PX4/projects/6" target="_blank" rel="noreferrer">Відомі проблеми</a> (використовуйте для звіту про проблеми).</li></ul><h3 id="встановлення-за-допомогою-скриптів-оболонки" tabindex="-1">Встановлення за допомогою скриптів оболонки <a class="header-anchor" href="#встановлення-за-допомогою-скриптів-оболонки" aria-label="Permalink to &quot;Встановлення за допомогою скриптів оболонки&quot;">​</a></h3><p>Ви також можете встановити середовище за допомогою скриптів в Github проєкті.</p><ol><li><p>Переконайтеся, що у вас встановлено <a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">Git для Windows</a>.</p></li><li><p>Клонуйте репозиторій <a href="https://github.com/PX4/windows-toolchain" target="_blank" rel="noreferrer">https://github.com/PX4/windows-toolchain</a> туди куди ви хочете встановити інструментарій. Розташування та ім&#39;я теки за замовчуванням досягаються шляхом відкриття <code>Git Bash</code> і виконання:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /c/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/windows-toolchain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4</span></span></code></pre></div></li><li><p>Якщо бажаєте встановити усі компоненти, перейдіть до недавно клонованої директорії та запустіть скрипт подвійним кліком <code>install-all-components.bat</code>, що розташовано у директорії <code>toolchain</code>. Якщо вам потрібні лише певні компоненти і ви бажаєте зберегти інтернет-трафік або дисковий простір, ви можете перейти до різних директорій компонентів, таких як <code>toolchain\\cygwin64</code> та запустити один із скриптів <strong>install-XXX.bat</strong> для отримання чогось конкретного.</p></li><li><p>Переходьте до <a href="./../dev_setup/dev_env_windows_cygwin.html#getting-started">Початок роботи</a>.</p></li></ol><h3 id="ручне-встановлення-для-розробників-інструментарію" tabindex="-1">Ручне встановлення (для розробників інструментарію) <a class="header-anchor" href="#ручне-встановлення-для-розробників-інструментарію" aria-label="Permalink to &quot;Ручне встановлення (для розробників інструментарію)&quot;">​</a></h3><p>Цей розділ описує як налаштувати інструментарій Cygwin вручну самостійно, із вказанням на відповідні скрипти з репозитарію установки за допомогою скриптів. Результат повинен бути таким самим як при використанні скриптів, так і встановлювачі MSI.</p><p>:::note Інструментарій поновлюється, тому ці інструкції можуть не покривати кожну деталь всіх змін в майбутньому. :::</p><ol><li><p>Створіть <em>теки</em>: **C:\\PX4**, **C:\\PX4\\toolchain** та **C:\\PX4\\home**</p></li><li><p>Завантажте файл <em>встановлювача Cygwin</em> <a href="https://cygwin.com/setup-x86_64.exe" target="_blank" rel="noreferrer">setup-x86_64.exe</a> із <a href="https://cygwin.com/install.html" target="_blank" rel="noreferrer">офіційного сайту Cygwin</a></p></li><li><p>Запустіть завантажений файл встановлювача</p></li><li><p>У майстрі оберіть встановлення в теку: **C:\\PX4\\toolchain\\cygwin64**</p></li><li><p>Оберіть для встановлення стандартні основні пакети Cygwin і найновішу версію додаткових пакетів:</p><ul><li><strong>Категорія:Пакет</strong></li><li>Devel:cmake (3.3.2 не дає попереджень про застарілість, 3.6.2 працює, але попереджає про це)</li><li>Devel:gcc-g++</li><li>Devel:gdb</li><li>Devel:git</li><li>Devel:make</li><li>Devel:ninja</li><li>Devel:patch</li><li>Editors:xxd</li><li>Editors:nano (якщо ви не професіонал із vim)</li><li>Python:python2</li><li>Python:python2-pip</li><li>Python:python2-numpy</li><li>Python:python2-jinja2</li><li>Python:python2-pyyaml</li><li>Python:python2-cerberus</li><li>Archive:unzip</li><li>Utils:astyle</li><li>Shells:bash-completion</li><li>Web:wget</li></ul><p>:::note Не обирайте якомога більше пакетів які не в цьому списку, серед них є ті, що конфліктують між собою і можуть зламати збірку. :::</p></li></ol><p>:::note Саме це робить <a href="https://github.com/MaEtUgR/PX4Toolchain/blob/master/toolchain/cygwin64/install-cygwin-px4.bat" target="_blank" rel="noreferrer">cygwin64/install-cygwin-px4.bat</a>. :::</p><ol><li><p>Зробіть або скопіюйте <strong>пакетні скрипти</strong> <a href="https://github.com/MaEtUgR/PX4Toolchain/blob/master/run-console.bat" target="_blank" rel="noreferrer"><code>run-console.bat</code></a> та <a href="https://github.com/PX4/windows-toolchain/blob/master/toolchain/scripts/setup-environment.bat" target="_blank" rel="noreferrer"><code>setup-environment.bat</code></a>.</p><p>Причиною запуску всіх інструментів розробки через підготовлений пакетні скрипти є те, що вони налаштовують початкову програму використовувати локальне, портативне середовище Cygwin всередині директорії інструментарію. Це робиться завжди шляхом спочатку виконанням скрипту <a href="https://github.com/PX4/windows-toolchain/blob/master/toolchain/scripts/setup-environment.bat" target="_blank" rel="noreferrer"><strong>setup-environment.bat</strong></a> і бажаного додатку типу консолі після цього.</p><p>Скрипт <a href="https://github.com/PX4/windows-toolchain/blob/master/toolchain/scripts/setup-environment.bat" target="_blank" rel="noreferrer">setup-environment.bat</a> налаштовує змінні середовища для кореневого каталогу робочого простору <code>PX4_DIR</code>, розташування усіх бінарних файлів <code>PATH</code>, та домашньої директорії Unix середовища <code>HOME</code> локально.</p></li><li><p>Додайте необхідні <strong>пакети python</strong> до вашого встановлення відкривши консоль інструментарію Cygwin (подвійне натискання на <strong>run-console.bat</strong>) та виконавши</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyserial</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyulog</span></span></code></pre></div></li></ol><p>:::note Саме це робить <a href="https://github.com/MaEtUgR/PX4Toolchain/blob/master/toolchain/cygwin64/install-cygwin-python-packages.bat" target="_blank" rel="noreferrer">cygwin64/install-cygwin-python-packages.bat</a>. :::</p><ol><li>Завантажте компілятор <a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads" target="_blank" rel="noreferrer"><strong>ARM GCC</strong></a> як архів бінарних файлів для Windows і розпакуйте вміст до директорії <code>C:\\PX4\\tochain\\gcc-arm</code>.</li></ol><p>:::note Це те що інструментарій робить в: <a href="https://github.com/MaEtUgR/PX4Toolchain/blob/master/toolchain/gcc-arm/install-gcc-arm.bat" target="_blank" rel="noreferrer">gcc-arm/install-gcc-arm.bat</a>. :::</p><ol><li><p>Встановіть JDK:</p><ul><li>Завантажте Java 14 з сайту <a href="https://www.oracle.com/java/technologies/javase-jdk14-downloads.html" target="_blank" rel="noreferrer">Oracle</a> або <a href="https://adoptopenjdk.net/" target="_blank" rel="noreferrer">AdoptOpenJDK</a>.</li><li>Оскільки, на жаль, не існує портативного архіву, який містить безпосередньо бінарні файли вам потрібно встановити Java.</li><li>Знайдіть встановлені бінарні файли та скопіюйте/перемістіть їх у <strong>C:\\PX4\\toolchain\\jdk</strong>.</li><li>Ви можете видалити Java із вашої системи Windows, нам були потрібні лише бінарні файли для набору інструментів.</li></ul></li></ol><p>:::note Це те що інструментарій робить в: <a href="https://github.com/MaEtUgR/PX4Toolchain/blob/master/toolchain/jdk/install-jdk.bat" target="_blank" rel="noreferrer">jdk/install-jdk.bat</a>. :::</p><ol><li><p>Завантажте <a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noreferrer"><strong>Apache Ant</strong></a> як архів бінарних файлів для Windows і розпакуйте вміст до директорії <code>C:\\PX4\\toolchain\\apache-ant</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p></div></li></ol><p>Переконайтеся що немає додаткового рівня директорій в директорії в архіві що ви завантажили. :::</p><p>:::note Це те що інструментарій робить в: <a href="https://github.com/MaEtUgR/PX4Toolchain/blob/master/toolchain/apache-ant/install-apache-ant.bat" target="_blank" rel="noreferrer">apache-ant/install-apache-ant.bat</a>. :::</p><ol><li><p>Завантажте, зберіть та додайте <em>genromfs</em> до шляху:</p><ul><li><p>Клонуйте вихідний код в директорію <strong>C:\\PX4\\toolchain\\genromfs\\genromfs-src</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /c/toolchain/genromfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/chexum/genromfs.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genromfs-src</span></span></code></pre></div></li><li><p>Скомпілюйте це:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genromfs-src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span></span></code></pre></div></li><li><p>Скопіюйте бінарний файл <strong>genromfs.exe</strong> на один рівень вище в: <strong>C:\\PX4\\toolchain\\genromfs</strong></p></li></ul></li><li><p>Переконайтеся, що всі бінарні файли усіх компонентів що встановлено коректно перелічені в змінній <code>PATH</code> яка налаштована <a href="https://github.com/PX4/windows-toolchain/blob/master/toolchain/scripts/setup-environment.bat" target="_blank" rel="noreferrer"><strong>setup-environment.bat</strong></a>.</p></li></ol>`,27),n=[l];function o(r,p,h,c,g,d){return t(),a("div",null,n)}const m=i(s,[["render",o]]);export{b as __pageData,m as default};
