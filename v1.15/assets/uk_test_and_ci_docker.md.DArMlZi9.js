import{_ as s,c as i,o as a,ab as n}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"Docker контейнери для PX4","description":"","frontmatter":{},"headers":[],"relativePath":"uk/test_and_ci/docker.md","filePath":"uk/test_and_ci/docker.md"}'),t={name:"uk/test_and_ci/docker.md"},e=n(`<h1 id="docker-контеинери-для-px4" tabindex="-1">Docker контейнери для PX4 <a class="header-anchor" href="#docker-контеинери-для-px4" aria-label="Permalink to &quot;Docker контейнери для PX4&quot;">​</a></h1><p>Для повного <a href="./../dev_setup/dev_env.html#supported-targets">інструментарію розробника PX4</a>надаються Docker контейнери, включаючи апаратне забезпечення, основане на NuttX та Linux, симуляція <a href="./../sim_gazebo_classic/README.html">Gazebo Classic</a> та <a href="./../simulation/ros_interface.html">ROS</a>.</p><p>Цей розділ розповідає як використовувати <a href="#px4_containers">Наявні docker контейнери</a>, щоб отримати доступ до середовища збірки на локальному Linux комп&#39;ютері.</p><div class="info custom-block"><p class="custom-block-title">Ви можете знайти Dockerfile та README на <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github</a>. Вони автоматично збираються на <a href="https://hub.docker.com/u/px4io/" target="_blank" rel="noreferrer">Docker Hub</a>.</p></div><h2 id="необхідні-умови" tabindex="-1">Необхідні умови <a class="header-anchor" href="#необхідні-умови" aria-label="Permalink to &quot;Необхідні умови&quot;">​</a></h2><p>::: note На цей момент контейнери для PX4 підтримуються лише для Linux (якщо немає Linux ви можете запустити контейнер <a href="#virtual_machine">всередині віртуальної машини</a>). Не використовуйте <code>boot2docker</code> із образом за замовчуванням, тому що він не містить X-Server. :::</p><p><a href="https://docs.docker.com/installation/" target="_blank" rel="noreferrer">Встановіть Docker</a> для Linux, бажано використовувати один з репозиторіїв пакетів, які підтримуються Docker, щоб отримати останню стабільну версію. Ви можете використовувати або <em>Enterprise Edition</em> або (безплатну) <em>Community Edition</em>.</p><p>Для локального встановлення для позавиробничих установок на <em>Ubuntu</em>, найшвидший і найпростіший спосіб встановити Docker - це скористатися <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script" target="_blank" rel="noreferrer"> зручним скриптом</a> як показано нижче (альтернативні методи встановлення вказані там же):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get.docker.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span></code></pre></div><p>Встановлення за замовчуванням потребує використання root користувача для запуску <em>Docker</em> (тобто за допомогою <code>sudo</code>). Однак для збірки прошивок PX4 пропонуємо <a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noreferrer">використовувати docker від імені непривілейованого користувача</a>. Таким чином, директорія для збірки не буде належати користувачу root після використання docker.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Створіть групу docker (можливо не потрібно)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Додайте вашого користувача в групу docker.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Вийдіть та увійдіть перед використанням docker!</span></span></code></pre></div><p><a id="px4_containers"></a></p><h2 id="ієрархія-контеинерів" tabindex="-1">Ієрархія контейнерів <a class="header-anchor" href="#ієрархія-контеинерів" aria-label="Permalink to &quot;Ієрархія контейнерів&quot;">​</a></h2><p>Усі доступні контейнери можна знайти на <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github</a>.</p><p>Вони дозволяють тестувати різні цілі збірки та конфігурації (включені інструменти можна зрозуміти з їх назв). Контейнери є ієрархічними, тобто такими, що мають функціональність вихідних контейнерів. Наприклад, часткова ієрархія нижче показує, що docker контейнер з інструментами збірки nuttx (<code>px4-dev-nuttx-focal</code>) не містить ROS 2, на відміну від контейнерів симуляції:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>- px4io/px4-dev-base-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-simulation-focal</span></span>
<span class="line"><span>    - px4io/px4-dev-ros-noetic</span></span>
<span class="line"><span>      - px4io/px4-dev-ros2-foxy</span></span>
<span class="line"><span>  - px4io/px4-dev-ros2-rolling</span></span>
<span class="line"><span>- px4io/px4-dev-base-jammy</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-jammy</span></span></code></pre></div><p>Найновіша версія доступна з використанням тегу <code>latest</code>: <code>px4io/px4-dev-nuttx-focal:latest</code> (доступні теги перелічені для кожного контейнеру на <em>hub.docker.com</em>. Наприклад теги для <code>px4io/px4-dev-nuttx-focal</code> можна знайти <a href="https://hub.docker.com/r/px4io/px4-dev-nuttx-focal/tags?page=1&amp;ordering=last_updated" target="_blank" rel="noreferrer">тут</a>).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Зазвичай потрібно використовувати свіжий контейнер, але не обов&#39;язково <code>latest</code> (т. як вони часто змінюються).</p></div><h2 id="використання-docker-контеинера" tabindex="-1">Використання Docker контейнера <a class="header-anchor" href="#використання-docker-контеинера" aria-label="Permalink to &quot;Використання Docker контейнера&quot;">​</a></h2><p>Наступні інструкції показують, як зібрати вихідний код PX4 на основному комп&#39;ютері за допомогою інструментарію, що працює у docker контейнері. Передбачається, що ви вже завантажили вихідний код PX4 в <strong>src/PX4-Autopilot</strong>, як показано:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span></code></pre></div><h3 id="допоміжнии-скрипт-docker-run-sh" tabindex="-1">Допоміжний скрипт (docker_run.sh) <a class="header-anchor" href="#допоміжнии-скрипт-docker-run-sh" aria-label="Permalink to &quot;Допоміжний скрипт (docker_run.sh)&quot;">​</a></h3><p>Найпростіший спосіб використовувати контейнери - разом із допоміжним скриптом <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/Tools/docker_run.sh" target="_blank" rel="noreferrer">docker_run.sh</a>. Цей скрипт приймає команду збірки PX4 як аргумент (наприклад, <code>make tests</code>). Він запускає docker із найновішою версією відповідного контейнера (вказано в коді) і слушними налаштуваннями середовища.</p><p>Наприклад, щоб зібрати SITL потрібно виконати (із директорії <strong>/PX4-Autopilot</strong>):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;make px4_sitl_default&#39;</span></span></code></pre></div><p>Або почати сеанс bash використовуючи інструментарій NuttX:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bash&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Цей скрипт легко використовувати тому що вам не потрібно знати багато про <em>Docker</em> або думати який контейнер взяти. Однак він не дуже надійний! Ручний підхід, що обговорюється в <a href="#manual_start">наступній частині</a> більш гнучкий і повинен використовуватися якщо є якісь проблеми зі скриптом.</p></div><p><a id="manual_start"></a></p><h3 id="запуск-docker-вручну" tabindex="-1">Запуск Docker вручну <a class="header-anchor" href="#запуск-docker-вручну" aria-label="Permalink to &quot;Запуск Docker вручну&quot;">​</a></h3><p>Синтаксис типової команди показано нижче. Це запускає Docker контейнер з підтримкою переадресації X (що робить графічний інтерфейс симуляції доступним з середини контейнера). Каталог <code>&lt;host_src&gt;</code> комп&#39;ютера відображається на каталог <code>&lt;container_src&gt;</code> всередині контейнера, а також переадресується UDP порт, потрібний для з&#39;єднання з <em>QGroundControl</em>. З параметром <code>-–privileged</code> контейнер автоматично матиме доступ до апаратного забезпечення на вашому комп&#39;ютері (наприклад до джойстика або GPU). Якщо ви під&#39;єднуєте/від&#39;єднуєте пристрій, вам слід перезапустити контейнер.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># дозвольте доступ до xhost з контейнера</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запуск docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host_sr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_sr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 14570:14570/udp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local_container_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">containe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build_comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Де:</p><ul><li><code>&lt;host_src&gt;</code>: Директорія комп&#39;ютера для відображення на директорію <code>&lt;container_src&gt;</code> у контейнері. Зазвичай потрібно щоб це була директорія <strong>PX4-Autopilot</strong>.</li><li><code>&lt;container_src&gt;</code>: Розташування спільної (вихідної) директорії всередині контейнера.</li><li><code>&lt;local_container_name&gt;</code>: Ім&#39;я docker контейнера, що створюється. Це потім можна використовувати, якщо потрібно посилатись на контейнер знову.</li><li><code>&lt;container&gt;:&lt;tag&gt;</code>: Контейнер з тегом версії для запуску, наприклад: <code>px4io/px4-dev-ros:2017-10-23</code>.</li><li><code>&lt;build_command&gt;</code>: Команда яку потрібно виконати на новому контейнері. Наприклад, <code>bash</code> для запуску оболонки bash у контейнері.</li></ul><p>Наведений нижче приклад показує як запустити консоль bash і розділити каталог <strong>~/src/PX4-Autopilot</strong> між контейнером і основним комп&#39;ютером.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># дозвольте доступ до xhost з контейнера</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запуск docker та оболонки bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/src/PX4-Autopilot:/src/PX4-Autopilot/:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--network </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name=px4-ros </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4io/px4-dev-ros2-foxy:2022-07-31</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>::: note Ми використовуємо режим хост-мережі, щоб уникнути конфліктів між керуванням доступом до порту UDP під час використання QGroundControl у тій же системі, що й контейнер докерів. :::</p><p>::: note Якщо ви зіткнулися з помилкою «Не вдається відкрити дисплей: :0», можливо, для <code>DISPLAY</code> потрібно встановити інше значення. На комп&#39;ютерах з Linux (XWindow) ви можете змінити параметр <code>-e DISPLAY=:0</code> на <code>-e DISPLAY=$DISPLAY</code>. На інших системах вам можливо знадобиться послідовно змінити <code>0</code> в <code>-e DISPLAY=:0</code> допоки помилка &quot;Can&#39;t open display: :0&quot; не зникне. :::</p><p>Якщо все пройшло добре, ви повинні бути в новій оболонці bash. Перевірте, чи все працює запустивши, наприклад, SITL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/PX4-Autopilot</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #це &lt;container_src&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div><h3 id="повторнии-вхід-в-контеинер" tabindex="-1">Повторний вхід в контейнер <a class="header-anchor" href="#повторнии-вхід-в-контеинер" aria-label="Permalink to &quot;Повторний вхід в контейнер&quot;">​</a></h3><p>Команда <code>docker run</code> використовується тільки для створення нового контейнеру. Щоб повернутися у цей контейнер (що збереже ваші зміни) просто зробіть:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запуск контейнера</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запуск нової оболонки bash shell в цьому контейнері</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>Якщо вам потрібні кілька консолей, підключених до контейнера, просто відкрийте нову оболонку і виконайте останню команду знову.</p><h3 id="видалення-контеинера" tabindex="-1">Видалення контейнера <a class="header-anchor" href="#видалення-контеинера" aria-label="Permalink to &quot;Видалення контейнера&quot;">​</a></h3><p>Іноді може знадобитися взагалі видалити контейнер. Це можна зробити, використовуючи його ім&#39;я:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><p>Якщо ви не можете згадати назву, ви можете знайти неактивні ідентифікатори контейнерів і видалити їх, як показано нижче:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">45eeb98f1dd9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 45eeb98f1dd9</span></span></code></pre></div><h3 id="qgroundcontrol" tabindex="-1">QGroundControl <a class="header-anchor" href="#qgroundcontrol" aria-label="Permalink to &quot;QGroundControl&quot;">​</a></h3><p>При виконанні екземпляра симуляції, напр. SITL всередині контейнерів і керування ним через <em>QGroundControl</em> з основного комп&#39;ютера, канали зв&#39;язку потрібно встановити вручну. Функція автопідключення <em>QGroundControl</em> тут не працює.</p><p>В <em>QGroundControl</em>, перейдіть до <a href="https://docs.qgroundcontrol.com/master/en/SettingsView/SettingsView.html" target="_blank" rel="noreferrer">Налаштувань</a> та оберіть Канали зв&#39;язку. Створіть новий канал, що використовує UDP-протокол. Номер порту залежить від використаних <a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/ROMFS/px4fmu_common/init.d-posix/rcS" target="_blank" rel="noreferrer">налаштувань</a>, наприклад порт 14570 для конфігурації SITL. IP-адреса є адресою одного з ваших контейнерів, зазвичай це адреса з мережі 172.17.0.1/16 при використанні мережі за замовчуванням. IP-адресу Docker контейнера можна знайти за допомогою наступної команди (якщо припустити, що ім&#39;я контейнера <code>mycontainer</code>):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><p>::: note Пробіли між подвійними фігурними дужками вище не повинні бути присутніми (вони потрібні, щоб уникнути проблеми з відображенням інтерфейсу користувача в gitbook). :::</p><h3 id="усунення-проблем" tabindex="-1">Усунення проблем <a class="header-anchor" href="#усунення-проблем" aria-label="Permalink to &quot;Усунення проблем&quot;">​</a></h3><h4 id="помилки-з-правами-доступу" tabindex="-1">Помилки з правами доступу <a class="header-anchor" href="#помилки-з-правами-доступу" aria-label="Permalink to &quot;Помилки з правами доступу&quot;">​</a></h4><p>Контейнер створює файли, необхідні для роботи від імені стандартного користувача, як правило, &quot;root&quot;. Це може призвести до помилок прав доступу, коли користувач на основному комп&#39;ютері не має доступу до файлів, створених контейнером.</p><p>Приклад вище використовує рядок <code>--env=LOCAL_USER_ID=&quot;$(id -u)&quot;</code>, щоб створити користувача в контейнері з тим же UID що і користувач на основній машині. Це гарантує, що всі файли, створені у контейнері, будуть доступні з основного комп&#39;ютера.</p><h4 id="проблеми-з-драиверами-графіки" tabindex="-1">Проблеми з драйверами графіки <a class="header-anchor" href="#проблеми-з-драиверами-графіки" aria-label="Permalink to &quot;Проблеми з драйверами графіки&quot;">​</a></h4><p>Можливо, що запуск Gazebo Classic призведе до подібного повідомлення про помилку:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libGL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> driver:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swrast</span></span></code></pre></div><p>У цьому випадку необхідно встановити нативний графічний драйвер для вашої системи. Завантажте відповідний драйвер і встановіть його всередині контейнера. Для драйверів Nvidia слід використовувати наступну команду (інакше встановлювач побачить завантажені модулі на головній машині та відмовиться продовжувати):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./NVIDIA-DRIVER.run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ui=none</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-kernel-module</span></span></code></pre></div><p>Більше інформації можна знайти <a href="http://gernotklingler.com/blog/howto-get-hardware-accelerated-opengl-support-docker/" target="_blank" rel="noreferrer">тут</a>.</p><p><a id="virtual_machine"></a></p><h2 id="підтримка-віртуальних-машин" tabindex="-1">Підтримка віртуальних машин <a class="header-anchor" href="#підтримка-віртуальних-машин" aria-label="Permalink to &quot;Підтримка віртуальних машин&quot;">​</a></h2><p>Будь-який останній дистрибутив Linux повинен працювати.</p><p>Наступна конфігурація протестована:</p><ul><li>OS X з підтримкою VMWare Fusion і Ubuntu 14.04 (Docker контейнер з підтримкою GUI в Parallels призводить до падіння X-Server).</li></ul><p><strong>Оперативна Пам&#39;ять</strong></p><p>Потрібно не менше 4 ГБ пам&#39;яті для віртуальної машини.</p><p><strong>Проблеми компіляції</strong></p><p>Якщо компіляція завершується з помилками на кшталт:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reproducible,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> likely</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hardware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> problem.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> internal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Killed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (program </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cc1plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Спробуйте вимкнути паралельну збірку.</p><p><strong>Дозволити керувати Docker з основної машини для VM</strong></p><p>Змініть <code>/etc/defaults/docker</code> і додайте наступний рядок:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} -H unix:///var/run/docker.sock -H 0.0.0.0:2375&quot;</span></span></code></pre></div><p>Тепер можна керувати docker на вашій основній ОС:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">експорт</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DOCKER_HOST=tcp://</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:2375</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запустіть якусь команду docker щоб подивитися, чи все працює, наприклад, ps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div>`,80),h=[e];function l(p,k,r,o,d,c){return a(),i("div",null,h)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
