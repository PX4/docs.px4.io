import{_ as s,c as i,o as a,ab as e}from"./chunks/framework.CUflZczI.js";const u=JSON.parse('{"title":"VehicleAttitude (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/msg_docs/VehicleAttitude.md","filePath":"ko/msg_docs/VehicleAttitude.md"}'),t={name:"ko/msg_docs/VehicleAttitude.md"},n=e(`<h1 id="vehicleattitude-uorb-message" tabindex="-1">VehicleAttitude (UORB message) <a class="header-anchor" href="#vehicleattitude-uorb-message" aria-label="Permalink to &quot;VehicleAttitude (UORB message)&quot;">â€‹</a></h1><p>This is similar to the mavlink message ATTITUDE_QUATERNION, but for onboard use The quaternion uses the Hamilton convention, and the order is q(w, x, y, z)</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/VehicleAttitude.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># This is similar to the mavlink message ATTITUDE_QUATERNION, but </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onboard use</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># The quaternion uses the Hamilton convention, and the order is </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">q</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, x, y, z)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp                # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample         # the timestamp of the raw </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] q                    # Quaternion rotation from the FRD body frame to the NED earth frame</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] delta_q_reset        # Amount by which quaternion has changed during last reset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 quat_reset_counter        # Quaternion reset counter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># TOPICS vehicle_attitude vehicle_attitude_groundtruth external_ins_attitude</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># TOPICS estimator_attitude</span></span></code></pre></div>`,4),l=[n];function h(p,r,o,k,d,c){return a(),i("div",null,l)}const g=s(t,[["render",h]]);export{u as __pageData,g as default};
