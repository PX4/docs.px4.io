import{_ as s,c as a,o as i,ab as n}from"./chunks/framework.CUflZczI.js";const y=JSON.parse('{"title":"드라이버 개발","description":"","frontmatter":{},"headers":[],"relativePath":"ko/middleware/drivers.md","filePath":"ko/middleware/drivers.md"}'),e={name:"ko/middleware/drivers.md"},p=n(`<h1 id="드라이버-개발" tabindex="-1">드라이버 개발 <a class="header-anchor" href="#드라이버-개발" aria-label="Permalink to &quot;드라이버 개발&quot;">​</a></h1><p>PX4 장치 드라이버는 <a href="https://github.com/PX4/PX4-Autopilot/tree/master/src/lib/drivers/device" target="_blank" rel="noreferrer">장치</a> 프레임워크를 기반으로 합니다.</p><h2 id="드라이버-생성" tabindex="-1">드라이버 생성 <a class="header-anchor" href="#드라이버-생성" aria-label="Permalink to &quot;드라이버 생성&quot;">​</a></h2><p>PX4는 <a href="./../middleware/uorb.html">uORB</a>의 데이터를 거의 독점적으로 사용합니다. 일반적인 주변 장치 유형에 대한 드라이버는 올바른 uORB 메시지(예: 자이로, 가속도계, 압력 센서 등)를 게시하여야 합니다.</p><p>새 드라이버를 만드는 가장 좋은 방법은 템플릿과 유사한 드라이버로 시작하는 것입니다(<a href="https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers" target="_blank" rel="noreferrer">src/drivers</a> 참조).</p><div class="info custom-block"><p class="custom-block-title">More detailed information about working with specific I/O buses and sensors may be available in <a href="./../sensor_bus/">Sensor and Actuator Buses</a> section.</p></div><div class="info custom-block"><p class="custom-block-title">Publishing the correct uORB topics is the only pattern that drivers <em>must</em> follow.</p></div><h2 id="핵심-아키텍처" tabindex="-1">핵심 아키텍처 <a class="header-anchor" href="#핵심-아키텍처" aria-label="Permalink to &quot;핵심 아키텍처&quot;">​</a></h2><p>PX4는 <a href="./../concept/architecture.html">반응형 시스템</a>이며, <a href="./../middleware/uorb.html">uORB</a> 게시/구독을 사용하여 메시지를 전송합니다. 파일 핸들은 시스템의 핵심 작업에 필요하지 않거나 사용되지 않습니다. 두 가지 주요 API가 사용됩니다.</p><ul><li>PX4가 실행되는 시스템에 따라 파일, 네트워크 또는 공유 메모리 백엔드가 있는 게시/구독 시스템.</li><li>장치를 열거하고 구성을 가져오거나 설정할 수 있는 전역 장치 레지스트리. 이것은 연결 목록이나 파일 시스템에 대한 매핑처럼 간단할 수 있습니다.</li></ul><h2 id="장치-id" tabindex="-1">장치 ID <a class="header-anchor" href="#장치-id" aria-label="Permalink to &quot;장치 ID&quot;">​</a></h2><p>PX4는 장치 ID를 사용하여 시스템 전체에서 개별 센서를 일관되게 식별합니다. 이러한 ID는 구성 매개변수에 저장되며, 센서 보정 값을 일치시키고 어떤 센서가 어떤 로그 파일 항목에 기록되는 지 결정합니다.</p><p>센서의 순서(예: <code>/dev/mag0</code> 및 대체 <code>/dev/mag1</code>가 있는 경우)는 우선순위를 결정하지 않습니다. 높은 우선순위는 대신 게시된 uORB 주제입니다.</p><h3 id="디코딩-예제" tabindex="-1">디코딩 예제 <a class="header-anchor" href="#디코딩-예제" aria-label="Permalink to &quot;디코딩 예제&quot;">​</a></h3><p>시스템에 3개의 자력계가 있는 경우에는 비행 로그(.px4log)를 사용하여 매개변수를 덤프합니다. 세 개의 매개변수는 센서 ID를 인코딩하고, <code>MAG_PRIME</code>은 어떤 자력계가 기본 센서로 선택되었는 지 식별합니다. 각 MAGx_ID는 24비트 숫자이며, 수동 디코딩을 하가 위하여 왼쪽에 0을 채워야 합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>CAL_MAG0_ID = 73225.0</span></span>
<span class="line"><span>CAL_MAG1_ID = 66826.0</span></span>
<span class="line"><span>CAL_MAG2_ID = 263178.0</span></span>
<span class="line"><span>CAL_MAG_PRIME = 73225.0</span></span></code></pre></div><p>이것은 주소 <code>0x1E</code>의 버스 1, I2C를 통해 연결된 외부 HMC5983입니다. 로그 파일에 <code>IMU.MagX</code>로 표시됩니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># device ID 73225 in 24-bit binary:</span></span>
<span class="line"><span>00000001  00011110  00001 001</span></span>
<span class="line"><span></span></span>
<span class="line"><span># decodes to:</span></span>
<span class="line"><span>HMC5883   0x1E    bus 1 I2C</span></span></code></pre></div><p>이것은 SPI, 버스 1, 슬레이브 선택 슬롯 5를 통하여 연결된 내부 HMC5983입니다. 로그 파일에 <code>IMU1.MagX</code>로 표시됩니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># device ID 66826 in 24-bit binary:</span></span>
<span class="line"><span>00000001  00000101  00001 010</span></span>
<span class="line"><span></span></span>
<span class="line"><span># decodes to:</span></span>
<span class="line"><span>HMC5883   dev 5   bus 1 SPI</span></span></code></pre></div><p>그리고 이것은 SPI, 버스 1, 슬레이브 선택 슬롯 4를 통하여 연결된 내부 MPU9250 자력계입니다. 로그 파일에 <code>IMU2.MagX</code>로 표시됩니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># device ID 263178 in 24-bit binary:</span></span>
<span class="line"><span>00000100  00000100  00001 010</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#decodes to:</span></span>
<span class="line"><span>MPU9250   dev 4   bus 1 SPI</span></span></code></pre></div><h3 id="장치-id-인코딩" tabindex="-1">장치 ID 인코딩 <a class="header-anchor" href="#장치-id-인코딩" aria-label="Permalink to &quot;장치 ID 인코딩&quot;">​</a></h3><p>장치 ID는 이 형식에 따른 24비트 숫자입니다. 첫 번째 필드는 위의 디코딩 예에서 최하위 비트입니다.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeviceStructure {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeviceBusType bus_type : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bus: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // which instance of the bus type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> address;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // address on the bus (eg. I2C address)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> devtype;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // device class specific device type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><code>bus_type</code>은 다음과 같이 디코딩됩니다.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeviceBusType {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_I2C     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_SPI     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_UAVCAN  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><code>devtype</code>은 다음과 같이 디코딩됩니다.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_HMC5883</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_LSM303D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">02</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_ACCELSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">03</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_MPU9250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_LSM303D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_BMA180</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_MPU6000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_ACCELSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_GYROSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_MPU9250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_MPU6000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_L3GD20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_GYROSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_MPU9250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_RNG_DEVTYPE_MB12XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_RNG_DEVTYPE_LL40LS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span></span></code></pre></div><h2 id="디버깅" tabindex="-1">디버깅 <a class="header-anchor" href="#디버깅" aria-label="Permalink to &quot;디버깅&quot;">​</a></h2><p>일반적인 디버깅 주제는 <a href="./../debug/README.html">디버깅/로깅</a>을 참고하십시오.</p><h3 id="상세-로깅" tabindex="-1">상세 로깅 <a class="header-anchor" href="#상세-로깅" aria-label="Permalink to &quot;상세 로깅&quot;">​</a></h3><p>드라이버(및 기타 모듈)는 기본적으로 최소한의 자세한 로그 문자열을 출력합니다(예: <code>PX4_DEBUG</code>, <code>PX4_WARN</code>, <code>PX4_ERR</code> 등).</p><p>로그 상세도는 빌드 시 <code>RELEASE_BUILD</code>(기본값), <code>DEBUG_BUILD</code>(상세) 또는 <code>TRACE_BUILD</code>(매우 상세) 매크로를 사용하여 정의됩니다.</p><p>드라이버 <code>px4_add_module</code> 함수(<strong>CMakeLists.txt</strong>)에서 <code>COMPILE_FLAGS</code>를 사용하여 로깅 수준을 변경합니다. 아래 코드 조각은 단일 모듈 또는 드라이버에 대해 DEBUG_BUILD 수준 디버깅을 활성화하에 필요한 변경 사항을 나타냅니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>px4_add_module(</span></span>
<span class="line"><span>    MODULE templates__module</span></span>
<span class="line"><span>    MAIN module</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    COMPILE_FLAGS</span></span>
<span class="line"><span>        -DDEBUG_BUILD</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    SRCS</span></span>
<span class="line"><span>        module.cpp</span></span>
<span class="line"><span>    DEPENDS</span></span>
<span class="line"><span>        modules__uORB</span></span>
<span class="line"><span>    )</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>자세한 로깅은 .cpp 파일의 맨 위에(포함하기 전에) <code>#define DEBUG_BUILD</code>를 추가하여 파일별로 활성화할 수 있습니다.</p></div>`,39),l=[p];function t(h,k,d,c,r,o){return i(),a("div",null,l)}const E=s(e,[["render",t]]);export{y as __pageData,E as default};
