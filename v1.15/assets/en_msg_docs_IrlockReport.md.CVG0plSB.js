import{_ as s,c as a,o as i,ab as e}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"IrlockReport (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"en/msg_docs/IrlockReport.md","filePath":"en/msg_docs/IrlockReport.md"}'),t={name:"en/msg_docs/IrlockReport.md"},n=e(`<h1 id="irlockreport-uorb-message" tabindex="-1">IrlockReport (UORB message) <a class="header-anchor" href="#irlockreport-uorb-message" aria-label="Permalink to &quot;IrlockReport (UORB message)&quot;">â€‹</a></h1><p>IRLOCK_REPORT message data</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/IrlockReport.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># IRLOCK_REPORT message data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp		# time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint16 signature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># When looking along the optical axis of the camera, x points right, y points down, and z points along the optical axis.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 pos_x # </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(theta), where theta is the angle between the target and the camera center of projection in camera x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 pos_y # </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(theta), where theta is the angle between the target and the camera center of projection in camera y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 size_x #</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** size of target along camera x-axis in units of tan(theta) **/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 size_y #</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** size of target along camera y-axis in units of tan(theta) **/</span></span></code></pre></div>`,4),l=[n];function p(r,h,o,k,c,E){return i(),a("div",null,l)}const m=s(t,[["render",p]]);export{g as __pageData,m as default};
