import{_ as t,c as e,o as a,ab as n}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"Setting up a Developer Environment (Toolchain)","description":"","frontmatter":{},"headers":[],"relativePath":"en/dev_setup/dev_env.md","filePath":"en/dev_setup/dev_env.md"}'),r={name:"en/dev_setup/dev_env.md"},l=n('<h1 id="setting-up-a-developer-environment-toolchain" tabindex="-1">Setting up a Developer Environment (Toolchain) <a class="header-anchor" href="#setting-up-a-developer-environment-toolchain" aria-label="Permalink to &quot;Setting up a Developer Environment (Toolchain)&quot;">​</a></h1><p>The <em>supported platforms</em> for PX4 development are:</p><ul><li><a href="./../dev_setup/dev_env_linux_ubuntu.html">Ubuntu Linux (22.04/20.04/18.04)</a> — Recommended</li><li><a href="./../dev_setup/dev_env_windows_wsl.html">Windows (10/11)</a> — via WSL2</li><li><a href="./../dev_setup/dev_env_mac.html">Mac OS</a></li></ul><h2 id="supported-targets" tabindex="-1">Supported Targets <a class="header-anchor" href="#supported-targets" aria-label="Permalink to &quot;Supported Targets&quot;">​</a></h2><p>The table below shows what PX4 targets you can build on each OS.</p><table><thead><tr><th>Target</th><th style="text-align:center;">Linux (Ubuntu)</th><th style="text-align:center;">Mac</th><th style="text-align:center;">Windows</th></tr></thead><tbody><tr><td><strong>NuttX based hardware:</strong> <a href="./../flight_controller/pixhawk_series.html">Pixhawk Series</a>, <a href="./../complete_vehicles_mc/crazyflie2.html">Crazyflie</a></td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Linux-based hardware:</strong> <a href="./../flight_controller/raspberry_pi_navio2.html">Raspberry Pi 2/3</a></td><td style="text-align:center;">✓</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td><strong>Simulation:</strong> <a href="./../sim_gazebo_gz/">Gazebo SITL</a></td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> <a href="./../sim_gazebo_classic/">Gazebo Classic SITL</a></td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> <a href="./../simulation/ros_interface.html">ROS with Gazebo Classic</a></td><td style="text-align:center;">✓</td><td style="text-align:center;"></td><td style="text-align:center;">✓</td></tr><tr><td><strong>Simulation:</strong> ROS 2 with Gazebo</td><td style="text-align:center;">✓</td><td style="text-align:center;"></td><td style="text-align:center;">✓</td></tr></tbody></table><p>Experienced Docker users can also build with the containers used by our continuous integration system: <a href="./../test_and_ci/docker.html">Docker Containers</a></p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Once you have finished setting up one of the command-line toolchains above:</p><ul><li>Install <a href="./../dev_setup/vscode.html">VSCode</a> (if you prefer using an IDE to the command line).</li><li>Install the <a href="./../dev_setup/qgc_daily_build.html">QGroundControl Daily Build</a></li><li>Continue to <a href="./../dev_setup/building_px4.html">Building PX4 Software</a>.</li></ul>',10),i=[l];function o(s,d,c,h,u,_){return a(),e("div",null,i)}const m=t(r,[["render",o]]);export{g as __pageData,m as default};
