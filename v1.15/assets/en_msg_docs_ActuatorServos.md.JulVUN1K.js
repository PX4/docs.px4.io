import{_ as s,c as a,o as i,ab as t}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"ActuatorServos (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"en/msg_docs/ActuatorServos.md","filePath":"en/msg_docs/ActuatorServos.md"}'),e={name:"en/msg_docs/ActuatorServos.md"},n=t(`<h1 id="actuatorservos-uorb-message" tabindex="-1">ActuatorServos (UORB message) <a class="header-anchor" href="#actuatorservos-uorb-message" aria-label="Permalink to &quot;ActuatorServos (UORB message)&quot;">â€‹</a></h1><p>Servo control message</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/release/1.15/msg/ActuatorServos.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Servo control message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp			# time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample	    # the timestamp the data this control response is based on was sampled</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 NUM_CONTROLS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] control # range: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], where </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> means maximum positive position,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   # </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximum negative,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   # and NaN maps to disarmed</span></span></code></pre></div>`,4),p=[n];function l(h,r,o,k,c,d){return i(),a("div",null,p)}const m=s(e,[["render",l]]);export{g as __pageData,m as default};
