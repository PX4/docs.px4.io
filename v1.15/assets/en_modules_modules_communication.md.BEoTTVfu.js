import{_ as a,c as s,o as n,ab as e}from"./chunks/framework.CUflZczI.js";const g=JSON.parse('{"title":"Modules Reference: Communication","description":"","frontmatter":{},"headers":[],"relativePath":"en/modules/modules_communication.md","filePath":"en/modules/modules_communication.md"}'),t={name:"en/modules/modules_communication.md"},l=e(`<h1 id="modules-reference-communication" tabindex="-1">Modules Reference: Communication <a class="header-anchor" href="#modules-reference-communication" aria-label="Permalink to &quot;Modules Reference: Communication&quot;">​</a></h1><h2 id="frsky-telemetry" tabindex="-1">frsky_telemetry <a class="header-anchor" href="#frsky-telemetry" aria-label="Permalink to &quot;frsky_telemetry&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/drivers/telemetry/frsky_telemetry" target="_blank" rel="noreferrer">drivers/telemetry/frsky_telemetry</a></p><p>FrSky Telemetry support. Auto-detects D or S.PORT protocol. <a id="frsky_telemetry_usage"></a></p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>frsky_telemetry &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span>     [-d &lt;val&gt;]  Select Serial Device</span></span>
<span class="line"><span>                 values: &lt;file:dev&gt;, default: /dev/ttyS6</span></span>
<span class="line"><span>     [-t &lt;val&gt;]  Scanning timeout [s] (default: no timeout)</span></span>
<span class="line"><span>                 default: 0</span></span>
<span class="line"><span>     [-m &lt;val&gt;]  Select protocol (default: auto-detect)</span></span>
<span class="line"><span>                 values: sport|sport_single|sport_single_invert|dtype, default:</span></span>
<span class="line"><span>                 auto</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status</span></span></code></pre></div><h2 id="mavlink" tabindex="-1">mavlink <a class="header-anchor" href="#mavlink" aria-label="Permalink to &quot;mavlink&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/modules/mavlink" target="_blank" rel="noreferrer">modules/mavlink</a></p><h3 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>This module implements the MAVLink protocol, which can be used on a Serial link or UDP network connection. It communicates with the system via uORB: some messages are directly handled in the module (eg. mission protocol), others are published via uORB (eg. vehicle_command).</p><p>Streams are used to send periodic messages with a specific rate, such as the vehicle attitude. When starting the mavlink instance, a mode can be specified, which defines the set of enabled streams with their rates. For a running instance, streams can be configured via <code>mavlink stream</code> command.</p><p>There can be multiple independent instances of the module, each connected to one serial device or network port.</p><h3 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h3><p>The implementation uses 2 threads, a sending and a receiving thread. The sender runs at a fixed rate and dynamically reduces the rates of the streams if the combined bandwidth is higher than the configured rate (<code>-r</code>) or the physical link becomes saturated. This can be checked with <code>mavlink status</code>, see if <code>rate mult</code> is less than 1.</p><p><strong>Careful</strong>: some of the data is accessed and modified from both threads, so when changing code or extend the functionality, this needs to be take into account, in order to avoid race conditions and corrupt data.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><p>Start mavlink on ttyS1 serial with baudrate 921600 and maximum sending rate of 80kB/s:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mavlink start -d /dev/ttyS1 -b 921600 -m onboard -r 80000</span></span></code></pre></div><p>Start mavlink on UDP port 14556 and enable the HIGHRES_IMU message with 50Hz:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mavlink start -u 14556 -r 1000000</span></span>
<span class="line"><span>mavlink stream -u 14556 -s HIGHRES_IMU -r 50</span></span></code></pre></div><p><a id="mavlink_usage"></a></p><h3 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mavlink &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start         Start a new instance</span></span>
<span class="line"><span>     [-d &lt;val&gt;]  Select Serial Device</span></span>
<span class="line"><span>                 values: &lt;file:dev&gt;, default: /dev/ttyS1</span></span>
<span class="line"><span>     [-b &lt;val&gt;]  Baudrate (can also be p:&lt;param_name&gt;)</span></span>
<span class="line"><span>                 default: 57600</span></span>
<span class="line"><span>     [-r &lt;val&gt;]  Maximum sending data rate in B/s (if 0, use baudrate / 20)</span></span>
<span class="line"><span>                 default: 0</span></span>
<span class="line"><span>     [-p]        Enable Broadcast</span></span>
<span class="line"><span>     [-u &lt;val&gt;]  Select UDP Network Port (local)</span></span>
<span class="line"><span>                 default: 14556</span></span>
<span class="line"><span>     [-o &lt;val&gt;]  Select UDP Network Port (remote)</span></span>
<span class="line"><span>                 default: 14550</span></span>
<span class="line"><span>     [-t &lt;val&gt;]  Partner IP (broadcasting can be enabled via -p flag)</span></span>
<span class="line"><span>                 default: 127.0.0.1</span></span>
<span class="line"><span>     [-m &lt;val&gt;]  Mode: sets default streams and rates</span></span>
<span class="line"><span>                 values: custom|camera|onboard|osd|magic|config|iridium|minimal|</span></span>
<span class="line"><span>                 extvision|extvisionmin|gimbal|uavionix, default: normal</span></span>
<span class="line"><span>     [-n &lt;val&gt;]  wifi/ethernet interface name</span></span>
<span class="line"><span>                 values: &lt;interface_name&gt;</span></span>
<span class="line"><span>     [-c &lt;val&gt;]  Multicast address (multicasting can be enabled via</span></span>
<span class="line"><span>                 MAV_{i}_BROADCAST param)</span></span>
<span class="line"><span>                 values: Multicast address in the range</span></span>
<span class="line"><span>                 [239.0.0.0,239.255.255.255]</span></span>
<span class="line"><span>     [-F &lt;val&gt;]  Sets the transmission frequency for iridium mode</span></span>
<span class="line"><span>                 default: 0.0</span></span>
<span class="line"><span>     [-f]        Enable message forwarding to other Mavlink instances</span></span>
<span class="line"><span>     [-w]        Wait to send, until first message received</span></span>
<span class="line"><span>     [-x]        Enable FTP</span></span>
<span class="line"><span>     [-z]        Force hardware flow control always on</span></span>
<span class="line"><span>     [-Z]        Force hardware flow control always off</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop-all      Stop all instances</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop          Stop a running instance</span></span>
<span class="line"><span>     [-u &lt;val&gt;]  Select Mavlink instance via local Network Port</span></span>
<span class="line"><span>     [-d &lt;val&gt;]  Select Mavlink instance via Serial Device</span></span>
<span class="line"><span>                 values: &lt;file:dev&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        Print status for all instances</span></span>
<span class="line"><span>     [streams]   Print all enabled streams</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stream        Configure the sending rate of a stream for a running instance</span></span>
<span class="line"><span>     [-u &lt;val&gt;]  Select Mavlink instance via local Network Port</span></span>
<span class="line"><span>     [-d &lt;val&gt;]  Select Mavlink instance via Serial Device</span></span>
<span class="line"><span>                 values: &lt;file:dev&gt;</span></span>
<span class="line"><span>     -s &lt;val&gt;    Mavlink stream to configure</span></span>
<span class="line"><span>     -r &lt;val&gt;    Rate in Hz (0 = turn off, -1 = set to default)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   boot_complete Enable sending of messages. (Must be) called as last step in</span></span>
<span class="line"><span>                 startup script.</span></span></code></pre></div><h2 id="uorb" tabindex="-1">uorb <a class="header-anchor" href="#uorb" aria-label="Permalink to &quot;uorb&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/systemcmds/uorb" target="_blank" rel="noreferrer">systemcmds/uorb</a></p><h3 id="description-1" tabindex="-1">Description <a class="header-anchor" href="#description-1" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>uORB is the internal pub-sub messaging system, used for communication between modules.</p><h3 id="implementation-1" tabindex="-1">Implementation <a class="header-anchor" href="#implementation-1" aria-label="Permalink to &quot;Implementation&quot;">​</a></h3><p>The implementation is asynchronous and lock-free, ie. a publisher does not wait for a subscriber and vice versa. This is achieved by having a separate buffer between a publisher and a subscriber.</p><p>The code is optimized to minimize the memory footprint and the latency to exchange messages.</p><p>Messages are defined in the <code>/msg</code> directory. They are converted into C/C++ code at build-time.</p><p>If compiled with ORB_USE_PUBLISHER_RULES, a file with uORB publication rules can be used to configure which modules are allowed to publish which topics. This is used for system-wide replay.</p><h3 id="examples-1" tabindex="-1">Examples <a class="header-anchor" href="#examples-1" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><p>Monitor topic publication rates. Besides <code>top</code>, this is an important command for general system inspection:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>uorb top</span></span></code></pre></div><p><a id="uorb_usage"></a></p><h3 id="usage-2" tabindex="-1">Usage <a class="header-anchor" href="#usage-2" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>uorb &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   status        Print topic statistics</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   top           Monitor topic publication rates</span></span>
<span class="line"><span>     [-a]        print all instead of only currently publishing topics with</span></span>
<span class="line"><span>                 subscribers</span></span>
<span class="line"><span>     [-1]        run only once, then exit</span></span>
<span class="line"><span>     [&lt;filter1&gt; [&lt;filter2&gt;]] topic(s) to match (implies -a)</span></span></code></pre></div>`,38),i=[l];function p(o,r,c,d,m,u){return n(),s("div",null,i)}const b=a(t,[["render",p]]);export{g as __pageData,b as default};
