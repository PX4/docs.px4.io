import{_ as s,c as e,o as a,ab as i}from"./chunks/framework.CUflZczI.js";const u=JSON.parse('{"title":"ULog 파일 형식","description":"","frontmatter":{},"headers":[],"relativePath":"ko/dev_log/ulog_file_format.md","filePath":"ko/dev_log/ulog_file_format.md"}'),t={name:"ko/dev_log/ulog_file_format.md"},n=i(`<h1 id="ulog-파일-형식" tabindex="-1">ULog 파일 형식 <a class="header-anchor" href="#ulog-파일-형식" aria-label="Permalink to &quot;ULog 파일 형식&quot;">​</a></h1><p>ULog is the file format used for logging messages. The format is self-describing, i.e. it contains the format and <a href="./../middleware/uorb.html">uORB</a> message types that are logged. This document is meant to be the ULog File Format Spec Documentation. It is intended especially for anyone who is interested in writing a ULog parser / serializer and needs to decode / encode files.</p><p>PX4 uses ULog to log uORB topics as messages related to (but not limited to) the following sources:</p><ul><li><strong>Device inputs:</strong> Sensors, RC input, etc.</li><li><strong>Internal states:</strong> CPU load, attitude, EKF state, etc.</li><li><strong>String messages:</strong> <code>printf</code> statements, including <code>PX4_INFO()</code> and <code>PX4_ERR()</code>.</li></ul><p>The format uses <a href="https://en.wikipedia.org/wiki/Endianness" target="_blank" rel="noreferrer">little endian</a> memory layout for all binary types (the least significant byte (LSB) of data type is placed at the lowest memory address).</p><h2 id="데이터-형식" tabindex="-1">데이터 형식 <a class="header-anchor" href="#데이터-형식" aria-label="Permalink to &quot;데이터 형식&quot;">​</a></h2><p>The following binary types are used for logging. They all correspond to the types in C.</p><table><thead><tr><th>형식</th><th>바이트 크기</th></tr></thead><tbody><tr><td>int8_t, uint8_t</td><td>1</td></tr><tr><td>int16_t, uint16_t</td><td>2</td></tr><tr><td>int32_t, uint32_t</td><td>4</td></tr><tr><td>int64_t, uint64_t</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>bool, char</td><td>1</td></tr></tbody></table><p>Additionally the types can be used as a fixed-size array: e.g. <code>float[5]</code>.</p><p>Strings (<code>char[length]</code>) do not contain the termination NULL character <code>&#39;\\0&#39;</code> at the end.</p><div class="info custom-block"><p class="custom-block-title">String comparisons are case sensitive, which should be taken into account when comparing message names when <a href="#a-subscription-message">adding subscriptions</a>.</p></div><h2 id="ulog-file-structure" tabindex="-1">ULog File Structure <a class="header-anchor" href="#ulog-file-structure" aria-label="Permalink to &quot;ULog File Structure&quot;">​</a></h2><p>ULog files have the following three sections:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>----------------------</span></span>
<span class="line"><span>|       Header       |</span></span>
<span class="line"><span>----------------------</span></span>
<span class="line"><span>|    Definitions     |</span></span>
<span class="line"><span>----------------------</span></span>
<span class="line"><span>|        Data        |</span></span>
<span class="line"><span>----------------------</span></span></code></pre></div><p>A description of each section is provided below.</p><h3 id="헤더-섹션" tabindex="-1">헤더 섹션 <a class="header-anchor" href="#헤더-섹션" aria-label="Permalink to &quot;헤더 섹션&quot;">​</a></h3><p>헤더는 고정 크기 섹션이며, 다음 형식(16바이트)을 갖습니다.</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>----------------------------------------------------------------------</span></span>
<span class="line"><span>| 0x55 0x4c 0x6f 0x67 0x01 0x12 0x35 | 0x01         | uint64_t       |</span></span>
<span class="line"><span>| File magic (7B)                    | Version (1B) | Timestamp (8B) |</span></span>
<span class="line"><span>----------------------------------------------------------------------</span></span></code></pre></div><ul><li><strong>File Magic (7 Bytes):</strong> File type indicator that reads &quot;ULogXYZ where XYZ is the magic bytes sequence <code>0x01 0x12 0x35</code>&quot;</li><li><strong>Version (1 Byte):</strong> File format version (currently 1)</li><li><strong>Timestamp (8 Bytes):</strong> <code>uint64_t</code> integer that denotes when the logging started in microseconds.</li></ul><h3 id="definition-data-section-message-header" tabindex="-1">Definition &amp; Data Section Message Header <a class="header-anchor" href="#definition-data-section-message-header" aria-label="Permalink to &quot;Definition &amp; Data Section Message Header&quot;">​</a></h3><p>The <em>Definitions and Data</em> sections contain a number of <strong>messages</strong>. Each message is preceded by this header:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg_size;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg_type;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>msg_size</code> is the size of the message in bytes without the header.</li><li><code>msg_type</code> defines the content, and is a single byte.</li></ul><div class="info custom-block"><p class="custom-block-title">Message sections below are prefixed with the character that corresponds to it&#39;s <code>msg_type</code>.</p></div><h3 id="정의-섹션" tabindex="-1">정의 섹션 <a class="header-anchor" href="#정의-섹션" aria-label="Permalink to &quot;정의 섹션&quot;">​</a></h3><p>The definitions section contains basic information such as software version, message format, initial parameter values, and so on.</p><p>The message types in this section are:</p><ol><li><a href="#b-flag-bits-message">Flag Bits</a></li><li><a href="#f-format-message">Format Definition</a></li><li><a href="#i-information-message">Information</a></li><li><a href="#m-multi-information-message">Multi Information</a></li><li><a href="#p-parameter-message">Parameter</a></li><li><a href="#q-default-parameter-message">Default Parameter</a></li></ol><h4 id="b-flag-bits-message" tabindex="-1">&#39;B&#39;: Flag Bits Message <a class="header-anchor" href="#b-flag-bits-message" aria-label="Permalink to &quot;&#39;B&#39;: Flag Bits Message&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">This message must be the <strong>first message</strong> right after the header section, so that it has a fixed constant offset from the start of the file!</p></div><p>This message provides information to the log parser whether the log is parsable or not.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ulog_message_flag_bits_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;B&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> compat_flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> incompat_flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> appended_offsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // file offset(s) for appended data if appending bit is set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><p><code>compat_flags</code>: compatible flag bits</p><ul><li>These flags indicate the presence of features in the log file that are compatible with any ULog parser.</li><li><code>compat_flags[0]</code>: <em>DEFAULT_PARAMETERS</em> (Bit 0): if set, the log contains <a href="#q-default-parameter-message">default parameters message</a></li></ul><p>The rest of the bits are currently not defined and must be set to 0. 이 비트는 향후 기존 파서와 호환되는 ULog 변경에 사용할 수 있습니다. For example, adding a new message type can be indicated by defining a new bit in the standard, and existing parsers will ignore the new message type. 이는 알 수 없는 비트 중 하나가 설정되어 있으면, 파서가 해당 비트를 무시할 수 있음을 의미합니다.</p></li><li><p><code>incompat_flags</code>: 비호환성 플래그 비트값.</p><ul><li><code>incompat_flags[0]</code>: <em>DATA_APPENDED</em> (Bit 0): if set, the log contains appended data and at least one of the <code>appended_offsets</code> is non-zero.</li></ul><p>The rest of the bits are currently not defined and must be set to 0. 이것은 기존 파서가 처리할 수 없는 주요 변경 사항을 도입하는 데 사용할 수 있습니다. For example, when an old ULog parser that didn&#39;t have the concept of <em>DATA_APPENDED</em> reads the newer ULog, it would stop parsing the log as the log will contain out-of-spec messages / concepts. If a parser finds any of these bits set that isn&#39;t specified, it must refuse to parse the log.</p></li><li><p><code>appended_offsets</code>: File offset (0-based) for appended data. 데이터가 추가되지 않은 경우에는 모든 오프셋은 0이어야 합니다. 이것은 메시지 중간에 멈출 수 있는 로그에 대한 데이터를 안정적으로 추가할 수 있습니다. For example, crash dumps.</p><p>데이터를 추가하는 프로세스는 다음과 같습니다.</p><ul><li>set the relevant <code>incompat_flags</code> bit</li><li>set the first <code>appended_offsets</code> that is currently 0 to the length of the log file without the appended data, as that is where the new data will start</li><li>append any type of messages that are valid for the Data section.</li></ul></li></ul><p>향후 ULog 사양에서 이 메시지 끝에 추가 필드가 존재할 수 있습니다. 이것은 파서가 이 메시지의 고정된 길이를 가정해서는 안 된다는 것을 의미합니다. If the <code>msg_size</code> is bigger than expected (currently 40), any additional bytes must be ignored/discarded.</p><h4 id="f-format-message" tabindex="-1">&#39;F&#39;: Format Message <a class="header-anchor" href="#f-format-message" aria-label="Permalink to &quot;&#39;F&#39;: Format Message&quot;">​</a></h4><p>Format message defines a single message name and its inner fields in a single string.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_format_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;F&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>format</code> is a plain-text string with the following format: <code>message_name:field0;field1;</code><ul><li>There can be an arbitrary amount of fields (minimum 1), separated by <code>;</code>.</li><li><code>message_name</code>: an arbitrary non-empty string with these allowed characters: <code>a-zA-Z0-9_-/</code> (and different from any of the <a href="#data-types">basic types</a>).</li></ul></li></ul><p>A <code>field</code> has the format: <code>type field_name</code>, or for an array: <code>type[array_length] field_name</code> is used (only fixed size arrays are supported). <code>field_name</code> must consist of the characters in the set <code>a-zA-Z0-9_</code>.</p><p>A <code>type</code> is one of the <a href="#data-types">basic binary types</a> or a <code>message_name</code> of another format definition (nested usage).</p><ul><li>유형은 정의되기 전에 사용할 수 있습니다. <ul><li>e.g. The message <code>MessageA:MessageB[2] msg_b</code> can come before the <code>MessageB:uint_8[3] data</code></li></ul></li><li>There can be arbitrary nesting but <strong>no circular dependencies</strong><ul><li>e.g. <code>MessageA:MessageB[2] msg_b</code> &amp; <code>MessageB:MessageA[4] msg_a</code></li></ul></li></ul><p>일부 필드 이름은 특별합니다.</p><ul><li><code>timestamp</code>: every message format with a <a href="#a-subscription-message">Subscription Message</a> must include a timestamp field (for example a message format only used as part of a nested definition by another format may not include a timestamp field) <ul><li>유형은 <code>uint64_t</code>(현재 유일하게 사용됨), <code>uint32_t</code>, <code>uint16_t</code> 또는 <code>uint8_t</code>일 수 있습니다.</li><li>The unit is microseconds.</li><li>타임스탬프는 <code>msg_id</code>가 동일한 메시지 시리즈에 대해 항상 단조 증가해야 합니다.</li></ul></li><li><code>_padding{}</code>: field names that start with <code>_padding</code> (e.g. <code>_padding[3]</code>) should not be displayed and their data must be ignored by a reader. <ul><li>이 필드는 올바른 정렬을 보장하기 위하여 작성자가 삽입할 수 있습니다.</li><li>If the padding field is the last field, then this field may not be logged, to avoid writing unnecessary data.</li><li>즉, <code>message_data_s.data</code>가 패딩 크기만큼 짧아집니다.</li><li>그러나 메시지가 중첩 정의에서 사용될 때 패딩은 여전히 필요합니다.</li></ul></li><li>In general, message fields are not necessarily aligned (i.e. the field offset within the message is not necessarily a multiple of its data size), so a reader must always use appropriate memory copy methods to access individual fields.</li></ul><h4 id="i-information-message" tabindex="-1">&#39;I&#39;: Information Message <a class="header-anchor" href="#i-information-message" aria-label="Permalink to &quot;&#39;I&#39;: Information Message&quot;">​</a></h4><p>The Information message defines a dictionary type definition <code>key</code> : <code>value</code> pair for any information, including but not limited to Hardware version, Software version, Build toolchain for the software, etc.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ulog_message_info_header_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;I&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[key_len];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key_len]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>key_len</code>: Length of the key value</li><li><code>key</code>: Contains the key string in the form<code>type name</code>, e.g. <code>char[value_len] sys_toolchain_ver</code>. Valid characters for the name: <code>a-zA-Z0-9_-/</code>. The type may be one of the <a href="#data-types">basic types including arrays</a>.</li><li><code>value</code>: Contains the data (with the length <code>value_len</code>) corresponding to the <code>key</code> e.g. <code>9.4.0</code>.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>A key defined in the Information message must be unique. Meaning there must not be more than one definition with the same key value.</p></div><p>파서는 정보 메시지를 사전으로 저장할 수 있습니다.</p><p>사전 정의된 정보 메시지는 다음과 같습니다.</p><table><thead><tr><th>키</th><th>설명</th><th>예제 값</th></tr></thead><tbody><tr><td><code>char[value_len] sys_name</code></td><td>시스템 이름</td><td>&quot;PX4&quot;</td></tr><tr><td><code>char[value_len] ver_hw</code></td><td>하드웨어 버전 (보드)</td><td>&quot;PX4FMU_V4&quot;</td></tr><tr><td><code>char[value_len] ver_hw_subtype</code></td><td>보드 하위 버전(변형판)</td><td>&quot;V2&quot;</td></tr><tr><td><code>char[value_len] ver_sw</code></td><td>소프트웨어 버전(git tag)</td><td>&quot;7f65e01&quot;</td></tr><tr><td><code>char[value_len] ver_sw_branch</code></td><td>git branch</td><td>&quot;master&quot;</td></tr><tr><td><code>uint32_t ver_sw_release</code></td><td>소프트웨어 버전 (아래 참고)</td><td>0x010401ff</td></tr><tr><td><code>char[value_len] sys_os_name</code></td><td>운영체제 이름</td><td>&quot;Linux&quot;</td></tr><tr><td><code>char[value_len] sys_os_ve</code>r</td><td>운영체제 버전 (git tag)</td><td>&quot;9f82919&quot;</td></tr><tr><td><code>uint32_t ver_os_release</code></td><td>운영체제 버전 (아래 참고)</td><td>0x010401ff</td></tr><tr><td><code>char[value_len] sys_toolchain</code></td><td>툴체인 이름</td><td>&quot;GNU GCC&quot;</td></tr><tr><td><code>char[value_len] sys_toolchain_ver</code></td><td>툴체인 버전</td><td>&quot;6.2.1&quot;</td></tr><tr><td><code>char[value_len] sys_mcu</code></td><td>칩 이름과 버전</td><td>&quot;STM32F42x, rev A&quot;</td></tr><tr><td><code>char[value_len] sys_uuid</code></td><td>차량 고유 식별자(예: MCU ID)</td><td>&quot;392a93e32fa3&quot;...</td></tr><tr><td><code>char[value_len] log_type</code></td><td>로그 형식(지정하지 않으면 전체 기록)</td><td>&quot;mission&quot;</td></tr><tr><td><code>char[value_len] replay</code></td><td>재생 모드인 경우 재생된 로그의 파일 이름</td><td>&quot;log001.ulg&quot;</td></tr><tr><td><code>int32_t time_ref_utc</code></td><td>UTC 시간 오프셋(초)</td><td>-3600</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title"><code>value_len</code> represents the data size of the <code>value</code>. This is described in the <code>key</code>.</p></div><ul><li>The format of <code>ver_sw_release</code> and <code>ver_os_release</code> is: 0xAABBCCTT, where AA is <strong>major</strong>, BB is <strong>minor</strong>, CC is patch and TT is the <strong>type</strong>. <ul><li><strong>Type</strong> is defined as following: <code>&gt;= 0</code>: development, <code>&gt;= 64</code>: alpha version, <code>&gt;= 128</code>: beta version, <code>&gt;= 192</code>: RC version, <code>== 255</code>: release version.</li><li>For example, <code>0x010402FF</code> translates into the release version v1.4.2.</li></ul></li></ul><p>이 메시지는 데이터 섹션에서도 사용할 수 있습니다(그러나 선호하는 섹션임).</p><h4 id="m-multi-information-message" tabindex="-1">&#39;M&#39;: Multi Information Message <a class="header-anchor" href="#m-multi-information-message" aria-label="Permalink to &quot;&#39;M&#39;: Multi Information Message&quot;">​</a></h4><p>Multi information message serves the same purpose as the information message, but for long messages or multiple messages with the same key.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ulog_message_info_multiple_header_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;M&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is_continued;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // can be used for arrays</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[key_len];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key_len]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>is_continued</code> can be used for split-up messages: if set to 1, it is part of the previous message with the same key.</li></ul><p>파서는 다중 메시지를 로그에서 발생하는 메시지와 동일한 순서를 사용하여 2D 목록으로 저장할 수 있습니다.</p><p>Valid names and types are the same as for the Information message.</p><h4 id="p-parameter-message" tabindex="-1">&#39;P&#39;: Parameter Message <a class="header-anchor" href="#p-parameter-message" aria-label="Permalink to &quot;&#39;P&#39;: Parameter Message&quot;">​</a></h4><p>Parameter message in the <em>Definitions</em> section defines the parameter values of the vehicle when logging is started. It uses the same format as the <a href="#i-information-message">Information Message</a>.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_info_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;P&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[key_len];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key_len]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>If a parameter dynamically changes during runtime, this message can also be <a href="#messages-shared-with-the-definitions-section">used in the Data section</a> as well.</p><p>The data type is restricted to <code>int32_t</code> and <code>float</code>. Valid characters for the name: <code>a-zA-Z0-9_-/</code>.</p><h4 id="q-default-parameter-message" tabindex="-1">&#39;Q&#39;: Default Parameter Message <a class="header-anchor" href="#q-default-parameter-message" aria-label="Permalink to &quot;&#39;Q&#39;: Default Parameter Message&quot;">​</a></h4><p>The default parameter message defines the default value of a parameter for a given vehicle and setup.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ulog_message_parameter_default_header_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;Q&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_types;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[key_len];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key_len]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>default_types</code>는 비트 필드이며 값이 속한 그룹을 정의합니다. <ul><li>최소한 하나의 비트가 설정되어야 합니다. <ul><li><code>1&lt;&lt;0</code>:: 시스템 전체 기본값</li><li><code>1&lt;&lt;1</code>: 현재 설정(예: 기체)의 기본값</li></ul></li></ul></li></ul><p>로그에는 모든 매개변수에 대한 기본값이 포함되어 있지 않을 수 있습니다. 이러한 경우 기본값은 매개변수 값과 같고, 다른 기본 유형은 독립적으로 처리됩니다.</p><p>This message can also be used in the Data section, and the same data type and naming applies as for the Parameter message.</p><p>This section ends before the start of the first <a href="#a-subscription-message">Subscription Message</a> or <a href="#l-logged-string-message">Logging</a> message, whichever comes first.</p><h3 id="데이터-섹션" tabindex="-1">데이터 섹션 <a class="header-anchor" href="#데이터-섹션" aria-label="Permalink to &quot;데이터 섹션&quot;">​</a></h3><p>The message types in the <em>Data</em> section are:</p><ol><li><a href="#a-subscription-message">Subscription</a></li><li><a href="#r-unsubscription-message">Unsubscription</a></li><li><a href="#d-logged-data-message">Logged Data</a></li><li><a href="#l-logged-string-message">Logged String</a></li><li><a href="#c-tagged-logged-string-message">Tagged Logged String</a></li><li><a href="#s-synchronization-message">Synchronization</a></li><li><a href="#o-dropout-message">Dropout Mark</a></li><li><a href="#i-information-message">Information</a></li><li><a href="#m-multi-information-message">Multi Information</a></li><li><a href="#p-parameter-message">Parameter</a></li><li><a href="#q-default-parameter-message">Default Parameter</a></li></ol><h4 id="a-subscription-message" tabindex="-1"><code>A</code>: Subscription Message <a class="header-anchor" href="#a-subscription-message" aria-label="Permalink to &quot;\`A\`: Subscription Message&quot;">​</a></h4><p>Subscribe a message by name and give it an id that is used in <a href="#d-logged-data-message">Logged data Message</a>. This must come before the first corresponding <a href="#d-logged-data-message">Logged data Message</a>.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_add_logged_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;A&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multi_id;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg_id;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> message_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>multi_id</code>: 동일한 메시지 형식에 여러 인스턴스가 있을 수 있습니다(예: 시스템에 동일한 유형의 센서가 두 개 있는 경우). 기본 및 첫 번째 인스턴스는 0이어야 합니다.</li><li><code>msg_id</code>: unique id to match <a href="#d-logged-data-message">Logged data Message</a> data. 처음 사용할 때는 이것을 0으로 설정한 다음 증가시켜야 합니다. <ul><li>The same <code>msg_id</code> must not be used twice for different subscriptions.</li></ul></li><li><code>message_name</code>: 구독할 메시지 이름입니다. Must match one of the <a href="#f-format-message">Format Message</a> definitions.</li></ul><h4 id="r-unsubscription-message" tabindex="-1"><code>R</code>: Unsubscription Message <a class="header-anchor" href="#r-unsubscription-message" aria-label="Permalink to &quot;\`R\`: Unsubscription Message&quot;">​</a></h4><p>Unsubscribe a message, to mark that it will not be logged anymore (not used currently).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_remove_logged_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;R&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg_id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="d-logged-data-message" tabindex="-1">&#39;D&#39;: Logged Data Message <a class="header-anchor" href="#d-logged-data-message" aria-label="Permalink to &quot;&#39;D&#39;: Logged Data Message&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_data_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;D&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg_id;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>msg_id</code>: as defined by a <a href="#a-subscription-message">Subscription Message</a></li><li><code>data</code> contains the logged binary message as defined by <a href="#f-format-message">Format Message</a></li></ul><p>패딩 필드의 특수 처리에 대해서는 위를 참고하십시오.</p><h4 id="l-logged-string-message" tabindex="-1">&#39;L&#39;: Logged String Message <a class="header-anchor" href="#l-logged-string-message" aria-label="Permalink to &quot;&#39;L&#39;: Logged String Message&quot;">​</a></h4><p>Logged string message, i.e. <code>printf()</code> output.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_logging_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;L&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log_level;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timestamp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>timestamp</code>: in microseconds</li><li><code>log_level</code>: same as in the Linux kernel:</li></ul><table><thead><tr><th>이름</th><th>레벨</th><th>설명</th></tr></thead><tbody><tr><td>EMERG</td><td>&#39;0&#39;</td><td>시스템 사용 불가</td></tr><tr><td>ALERT</td><td>&#39;1&#39;</td><td>즉시 조치</td></tr><tr><td>CRIT</td><td>&#39;2&#39;</td><td>임계 조건</td></tr><tr><td>ERR</td><td>&#39;3&#39;</td><td>오류 조건</td></tr><tr><td>WARNING</td><td>&#39;4&#39;</td><td>경고 조건</td></tr><tr><td>NOTICE</td><td>&#39;5&#39;</td><td>정상적이지만 중요한 상태</td></tr><tr><td>INFO</td><td>&#39;6&#39;</td><td>정보 제공</td></tr><tr><td>DEBUG</td><td>&#39;7&#39;</td><td>디버그 수준 메시지</td></tr></tbody></table><h4 id="c-tagged-logged-string-message" tabindex="-1">&#39;C&#39;: Tagged Logged String Message <a class="header-anchor" href="#c-tagged-logged-string-message" aria-label="Permalink to &quot;&#39;C&#39;: Tagged Logged String Message&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_logging_tagged_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;C&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log_level;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timestamp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[header.msg_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><p><code>tag</code>: 기록된 메시지 문자열의 소스를 나타내는 ID입니다. 시스템 아키텍처에 따라 프로세스, 스레드 또는 클래스를 나타낼 수 있습니다.</p><ul><li>For example, a reference implementation for an onboard computer running multiple processes to control different payloads, external disks, serial devices etc can encode these process identifiers using a <code>uint16_t enum</code> into the <code>tag</code> attribute of struct as follows:</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class ulog_tag : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  unassigned,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mavlink_handler,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ppk_handler,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  camera_handler,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ptp_handler,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serial_handler,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watchdog,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  io_service,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cbuf,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ulg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p><code>timestamp</code>: in microseconds</p></li><li><p><code>log_level</code>: same as in the Linux kernel:</p></li></ul><table><thead><tr><th>이름</th><th>레벨</th><th>설명</th></tr></thead><tbody><tr><td>EMERG</td><td>&#39;0&#39;</td><td>시스템 사용 불가</td></tr><tr><td>ALERT</td><td>&#39;1&#39;</td><td>즉시 조치</td></tr><tr><td>CRIT</td><td>&#39;2&#39;</td><td>임계 조건</td></tr><tr><td>ERR</td><td>&#39;3&#39;</td><td>오류 조건</td></tr><tr><td>WARNING</td><td>&#39;4&#39;</td><td>경고 조건</td></tr><tr><td>NOTICE</td><td>&#39;5&#39;</td><td>정상적이지만 중요한 상태</td></tr><tr><td>INFO</td><td>&#39;6&#39;</td><td>정보 제공</td></tr><tr><td>DEBUG</td><td>&#39;7&#39;</td><td>디버그 수준 메시지</td></tr></tbody></table><h4 id="s-synchronization-message" tabindex="-1">&#39;S&#39;: Synchronization message <a class="header-anchor" href="#s-synchronization-message" aria-label="Permalink to &quot;&#39;S&#39;: Synchronization message&quot;">​</a></h4><p>Synchronization message so that a reader can recover from a corrupt message by searching for the next sync message.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_sync_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;S&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sync_magic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>sync_magic</code>: [0x2F, 0x73, 0x13, 0x20, 0x25, 0x0C, 0xBB, 0x12]</li></ul><h4 id="o-dropout-message" tabindex="-1">&#39;O&#39;: Dropout message <a class="header-anchor" href="#o-dropout-message" aria-label="Permalink to &quot;&#39;O&#39;: Dropout message&quot;">​</a></h4><p>Mark a dropout (lost logging messages) of a given duration in ms.</p><p>장치가 충분히 빠르지 않은 경우에는 손실이 발생할 수 있습니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_dropout_s {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message_header_s header;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // msg_type = &#39;O&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="messages-shared-with-the-definitions-section" tabindex="-1">Messages shared with the Definitions Section <a class="header-anchor" href="#messages-shared-with-the-definitions-section" aria-label="Permalink to &quot;Messages shared with the Definitions Section&quot;">​</a></h4><p>Since the Definitions and Data Sections use the same message header format, they also share the same messages listed below:</p><ul><li><a href="#i-information-message">Information Message</a>.</li><li><a href="#m-multi-information-message">Multi Information Message</a></li><li><a href="#p-parameter-message">Parameter Message</a><ul><li>For the <em>Data</em> section, the Parameter Message is used when the parameter value changes</li></ul></li><li><a href="#q-default-parameter-message">Default Parameter Message</a></li></ul><h2 id="파서-요구-사항" tabindex="-1">파서 요구 사항 <a class="header-anchor" href="#파서-요구-사항" aria-label="Permalink to &quot;파서 요구 사항&quot;">​</a></h2><p>유효한 ULog 파서는 요구 사항은 다음과 같습니다.</p><ul><li>Must ignore unknown messages (but it can print a warning)</li><li>미래의/알 수 없는 파일 형식 버전도 구문 분석합니다(하지만 경고를 인쇄할 수 있음).</li><li>Must refuse to parse a log which contains unknown incompatibility bits set (<code>incompat_flags</code> of <a href="#b-flag-bits-message">Flag Bits Message</a>), meaning the log contains breaking changes that the parser cannot handle.</li><li>파서는 메시지 중간에 갑자기 끝나는 로그를 올바르게 처리할 수 있어야 합니다. 완료되지 않은 메시지는 무시하여야 합니다.</li><li>추가된 데이터의 경우: 파서는 데이터 섹션이 존재한다고 가정할 수 있습니다. 즉 오프셋은 정의 섹션 뒤의 위치를 가리킵니다. <ul><li>추가된 데이터는 일반 데이터 섹션의 일부인 것처럼 처리하여야 합니다.</li></ul></li></ul><h2 id="known-parser-implementations" tabindex="-1">Known Parser Implementations <a class="header-anchor" href="#known-parser-implementations" aria-label="Permalink to &quot;Known Parser Implementations&quot;">​</a></h2><ul><li>PX4-오토파일럿: C++ <ul><li><a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/modules/logger" target="_blank" rel="noreferrer">로거 모듈</a></li><li><a href="https://github.com/PX4/PX4-Autopilot/tree/release/1.15/src/modules/replay" target="_blank" rel="noreferrer">재생 모듈</a></li><li><a href="https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/hardfault_log" target="_blank" rel="noreferrer">hardfault_log 모듈</a>: hardfault 충돌 데이터를 추가합니다.</li></ul></li><li><a href="https://github.com/PX4/pyulog" target="_blank" rel="noreferrer">pyulog</a>: python, ULog reader and writer library with CLI scripts.</li><li><a href="https://github.com/PX4/ulog_cpp" target="_blank" rel="noreferrer">ulog_cpp</a>: C++, ULog reader and writer library.</li><li><a href="https://github.com/PX4/FlightPlot" target="_blank" rel="noreferrer">FlightPlot</a>: 자바, 로그 플로터</li><li><a href="https://github.com/mavlink/mavlink" target="_blank" rel="noreferrer">MAVLink</a>: MAVLink를 통한 ULog 스트리밍용 메시지(적어도 잘린 메시지의 경우 데이터 추가는 지원되지 않습니다.)</li><li><a href="https://github.com/mavlink/qgroundcontrol" target="_blank" rel="noreferrer">QGroundControl</a>: C++, MAVLink를 통한 ULog 스트리밍 및 GeoTagging에 대한 최소한의 구문 분석</li><li><a href="https://github.com/01org/mavlink-router" target="_blank" rel="noreferrer">mavlink-router</a>: C++, MAVLink를 통한 ULog 스트리밍</li><li><a href="https://github.com/ecmnet/MAVGCL" target="_blank" rel="noreferrer">MAVGAnalysis</a>: Java, MAVLink를 통한 ULog 스트리밍 및 플로팅 및 분석용 파서</li><li><a href="https://github.com/facontidavide/PlotJuggler" target="_blank" rel="noreferrer">PlotJuggler</a>: 로그 및 시계열을 플롯하는 C++/Qt 응용 프로그램입니다. 버전 2.1.3부터 ULog를 지원합니다.</li><li><a href="https://github.com/maxsun/ulogreader" target="_blank" rel="noreferrer">ulogreader</a>: Javascript, ULog 리더 및 파서는 JSON 개체 형식의 로그를 출력합니다.</li><li><a href="https://github.com/foxglove/studio" target="_blank" rel="noreferrer">Foxglove Studio</a>: an integrated visualization and diagnosis tool for robotics (Typescript ULog parser: <a href="https://github.com/foxglove/ulog" target="_blank" rel="noreferrer">https://github.com/foxglove/ulog</a>).</li></ul><h2 id="파일-형식-버전-이력" tabindex="-1">파일 형식 버전 이력 <a class="header-anchor" href="#파일-형식-버전-이력" aria-label="Permalink to &quot;파일 형식 버전 이력&quot;">​</a></h2><h3 id="버전-2의-변경-사항" tabindex="-1">버전 2의 변경 사항 <a class="header-anchor" href="#버전-2의-변경-사항" aria-label="Permalink to &quot;버전 2의 변경 사항&quot;">​</a></h3><ul><li>Addition of <a href="#m-multi-information-message">Multi Information Message</a> and <a href="#b-flag-bits-message">Flag Bits Message</a> and the ability to append data to a log. <ul><li>기존 로그에 충돌 데이터를 추가하는 데 사용됩니다.</li><li>메시지 중간에 잘린 로그에 데이터가 추가되면, 버전 1 파서로 파싱할 수 없습니다.</li></ul></li><li>그 외의 파서가 알 수 없는 메시지를 무시하면, 순방향 및 역방향 호환성이 제공됩니다.</li></ul>`,114),l=[n];function h(r,d,o,p,g,c){return a(),e("div",null,l)}const m=s(t,[["render",h]]);export{u as __pageData,m as default};
