import{_ as s,c as e,o as a,ab as i}from"./chunks/framework.CUflZczI.js";const k=JSON.parse('{"title":"外部模块（Out-of-Tree）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced/out_of_tree_modules.md","filePath":"zh/advanced/out_of_tree_modules.md"}'),t={name:"zh/advanced/out_of_tree_modules.md"},l=i(`<h1 id="外部模块-out-of-tree" tabindex="-1">外部模块（Out-of-Tree） <a class="header-anchor" href="#外部模块-out-of-tree" aria-label="Permalink to &quot;外部模块（Out-of-Tree）&quot;">​</a></h1><p>外部模块为开发人员提供了一种便捷的机制，可以管理/分组他们想要添加（或更新）PX4 固件的专有模块。 外部模块可以使用与内部模块相同的includes，并可以通过uORB与内部模块交互。</p><p>本主题说明如何将外部（“out of tree”）模块添加到 PX4 编译中。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们鼓励您在可能的情况下将您的更改贡献到 PX4 !</p></div><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><p>要创建外部模块：</p><ul><li><p>创建用于分组外部模块的_外部目录_文件夹</p><ul><li>这个可以放在<strong>PX4-Autopilot</strong>目录树以外的任何地方。</li><li>它必须具有与<strong>PX4-Autopilot</strong>相同的目录结构（即必须包含<strong>src</strong>目录）。</li><li>稍后我们使用<code>EXTERNAL_MODULES_LOCATION</code>来引用此目录。</li></ul></li><li><p>将现有模块（例如<strong>examples/px4_simple_app</strong>）复制到外部目录，或直接创建新模块。</p></li><li><p>重命名模块（包括在<strong>CMakeLists.txt</strong>中的<code>MODULE</code>），或者从 PX4-Autopilot <em>cmake</em> 编译配置中移除。 这是为了避免与内部模块发生冲突。</p></li><li><p>在外部目录中添加<strong>CMakeLists.txt</strong>文件，内容为：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_module_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules/&lt;new_module&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div></li><li><p>在<code>px4_add_module()</code>中添加一行 <code>EXTERNAL</code> 到 <code>modules&lt;new_module&gt;/CMakeLists.txt</code> 中，例如:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">px4_add_module(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MODULE modules__test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MAIN test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  STACK_MAIN 2000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SRCS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      px4_simple_app.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  DEPENDS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      platforms__common</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EXTERNAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span></code></pre></div></li></ul><h2 id="out-of-tree-uorb-消息定义" tabindex="-1">Out-of-Tree uORB 消息定义 <a class="header-anchor" href="#out-of-tree-uorb-消息定义" aria-label="Permalink to &quot;Out-of-Tree uORB 消息定义&quot;">​</a></h2><p>树外uORB消息将在与正常uORB消息相同的位置生成。 The out-of-tree uORB messages will be generated in the same locations as the normal uORB messages. The uORB topic headers are generated in <code>&lt;build_dir&gt;/uORB/topics/</code>, and the message source files are generated in <code>&lt;build_dir&gt;/msg/topics_sources/</code>.</p><ul><li><p>将所有新消息定义放在 <code>$EXTERNAL_MODULES_LOCATION/msg</code> 目录中。 Place all new message definitions within the <code>$EXTERNAL_MODULES_LOCATION/msg</code> directory. The format of these new out-of-tree message definitions are the same as for any other <a href="./../middleware/uorb.html#adding-a-new-topic">uORB message definition</a>.</p></li><li><p>将以下内容添加文件<code>$EXTERNAL_MODULES_LOCATION/msg/CMakeLists.txt</code>：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_msg_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message1&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message2&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message3&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><p>其中<code>&lt;message#&gt;.msg </code>是要处理并用于生成 uORB 消息的 uORB 消息定义文件的名称。</p></li></ul><p>树外 uORB 消息将在与正常 uORB 消息相同的位置生成。 uORB主题标题在 <code>&lt;build_dir&gt;/uORB/topics/</code>中生成， 消息源文件由 生成于 <code>&lt;build_dir&gt;/msg/topics_sources/</code>。</p><p>新的 uORB 消息可以像任何其他 uORB 消息一样使用，如<a href="./../middleware/uorb.html#adding-a-new-topic">这里</a>所述。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>树外的 uORB 消息定义不能和普通的 uORB 消息名字一样。 Any other build target can be used, but the build directory must not yet exist. If it already exists, you can also just set the <em>cmake</em> variable in the build folder.</p><h2 id="构建外部模块和-uorb-消息" tabindex="-1">构建外部模块和 uORB 消息 <a class="header-anchor" href="#构建外部模块和-uorb-消息" aria-label="Permalink to &quot;构建外部模块和 uORB 消息&quot;">​</a></h2><p>执行 <code>make px4_sitl EXTERNAL_MODULES_LOCATION=&lt;path&gt;</code>。</p><p>任何其他构建目标都可以使用，但构建目录尚不存在。 如果它已经存在，您还可以在构建文件夹中设置_cmake_变量。</p><p>对于随后的递增版本 <code>EXTERNAL_MODULES_LOCATION</code> 无需指定。</p></div>`,13),n=[l];function o(p,d,c,r,h,u){return a(),e("div",null,n)}const g=s(t,[["render",o]]);export{k as __pageData,g as default};
