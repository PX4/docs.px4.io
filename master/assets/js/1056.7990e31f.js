(window.webpackJsonp=window.webpackJsonp||[]).push([[1056],{1479:function(t,a,e){"use strict";e.r(a);var s=e(19),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"모듈-참조-드라이버"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#모듈-참조-드라이버"}},[t._v("#")]),t._v(" 모듈 참조: 드라이버")]),t._v(" "),e("p",[t._v("하위 카테고리:")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/ko/modules/modules_driver_imu.html"}},[t._v("관성 센서")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ko/modules/modules_driver_distance_sensor.html"}},[t._v("거리 센서")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ko/modules/modules_driver_airspeed_sensor.html"}},[t._v("항속 센서")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ko/modules/modules_driver_baro.html"}},[t._v("기압계")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ko/modules/modules_driver_optical_flow.html"}},[t._v("광류 센서")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ko/modules/modules_driver_magnetometer.html"}},[t._v("지자계")])],1)]),t._v(" "),e("h2",{attrs:{id:"adc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adc"}},[t._v("#")]),t._v(" adc")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/adc/board_adc",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/adc/board_adc"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("ADC 드라이버")]),t._v(" "),e("p",[e("a",{attrs:{id:"adc_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("adc <command> [arguments...]\n Commands:\n   start\n\n   test\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"ads1115"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ads1115"}},[t._v("#")]),t._v(" ads1115")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/adc/ads1115",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/adc/ads1115"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"ads1115_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-2"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ads1115 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 72\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"atxxxx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#atxxxx"}},[t._v("#")]),t._v(" atxxxx")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/osd/atxxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/osd/atxxxx"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-2"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("예를 들어 OmnibusF4SD 보드에 장착된 ATXXXX 칩용 OSD 드라이버.")]),t._v(" "),e("p",[t._v("OSD_ATXXXX_CFG 매개변수로 활성화합니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"atxxxx_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-3"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("atxxxx <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select index (for external SPI)\n                 default: 1\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"batmon"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#batmon"}},[t._v("#")]),t._v(" batmon")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/smart_battery/batmon",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/smart_battery/batmon"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-3"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("BatMon 지원 스마트 배터리와 SMBUS 통신용 드라이버 설정/사용 정보: https://rotoye.com/batmon-tutorial/")]),t._v(" "),e("h3",{attrs:{id:"예"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("주소 0x0B에서 시작하려면 버스 4에서")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batmon start -X -a 11 -b 4\n")])])]),e("p",[e("a",{attrs:{id:"batmon_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-4"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batmon <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 11\n\n   man_info      Prints manufacturer info.\n\n   suspend       Suspends the driver from rescheduling the cycle.\n\n   resume        Resumes the driver from suspension.\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"batt-smbus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#batt-smbus"}},[t._v("#")]),t._v(" batt_smbus")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/batt_smbus",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/batt_smbus"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-4"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("BQ40Z50 연료 게이지 IC용 스마트 배터리 드라이버.")]),t._v(" "),e("h3",{attrs:{id:"예-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-2"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("매개변수를 설정하기 위해 플래시에 쓰기. 주소, number_of_bytes, byte0, ..., byteN")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batt_smbus -X write_flash 19069 2 27 0\n")])])]),e("p",[e("a",{attrs:{id:"batt_smbus_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-5"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("batt_smbus <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 11\n\n   man_info      Prints manufacturer info.\n\n   unseal        Unseals the devices flash memory to enable write_flash\n                 commands.\n\n   seal          Seals the devices flash memory to disbale write_flash commands.\n\n   suspend       Suspends the driver from rescheduling the cycle.\n\n   resume        Resumes the driver from suspension.\n\n   write_flash   Writes to flash. The device must first be unsealed with the\n                 unseal command.\n     [address]   The address to start writing.\n     [number of bytes] Number of bytes to send.\n     [data[0]...data[n]] One byte of data at a time separated by spaces.\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"bst"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bst"}},[t._v("#")]),t._v(" bst")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/telemetry/bst",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/telemetry/bst"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"bst_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-6"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("bst <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 118\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"dshot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dshot"}},[t._v("#")]),t._v(" dshot")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/dshot",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/dshot"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-5"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이것은 DShot 출력 드라이버입니다. fmu 드라이버와 유사하며, PWM 대신 ESC 통신 프로토콜로 DShot을 사용하기 위하여 사용할 수 있습니다.")]),t._v(" "),e("p",[t._v("다음을 지원합니다.")]),t._v(" "),e("ul",[e("li",[t._v("DShot150, DShot300, DShot600, DShot1200")]),t._v(" "),e("li",[t._v("별도의 UART를 통한 텔레메트리와 esc_status 메시지로 게시")]),t._v(" "),e("li",[t._v("CLI를 통해 DShot 명령 보내기")])]),t._v(" "),e("h3",{attrs:{id:"예-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-3"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("모터 1 영구 역회전 :")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dshot reverse -m 1\ndshot save -m 1\n")])])]),e("p",[t._v("저장 후, 반대 방향은 정상 방향으로 간주됩니다. 동일한 명령을 반복하면, 회전 방향을 반전합니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"dshot_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-7"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dshot <command> [arguments...]\n Commands:\n   start         Start the task (without any mode set, use any of the mode_*\n                 cmds)\n\n All of the mode_* commands will start the module if not running already\n\n   mode_gpio\n\n   mode_pwm      Select all available pins as PWM\n\n   mode_pwm14\n\n   mode_pwm12\n\n   mode_pwm8\n\n   mode_pwm6\n\n   mode_pwm5\n\n   mode_pwm5cap1\n\n   mode_pwm4\n\n   mode_pwm4cap1\n\n   mode_pwm4cap2\n\n   mode_pwm3\n\n   mode_pwm3cap1\n\n   mode_pwm2\n\n   mode_pwm2cap2\n\n   mode_pwm1\n\n   telemetry     Enable Telemetry on a UART\n     <device>    UART device\n\n   reverse       Reverse motor direction\n     [-m <val>]  Motor index (1-based, default=all)\n\n   normal        Normal motor direction\n     [-m <val>]  Motor index (1-based, default=all)\n\n   save          Save current settings\n     [-m <val>]  Motor index (1-based, default=all)\n\n   3d_on         Enable 3D mode\n     [-m <val>]  Motor index (1-based, default=all)\n\n   3d_off        Disable 3D mode\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep1         Send Beep pattern 1\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep2         Send Beep pattern 2\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep3         Send Beep pattern 3\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep4         Send Beep pattern 4\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep5         Send Beep pattern 5\n     [-m <val>]  Motor index (1-based, default=all)\n\n   esc_info      Request ESC information\n     -m <val>    Motor index (1-based)\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"fake-gps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fake-gps"}},[t._v("#")]),t._v(" fake_gps")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/examples/fake_gps",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_gps"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-6"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[e("a",{attrs:{id:"fake_gps_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-8"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fake_gps <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"fake-imu"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fake-imu"}},[t._v("#")]),t._v(" fake_imu")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/examples/fake_imu",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_imu"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-7"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[e("a",{attrs:{id:"fake_imu_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-9"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fake_imu <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"fake-magnetometer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fake-magnetometer"}},[t._v("#")]),t._v(" fake_magnetometer")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/examples/fake_magnetometer",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_magnetometer"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-8"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("가짜 자력계(sensor_mag)로 지구 자기장을 게시합니다. vehicle_attitude와 vehicle_gps_position이 필요합니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"fake_magnetometer_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-10"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fake_magnetometer <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"gps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gps"}},[t._v("#")]),t._v(" gps")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/gps",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/gps"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-9"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("장치와의 통신을 처리하고 uORB를 통해 위치를 게시하는 GPS 드라이버 모듈입니다. 여러 프로토콜(장치 공급업체)을 지원하며, 기본적으로 적절한 프로토콜을 자동으로 선택합니다.")]),t._v(" "),e("p",[t._v("모듈은 "),e("code",[t._v("-e")]),t._v(" 매개변수를 통하여 지정된 보조 GPS 장치를 지원합니다. 위치는 두 번째 uORB 주제 인스턴스에 게시되지만, 현재 시스템의 나머지 부분에서는 사용되지 않습니다(그러나 데이터는 비교용으로 사용할 수 있도록 기록됩니다).")]),t._v(" "),e("h3",{attrs:{id:"구현"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#구현"}},[t._v("#")]),t._v(" 구현")]),t._v(" "),e("p",[t._v("데이터를 폴링하는 각 장치에 대한 스레드가 존재합니다. GPS 프로토콜 클래스는 다른 프로젝트에서도 사용할 수 있도록 콜백으로 구현됩니다(예: QGroundControl에서도 사용).")]),t._v(" "),e("h3",{attrs:{id:"예-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-4"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("2개의 GPS 장치 (/dev/ttyS3의 기본 GPS 및 /dev/ttyS4의 보조 GPS)를 시작합니다:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gps start -d /dev/ttyS3 -e /dev/ttyS4\n")])])]),e("p",[t._v("GPS 장치를 재시작합니다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gps reset warm\n")])])]),e("p",[e("a",{attrs:{id:"gps_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-11"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("gps <command> [arguments...]\n Commands:\n   start\n     [-d <val>]  GPS device\n                 values: <file:dev>, default: /dev/ttyS3\n     [-b <val>]  Baudrate (can also be p:<param_name>)\n                 default: 0\n     [-e <val>]  Optional secondary GPS device\n                 values: <file:dev>\n     [-g <val>]  Baudrate (secondary GPS, can also be p:<param_name>)\n                 default: 0\n     [-s]        Enable publication of satellite info\n     [-i <val>]  GPS interface\n                 values: spi|uart, default: uart\n     [-j <val>]  secondary GPS interface\n                 values: spi|uart, default: uart\n     [-p <val>]  GPS Protocol (default=auto select)\n                 values: ubx|mtk|ash|eml|fem\n\n   stop\n\n   status        print status info\n\n   reset         Reset GPS device\n     cold|warm|hot Specify reset type\n")])])]),e("h2",{attrs:{id:"ina226"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ina226"}},[t._v("#")]),t._v(" ina226")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/power_monitor/ina226",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina226"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-10"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("INA226 전력 모니터용 드라이버.")]),t._v(" "),e("p",[t._v("각 인스턴스에 별도의 버스 또는 I2C 주소가 있는 경우에는 이 드라이버의 여러 인스턴스를 동시에 실행할 수 있습니다.")]),t._v(" "),e("p",[t._v("예를 들어, 하나의 인스턴스는 버스 2의 주소 0x41에서 실행될 수 있고, 다른 인스턴스는 버스 2의 주소 0x43에서 실행할 수 있습니다.")]),t._v(" "),e("p",[t._v("INA226 모듈에 전원이 공급되지 않으면, 기본적으로 드라이버 초기화가 실패합니다. 이를 변경하려면, -f 플래그를 사용하십시오. 이 플래그가 설정되면, 초기화에 실패하면 드라이버는 0.5초마다 초기화를 계속 시도합니다. 이 플래그를 설정하면, 드라이버가 시작된 후 배터리를 연결하면 작동합니다. 이 플래그가 설정되지 않은 경우에는, 드라이버를 시작하기 전에 배터리를 연결해야 합니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"ina226_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-12"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ina226 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 65\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 2)\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"iridiumsbd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iridiumsbd"}},[t._v("#")]),t._v(" iridiumsbd")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/telemetry/iridiumsbd",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/telemetry/iridiumsbd"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-11"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("IridiumSBD 드라이버.")]),t._v(" "),e("p",[t._v("다른 모듈에서 통신용으로 사용할 수 있는 가상 직렬 포트를 생성합니다(예: mavlink).")]),t._v(" "),e("p",[e("a",{attrs:{id:"iridiumsbd_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-13"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-13"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("iridiumsbd <command> [arguments...]\n Commands:\n   start\n     -d <val>    Serial device\n                 values: <file:dev>\n     [-v]        Enable verbose output\n\n   test\n     [s|read|AT <cmd>] Test command\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"irlock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#irlock"}},[t._v("#")]),t._v(" irlock")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/irlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/irlock"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"irlock_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-14"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-14"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("irlock <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 84\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"linux-pwm-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-pwm-out"}},[t._v("#")]),t._v(" linux_pwm_out")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/linux_pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/linux_pwm_out"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-12"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("보드별 백엔드를 구현한 Linux PWM 출력 드라이버.")]),t._v(" "),e("p",[e("a",{attrs:{id:"linux_pwm_out_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-15"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-15"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("linux_pwm_out <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"lsm303agr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lsm303agr"}},[t._v("#")]),t._v(" lsm303agr")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/magnetometer/lsm303agr",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/magnetometer/lsm303agr"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"lsm303agr_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-16"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-16"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("lsm303agr <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select index (for external SPI)\n                 default: 1\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-R <val>]  Rotation\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"newpixel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#newpixel"}},[t._v("#")]),t._v(" newpixel")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/lights/neopixel",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/neopixel"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-13"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-13"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이 모듈은 네오픽셀 직렬 LED에 인터페이싱을 구동합니다.")]),t._v(" "),e("h3",{attrs:{id:"예-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-5"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("보통 다음 명령으로 시작합니다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("neopixel -n 8\n")])])]),e("p",[t._v("사용 가능한 모든 LED를 구동합니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"newpixel_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-17"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-17"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("newpixel <command> [arguments...]\n Commands:\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"paw3902"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#paw3902"}},[t._v("#")]),t._v(" paw3902")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/optical_flow/paw3902",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/paw3902"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"paw3902_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-18"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-18"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("paw3902 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select index (for external SPI)\n                 default: 1\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-Y <val>]  custom yaw rotation (degrees)\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pca9685"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pca9685"}},[t._v("#")]),t._v(" pca9685")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/pca9685",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pca9685"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"pca9685_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-19"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-19"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pca9685 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 64\n\n   reset\n\n   test          enter test mode\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pca9685-pwm-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pca9685-pwm-out"}},[t._v("#")]),t._v(" pca9685_pwm_out")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/pca9685_pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pca9685_pwm_out"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-14"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-14"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이 모듈은 PCA9685 칩으로 PWM 펄스를 생성합니다.")]),t._v(" "),e("p",[t._v("이것은 Actuator_controls 토픽을 듣고 믹싱을 하고 PWM을 출력합니다.")]),t._v(" "),e("h3",{attrs:{id:"구현-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#구현-2"}},[t._v("#")]),t._v(" 구현")]),t._v(" "),e("p",[t._v("이 모듈은 ModuleBase와 OutputModuleInterface에 의존합니다. IIC 통신은 CDev::I2C를 기반으로 합니다.")]),t._v(" "),e("h3",{attrs:{id:"예-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-6"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("보통 다음 명령으로 시작합니다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pca9685_pwm_out start -a 64 -b 1\n")])])]),e("p",[e("code",[t._v("mixer")]),t._v(" 명령을 사용하여, 믹서 파일을 로드합니다. "),e("code",[t._v("mixer load /dev/pwm_outputX etc/mixers/quad_x.main.mix")]),t._v(" 이 드라이버가 실행 중일 때 "),e("code",[t._v("pca9685_pwm_out status")]),t._v("를 실행하여 숫자 X를 얻을 수 있습니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"pca9685_pwm_out_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-20"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-20"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pca9685_pwm_out <command> [arguments...]\n Commands:\n   start         Start the task\n     [-a <val>]  device address on this bus\n                 default: 64\n     [-b <val>]  bus that pca9685 is connected to\n                 default: 1\n     [-r <val>]  schedule rate limit\n                 default: 400\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pcf8583"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pcf8583"}},[t._v("#")]),t._v(" pcf8583")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/rpm/pcf8583",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/rpm/pcf8583"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"pcf8583_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-21"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-21"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pcf8583 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 80\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pmw3901"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pmw3901"}},[t._v("#")]),t._v(" pmw3901")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/optical_flow/pmw3901",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/pmw3901"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"pmw3901_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-22"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-22"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pmw3901 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select index (for external SPI)\n                 default: 1\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-R <val>]  Rotation\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pwm-out"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pwm-out"}},[t._v("#")]),t._v(" pwm_out")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pwm_out"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-15"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-15"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이 모듈은 출력을 구동하고 입력 핀을 읽는 역할을 합니다. 별도의 IO 칩이 없는 보드(예: Pixracer)의 경우에는 메인 채널을 사용합니다. IO 칩이 있는 보드(예: Pixhawk)에서는 AUX 채널을 사용하고, px4io 드라이버는 기본 채널에 사용됩니다.")]),t._v(" "),e("p",[t._v("이것은 Actuator_controls 토픽을 듣고 믹싱을 하고 PWM을 출력합니다.")]),t._v(" "),e("p",[t._v("모듈은 mode_* 명령어로 설정됩니다. 이 명령으로 드라이버에 할당할 최초의 N개의 핀을 정의합니다. 예를 들어, mode_pwm4를 사용하면 핀 5와 6을 카메라 트리거 드라이버나 PWM 거리 측정기 드라이버에서 사용할 수 있습니다. 또는 pwm_out을 캡처 모드 중 하나로 시작한 다음, 드라이버가 ioctl 호출로 캡처 콜백을 등록할 수 있습니다.")]),t._v(" "),e("h3",{attrs:{id:"구현-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#구현-3"}},[t._v("#")]),t._v(" 구현")]),t._v(" "),e("p",[t._v("기본적으로 모듈은 uORB actuator_controls 주제에 대한 콜백을 사용하여 작업 대기열에서 실행됩니다.")]),t._v(" "),e("h3",{attrs:{id:"예-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-7"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("보통 다음 명령으로 시작합니다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pwm_out mode_pwm\n")])])]),e("p",[t._v("사용 가능한 모든 PIN을 구동합니다.")]),t._v(" "),e("p",[t._v("입력(상승 및 하강 에지)을 캡처하고, 콘솔에 인쇄합니다. 캡처 모드 중 하나에서 pwm_out을 시작합니다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pwm_out mode_pwm3cap1\n")])])]),e("p",[t._v("이렇게 하면 4번째 핀에서 캡처할 수 있습니다. 다음 명령어를 실행하십시오.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pwm_out test\n")])])]),e("p",[t._v("추가 구성(PWM 속도, 레벨, ...)에는 "),e("code",[t._v("pwm")]),t._v(" 명령을 사용하고, 믹서 파일을 로드하려면 "),e("code",[t._v("mixer")]),t._v(" 명령을 사용하십시오.")]),t._v(" "),e("p",[e("a",{attrs:{id:"pwm_out_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-23"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-23"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pwm_out <command> [arguments...]\n Commands:\n   start         Start the task (without any mode set, use any of the mode_*\n                 cmds)\n\n All of the mode_* commands will start pwm_out if not running already\n\n   mode_gpio\n\n   mode_pwm      Select all available pins as PWM\n\n   mode_pwm14\n\n   mode_pwm12\n\n   mode_pwm8\n\n   mode_pwm6\n\n   mode_pwm5\n\n   mode_pwm5cap1\n\n   mode_pwm4\n\n   mode_pwm4cap1\n\n   mode_pwm4cap2\n\n   mode_pwm3\n\n   mode_pwm3cap1\n\n   mode_pwm2\n\n   mode_pwm2cap2\n\n   mode_pwm1\n\n   sensor_reset  Do a sensor reset (SPI bus)\n     [<ms>]      Delay time in ms between reset and re-enabling\n\n   peripheral_reset Reset board peripherals\n     [<ms>]      Delay time in ms between reset and re-enabling\n\n   i2c           Configure I2C clock rate\n     <bus_id> <rate> Specify the bus id (>=0) and rate in Hz\n\n   test          Test inputs and outputs\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"pwm-out-sim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pwm-out-sim"}},[t._v("#")]),t._v(" pwm_out_sim")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/pwm_out_sim",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pwm_out_sim"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-16"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-16"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("시뮬레이션된 PWM 출력용 드라이버입니다.")]),t._v(" "),e("p",[t._v("유일한 기능은 "),e("code",[t._v("actuator_control")]),t._v(" uORB 메시지를 가져와서 로드된 믹서와 혼합하고, 결과를 "),e("code",[t._v("actuator_output")]),t._v(" uORB 주제로 출력하는 것입니다.")]),t._v(" "),e("p",[t._v("SITL 및 HITL에서 사용됩니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"pwm_out_sim_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-24"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-24"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pwm_out_sim <command> [arguments...]\n Commands:\n   start         Start the module\n     [-m <val>]  Mode\n                 values: hil|sim, default: sim\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"px4flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#px4flow"}},[t._v("#")]),t._v(" px4flow")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/optical_flow/px4flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/px4flow"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"px4flow_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-25"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-25"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("px4flow <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 66\n     [-R <val>]  Rotation (default=downwards)\n                 default: 25\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"rc-input"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rc-input"}},[t._v("#")]),t._v(" rc_input")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/rc_input",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/rc_input"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-17"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-17"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이 모듈은 RC 입력 구문 분석과 프로토콜을 자동으로 선택합니다. 지원되는 프로토콜은 다음과 같습니다.")]),t._v(" "),e("ul",[e("li",[t._v("PPM")]),t._v(" "),e("li",[t._v("SBUS")]),t._v(" "),e("li",[t._v("DSM")]),t._v(" "),e("li",[t._v("SUMD")]),t._v(" "),e("li",[t._v("ST24")]),t._v(" "),e("li",[t._v("TBS Crossfire (CRSF)")])]),t._v(" "),e("p",[e("a",{attrs:{id:"rc_input_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-26"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-26"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rc_input <command> [arguments...]\n Commands:\n   start\n     [-d <val>]  RC device\n                 values: <file:dev>, default: /dev/ttyS3\n\n   bind          Send a DSM bind command (module must be running)\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"rgbled"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rgbled"}},[t._v("#")]),t._v(" rgbled")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/lights/rgbled_ncp5623c",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/rgbled_ncp5623c"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"rgbled_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-27"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-27"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("rgbled <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 57\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"roboclaw"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#roboclaw"}},[t._v("#")]),t._v(" roboclaw")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/roboclaw",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/roboclaw"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-18"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-18"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이 드라이버는 UART로 "),e("a",{attrs:{href:"http://downloads.basicmicro.com/docs/roboclaw_user_manual.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Roboclaw 모터 드라이버"),e("OutboundLink")],1),t._v("와 통신합니다. 두 가지 작업을 수행합니다.")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("actuator_controls_0")]),t._v(" UOrb 주제를 기반으로 모터를 제어합니다.")]),t._v(" "),e("li",[t._v("휠 인코더를 읽고 "),e("code",[t._v("wheel_encoders")]),t._v(" UOrb 주제에 원시 데이터를 게시합니다.")])]),t._v(" "),e("p",[t._v("이 드라이버를 사용하려면, Roboclaw를 패킷 직렬 모드(링크된 문서 참조)로 설정해야 하며, 문서에 표시된 대로 비행 컨트롤러의 UART 포트가 Roboclaw에 연결되어야 합니다. Pixhawk 4의 경우에는 "),e("code",[t._v("/dev/ttyS3")]),t._v("에 해당하는 "),e("code",[t._v("UART & I2C B")]),t._v(" 포트를 사용합니다.")]),t._v(" "),e("h3",{attrs:{id:"구현-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#구현-4"}},[t._v("#")]),t._v(" 구현")]),t._v(" "),e("p",[t._v("이 모듈의 메인 루프("),e("code",[t._v("RoboClaw.cpp::task_main()")]),t._v("에 있음)는 2가지 작업을 수행합니다.")]),t._v(" "),e("ol",[e("li",[t._v("Roboclaw가 사용 가능해지면, "),e("code",[t._v("actuator_controls_0")]),t._v(" 메시지를 Roboclaw에 작성하십시오.")]),t._v(" "),e("li",[t._v("일정한 속도로 Roboclaw에서 인코더 데이터를 읽습니다.")])]),t._v(" "),e("p",[t._v("UART의 지연 시간 때문에, 이 드라이버는 모든 단일 "),e("code",[t._v("actuator_controls_0")]),t._v(" 메시지를 즉시 Roboclaw에 쓰지 않습니다. 대신, "),e("code",[t._v("RBCLW_WRITE_PER")]),t._v(" 매개변수에 따라 속도가 제한됩니다.")]),t._v(" "),e("p",[t._v("시작시, 이 드라이버는 Roboclaw의 상태를 읽고 연결 여부를 확인합니다. 이 과정이 실패하면, 드라이버는 즉시 종료됩니다.")]),t._v(" "),e("h3",{attrs:{id:"예-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-8"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("이 드라이버를 시작하는 명령은 다음과 같습니다:")]),t._v(" "),e("p",[t._v("$ roboclaw start "),e("device",[e("baud")],1)],1),t._v(" "),e("p",[e("code",[t._v("<device>")]),t._v("은 UART 포트의 이름입니다. 픽스호크 4에서는 "),e("code",[t._v("/dev/ttyS3")]),t._v("입니다. "),e("code",[t._v("<baud>")]),t._v("는 초당 비트 전송율입니다.")]),t._v(" "),e("p",[t._v("사용할 수 있는 명령어는 다음과 같습니다:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ roboclaw start <device> <baud>")])]),t._v(" "),e("li",[e("code",[t._v("$ roboclaw status")])]),t._v(" "),e("li",[e("code",[t._v("$ roboclaw stop")])])]),t._v(" "),e("p",[e("a",{attrs:{id:"roboclaw_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-28"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-28"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("roboclaw <command> [arguments...]\n Commands:\n")])])]),e("h2",{attrs:{id:"safety-button"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#safety-button"}},[t._v("#")]),t._v(" safety_button")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/safety_button",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/safety_button"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-19"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-19"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이 모듈은 안전 버튼을 담당합니다. 안전 버튼을 빠르게 3번 누르면, GCS 페어링 요청이 실행됩니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"safety_button_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-29"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-29"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("safety_button <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"tone-alarm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tone-alarm"}},[t._v("#")]),t._v(" tone_alarm")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/tone_alarm",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/tone_alarm"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-20"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-20"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("이 모듈은 톤 알람을 담당합니다.")]),t._v(" "),e("p",[e("a",{attrs:{id:"tone_alarm_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-30"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-30"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("tone_alarm <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"vmount"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vmount"}},[t._v("#")]),t._v(" vmount")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/modules/vmount",target:"_blank",rel:"noopener noreferrer"}},[t._v("modules/vmount"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"설명-21"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#설명-21"}},[t._v("#")]),t._v(" 설명")]),t._v(" "),e("p",[t._v("마운트(짐벌) 콘트롤 드라이버입니다. 다양한 입력 방법(예: RC 또는 MAVLink)을 설정 출력(예: AUX 채널 또는 MAVLink)에 매핑합니다.")]),t._v(" "),e("p",[t._v("사용 방법은 "),e("a",{attrs:{href:"https://dev.px4.io/master/en/advanced/gimbal_control.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("gimbal_control"),e("OutboundLink")],1),t._v("을 참고하십시오.")]),t._v(" "),e("h3",{attrs:{id:"구현-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#구현-5"}},[t._v("#")]),t._v(" 구현")]),t._v(" "),e("p",[t._v("각 메소드는 자체 클래스에서 구현되며, 입출력에 대한 공통 기본 클래스가 있습니다. "),e("code",[t._v("ControlData")]),t._v(" 데이터 구조로 정의된 API를 통하여 연결됩니다. 이 방법은 각 입력 방법을 각 출력 방법과 함께 사용할 수 있고, 최소한의 노력으로 신규 입력/출력을 추가할 수 있습니다.")]),t._v(" "),e("h3",{attrs:{id:"예-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예-9"}},[t._v("#")]),t._v(" 예")]),t._v(" "),e("p",[t._v("고정 방위각을 설정한 출력 값을 시험합니다(그리고 다른 축은 0 값을 잡아줍니다):")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vmount stop\nvmount test yaw 30\n")])])]),e("p",[e("a",{attrs:{id:"vmount_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-31"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-31"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vmount <command> [arguments...]\n Commands:\n   start\n\n   test          Test the output: set a fixed angle for one axis (vmount must\n                 not be running)\n     roll|pitch|yaw <angle> Specify an axis and an angle in degrees\n\n   stop\n\n   status        print status info\n")])])]),e("h2",{attrs:{id:"voxlpm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#voxlpm"}},[t._v("#")]),t._v(" voxlpm")]),t._v(" "),e("p",[t._v("소스: "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/drivers/power_monitor/voxlpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/voxlpm"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{id:"voxlpm_usage"}})]),t._v(" "),e("h3",{attrs:{id:"사용법-32"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#사용법-32"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("voxlpm [arguments...]\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 68\n     [-T <val>]  Type\n                 values: VBATT|P5VDC|P12VDC, default: VBATT\n     [-k]        if initialization (probing) fails, keep retrying periodically\n\n   stop\n\n   status        print status info\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);