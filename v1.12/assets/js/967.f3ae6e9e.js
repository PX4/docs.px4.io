(window.webpackJsonp=window.webpackJsonp||[]).push([[967],{1976:function(e,t,a){"use strict";a.r(t);var s=a(19),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"git-예제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-예제"}},[e._v("#")]),e._v(" git 예제")]),e._v(" "),a("p",[a("a",{attrs:{id:"contributing_code"}})]),e._v(" "),a("h2",{attrs:{id:"px4에-코드-기여"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#px4에-코드-기여"}},[e._v("#")]),e._v(" PX4에 코드 기여")]),e._v(" "),a("p",[e._v("PX4의 기능 추가는 다음 절차를 따릅니다. 다음 예제를 따라 PX4에 기여 결과를 공유할 수 있습니다.")]),e._v(" "),a("ul",[a("li",[e._v("아직 Github에 계정이 없으면 "),a("a",{attrs:{href:"https://github.com/join",target:"_blank",rel:"noopener noreferrer"}},[e._v("가입"),a("OutboundLink")],1),e._v("하십시오.")]),e._v(" "),a("li",[e._v("펌웨어 코드를 복제(fork)하십시오("),a("a",{attrs:{href:"https://help.github.com/articles/fork-a-repo/#fork-an-example-repository",target:"_blank",rel:"noopener noreferrer"}},[e._v("이곳"),a("OutboundLink")],1),e._v(" 참고)")]),e._v(" "),a("li",[e._v("여러분의 계정으로 복제(fork)한 저장소를 로컬 컴퓨터로 가져오십시오"),a("br"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" ~/wherever/\n")])])])])]),e._v(" "),a("p",[e._v("git clone https://github.com/"),a("your",{attrs:{git:"",name:""}},[e._v("/Firmware.git")])],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("* 새 디렉터리로 이동, 초기화, 하위 모듈을 업데이트한 후, 원본 업스트림 펌웨어를 추가하십시오<br>\n```sh\ncd Firmware\ngit submodule update --init --recursive\ngit remote add upstream https://github.com/PX4/Firmware.git\n")])])]),a("ul",[a("li",[e._v("You should have now two remote repositories: One repository is called upstream that points to the PX4 Firmware, and one repository that points to your forked repository of the PX4 repository.")]),e._v(" "),a("li",[e._v("This can be checked with the following command:"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote -v\n")])])])]),e._v(" "),a("li",[e._v("Make the changes that you want to add to the current master.")]),e._v(" "),a("li",[e._v("Create a new branch with a meaningful name that represents your feature"),a("br"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your feature branch name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),e._v("You can verify that the push was successful by going to your forked repository in your browser: "),a("code",[e._v("https://github.com/<your git name>/Firmware.git")]),a("br"),e._v("\nThere you should see the message that a new branch has been pushed to your forked repository.")]),e._v(" "),a("li",[a("ul",[a("li",[e._v("Add your changes that you want to be part of the commit by adding the respective files"),a("br")])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("file name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),e._v("git add -p](http://nuclearsquid.com/writings/git-add/).")]),e._v(" "),a("li",[a("ul",[a("li",[e._v("Commit the added files with a meaningful message explaining your changes"),a("br")])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<your commit message>"')]),e._v("\n")])])])])]),e._v(" "),a("p",[e._v("For a good commit message, please refer to "),a("RouterLink",{attrs:{to:"/ko/contribute/"}},[e._v("Contributing")]),e._v(" section.")],1),e._v(" "),a("ul",[a("li",[a("ul",[a("li",[e._v("Some time might have passed and the "),a("a",{attrs:{href:"https://github.com/PX4/Firmware.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("upstream master"),a("OutboundLink")],1),e._v(" has changed. PX4 prefers a linear commit history and uses "),a("a",{attrs:{href:"https://git-scm.com/book/de/v1/Git-Branching-Rebasing",target:"_blank",rel:"noopener noreferrer"}},[e._v("git rebase"),a("OutboundLink")],1),e._v(". To include the newest changes from upstream in your local branch, switch to your master branch"),a("br")])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n")])])]),e._v("Then pull the newest commits from upstream master"),a("br"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull upstream master\n")])])]),e._v("Now your local master is up to date. Switch back to your feature branch"),a("br"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your feature branch name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),e._v("and rebase on your updated master"),a("br"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase master\n")])])])]),e._v(" "),a("li",[e._v("Now you can push your local commits to your forked repository"),a("br"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your feature branch name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])])]),e._v(" "),a("li",[e._v("You can verify that the push was successful by going to your forked repository in your browser: "),a("code",[e._v("https://github.com/<your git name>/PX4-Autopilot.git")]),a("br"),e._v(" There you should see the message that a new branch has been pushed to your forked repository.")]),e._v(" "),a("li",[e._v('Now it\'s time to create a pull request (PR). On the right hand side of the "new branch message" (see one step before), you should see a green button saying "Compare & Create Pull Request". Then it should list your changes and you can (must) add a meaningful title (in case of a one commit PR, it\'s usually the commit message) and message ('),a("span",{staticStyle:{color:"orange"}},[e._v("explain what you did for what reason")]),e._v(". Check "),a("a",{attrs:{href:"https://github.com/PX4/Firmware/pulls",target:"_blank",rel:"noopener noreferrer"}},[e._v("other pull requests"),a("OutboundLink")],1),e._v(" for comparison)")]),e._v(" "),a("li",[e._v("You're done! Responsible members of PX4 will now have a look at your contribution and decide if they want to integrate it. Check if they have questions on your changes every once in a while.")])]),e._v(" "),a("h2",{attrs:{id:"get-a-specific-release"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-a-specific-release"}},[e._v("#")]),e._v(" Get a Specific Release")]),e._v(" "),a("p",[e._v("If you prefer having a GUI to add your files see "),a("a",{attrs:{href:"https://git-scm.com/book/en/v2/Git-in-Other-Environments-Graphical-Interfaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitk"),a("OutboundLink")],1),e._v(" or [")]),e._v(" "),a("ul",[a("li",[e._v("Clone the PX4-Autopilot repo and navigate into PX4-Autopilot directory:"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/PX4/PX4-Autopilot.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" PX4-Autopilot\n")])])])]),e._v(" "),a("li",[e._v("List all releases (tags)"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n")])])])])]),e._v(" "),a("p",[e._v("git pull upstream master")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("* Checkout code for particular tag (e.g. for tag 1.7.4beta)\n```sh\ngit checkout v1.7.4beta\n")])])]),a("h2",{attrs:{id:"update-submodule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-submodule"}},[e._v("#")]),e._v(" Update Submodule")]),e._v(" "),a("p",[e._v("There are several ways to update a submodule. Either you clone the repository or you go in the submodule directory and follow the same procedure as in "),a("a",{attrs:{href:"#Contributing-code-to-PX4"}},[e._v("Contributing code to PX4")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"do-a-pr-for-a-submodule-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#do-a-pr-for-a-submodule-update"}},[e._v("#")]),e._v(" Do a PR for a submodule update")]),e._v(" "),a("p",[e._v("This is required after you have done a PR for a submodule X repository and the bug-fix / feature-add is in the current master of submodule X. Since the Firmware still points to a commit before your update, a submodule pull request is required such that the submodule used by the Firmware points to the newest commit.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" Firmware\n")])])]),a("ul",[a("li",[e._v("Make a new branch that describes the fix / feature for the submodule update:"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b pr-some-fix\n")])])])]),e._v(" "),a("li",[e._v("Go to submodule subdirectory"),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("path to submodule"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])])]),e._v(" "),a("li",[e._v("PX4 submodule might not necessarily point to the newest commit. Therefore, first checkout master and pull the newest upstream code."),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull upstream master\n")])])])]),e._v(" "),a("li",[e._v("Go back to Firmware directory, and as usual add, commit and push the changes."),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" -\n")])])])])]),e._v(" "),a("p",[e._v("git add "),a("path",{attrs:{to:"",submodule:""}},[e._v('\ngit commit -m "Update submodule to include ..."\ngit push upstream pr-some-fix')])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n## Checkout pull requests\n\nYou can test someone's pull request (changes are not yet merged) even if the branch to merge only exists on the fork from that person. Do the following\n```sh\ngit fetch upstream  pull/<PR ID>/head:<branch name>\n")])])]),a("p",[e._v("PR ID is the number right next to the PR's title (without the #) and the "),a("code",[e._v("&lt;branch name&gt;")]),e._v(" can also be found right below the "),a("code",[e._v("PR ID")]),e._v(", e.g. "),a("code",[e._v("&lt;the other persons git name&gt;:&lt;branch name&gt;")]),e._v(". After that you can see the newly created branch locally with")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch\n")])])]),a("p",[e._v("Then switch to that branch")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("branch name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("h2",{attrs:{id:"common-pitfalls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-pitfalls"}},[e._v("#")]),e._v(" Common pitfalls")]),e._v(" "),a("h3",{attrs:{id:"force-push-to-forked-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#force-push-to-forked-repository"}},[e._v("#")]),e._v(" Force push to forked repository")]),e._v(" "),a("p",[e._v("After having done the first PR, people from the PX4 community will review your changes. In most cases this means that you have to fix your local branch according to the review. After changing the files locally, the feature branch needs to be rebased again with the most recent upstream/master. However, after the rebase, it is no longer possible to push the feature branch to your forked repository directly, but instead you need to use a force push:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push --force-with-lease origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your feature branch name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("h3",{attrs:{id:"rebase-merge-conflicts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase-merge-conflicts"}},[e._v("#")]),e._v(" Rebase merge conflicts")]),e._v(" "),a("p",[e._v("If a conflict occurs during a "),a("code",[e._v("git rebase")]),e._v(", please refer to "),a("a",{attrs:{href:"https://help.github.com/articles/resolving-merge-conflicts-after-a-git-rebase/",target:"_blank",rel:"noopener noreferrer"}},[e._v("this guide"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"pull-merge-conflicts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-merge-conflicts"}},[e._v("#")]),e._v(" Pull merge conflicts")]),e._v(" "),a("p",[e._v("If a conflict occurs during a "),a("code",[e._v("git pull")]),e._v(", please refer to "),a("a",{attrs:{href:"https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/#competing-line-change-merge-conflicts",target:"_blank",rel:"noopener noreferrer"}},[e._v("this guide"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"build-error-due-to-git-tags-out-of-date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-error-due-to-git-tags-out-of-date"}},[e._v("#")]),e._v(" Build error due to git tags out of date")]),e._v(" "),a("p",[e._v("The build error "),a("code",[e._v("Error: PX4 version too low, expected at least vx.x.x")]),e._v(" occurs if git tags are out of date.")]),e._v(" "),a("p",[e._v("This can be solved by fetching the upstream repository tags:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" fetch upstream --tags\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);