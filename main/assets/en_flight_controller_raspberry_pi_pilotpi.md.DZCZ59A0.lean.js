import{_ as r,a as i,b as a}from"./chunks/pilotpi_sens_wiring.BphLRVC6.js";import{_ as l,c as o,j as e,a as n,G as c,a8 as s,B as h,o as p}from"./chunks/framework.BDnHobkS.js";const S=JSON.parse('{"title":"RPi PilotPi Shield","description":"","frontmatter":{},"headers":[],"relativePath":"en/flight_controller/raspberry_pi_pilotpi.md","filePath":"en/flight_controller/raspberry_pi_pilotpi.md"}'),u={name:"en/flight_controller/raspberry_pi_pilotpi.md"};function m(b,t,P,f,v,C){const d=h("LinkedBadge");return p(),o("div",null,[t[0]||(t[0]=e("h1",{id:"rpi-pilotpi-shield",tabindex:"-1"},[n("RPi PilotPi Shield "),e("a",{class:"header-anchor",href:"#rpi-pilotpi-shield","aria-label":'Permalink to "RPi PilotPi Shield"'},"​")],-1)),c(d,{type:"warning",text:"Experimental",url:"../flight_controller/autopilot_experimental.html"}),t[1]||(t[1]=s('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>PX4 does not manufacture this (or any) autopilot. Contact the <a href="mailto:lhf2613@gmail.com" target="_blank" rel="noreferrer">manufacturer</a> for hardware support or compliance issues.</p></div><p>The <em>PilotPi</em> shield is a fully functional solution to run PX4 autopilot directly on Raspberry Pi. It is designed to be a low-cost but highly scalability platform with continuous updates from both Linux and PX4 sides. No proprietary driver is required, as all components have upstream support from RPi and PX4 community. PCB and schematic are open source as well.</p><p><img src="'+r+'" alt="PilotPi with RPi 4B"></p><h2 id="quick-summary" tabindex="-1">Quick Summary <a class="header-anchor" href="#quick-summary" aria-label="Permalink to &quot;Quick Summary&quot;">​</a></h2><ul><li>Supported RPi boards: <ul><li>Raspberry Pi 2B/3B/3B+/4B</li></ul></li><li>Supported OS: <ul><li>Raspberry Pi OS</li><li>Ubuntu Server (armhf/arm64)</li></ul></li><li>Accelerometer / Gyro: <ul><li>ICM42688P</li></ul></li><li>Magnetometer: <ul><li>IST8310</li></ul></li><li>Barometer: <ul><li>MS5611</li></ul></li><li>PWM: <ul><li>PCA9685</li></ul></li><li>ADC: <ul><li>ADS1115</li></ul></li><li>Power: <ul><li>3~6S battery with built-in voltage sensing.</li><li>Power the Pi through USB cable</li></ul></li><li>Availability: <em>preparing for shipping</em></li></ul><h2 id="connectivity" tabindex="-1">Connectivity <a class="header-anchor" href="#connectivity" aria-label="Permalink to &quot;Connectivity&quot;">​</a></h2><p>Shield provides:</p><ul><li>16x PWM outputting channels</li><li>GPS connector</li><li>Telemetry connector</li><li>External I2C bus connector (<strong>Note:</strong> conflicts with CSI camera)</li><li>RC input port (SBUS)</li><li>3x ADC channels range 0~5V</li><li>2*8 2.54mm unused GPIO connector</li></ul><p>Direct accessible from RPi:</p><ul><li>4x USB connector</li><li>CSI connector(<strong>Note:</strong> conflict with external I2C bus)</li><li>etc.</li></ul><h2 id="recommended-wiring" tabindex="-1">Recommended Wiring <a class="header-anchor" href="#recommended-wiring" aria-label="Permalink to &quot;Recommended Wiring&quot;">​</a></h2><p><img src="'+i+'" alt="PilotPi PowerPart wiring"></p><p><img src="'+a+'" alt="PilotPi SensorPart wiring"></p><h2 id="pinout" tabindex="-1">Pinout <a class="header-anchor" href="#pinout" aria-label="Permalink to &quot;Pinout&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It still uses old GH1.25 connectors. Wiring is compatible with Pixhawk 2.4.8</p></div><h3 id="connectors" tabindex="-1">Connectors <a class="header-anchor" href="#connectors" aria-label="Permalink to &quot;Connectors&quot;">​</a></h3><h4 id="gps-connector" tabindex="-1">GPS connector <a class="header-anchor" href="#gps-connector" aria-label="Permalink to &quot;GPS connector&quot;">​</a></h4><p>Mapped to <code>/dev/ttySC0</code></p><table tabindex="0"><thead><tr><th>Pin</th><th>Signal</th><th>Volt</th></tr></thead><tbody><tr><td>1</td><td>VCC</td><td>+5V</td></tr><tr><td>2</td><td>TX</td><td>+3v3</td></tr><tr><td>3</td><td>RX</td><td>+3v3</td></tr><tr><td>4</td><td>NC</td><td>+3v3</td></tr><tr><td>5</td><td>NC</td><td>+3v3</td></tr><tr><td>6</td><td>GND</td><td>GND</td></tr></tbody></table><h4 id="telemetry-connector" tabindex="-1">Telemetry connector <a class="header-anchor" href="#telemetry-connector" aria-label="Permalink to &quot;Telemetry connector&quot;">​</a></h4><p>Mapped to <code>/dev/ttySC1</code></p><table tabindex="0"><thead><tr><th>Pin</th><th>Signal</th><th>Volt</th></tr></thead><tbody><tr><td>1</td><td>VCC</td><td>+5V</td></tr><tr><td>2</td><td>TX</td><td>+3v3</td></tr><tr><td>3</td><td>RX</td><td>+3v3</td></tr><tr><td>4</td><td>CTS</td><td>+3v3</td></tr><tr><td>5</td><td>RTS</td><td>+3v3</td></tr><tr><td>6</td><td>GND</td><td>GND</td></tr></tbody></table><h4 id="external-i2c-connector" tabindex="-1">External I2C connector <a class="header-anchor" href="#external-i2c-connector" aria-label="Permalink to &quot;External I2C connector&quot;">​</a></h4><p>Mapped to <code>/dev/i2c-0</code></p><table tabindex="0"><thead><tr><th>Pin</th><th>Signal</th><th>Volt</th></tr></thead><tbody><tr><td>1</td><td>VCC</td><td>+5V</td></tr><tr><td>2</td><td>SCL</td><td>+3v3(pullups)</td></tr><tr><td>3</td><td>SDA</td><td>+3v3(pullups)</td></tr><tr><td>4</td><td>GND</td><td>GND</td></tr></tbody></table><h4 id="rc-adc2-3-4" tabindex="-1">RC &amp; ADC2/3/4 <a class="header-anchor" href="#rc-adc2-3-4" aria-label="Permalink to &quot;RC &amp; ADC2/3/4&quot;">​</a></h4><p>RC is mapped to <code>/dev/ttyAMA0</code> with signal inverter switch on RX line.</p><table tabindex="0"><thead><tr><th>Pin</th><th>Signal</th><th>Volt</th></tr></thead><tbody><tr><td>1</td><td>RC</td><td>+3V3~+5V</td></tr><tr><td>2</td><td>VCC</td><td>+5V</td></tr><tr><td>3</td><td>GND</td><td>GND</td></tr></tbody></table><ul><li>ADC1 is internally connected to voltage divider for battery voltage monitoring.</li><li>ADC2 is left unused.</li><li>ADC3 can be connected to an analog airspeed sensor.</li><li>ADC4 has a jumper cap between ADC and VCC, to monitor system voltage level.</li></ul><table tabindex="0"><thead><tr><th>Pin</th><th>Signal</th><th>Volt</th></tr></thead><tbody><tr><td>1</td><td>ADCx</td><td>0V~+5V</td></tr><tr><td>2</td><td>VCC</td><td>+5V</td></tr><tr><td>3</td><td>GND</td><td>GND</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ADC3 &amp; 4 have an alternative VCC source When &#39;Vref&#39; switch is on, &#39;VCC&#39; pin is driven by REF5050.</p></div><h4 id="unused-gpio-available-on-top-of-the-board" tabindex="-1">Unused GPIO available on top of the board <a class="header-anchor" href="#unused-gpio-available-on-top-of-the-board" aria-label="Permalink to &quot;Unused GPIO available on top of the board&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Shield Pin</th><th>BCM</th><th>WiringPi</th><th>RPi Pin</th></tr></thead><tbody><tr><td>1</td><td>3V3</td><td>3v3</td><td>3V3</td></tr><tr><td>2</td><td>5V</td><td>5V</td><td>5V</td></tr><tr><td>3</td><td>4</td><td>7</td><td>7</td></tr><tr><td>4</td><td>14</td><td>15</td><td>8</td></tr><tr><td>5</td><td>17</td><td>0</td><td>11</td></tr><tr><td>6</td><td>27</td><td>2</td><td>13</td></tr><tr><td>7</td><td>22</td><td>3</td><td>15</td></tr><tr><td>8</td><td>23</td><td>4</td><td>16</td></tr><tr><td>9</td><td>7</td><td>11</td><td>26</td></tr><tr><td>10</td><td>5</td><td>21</td><td>29</td></tr><tr><td>11</td><td>6</td><td>22</td><td>31</td></tr><tr><td>12</td><td>12</td><td>26</td><td>32</td></tr><tr><td>13</td><td>13</td><td>23</td><td>33</td></tr><tr><td>14</td><td>16</td><td>27</td><td>36</td></tr><tr><td>15</td><td>26</td><td>25</td><td>37</td></tr><tr><td>16</td><td>GND</td><td>GND</td><td>GND</td></tr></tbody></table><h3 id="switches" tabindex="-1">Switches <a class="header-anchor" href="#switches" aria-label="Permalink to &quot;Switches&quot;">​</a></h3><h4 id="rc-inverter" tabindex="-1">RC Inverter <a class="header-anchor" href="#rc-inverter" aria-label="Permalink to &quot;RC Inverter&quot;">​</a></h4><p>This switch will decide the signal polarity of RX line: <code>UART_RX = SW xor RC_INPUT</code></p><ul><li>On: suitable with SBUS (signal inverted)</li><li>Off: preserved</li></ul><h4 id="vref" tabindex="-1">Vref <a class="header-anchor" href="#vref" aria-label="Permalink to &quot;Vref&quot;">​</a></h4><p>ADC 3 &amp; 4 will have VCC driven by:</p><ul><li>Vref output from REF5050 if on</li><li>5V pin directly from RPi if off</li></ul><h4 id="boot-mode" tabindex="-1">Boot Mode <a class="header-anchor" href="#boot-mode" aria-label="Permalink to &quot;Boot Mode&quot;">​</a></h4><p>This switch is connected to Pin22(BCM25). System rc script will check its value and decide whether PX4 should start alongside with system booting or not.</p><ul><li>On: start PX4 automatically</li><li>Off: don&#39; t start PX4</li></ul><h2 id="developer-quick-start" tabindex="-1">Developer Quick Start <a class="header-anchor" href="#developer-quick-start" aria-label="Permalink to &quot;Developer Quick Start&quot;">​</a></h2><p>Refer to specific instructions for the OS running on your RPi:</p><ul><li><a href="./raspberry_pi_pilotpi_rpios.html">Raspberry Pi OS Lite (armhf)</a></li><li><a href="./raspberry_pi_pilotpi_ubuntu_server.html">Ubuntu Server (arm64 &amp; armhf)</a></li></ul>',46))])}const x=l(u,[["render",m]]);export{S as __pageData,x as default};
