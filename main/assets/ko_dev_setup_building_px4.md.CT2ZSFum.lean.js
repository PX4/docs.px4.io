import{_ as r,a as p,b as d,c}from"./chunks/qgc_setup_summary_airframe_firmware.mlA6F8dN.js";import{_ as u}from"./chunks/qgc_goto.BIYIp9sq.js";import{_ as k,c as m,a8 as l,G as i,w as s,B as h,o as g,j as e,a as o}from"./chunks/framework.BDnHobkS.js";const B=JSON.parse('{"title":"PX4 소프트웨어 빌드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/dev_setup/building_px4.md","filePath":"ko/dev_setup/building_px4.md"}'),b={name:"ko/dev_setup/building_px4.md"};function f(F,a,v,y,_,C){const t=h("tab"),n=h("tabs");return g(),m("div",null,[a[4]||(a[4]=l('<h1 id="px4-소프트웨어-빌드" tabindex="-1">PX4 소프트웨어 빌드 <a class="header-anchor" href="#px4-소프트웨어-빌드" aria-label="Permalink to &quot;PX4 소프트웨어 빌드&quot;">​</a></h1><p>PX4 firmware can be built from source code on the console or in an IDE, for both simulated and hardware targets.</p><p>You need to build PX4 in order to use <a href="./../simulation/">simulators</a>, or if you want to modify PX4 and create a custom build. If you just want to try out PX4 on real hardware then <a href="./../config/firmware.html">load the prebuilt binaries</a> using QGroundControl (there is no need to follow these instructions).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Before following these instructions you must first install the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a> for your host operating system and target hardware. If you have any problems after following these steps see the <a href="#troubleshooting">Troubleshooting</a> section below.</p></div><h2 id="px4-소스-코드-다운로드" tabindex="-1">PX4 소스 코드 다운로드 <a class="header-anchor" href="#px4-소스-코드-다운로드" aria-label="Permalink to &quot;PX4 소스 코드 다운로드&quot;">​</a></h2><p>The PX4 source code is stored on Github in the <a href="https://github.com/PX4/PX4-Autopilot" target="_blank" rel="noreferrer">PX4/PX4-Autopilot</a> repository.</p><p>To get the <em>very latest</em> (<code>main</code> branch) version onto your computer, enter the following command into a terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><p>Note that you may already have done this when installing the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is all you need to do in order to get the latest code. If needed you can also <a href="./../contribute/git_examples.html#get-a-specific-release">get the source code specific to a particular release</a>. <a href="./../contribute/git_examples.html">GIT Examples</a> provides a lot more information working with releases and contributing to PX4.</p></div><h2 id="first-build-using-a-simulator" tabindex="-1">First Build (Using a Simulator) <a class="header-anchor" href="#first-build-using-a-simulator" aria-label="Permalink to &quot;First Build (Using a Simulator)&quot;">​</a></h2><p>먼저 콘솔 환경에서 시뮬레이션 대상을 빌드합니다. 이를 통하여 실제 하드웨어와 IDE로 사용전에 시스템 설정을 검증할 수 있습니다.</p><p>Navigate into the <strong>PX4-Autopilot</strong> directory. Depending on your operating system you will have installed either <a href="./../sim_gazebo_gz/">Gazebo SITL</a> or <a href="./../sim_gazebo_classic/">Gazebo Classic SITL</a> (if you don&#39;t know which you can try both).</p>',13)),i(n,null,{default:s(()=>[i(t,{name:"Gazebo"},{default:s(()=>a[0]||(a[0]=[e("p",null,[o("Start "),e("a",{href:"./../sim_gazebo_gz/"},"Gazebo SITL"),o(" using the following command:")],-1),e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gz_x500")])])])],-1)])),_:1}),i(t,{name:"Gazebo-Classic"},{default:s(()=>a[1]||(a[1]=[e("p",null,[o("Start "),e("a",{href:"./../sim_gazebo_gz/"},"Gazebo SITL"),o(" using the following command:")],-1),e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gazebo-classic")])])])],-1)])),_:1})]),_:1}),a[5]||(a[5]=l('<p>This will bring up the PX4 console:</p><p><img src="'+r+'" alt="PX4 Console"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You may need to start <em>QGroundControl</em> before proceeding, as the default PX4 configuration requires a ground control connection before takeoff. This can be <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html" target="_blank" rel="noreferrer">downloaded from here</a>.</p></div><p>The drone can be flown by typing the following command (as shown in the console above):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commander</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> takeoff</span></span></code></pre></div><p>The vehicle will take off and you&#39;ll see this in the simulator UI:</p>',6)),i(n,null,{default:s(()=>[i(t,{name:"Gazebo"},{default:s(()=>a[2]||(a[2]=[e("p",null,[e("img",{src:p,alt:"Gazebo UI with vehicle taking off"})],-1)])),_:1}),i(t,{name:"Gazebo-Classic"},{default:s(()=>a[3]||(a[3]=[e("p",null,[e("img",{src:d,alt:"Gazebo Classic UI with vehicle taking off"})],-1)])),_:1})]),_:1}),a[6]||(a[6]=l('<p>The drone can be landed by typing <code>commander land</code> and the whole simulation can be stopped by doing <strong>CTRL+C</strong> (or by entering <code>shutdown</code>).</p><p>Flying the simulation with the ground control station is closer to the real operation of the vehicle. Click on a location in the map while the vehicle is flying (takeoff flight mode) and enable the slider. This will reposition the vehicle.</p><p><img src="'+u+`" alt="QGroundControl GoTo"></p><h2 id="nuttx-pixhawk-기반-보드" tabindex="-1">NuttX/Pixhawk 기반 보드 <a class="header-anchor" href="#nuttx-pixhawk-기반-보드" aria-label="Permalink to &quot;NuttX/Pixhawk 기반 보드&quot;">​</a></h2><h3 id="nuttx용-빌드" tabindex="-1">NuttX용 빌드 <a class="header-anchor" href="#nuttx용-빌드" aria-label="Permalink to &quot;NuttX용 빌드&quot;">​</a></h3><p>To build for NuttX- or Pixhawk- based boards, navigate into the <strong>PX4-Autopilot</strong> directory and then call <code>make</code> with the build target for your board.</p><p>For example, to build for <a href="./../flight_controller/pixhawk4.html">Pixhawk 4</a> hardware you could use the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v4_default</span></span></code></pre></div><p>A successful run will end with similar output to:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 빌드</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 파일은</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default에</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 작성되었습니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[954/954] Creating /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default/px4_fmu-v4_default.px4</span></span></code></pre></div><p>The first part of the build target <code>px4_fmu-v4</code> indicates the target flight controller hardware for the firmware. The suffix, in this case <code>_default</code>, indicates a firmware <em>configuration</em>, such as supporting or omitting particular features.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>_default</code> suffix is optional. For example, <code>make px4_fmu-v5</code> and <code>px4_fmu-v5_default</code> result in the same firmware.</p></div><p>The following list shows the build commands for the <a href="./../flight_controller/autopilot_pixhawk_standard.html">Pixhawk standard</a> boards:</p><ul><li><p><a href="./../flight_controller/pixhawk6x-rt.html">Holybro Pixhawk 6X-RT (FMUv6X)</a>: <code>make px4_fmu-v6xrt_default</code></p></li><li><p><a href="./../flight_controller/pixhawk6x.html">Holybro Pixhawk 6X (FMUv6X)</a>: <code>make px4_fmu-v6x_default</code></p></li><li><p><a href="./../flight_controller/pixhawk6c.html">Holybro Pixhawk 6C (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></p></li><li><p><a href="./../flight_controller/pixhawk6c_mini.html">Holybro Pixhawk 6C Mini (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></p></li><li><p><a href="./../flight_controller/holybro_pix32_v6.html">Holybro Pix32 v6 (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></p></li><li><p><a href="./../flight_controller/pixhawk5x.html">Holybro Pixhawk 5X (FMUv5X)</a>: <code>make px4_fmu-v5x_default</code></p></li><li><p><a href="./../flight_controller/pixhawk4.html">Pixhawk 4 (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/pixhawk4_mini.html">Pixhawk 4 Mini (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/cuav_v5_plus.html">CUAV V5+ (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/cuav_v5_nano.html">CUAV V5 nano (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/pixracer.html">Pixracer (FMUv4)</a>: <code>make px4_fmu-v4_default</code></p></li><li><p><a href="./../flight_controller/pixhawk3_pro.html">Pixhawk 3 Pro</a>: <code>make px4_fmu-v4pro_default</code></p></li><li><p><a href="./../flight_controller/pixhawk_mini.html">Pixhawk Mini</a>: <code>make px4_fmu-v3_default</code></p></li><li><p><a href="./../flight_controller/pixhawk-2.html">Pixhawk 2 (Cube Black) (FMUv3)</a>: <code>make px4_fmu-v3_default</code></p></li><li><p><a href="./../flight_controller/mro_pixhawk.html">mRo Pixhawk (FMUv3)</a>: <code>make px4_fmu-v3_default</code> (supports 2MB Flash)</p></li><li><p><a href="./../flight_controller/holybro_pix32.html">Holybro pix32 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p></li><li><p><a href="./../flight_controller/pixfalcon.html">Pixfalcon (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p></li><li><p><a href="./../flight_controller/dropix.html">Dropix (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p></li><li><p><a href="./../flight_controller/pixhawk.html">Pixhawk 1 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>must</strong> use a supported version of GCC to build this board (e.g. the same as used by <a href="./../test_and_ci/docker.html">CI/docker</a>) or remove modules from the build. PX4가 보드의 1MB 플래시 제한에 가깝기 때문에, 지원되지 않는 GCC로 빌드가 실패할 수 있습니다.</p></div></li></ul><p>:::</p><ul><li>Pixhawk 1 with 2 MB flash: <code>make px4_fmu-v3_default</code></li></ul><p>Build commands for non-Pixhawk NuttX fight controllers (and for all other-boards) are provided in the documentation for the individual <a href="./../flight_controller/">flight controller boards</a>.</p><h3 id="펌웨어-업로드-보드-플래싱" tabindex="-1">펌웨어 업로드 (보드 플래싱) <a class="header-anchor" href="#펌웨어-업로드-보드-플래싱" aria-label="Permalink to &quot;펌웨어 업로드 (보드 플래싱)&quot;">​</a></h3><p>Append <code>upload</code> to the make commands to upload the compiled binary to the autopilot hardware via USB. For example</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v4_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><p>A successful run will end with this output:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Erase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Verify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rebooting.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[100%] Built target upload</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is not supported when developing on WSL2. See <a href="./../dev_setup/dev_env_windows_wsl.html#flash-a-flight-control-board"> Windows Development Environment (WSL2-Based) &gt; Flash a Control Board</a>.</p></div><h2 id="기타-보드" tabindex="-1">기타 보드 <a class="header-anchor" href="#기타-보드" aria-label="Permalink to &quot;기타 보드&quot;">​</a></h2><p>Build commands for other boards are given the <a href="./../flight_controller/">board-specific flight controller pages</a> (usually under a heading <em>Building Firmware</em>).</p><p>You can also list all configuration targets using the command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div><h2 id="그래픽-ide에서의-컴파일" tabindex="-1">그래픽 IDE에서의 컴파일 <a class="header-anchor" href="#그래픽-ide에서의-컴파일" aria-label="Permalink to &quot;그래픽 IDE에서의 컴파일&quot;">​</a></h2><p><a href="./../dev_setup/vscode.html">VSCode</a> is the officially supported (and recommended) IDE for PX4 development. It is easy to set up and can be used to compile PX4 for both simulation and hardware environments.</p><h2 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h2><h3 id="일반-빌드-오류" tabindex="-1">일반 빌드 오류 <a class="header-anchor" href="#일반-빌드-오류" aria-label="Permalink to &quot;일반 빌드 오류&quot;">​</a></h3><p>Many build problems are caused by either mismatching submodules or an incompletely cleaned-up build environment. Updating the submodules and doing a <code>distclean</code> can fix these kinds of errors:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> distclean</span></span></code></pre></div><h3 id="flash-overflowed-by-xxx-bytes" tabindex="-1">Flash overflowed by XXX bytes <a class="header-anchor" href="#flash-overflowed-by-xxx-bytes" aria-label="Permalink to &quot;Flash overflowed by XXX bytes&quot;">​</a></h3><p>The <code>region &#39;flash&#39; overflowed by XXXX bytes</code> error indicates that the firmware is too large for the target hardware platform. This is common for <code>make px4_fmu-v2_default</code> builds, where the flash size is limited to 1MB.</p><p>If you&#39;re building the <em>vanilla</em> master branch, the most likely cause is using an unsupported version of GCC. In this case, install the version specified in the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a> instructions.</p><p>If building your own branch, it is possible that you have increased the firmware size over the 1MB limit. PX4 빌드 시스템은 많은 수의 파일을 오픈하므로, 이 갯수를 초과할 수 있습니다.</p><h3 id="macos-열린-파일이-너무-많음-오류" tabindex="-1">macOS: 열린 파일이 너무 많음 오류 <a class="header-anchor" href="#macos-열린-파일이-너무-많음-오류" aria-label="Permalink to &quot;macOS: 열린 파일이 너무 많음 오류&quot;">​</a></h3><p>MacOS allows a default maximum of 256 open files in all running processes. The PX4 build system opens a large number of files, so you may exceed this number.</p><p>The build toolchain will then report <code>Too many open files</code> for many files, as shown below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/Cellar/gcc-arm-none-eabi/20171218/bin/../lib/gcc/arm-none-eabi/7.2.1/../../../../arm-none-eabi/bin/ld:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NuttX/nuttx/fs/libfs.a:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Too</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> many</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span></span></code></pre></div><p>The solution is to increase the maximum allowed number of open files (e.g. to 300). You can do this in the macOS <em>Terminal</em> for each session:</p><ul><li><p>Run this script <a href="https://github.com/PX4/PX4-Autopilot/blob/main/Tools/mac_set_ulimit.sh" target="_blank" rel="noreferrer">Tools/mac_set_ulimit.sh</a>, or</p></li><li><p>다음 명령어를 실행하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span></code></pre></div></li></ul><h3 id="macos-catalina-cmake-실행-문제" tabindex="-1">macOS Catalina: cmake 실행 문제 <a class="header-anchor" href="#macos-catalina-cmake-실행-문제" aria-label="Permalink to &quot;macOS Catalina: cmake 실행 문제&quot;">​</a></h3><p>As of macOS Catalina 10.15.1 there may be problems when trying to build the simulator with <em>cmake</em>. 다음을 사용하여 누락된 종속성을 확인하여 이러한 경우인지 확인할 수 있습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcode-select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/include/</span></span></code></pre></div><h3 id="ubuntu-18-04-arm-none-eabi-gcc와-관련된-컴파일-오류" tabindex="-1">Ubuntu 18.04: arm_none_eabi_gcc와 관련된 컴파일 오류 <a class="header-anchor" href="#ubuntu-18-04-arm-none-eabi-gcc와-관련된-컴파일-오류" aria-label="Permalink to &quot;Ubuntu 18.04: arm_none_eabi_gcc와 관련된 컴파일 오류&quot;">​</a></h3><p>Build issues related to <code>arm_none_eabi_gcc</code>may be due to a broken g++ toolchain installation. You can verify that this is the case by checking for missing dependencies using:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>Example of bash output with missing dependencies:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span></span></code></pre></div><p>This can be resolved by removing and <a href="https://askubuntu.com/questions/1243252/how-to-install-arm-none-eabi-gdb-on-ubuntu-20-04-lts-focal-fossa" target="_blank" rel="noreferrer">reinstalling the compiler</a>.</p><h3 id="ubuntu-18-04-visual-studio-code는-이-큰-작업-영역에서-파일-변경-사항을-감시할-수-없습니다" tabindex="-1">Ubuntu 18.04: Visual Studio Code는 이 큰 작업 영역에서 파일 변경 사항을 감시할 수 없습니다. <a class="header-anchor" href="#ubuntu-18-04-visual-studio-code는-이-큰-작업-영역에서-파일-변경-사항을-감시할-수-없습니다" aria-label="Permalink to &quot;Ubuntu 18.04: Visual Studio Code는 이 큰 작업 영역에서 파일 변경 사항을 감시할 수 없습니다.&quot;">​</a></h3><p>See <a href="./../dev_setup/vscode.html#troubleshooting">Visual Studio Code IDE (VSCode) &gt; Troubleshooting</a>.</p><h3 id="python-패키지를-가져오지-못했습니다" tabindex="-1">Python 패키지를 가져오지 못했습니다. <a class="header-anchor" href="#python-패키지를-가져오지-못했습니다" aria-label="Permalink to &quot;Python 패키지를 가져오지 못했습니다.&quot;">​</a></h3><p>&quot;Failed to import&quot; errors when running the <code>make px4_sitl jmavsim</code> command indicates that some Python packages are not installed (where expected).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> named</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jinja2&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> may</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> need</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> using:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span></span></code></pre></div><p>다음과 같이 종속성을 명시적으로 설치하여, 이 문제를 해결할 수 있습니다.</p><p>You should be able to fix this by explicitly installing the dependencies as shown:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyserial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numpy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pandas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyyaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyros-genmsg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packaging</span></span></code></pre></div><h2 id="px4-빌드-타겟-만들기" tabindex="-1">PX4 빌드 타겟 만들기 <a class="header-anchor" href="#px4-빌드-타겟-만들기" aria-label="Permalink to &quot;PX4 빌드 타겟 만들기&quot;">​</a></h2><p>The previous sections showed how you can call <em>make</em> to build a number of different targets, start simulators, use IDEs etc. This section shows how <em>make</em> options are constructed and how to find the available choices.</p><p>The full syntax to call <em>make</em> with a particular configuration and initialization file is:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [VENDOR_][MODEL][_VARIANT] [VIEWER_MODEL_DEBUGGER_WORLD]</span></span></code></pre></div><p><strong>VENDOR_MODEL_VARIANT</strong>: (also known as <code>CONFIGURATION_TARGET</code>)</p><ul><li><strong>VENDOR:</strong> The manufacturer of the board: <code>px4</code>, <code>aerotenna</code>, <code>airmind</code>, <code>atlflight</code>, <code>auav</code>, <code>beaglebone</code>, <code>intel</code>, <code>nxp</code>, etc. The vendor name for Pixhawk series boards is <code>px4</code>.</li><li><strong>MODEL:</strong> The <em>board model</em> &quot;model&quot;: <code>sitl</code>, <code>fmu-v2</code>, <code>fmu-v3</code>, <code>fmu-v4</code>, <code>fmu-v5</code>, <code>navio2</code>, etc.</li><li><strong>VARIANT:</strong> Indicates particular configurations: e.g. <code>bootloader</code>, <code>cyphal</code>, which contain components that are not present in the <code>default</code> configuration. Most commonly this is <code>default</code>, and may be omitted.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can get a list of <em>all</em> available <code>CONFIGURATION_TARGET</code> options using the command below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div></div><p><strong>VIEWER_MODEL_DEBUGGER_WORLD:</strong></p><ul><li><p><strong>VIEWER:</strong> This is the simulator (&quot;viewer&quot;) to launch and connect: <code>gz</code>, <code>gazebo</code>, <code>jmavsim</code>, <code>none</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>none</code> can be used if you want to launch PX4 and wait for a simulator (jmavsim, Gazebo, Gazebo Classic, or some other simulator). For example, <code>make px4_sitl none_iris</code> launches PX4 without a simulator (but with the iris airframe).</p></div></li></ul><p>:::</p><ul><li><p><strong>MODEL:</strong> The <em>vehicle</em> model to use (e.g. <code>iris</code> (<em>default</em>), <code>rover</code>, <code>tailsitter</code>, etc), which will be loaded by the simulator. The environment variable <code>PX4_SIM_MODEL</code> will be set to the selected model, which is then used in the <a href="./../simulation/#startup-scripts">startup script</a> to select appropriate parameters.</p></li><li><p><strong>DEBUGGER:</strong> Debugger to use: <code>none</code> (<em>default</em>), <code>ide</code>, <code>gdb</code>, <code>lldb</code>, <code>ddd</code>, <code>valgrind</code>, <code>callgrind</code>. For more information see <a href="./../debug/simulation_debugging.html">Simulation Debugging</a>.</p></li><li><p><strong>WORLD:</strong> (Gazebo Classic only). Set the world (<a href="https://github.com/PX4/PX4-SITL_gazebo-classic/tree/main/worlds" target="_blank" rel="noreferrer">PX4-Autopilot/Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds</a>) that is loaded. Default is <a href="https://github.com/PX4/PX4-SITL_gazebo-classic/blob/main/worlds/empty.world" target="_blank" rel="noreferrer">empty.world</a>. For more information see <a href="./../sim_gazebo_classic/#loading-a-specific-world">Gazebo Classic &gt; Loading a Specific World</a>.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can get a list of <em>all</em> available <code>VIEWER_MODEL_DEBUGGER_WORLD</code> options using the command below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_vmd_make_targets</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>Most of the values in the <code>CONFIGURATION_TARGET</code> and <code>VIEWER_MODEL_DEBUGGER</code> have defaults, and are hence optional. For example, <code>gazebo-classic</code> is equivalent to <code>gazebo-classic_iris</code> or <code>gazebo-classic_iris_none</code>.</li><li>두 개의 다른 설정 사이에 기본값을 지정하려는 경우에는, 세 개의 밑줄을 사용할 수 있습니다. For example, <code>gazebo-classic___gdb</code> is equivalent to <code>gazebo-classic_iris_gdb</code>.</li><li>You can use a <code>none</code> value for <code>VIEWER_MODEL_DEBUGGER</code> to start PX4 and wait for a simulator. For example start PX4 using <code>make px4_sitl_default none</code> and jMAVSim using <code>./Tools/simulation/jmavsim/jmavsim_run.sh -l</code>.</li></ul></div><p>The <code>VENDOR_MODEL_VARIANT</code> options map to particular <em>px4board</em> configuration files in the PX4 source tree under the <a href="https://github.com/PX4/PX4-Autopilot/tree/main/boards" target="_blank" rel="noreferrer">/boards</a> directory. Specifically <code>VENDOR_MODEL_VARIANT</code> maps to a configuration file <strong>boards/VENDOR/MODEL/VARIANT.px4board</strong> (e.g. <code>px4_fmu-v5_default</code> corresponds to <a href="https://github.com/PX4/PX4-Autopilot/blob/main/boards/px4/fmu-v5/default.px4board" target="_blank" rel="noreferrer">boards/px4/fmu-v5/default.px4board</a>).</p><p>추가 make 대상은 관련 섹션에서 설명합니다.</p><ul><li><code>bloaty_compare_master</code>: <a href="./../debug/binary_size_profiling.html">Binary Size Profiling</a></li><li>...</li></ul><h2 id="firmware-version-git-tags" tabindex="-1">Firmware Version &amp; Git Tags <a class="header-anchor" href="#firmware-version-git-tags" aria-label="Permalink to &quot;Firmware Version &amp; Git Tags&quot;">​</a></h2><p>The <em>PX4 Firmware Version</em> and <em>Custom Firmware Version</em> are published using the MAVLink <a href="https://mavlink.io/en/messages/common.html#AUTOPILOT_VERSION" target="_blank" rel="noreferrer">AUTOPILOT_VERSION</a> message, and displayed in the <em>QGroundControl</em> <strong>Setup &gt; Summary</strong> airframe panel:</p><p><img src="`+c+'" alt="Firmware info"></p><p>These are extracted at build time from the active <em>git tag</em> for your repo tree. The git tag should be formatted as <code>&lt;PX4-version&gt;-&lt;vendor-version&gt;</code> (e.g. the tag in the image above was set to <code>v1.8.1-2.22.1</code>).</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you use a different git tag format, versions information may not be displayed properly.</p></div>',81))])}const P=k(b,[["render",f]]);export{B as __pageData,P as default};
