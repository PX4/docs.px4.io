import{_ as t,a,b as r,c as o,d as i,e as n,f as s,g as l}from"./chunks/geotag.CSyJG1b9.js";import{_ as c,c as m,a8 as h,o as d}from"./chunks/framework.BDnHobkS.js";const T=JSON.parse('{"title":"Cameras Connected to Flight Controller Outputs","description":"","frontmatter":{},"headers":[],"relativePath":"ko/camera/fc_connected_camera.md","filePath":"ko/camera/fc_connected_camera.md"}'),g={name:"ko/camera/fc_connected_camera.md"};function p(u,e,f,b,_,v){return d(),m("div",null,e[0]||(e[0]=[h('<h1 id="cameras-connected-to-flight-controller-outputs" tabindex="-1">Cameras Connected to Flight Controller Outputs <a class="header-anchor" href="#cameras-connected-to-flight-controller-outputs" aria-label="Permalink to &quot;Cameras Connected to Flight Controller Outputs&quot;">​</a></h1><p>This topic explains how to use PX4 with a <a href="./../camera/">camera</a> that is attached to flight controller outputs.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><a href="./../camera/mavlink_v2_camera.html">MAVLink cameras</a> that use the <a href="https://mavlink.io/en/services/camera.html" target="_blank" rel="noreferrer">MAVLink Camera Protocol v2</a> are recommended.</p></div><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>PX4 can trigger a <a href="./../camera/">camera</a> connected to flight controller outputs using <a href="#mavlink-command-interface">camera commands</a> in missions or sent by a ground control stations. The supported commands are a subset of those defined in the MAVLink <a href="https://mavlink.io/en/services/camera.html" target="_blank" rel="noreferrer">Camera Protocol v1</a>.</p><p>Whenever a camera is triggered, the MAVLink <a href="https://mavlink.io/en/messages/common.html#CAMERA_TRIGGER" target="_blank" rel="noreferrer">CAMERA_TRIGGER</a> message is published containing the current session&#39;s image <em>sequence number</em> and the corresponding timestamp. This timestamp can be used for several purposes, including: timestamping photos for aerial surveying and reconstruction, synchronising a multi-camera system or visual-inertial navigation.</p><p>The camera can be connected to different outputs, including PWM outputs, GPIO outputs, and a Seagull MAP2 via PWM outputs.</p><p>Cameras can also (optionally) signal PX4 at the exact moment that a photo/frame is taken using a <a href="#camera-capture-configuration">camera capture pin</a> that is attached to their hot shoe. This allows more precise mapping of images to GPS position for geotagging, or the right IMU sample for VIO synchronization, etc.</p><h2 id="mavlink-command-interface" tabindex="-1">MAVLink Command Interface <a class="header-anchor" href="#mavlink-command-interface" aria-label="Permalink to &quot;MAVLink Command Interface&quot;">​</a></h2><p>PX4 supports the following MAVLink commands for FC-connected cameras, in both missions and if received from a GCS:</p><ul><li><a href="#mav-cmd-do-set-cam-trigg-interval">MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL</a> — set time interval between captures.</li><li><a href="#mav-cmd-do-set-cam-trigg-dist">MAV_CMD_DO_SET_CAM_TRIGG_DIST</a> — set distance between captures</li><li><a href="#mav-cmd-do-trigger-control">MAV_CMD_DO_TRIGGER_CONTROL</a> — start/stop capturing (using distance or time, as defined using above messages).</li><li><a href="#mav-cmd-oblique-survey">MAV_CMD_OBLIQUE_SURVEY</a> — start/stop oblique survey</li><li><a href="#mav-cmd-do-digicam-control">MAV_CMD_DO_DIGICAM_CONTROL</a> — test-shoot the camera from the GCS.</li></ul><p>The supported behaviour is listed below (these do not precisely match the MAVLink specification).</p><h3 id="mav-cmd-do-trigger-control" tabindex="-1">MAV_CMD_DO_TRIGGER_CONTROL <a class="header-anchor" href="#mav-cmd-do-trigger-control" aria-label="Permalink to &quot;MAV_CMD_DO_TRIGGER_CONTROL&quot;">​</a></h3><p><a href="https://mavlink.io/en/messages/common.html#MAV_CMD_DO_TRIGGER_CONTROL" target="_blank" rel="noreferrer">MAV_CMD_DO_TRIGGER_CONTROL</a> - Accepted in &quot;command controlled&quot; mode (<code>TRIG_MODE</code> 1).</p><table tabindex="0"><thead><tr><th>Command Parameter</th><th>설명</th></tr></thead><tbody><tr><td>Param #1</td><td>Trigger enable/disable. <code>1</code>: enable (start), <code>0</code>: disable.</td></tr><tr><td>Param #2</td><td>Reset trigger sequence. <code>1</code>: reset, any other value does nothing.</td></tr><tr><td>Param #3</td><td>Pause triggering, but without switching the camera off or retracting it. <code>1</code>: pause, <code>0</code>: restart.</td></tr></tbody></table><h3 id="mav-cmd-do-digicam-control" tabindex="-1">MAV_CMD_DO_DIGICAM_CONTROL <a class="header-anchor" href="#mav-cmd-do-digicam-control" aria-label="Permalink to &quot;MAV_CMD_DO_DIGICAM_CONTROL&quot;">​</a></h3><p><a href="https://mavlink.io/en/messages/common.html#MAV_CMD_DO_DIGICAM_CONTROL" target="_blank" rel="noreferrer">MAV_CMD_DO_DIGICAM_CONTROL</a> - Accepted in all modes.</p><p>This is used by the GCS to test-shoot the camera from the user interface. The trigger driver does not support all camera control parameters defined by the MAVLink spec.</p><table tabindex="0"><thead><tr><th>Command Parameter</th><th>설명</th></tr></thead><tbody><tr><td>Param #5</td><td>Trigger one-shot command (set to 1 to trigger a single image frame).</td></tr></tbody></table><h3 id="mav-cmd-do-set-cam-trigg-dist" tabindex="-1">MAV_CMD_DO_SET_CAM_TRIGG_DIST <a class="header-anchor" href="#mav-cmd-do-set-cam-trigg-dist" aria-label="Permalink to &quot;MAV_CMD_DO_SET_CAM_TRIGG_DIST&quot;">​</a></h3><p><a href="https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_CAM_TRIGG_DIST" target="_blank" rel="noreferrer">MAV_CMD_DO_SET_CAM_TRIGG_DIST</a> - Accepted in &quot;mission controlled&quot; mode (<code>TRIG_MODE</code> 4)</p><p>This command is autogenerated during missions to trigger the camera based on survey missions from the GCS.</p><h3 id="mav-cmd-do-set-cam-trigg-interval" tabindex="-1">MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL <a class="header-anchor" href="#mav-cmd-do-set-cam-trigg-interval" aria-label="Permalink to &quot;MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL&quot;">​</a></h3><p><a href="https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL" target="_blank" rel="noreferrer">MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL</a></p><h3 id="mav-cmd-oblique-survey" tabindex="-1">MAV_CMD_OBLIQUE_SURVEY <a class="header-anchor" href="#mav-cmd-oblique-survey" aria-label="Permalink to &quot;MAV_CMD_OBLIQUE_SURVEY&quot;">​</a></h3><p><a href="https://mavlink.io/en/messages/common.html#MAV_CMD_OBLIQUE_SURVEY" target="_blank" rel="noreferrer">MAV_CMD_OBLIQUE_SURVEY</a> - Mission command to set a camera auto mount pivoting oblique survey.</p><p>This accepts <code>param1</code> to <code>param4</code> as defined in the MAVLink message definition. The shutter integration setting (<code>param2</code>) is only obeyed with a GPIO backend.</p><h2 id="trigger-configuration" tabindex="-1">Trigger Configuration <a class="header-anchor" href="#trigger-configuration" aria-label="Permalink to &quot;Trigger Configuration&quot;">​</a></h2><p>Cameras can be connected to the FC for triggering using different intefaces, such as PWM, and GPIO, by specifying the appropriate <a href="#trigger-interface-backends">trigger interface backend</a>. You can also indicate the camera <a href="#trigger-modes">trigger mode</a>.</p><p>This configuration can most easily be done from the <em>QGroundControl</em> <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/setup_view/camera.html#px4-camera-setup" target="_blank" rel="noreferrer">Vehicle Setup &gt; Camera</a> section.</p><p><img src="'+t+'" alt="Trigger pins"></p><p>The different <a href="#trigger-modes">trigger modes</a>, <a href="#trigger-interface-backends">backend interfaces</a> and <a href="#trigger-output-pin-configuration">trigger output configuration</a> are described below (these can also be set directly from <a href="./../advanced_config/parameters.html">parameters</a>).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The camera settings section is not available by default for FMUv2-based flight controllers (e.g. 3DR Pixhawk) because the camera module is not automatically included in firmware. For more information see <a href="./../advanced_config/parameters.html#parameter-not-in-firmware">Finding/Updating Parameters &gt; Parameters Not In Firmware</a>.</p></div><h3 id="trigger-modes" tabindex="-1">Trigger Modes <a class="header-anchor" href="#trigger-modes" aria-label="Permalink to &quot;Trigger Modes&quot;">​</a></h3><p>Four different modes are supported, controlled by the <a href="./../advanced_config/parameter_reference.html#TRIG_MODE">TRIG_MODE</a> parameter:</p><table tabindex="0"><thead><tr><th>Mode</th><th>설명</th></tr></thead><tbody><tr><td>0</td><td>Camera triggering is disabled.</td></tr><tr><td>1</td><td>Works like a basic intervalometer that can be enabled and disabled by using the MAVLink command <code>MAV_CMD_DO_TRIGGER_CONTROL</code>. See <a href="#mavlink-command-interface">command interface</a> for more details.</td></tr><tr><td>2</td><td>Switches the intervalometer constantly on.</td></tr><tr><td>3</td><td>Triggers based on distance. A shot is taken every time the set horizontal distance is exceeded. The minimum time interval between two shots is however limited by the set triggering interval.</td></tr><tr><td>4</td><td>Triggers automatically when flying a survey in Mission mode.</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If it is your first time enabling the camera trigger app, remember to reboot after changing the <code>TRIG_MODE</code> parameter.</p></div><h3 id="trigger-interface-backends" tabindex="-1">Trigger Interface Backends <a class="header-anchor" href="#trigger-interface-backends" aria-label="Permalink to &quot;Trigger Interface Backends&quot;">​</a></h3><p>The camera trigger driver supports several backends - each for a specific application, controlled by the <a href="./../advanced_config/parameter_reference.html#TRIG_INTERFACE">TRIG_INTERFACE</a> parameter:</p><table tabindex="0"><thead><tr><th>Number</th><th>설명</th></tr></thead><tbody><tr><td>1</td><td>Enables the GPIO interface. The AUX outputs are pulsed high or low (depending on the <code>TRIG_POLARITY</code> parameter) every <a href="./../advanced_config/parameter_reference.html#TRIG_INTERVAL">TRIG_INTERVAL</a> duration. This can be used to trigger most standard machine vision cameras directly. Note that on PX4FMU series hardware (Pixhawk, Pixracer, etc.), the signal level on the AUX pins is 3.3v.</td></tr><tr><td>2</td><td>Enables the Seagull MAP2 interface. This allows the use of the <a href="http://www.seagulluav.com/product/seagull-map2/" target="_blank" rel="noreferrer">Seagull MAP2</a> to interface to a multitude of supported cameras. Pin/Channel 1 (camera trigger) and Pin/Channel 2 (mode selector) of the MAP2 should be connected to the lower and higher mapped <a href="#trigger-output-pin-configuration">camera trigger pins</a>. Using Seagull MAP2, PX4 also supports automatic power control and keep-alive functionalities of Sony Multiport cameras like the QX-1.</td></tr><tr><td>3</td><td>This mode enables MAVLink cameras that used the legacy <a href="#mavlink-command-interface">MAVLink interface listed above</a>. The messages are automatically emitted on the MAVLink <code>onboard</code> channel when found in missions. PX4 emits the <code>CAMERA_TRIGGER</code> MAVLink message when a camera is triggered, by default to the <code>onboard</code> channel (if this is not used, custom stream will need to be enabled). <a href="./../camera/mavlink_v1_camera.html">Simple MAVLink cameras</a> explains this use case in more detail.</td></tr><tr><td>4</td><td>Enables the generic PWM interface. This allows the use of <a href="https://hobbyking.com/en_us/universal-remote-control-infrared-shutter-ir-rc-1g.html" target="_blank" rel="noreferrer">infrared triggers</a> or servos to trigger your camera.</td></tr></tbody></table><h3 id="trigger-output-pin-configuration" tabindex="-1">Trigger Output Pin Configuration <a class="header-anchor" href="#trigger-output-pin-configuration" aria-label="Permalink to &quot;Trigger Output Pin Configuration&quot;">​</a></h3><p>Camera trigger pins are set in the <em>QGroundControl</em> <a href="./../config/actuators.html">Actuators</a> configuration screen.</p><p>The trigger pins can be set by assigning the <code>Camera_Trigger</code> function on any FMU output. If using trigger setup that requires two pins (e.g. Seagull MAP2) you can assign to any two outputs.</p><p>Note however that if a <em>PWM</em> output has been used for camera triggering (such as Seagull MAP2), the whole PWM group cannot be used for anything else (you can&#39;t use another output in the group for an actuator, motor, or camera capture, because the timer has already been used).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>At time of writing triggering only works on FMU pins:</p><ul><li>On a Pixhawk flight controller that has both FMU and I/O boards FMU pins map to <code>AUX</code> outputs (e.g. Pixhawk 4, CUAV v5+) .</li><li>A controller that only has an FMU, the pins map to <code>MAIN</code> outputs (e.g. Pixhawk 4 mini, CUAV v5 nano).</li></ul></div><h3 id="기타-매개-변수" tabindex="-1">기타 매개 변수: <a class="header-anchor" href="#기타-매개-변수" aria-label="Permalink to &quot;기타 매개 변수:&quot;">​</a></h3><table tabindex="0"><thead><tr><th>매개변수</th><th>설명</th></tr></thead><tbody><tr><td><a href="./../advanced_config/parameter_reference.html#TRIG_POLARITY">TRIG_POLARITY</a></td><td>Relevant only while using the GPIO interface. Sets the polarity of the trigger pin. Active high means that the pin is pulled low normally and pulled high on a trigger event. Active low is vice-versa.</td></tr><tr><td><a href="./../advanced_config/parameter_reference.html#TRIG_INTERVAL">TRIG_INTERVAL</a></td><td>Defines the time between two consecutive trigger events in milliseconds.</td></tr><tr><td><a href="./../advanced_config/parameter_reference.html#TRIG_ACT_TIME">TRIG_ACT_TIME</a></td><td>Defines the time in milliseconds the trigger pin is held in the &quot;active&quot; state before returning to neutral. In PWM modes, the minimum is limited to 40 ms to make sure we always fit an activate pulse into the 50Hz PWM signal.</td></tr></tbody></table><p>The full list of parameters pertaining to the camera trigger module can be found on the <a href="./../advanced_config/parameter_reference.html#camera-trigger">parameter reference</a> page.</p><h2 id="camera-capture-configuration" tabindex="-1">Camera Capture Configuration <a class="header-anchor" href="#camera-capture-configuration" aria-label="Permalink to &quot;Camera Capture Configuration&quot;">​</a></h2><p>Cameras can also (optionally) use a camera capture pin to signal the exact moment when a photo/frame is taken. This allows more precise mapping of images to GPS position for geotagging, or the right IMU sample for VIO synchronization, etc.</p><p>Camera capture/feedback is enabled in PX4 by setting <a href="./../advanced_config/parameter_reference.html#CAM_CAP_FBACK">CAM_CAP_FBACK = 1</a>. The pin used for camera capture is then set in the <em>QGroundControl</em> <a href="./../config/actuators.html">Actuators</a> configuration screen by assigning the <code>Camera_Capture</code> function on any FMU output.</p><p>Note that if a <em>PWM output</em> is used as a camera capture input, the whole PWM group cannot be used for anything else (you can&#39;t use another output in the group for an actuator, motor, or camera trigger, because the timer has already been used).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>At time of writing camera capture only works on FMU pins:</p><ul><li>On a Pixhawk flight controller that has both FMU and I/O boards FMU pins map to <code>AUX</code> outputs (e.g. Pixhawk 4, CUAV v5+).</li><li>A controller that only has an FMU, the pins map to <code>MAIN</code> outputs (e.g. Pixhawk 4 mini, CUAV v5 nano).</li></ul></div><p>PX4 detects a rising edge with the appropriate voltage level on the camera capture pin (for Pixhawk flight controllers this is normally 3.3V). If the camera isn&#39;t outputting an appropriate voltage, then additional circuitry will be required to make the signal compatible.</p><p>Cameras that have a hotshoe connector (for connecting a flash) can usually be connected via a hotshoe-adaptor. For example, the <a href="https://www.seagulluav.com/product/seagull-sync2/" target="_blank" rel="noreferrer">Seagull #SYNC2 Universal Camera Hot Shoe Adapter</a> is an optocoupler that decouples and shifts the flash voltage to the Pixhawk voltage. This slides into the flash slot on the top of the camera. The red and black ouptputs are connected to the servo rail/ground and the white wire is connected to the input capture pin.</p><p><img src="'+a+'" alt="Seagull SYNC#2"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>PX4 emits the MAVLink <a href="https://mavlink.io/en/messages/common.html#CAMERA_TRIGGER" target="_blank" rel="noreferrer">CAMERA_TRIGGER</a> message on both camera trigger and camera capture. If camera capture is configured, the timestamp from the camera capture driver is used, otherwise the triggering timestamp.</p></div><h2 id="testing-trigger-functionality" tabindex="-1">Testing Trigger Functionality <a class="header-anchor" href="#testing-trigger-functionality" aria-label="Permalink to &quot;Testing Trigger Functionality&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The following sections are out of date and need retesting.</p></div><ol><li><p>On the PX4 console:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">camera_trigger</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div></li><li><p>From <em>QGroundControl</em>:</p><p>Click on <strong>Trigger Camera</strong> in the main instrument panel. These shots are not logged or counted for geotagging.</p><p><img src="'+r+'" alt="QGC Test Camera"></p></li></ol><h2 id="sony-qx-1-example-photogrammetry" tabindex="-1">Sony QX-1 example (Photogrammetry) <a class="header-anchor" href="#sony-qx-1-example-photogrammetry" aria-label="Permalink to &quot;Sony QX-1 example (Photogrammetry)&quot;">​</a></h2><p><img src="'+o+'" alt="photogrammetry"></p><p>In this example, we will use a Seagull MAP2 trigger cable to interface to a Sony QX-1 and use the setup to create orthomosaics after flying a fully autonomous survey mission.</p><h3 id="trigger-settings" tabindex="-1">Trigger Settings <a class="header-anchor" href="#trigger-settings" aria-label="Permalink to &quot;Trigger Settings&quot;">​</a></h3><p>The recommended camera settings are:</p><ul><li><code>TRIG_INTERFACE=2</code> (Seagull MAP2).</li><li><code>TRIG_MODE=4</code> (Mission controlled).</li><li>Leave the remaining parameters at their defaults.</li></ul><p>You will need to connect the Seagull MAP2 to FMU pins on your autopilot. The other end of the MAP2 cable will go into the QX-1&#39;s &quot;MULTI&quot; port.</p><h3 id="camera-configuration" tabindex="-1">Camera Configuration <a class="header-anchor" href="#camera-configuration" aria-label="Permalink to &quot;Camera Configuration&quot;">​</a></h3><p>We use a Sony QX-1 with a 16-50mm f3.5-5.6 lens for this example.</p><p>To avoid autofocus and metering lag when the camera is triggered, the following guidelines should be followed:</p><ul><li>Manual focus to infinity</li><li>Set camera to continuous shooting mode</li><li>Manually set exposure and aperture</li><li>ISO should be set as low as possible</li><li>Manual white balance suitable for scene</li></ul><h3 id="mission-planning" tabindex="-1">Mission Planning <a class="header-anchor" href="#mission-planning" aria-label="Permalink to &quot;Mission Planning&quot;">​</a></h3><p><img src="'+i+'" alt="QGC Survey Polygon"></p><p><img src="'+n+'" alt="QGC Survey Parameters"></p><h3 id="geotagging" tabindex="-1">Geotagging <a class="header-anchor" href="#geotagging" aria-label="Permalink to &quot;Geotagging&quot;">​</a></h3><p>Download/copy the logfile and images from the flight and point QGroundControl to them. Then click on <strong>Start Tagging</strong>.</p><p><img src="'+s+'" alt="QGC Geotagging"></p><p>You can verify the geotagging using a free online service like <a href="https://www.pic2map.com/" target="_blank" rel="noreferrer">Pic2Map</a>. Note that Pic2Map is limited to only 40 images.</p><h3 id="reconstruction" tabindex="-1">Reconstruction <a class="header-anchor" href="#reconstruction" aria-label="Permalink to &quot;Reconstruction&quot;">​</a></h3><p>We use <a href="https://pix4d.com/" target="_blank" rel="noreferrer">Pix4D</a> for 3D reconstruction.</p><p><img src="'+l+'" alt="GeoTag"></p><h2 id="camera-imu-sync-example-vio" tabindex="-1">Camera-IMU sync example (VIO) <a class="header-anchor" href="#camera-imu-sync-example-vio" aria-label="Permalink to &quot;Camera-IMU sync example (VIO)&quot;">​</a></h2><p>In this example, we will go over the basics of synchronising IMU measurements with visual data to build a stereo Visual-Inertial Navigation System (VINS). To be clear, the idea here isn&#39;t to take an IMU measurement exactly at the same time as we take a picture but rather to correctly time stamp our images so as to provide accurate data to our VIO algorithm.</p><p>The autopilot and companion have different clock bases (boot-time for the autopilot and UNIX epoch for companion), so instead of skewing either clock, we directly observe the time offset between the clocks. This offset is added or subtracted from the timestamps in the MAVLink messages (e.g. <code>HIGHRES_IMU</code>) in the cross-middleware translator component (e.g. MAVROS on the companion and <code>mavlink_receiver</code> in PX4). The actual synchronisation algorithm is a modified version of the Network Time Protocol (NTP) algorithm and uses an exponential moving average to smooth the tracked time offset. This synchronisation is done automatically if MAVROS is used with a high-bandwidth onboard link (MAVLink mode <code>onboard</code>).</p><p>For acquiring synchronised image frames and inertial measurements, we connect the trigger inputs of the two cameras to a GPIO pin on the autopilot. The timestamp of the inertial measurement from start of exposure and a image sequence number is recorded and sent to the companion computer (<code>CAMERA_TRIGGER</code> message), which buffers these packets and the image frames acquired from the camera. They are matched based on the sequence number (first image frame is sequence 0), the images timestamped (with the timestamp from the <code>CAMERA_TRIGGER</code> message) and then published.</p><p>The following diagram illustrates the sequence of events which must happen in order to correctly timestamp our images.</p><p><a href="https://mermaid.live/edit#pako:eNqNUs9rwjAU_lceOW-3nXIQpIoIVkftZIdCeTbPNqxJXJI6ivi_L1Er6Dzs9kK-H3lfviOrjCDGmaPvjnRFE4m1RVVogKXxBFbWjQezg_fPN-CQS0Xgel3Bj_QNKDxY40A6EEYTYOeNQi8rbNs-SkTS62g04DgkqMgi5EG2JguWUPR_vaoLSlh5CKAb63reGuMdoBbR96Zwz7kzvQylcrXjPDFKBe71BYnR3po2ClzhkXnZNR1vFlJ_cR6GMkkn5WRV5tl8NptmZbJa5tlqEXmtMXuYBtMe4m05X-bTbDNegJJtKx1VRgv3NIybQTJOp9l4EH94zGMY99ugmqcfa49q_zyER3aKvmpg-G3QndqS_R_17AJSYU3n9PfdNuzXFJq0YC8sgBVKEbp0jHoF8w0pKhgPo6Addq0vWKFPARp7sg4lYtzbjl5Ytxfoh-oxvsPW0ekXb8TjxQ" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/pako:eNqNUs9rwjAU_lceOW-3nXIQpIoIVkftZIdCeTbPNqxJXJI6ivi_L1Er6Dzs9kK-H3lfviOrjCDGmaPvjnRFE4m1RVVogKXxBFbWjQezg_fPN-CQS0Xgel3Bj_QNKDxY40A6EEYTYOeNQi8rbNs-SkTS62g04DgkqMgi5EG2JguWUPR_vaoLSlh5CKAb63reGuMdoBbR96Zwz7kzvQylcrXjPDFKBe71BYnR3po2ClzhkXnZNR1vFlJ_cR6GMkkn5WRV5tl8NptmZbJa5tlqEXmtMXuYBtMe4m05X-bTbDNegJJtKx1VRgv3NIybQTJOp9l4EH94zGMY99ugmqcfa49q_zyER3aKvmpg-G3QndqS_R_17AJSYU3n9PfdNuzXFJq0YC8sgBVKEbp0jHoF8w0pKhgPo6Addq0vWKFPARp7sg4lYtzbjl5Ytxfoh-oxvsPW0ekXb8TjxQ?type=png" alt="Mermaid sequence diagram"></a></p><h3 id="step-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1" aria-label="Permalink to &quot;Step 1&quot;">​</a></h3><p>First, set the TRIG_MODE to 1 to make the driver wait for the start command and reboot your FCU to obtain the remaining parameters.</p><h3 id="step-2" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2" aria-label="Permalink to &quot;Step 2&quot;">​</a></h3><p>For the purposes of this example we will be configuring the trigger to operate in conjunction with a Point Grey Firefly MV camera running at 30 FPS.</p><ul><li><code>TRIG_INTERVAL</code>: 33.33 ms</li><li><code>TRIG_POLARITY</code>: 0 (active low)</li><li><code>TRIG_ACT_TIME</code>: 0.5 ms. The manual specifies it only has to be a minimum of 1 microsecond.</li><li><code>TRIG_MODE</code>: 1, because we want our camera driver to be ready to receive images before starting to trigger. This is essential to properly process sequence numbers.</li></ul><h3 id="step-3" tabindex="-1">Step 3 <a class="header-anchor" href="#step-3" aria-label="Permalink to &quot;Step 3&quot;">​</a></h3><p>Wire up your cameras to your AUX port by connecting the ground and signal pins to the appropriate place.</p><h3 id="step-4" tabindex="-1">Step 4 <a class="header-anchor" href="#step-4" aria-label="Permalink to &quot;Step 4&quot;">​</a></h3><p>You will have to modify your driver to follow the sequence diagram above. Public reference implementations for <a href="https://github.com/ProjectArtemis/ueye_cam" target="_blank" rel="noreferrer">IDS Imaging UEye</a> cameras and for <a href="https://github.com/andre-nguyen/camera1394" target="_blank" rel="noreferrer">IEEE1394 compliant</a> cameras are available.</p><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li>Camera trigger driver: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/camera_trigger" target="_blank" rel="noreferrer">source code</a></li><li>Camera capture driver: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/camera_capture" target="_blank" rel="noreferrer">source code</a></li></ul>',98)]))}const C=c(g,[["render",p]]);export{T as __pageData,C as default};
