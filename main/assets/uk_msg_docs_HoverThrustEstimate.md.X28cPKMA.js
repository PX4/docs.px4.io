import{_ as a,c as i,a8 as t,o as e}from"./chunks/framework.BDnHobkS.js";const E=JSON.parse('{"title":"HoverThrustEstimate (повідомлення UORB)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/msg_docs/HoverThrustEstimate.md","filePath":"uk/msg_docs/HoverThrustEstimate.md"}'),n={name:"uk/msg_docs/HoverThrustEstimate.md"};function l(r,s,h,o,p,c){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="hoverthrustestimate-повідомлення-uorb" tabindex="-1">HoverThrustEstimate (повідомлення UORB) <a class="header-anchor" href="#hoverthrustestimate-повідомлення-uorb" aria-label="Permalink to &quot;HoverThrustEstimate (повідомлення UORB)&quot;">​</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/HoverThrustEstimate.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp                # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample         # time of corresponding sensor data last used </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> this estimate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 hover_thrust		# estimated hover thrust [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 hover_thrust_var	# estimated hover thrust variance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_innov		# innovation of the last acceleration fusion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_innov_var		# innovation variance of the last acceleration fusion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_innov_test_ratio	# normalized innovation squared test ratio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 accel_noise_var		# vertical acceleration noise variance estimated form innovation residual</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> valid</span></span></code></pre></div>`,3)]))}const d=a(n,[["render",l]]);export{E as __pageData,d as default};
