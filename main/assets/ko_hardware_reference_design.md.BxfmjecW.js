import{_ as a}from"./chunks/px4_fmu_io_functions.1hTSI2Tv.js";import{_ as t,c as r,a8 as o,o as i}from"./chunks/framework.BDnHobkS.js";const g=JSON.parse('{"title":"PX4 참조 비행 콘트롤러 디자인","description":"","frontmatter":{},"headers":[],"relativePath":"ko/hardware/reference_design.md","filePath":"ko/hardware/reference_design.md"}'),n={name:"ko/hardware/reference_design.md"};function s(l,e,h,d,c,p){return i(),r("div",null,e[0]||(e[0]=[o('<h1 id="px4-참조-비행-콘트롤러-디자인" tabindex="-1">PX4 참조 비행 콘트롤러 디자인 <a class="header-anchor" href="#px4-참조-비행-콘트롤러-디자인" aria-label="Permalink to &quot;PX4 참조 비행 콘트롤러 디자인&quot;">​</a></h1><p>The PX4 reference design is the <a href="./../flight_controller/pixhawk_series.html">Pixhawk series</a> of flight controllers. First released in 2011, this design is now in its 5th <a href="#reference_design_generations">generation</a> (with the 6th generation board design in progress).</p><h2 id="바이너리-호환성" tabindex="-1">바이너리 호환성 <a class="header-anchor" href="#바이너리-호환성" aria-label="Permalink to &quot;바이너리 호환성&quot;">​</a></h2><p>특정 디자인으로 제조된 모든 보드는 바이너리 호환이 되어야 합니다(즉, 동일한 펌웨어를 실행하여야 함). 2018년부터 우리는 이 호환성을 확인하고 인증할 수 있는 바이너리 호환성 테스트 제품군을 제공할 것입니다.</p><p>FMU 1~3세대는 개방형 하드웨어로 설계되었으나, FMU 4세대와 5세대는 핀아웃 및 전원 공급 사양만 제공했습니다(개략도는 개별 제조업체에서 작성하였습니다). 우수한 호환성을 위하여 FMUv6 이상은 완전한 참조 디자인 모델링합니다.</p><p><a id="reference_design_generations"></a></p><h2 id="레퍼런스-디자인-세대" tabindex="-1">레퍼런스 디자인 세대 <a class="header-anchor" href="#레퍼런스-디자인-세대" aria-label="Permalink to &quot;레퍼런스 디자인 세대&quot;">​</a></h2><ul><li>FMUv1: Development board (STM32F407, 128 KB RAM, 1MB flash, <a href="https://github.com/PX4/Hardware/tree/master/FMUv1" target="_blank" rel="noreferrer">schematics</a>) (no longer supported by PX4)</li><li>FMUv2: Pixhawk (STM32F427, 168 MHz, 192 KB RAM, 1MB flash, <a href="https://github.com/PX4/Hardware/tree/master/FMUv2" target="_blank" rel="noreferrer">schematics</a>)</li><li>FMUv3: Pixhawk variants with 2MB flash (3DR Pixhawk 2 (Solo), Hex Pixhawk 2.1, Holybro Pixfalcon, 3DR Pixhawk Mini, STM32F427, 168 MHz, 256 KB RAM, 2 MB flash, <a href="https://github.com/PX4/Hardware/tree/master/FMUv3_REV_D" target="_blank" rel="noreferrer">schematics</a>)</li><li>FMUv4: Pixracer (STM32F427, 168 MHz, 256 KB RAM, 2 MB flash, <a href="https://docs.google.com/spreadsheets/d/1raRRouNsveQz8cj-EneWG6iW0dqGfRAifI91I2Sr5E0/edit#gid=1585075739" target="_blank" rel="noreferrer">pinout</a>)</li><li>FMUv4 PRO: Drotek Pixhawk 3 PRO (STM32F469, 180 MHz, 384 KB RAM, 2 MB flash, <a href="https://docs.google.com/spreadsheets/d/1raRRouNsveQz8cj-EneWG6iW0dqGfRAifI91I2Sr5E0/edit#gid=1585075739" target="_blank" rel="noreferrer">pinout</a>)</li><li>FMUv5: Holybro Pixhawk 4 (STM32F765, 216 MHz, 512 KB RAM, 2 MB flash, <a href="https://docs.google.com/spreadsheets/d/1-n0__BYDedQrc_2NHqBenG1DNepAgnHpSGglke-QQwY/edit#gid=912976165" target="_blank" rel="noreferrer">pinout</a>)</li><li>FMUv6: work in progress, final name TBD, variant 6s (STM32H7, 400 MHz, 2 MB RAM, 2 MB flash) and variant 6i (i.MX RT1050, 600 MHz, 512 KB RAM, external flash)</li></ul><h2 id="메인-io-기능-분석" tabindex="-1">메인 IO 기능 분석 <a class="header-anchor" href="#메인-io-기능-분석" aria-label="Permalink to &quot;메인 IO 기능 분석&quot;">​</a></h2><p>아래 다이어그램은 Pixhawk 시리즈 비행 콘트롤러의 FMU와 I/O 보드간 기능과 버스 분할을 나타냅니다(보드는 단일 물리적 모듈에 통합됨).</p><p><img src="'+a+'" alt="PX4 Main/IO Functional Breakdown"></p><p>일부 Pixhawk 시리즈 컨트롤러는 공간이나 복잡성을 줄이기 위하여 특정 보드 의 기능 향상을 위하여 I/O 보드 없이 제작됩니다. In this case the I/O driver is not started.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Manufacturer flight controller variants without an I/O board are often named as a &quot;diminutive&quot; of a version that includes the I/O board: e.g. <em>Pixhawk 4</em> <strong>Mini</strong><em>, _CUAV v5 <strong>nano</strong></em>.</p></div><p>Build targets that must run on flight controllers with an I/O board map the FMU outputs to <code>AUX</code> and the I/0 outputs to <code>MAIN</code> (see diagram above). If the target is run on hardware where I/O board is not present or has been disabled, the PWM MAIN outputs will not be present. You might see this, for example, by running <code>px4_fmu-v5_default</code> on <a href="./../flight_controller/pixhawk4.html">Pixhawk 4</a> (with IO) and <a href="./../flight_controller/pixhawk4_mini.html">Pixhawk 4 Mini</a> (without I/O).</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>On <a href="./../flight_controller/pixhawk4_mini.html">Pixhawk 4 Mini</a> this results in a mismatch between the <code>MAIN</code> label screenprinted on the flight controller and the <code>AUX</code> bus shown during <a href="./../config/actuators.html">Actuator Configuration</a>.</p><div class="info custom-block"><p class="custom-block-title">that if a build target is only ever intended to run on a flight controller that does not have an I/0 board, then the FMU outputs are mapped to <code>MAIN</code> (for example, the <code>px4_fmu-v4_default</code> target for <a href="./../flight_controller/pixracer.html">Pixracer</a>).</p><p>PX4 PWM outputs are mapped to either <code>MAIN</code> or <code>AUX</code> ports in <a href="./../config/actuators.html">Actuator Configuration</a>.</p></div></div>',15)]))}const m=t(n,[["render",s]]);export{g as __pageData,m as default};
