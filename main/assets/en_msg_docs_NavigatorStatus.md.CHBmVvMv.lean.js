import{_ as a,c as i,a8 as t,o as e}from"./chunks/framework.BDnHobkS.js";const g=JSON.parse('{"title":"NavigatorStatus (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"en/msg_docs/NavigatorStatus.md","filePath":"en/msg_docs/NavigatorStatus.md"}'),n={name:"en/msg_docs/NavigatorStatus.md"};function l(p,s,h,r,o,k){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="navigatorstatus-uorb-message" tabindex="-1">NavigatorStatus (UORB message) <a class="header-anchor" href="#navigatorstatus-uorb-message" aria-label="Permalink to &quot;NavigatorStatus (UORB message)&quot;">â€‹</a></h1><p>Current status of a Navigator mode The possible values of nav_state are defined in the VehicleStatus msg.</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/NavigatorStatus.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Current status of a Navigator mode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># The possible values of nav_state are defined in the VehicleStatus msg.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp  # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 nav_state   # Source </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (values in </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">VehicleStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 failure     # Navigator failure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 FAILURE_NONE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 FAILURE_HAGL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # Target altitude exceeds maximum height above ground</span></span></code></pre></div>`,4)]))}const u=a(n,[["render",l]]);export{g as __pageData,u as default};
