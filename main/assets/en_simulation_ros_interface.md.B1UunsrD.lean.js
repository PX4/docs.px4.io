import{_ as i}from"./chunks/px4_sitl_overview.CXPr94af.js";import{_ as a,c as n,a8 as t,o as l}from"./chunks/framework.BDnHobkS.js";const g=JSON.parse('{"title":"ROS with Gazebo Classic Simulation","description":"","frontmatter":{},"headers":[],"relativePath":"en/simulation/ros_interface.md","filePath":"en/simulation/ros_interface.md"}'),h={name:"en/simulation/ros_interface.md"};function e(p,s,k,r,o,d){return l(),n("div",null,s[0]||(s[0]=[t('<h1 id="ros-with-gazebo-classic-simulation" tabindex="-1">ROS with Gazebo Classic Simulation <a class="header-anchor" href="#ros-with-gazebo-classic-simulation" aria-label="Permalink to &quot;ROS with Gazebo Classic Simulation&quot;">​</a></h1><p><a href="./../ros/">ROS</a> (Robot Operating System) can be used with PX4 and the <a href="./../sim_gazebo_classic/">Gazebo Classic</a> simulator. It uses the <a href="./../ros/mavros_installation.html">MAVROS</a> MAVLink node to communicate with PX4.</p><p>The ROS/Gazebo Classic integration with PX4 follows the pattern in the diagram below (this shows the <em>generic</em> <a href="./../simulation/#sitl-simulation-environment">PX4 simulation environment</a>). PX4 communicates with the simulator (e.g. Gazebo Classic) to receive sensor data from the simulated world and send motor and actuator values. It communicates with the GCS and an Offboard API (e.g. ROS) to send telemetry from the simulated environment and receive commands.</p><p><img src="'+i+`" alt="PX4 SITL overview"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The only <em>slight</em> difference to &quot;normal behaviour&quot; is that ROS initiates the connection on port 14557, while it is more typical for an offboard API to listen for connections on UDP port 14540.</p></div><h2 id="installing-ros-and-gazebo-classic" tabindex="-1">Installing ROS and Gazebo Classic <a class="header-anchor" href="#installing-ros-and-gazebo-classic" aria-label="Permalink to &quot;Installing ROS and Gazebo Classic&quot;">​</a></h2><p><a href="./../ros/mavros_installation.html">ROS (1) with MAVROS Installation Guide</a> explains how to set up a guide for working with ROS (1), MAVROS, and PX4.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><em>ROS</em> is only supported on Linux (not macOS or Windows).</p></div><h2 id="launching-ros-simulation" tabindex="-1">Launching ROS/Simulation <a class="header-anchor" href="#launching-ros-simulation" aria-label="Permalink to &quot;Launching ROS/Simulation&quot;">​</a></h2><p>The command below can be used to launch the simulation and connect ROS to it via <a href="./../ros/mavros_installation.html">MAVROS</a>, where <code>fcu_url</code> is the IP / port of the computer running the simulation:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roslaunch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavros</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.launch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcu_url:=&quot;udp://:14540@192.168.1.36:14557&quot;</span></span></code></pre></div><p>To connect to localhost, use this URL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roslaunch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavros</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.launch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcu_url:=&quot;udp://:14540@127.0.0.1:14557&quot;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>It can be useful to call <em>roslaunch</em> with the <code>-w NUM_WORKERS</code> (override number of worker threads) and/or <code>-v</code> (verbose) in order to get warnings about missing dependencies in your setup. For example:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roslaunch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavros</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.launch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcu_url:=&quot;udp://:14540@127.0.0.1:14557&quot;</span></span></code></pre></div></div><h2 id="launching-gazebo-classic-with-ros-wrappers" tabindex="-1">Launching Gazebo Classic with ROS Wrappers <a class="header-anchor" href="#launching-gazebo-classic-with-ros-wrappers" aria-label="Permalink to &quot;Launching Gazebo Classic with ROS Wrappers&quot;">​</a></h2><p>The Gazebo Classic simulation can be modified to integrate sensors publishing directly to ROS topics e.g. the Gazebo Classic ROS laser plugin. To support this feature, Gazebo Classic must be launched with the appropriate ROS wrappers.</p><p>There are ROS launch scripts available to run the simulation wrapped in ROS:</p><ul><li><a href="https://github.com/PX4/PX4-Autopilot/blob/main/launch/posix_sitl.launch" target="_blank" rel="noreferrer">posix_sitl.launch</a>: plain SITL launch</li><li><a href="https://github.com/PX4/PX4-Autopilot/blob/main/launch/mavros_posix_sitl.launch" target="_blank" rel="noreferrer">mavros_posix_sitl.launch</a>: SITL and MAVROS</li></ul><p>To run SITL wrapped in ROS the ROS environment needs to be updated, then launch as usual:</p><p>(optional): only source the catkin workspace if you compiled MAVROS or other ROS packages from source:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DONT_RUN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/catkin_ws/devel/setup.bash</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # (optional)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/setup_gazebo.bash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/build/px4_sitl_default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ROS_PACKAGE_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ROS_PACKAGE_PATH:$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ROS_PACKAGE_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ROS_PACKAGE_PATH:$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)/Tools/simulation/gazebo-classic/sitl_gazebo-classic</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roslaunch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> posix_sitl.launch</span></span></code></pre></div><p>Include one of the above mentioned launch files in your own launch file to run your ROS application in the simulation.</p><h2 id="what-s-happening-behind-the-scenes" tabindex="-1">What&#39;s Happening Behind the Scenes <a class="header-anchor" href="#what-s-happening-behind-the-scenes" aria-label="Permalink to &quot;What&#39;s Happening Behind the Scenes&quot;">​</a></h2><p>This section shows how the <em>roslaunch</em> instructions provided previously actually work (you can follow them to manually launch the simulation and ROS).</p><p>You will need three terminals, in all of them the ros environment must be sourced.</p><p>First start the simulator using the command below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ROS_PACKAGE_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ROS_PACKAGE_PATH:$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roslaunch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4.launch</span></span></code></pre></div><p>The console will look like this:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [px4] instance: 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">______</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  __</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   __</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ___</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ___</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\ \\ \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\ \\ \\_</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">\\_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     \\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [px4] startup script: /bin/sh etc/init.d-posix/rcS 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [init] found model autostart file as SYS_AUTOSTART</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10016</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [param] selected parameter default file parameters.bson</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [param] importing from </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;parameters.bson&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [parameters] BSON document size 295 bytes, decoded 295 bytes (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INT32:12,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FLOAT:3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [param] selected parameter backup file parameters_backup.bson</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [dataman] data manager file </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dataman&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size is 7866640 bytes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">etc/init.d-posix/rcS:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 31:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Illegal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [init] PX4_SIM_HOSTNAME: localhost</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [simulator_mavlink] Waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> simulator to accept connection on TCP port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4560</span></span></code></pre></div><p>In the second terminal make sure you will be able to start gazebo with the world files defined in PX4-Autopilot. To do this set your environment variables to include the appropriate <code>sitl_gazebo-classic</code> folders.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/setup_gazebo.bash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/build/px4_sitl_default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ROS_PACKAGE_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ROS_PACKAGE_PATH:$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)/Tools/simulation/gazebo-classic/sitl_gazebo-classic</span></span></code></pre></div><p>Now start Gazebo Classic like you would when working with ROS</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roslaunch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo_ros</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty_world.launch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world_name:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds/empty.world</span></span></code></pre></div><p>In the third terminal make sure you will be able to spawn the model with the sdf files defined in PX4-Autopilot. To do this set your environment variables to include the appropriate <code>sitl_gazebo-classic</code> folders.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PX4-Autopilot_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/setup_gazebo.bash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/build/px4_sitl_default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ROS_PACKAGE_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ROS_PACKAGE_PATH:$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)/Tools/simulation/gazebo-classic/sitl_gazebo-classic</span></span></code></pre></div><p>Now insert the Iris quadcopter model like you would when working with ROS. Once the Iris is loaded it will automatically connect to the px4 app.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rosrun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo_ros</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spawn_model</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sdf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Tools/simulation/gazebo-classic/sitl_gazebo-classic/models/iris/iris.sdf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iris</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -z</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div>`,37)]))}const u=a(h,[["render",e]]);export{g as __pageData,u as default};
