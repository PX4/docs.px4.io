import{_ as t,a as i,b as l,c as a,d as o,e as n,f as s,g as r,h as p,i as g,j as c,k as h}from"./chunks/eclipse_svd_file_path.BH0tu80j.js";import{_ as d,c as u,a8 as m,o as b}from"./chunks/framework.BDnHobkS.js";const C=JSON.parse('{"title":"Налагодження з Eclipse та J-Link","description":"","frontmatter":{},"headers":[],"relativePath":"uk/debug/eclipse_jlink.md","filePath":"uk/debug/eclipse_jlink.md"}'),k={name:"uk/debug/eclipse_jlink.md"};function f(_,e,w,E,S,P){return b(),u("div",null,e[0]||(e[0]=[m('<h1 id="налагодження-з-eclipse-та-j-link" tabindex="-1">Налагодження з Eclipse та J-Link <a class="header-anchor" href="#налагодження-з-eclipse-та-j-link" aria-label="Permalink to &quot;Налагодження з Eclipse та J-Link&quot;">​</a></h1><p>This topic explains how to setup and use <a href="https://gnu-mcu-eclipse.github.io/" target="_blank" rel="noreferrer">MCU Eclipse</a> with a <em>Segger Jlink adapter</em> to debug PX4 running on NuttX (e.g. Pixhawk series boards).</p><h2 id="необхідне-обладнання" tabindex="-1">Необхідне обладнання <a class="header-anchor" href="#необхідне-обладнання" aria-label="Permalink to &quot;Необхідне обладнання&quot;">​</a></h2><ul><li><a href="https://www.segger.com/products/debug-probes/j-link/models/j-link-edu-mini/" target="_blank" rel="noreferrer">J-Link EDU Mini</a></li><li>Adapter to connect Segger JLink to Flight Controller <a href="./../debug/swd_debug.html">SWD Debug Port</a> (debug port).</li><li>Мікро USB кабель</li></ul><h2 id="встановлення" tabindex="-1">Встановлення <a class="header-anchor" href="#встановлення" aria-label="Permalink to &quot;Встановлення&quot;">​</a></h2><h3 id="px4" tabindex="-1">PX4 <a class="header-anchor" href="#px4" aria-label="Permalink to &quot;PX4&quot;">​</a></h3><p>Налаштуйте PX4, дотримуючись звичайних вказівок:</p><ul><li><a href="./../dev_setup/dev_env.html">Setup the PX4 Developer Environment/Toolchain</a> for your platform (e.g. for Linux see: <a href="./../dev_setup/dev_env_linux_ubuntu.html">Development Environment on Ubuntu LTS / Debian Linux</a>).</li><li><a href="./../dev_setup/building_px4.html">Download PX4</a> and optionally build it on the command line.</li></ul><h3 id="eclipse" tabindex="-1">Eclipse <a class="header-anchor" href="#eclipse" aria-label="Permalink to &quot;Eclipse&quot;">​</a></h3><p>To install <em>Eclipse</em>:</p><ol><li>Download <a href="https://github.com/gnu-mcu-eclipse/org.eclipse.epp.packages/releases/" target="_blank" rel="noreferrer">Eclipse CDT for C/C++ Developers</a> (MCU GitHub).</li><li>Розпакуйте папку Eclipse та скопіюйте її куди завгодно (немає потреби запускати будь-які сценарії установки).</li><li>Run <em>Eclipse</em> and choose a location for your initial workbench.</li></ol><h3 id="інструменти-segger-jlink" tabindex="-1">Інструменти Segger Jlink <a class="header-anchor" href="#інструменти-segger-jlink" aria-label="Permalink to &quot;Інструменти Segger Jlink&quot;">​</a></h3><p>To install the <em>Segger Jlink</em> tools:</p><ol><li>Download and run the <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack" target="_blank" rel="noreferrer">J-Link Software and Documentation Pack</a> for your OS (Windows and Linux packages available). <ul><li>On Linux the tools are installed in <strong>/usr/bin</strong>.</li></ul></li></ol><p>For more information, see: <a href="https://gnu-mcu-eclipse.github.io/debug/jlink/install/" target="_blank" rel="noreferrer">https://gnu-mcu-eclipse.github.io/debug/jlink/install/</a>.</p><h2 id="перше-використання" tabindex="-1">Перше використання <a class="header-anchor" href="#перше-використання" aria-label="Permalink to &quot;Перше використання&quot;">​</a></h2><ol><li><p>Connect the <em>Segger JLink</em> to the host computer and the <a href="./../debug/swd_debug.html">flight controller debug port</a> (via an adapter).</p></li><li><p>Увімкніть модульний політний контролер.</p></li><li><p>Run <em>Eclipse</em>.</p></li><li><p>Add a source by choosing <strong>File &gt; Import &gt; C/C++ &gt; Existing Code as Makefile Project</strong> and click <strong>Next</strong>.</p></li><li><p>Point it to the <strong>PX4-Autopilot</strong> folder and give it a name, then select <em>ARM Cross GCC</em> in the <em>Toolchain for Indexer Settings</em> and click <strong>Finish</strong>. Імпорт триває деякий час. Дочекайтеся його завершення.</p></li><li><p>Set the MCU settings: right-click on the top-level project in the Project Explorer, select <em>Properties</em> then under MCU choose <em>SEGGER J-Link Path</em>. Встановіть його, як показано на знімку екрану нижче. <img src="'+t+'" alt="Eclipse: Segger J-Link Path"></p></li><li><p>Пакети з оновленнями:</p><ul><li><p>Click the small icon on the top right called <em>Open Perspective</em> and open the <em>Packs</em> perspective. <img src="'+i+`" alt="Eclipse: Workspace"></p></li><li><p>Click the <strong>update all</strong> button.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This takes a VERY LONG TIME (10 minutes). Ігноруйте всі помилки про відсутні пакети.</p></div></li></ul></li></ol><p>:::</p><pre><code> ![Eclipse: Workspace Packs Perspective](../../assets/debug/eclipse_packs_perspective.jpg)
</code></pre><ul><li>The STM32Fxx devices are found in the Keil folder, install by right-clicking and then selecting <strong>install</strong> on the according device for F4 and F7.</li></ul><ol start="8"><li><p>Налаштування конфігурації налагодження для цілі:</p><ul><li>Right click project and open the <em>Settings</em> (menu: <strong>C/C++ Build &gt; Settings</strong>)</li><li>Choose the <em>Devices</em> Tab, <em>Devices</em> section (Not <em>Boards</em>).</li><li>Знайдіть FMU чіп, який ви хочете налагодити.</li></ul><p><img src="`+l+'" alt="Eclipse: Select FMU in settings"></p></li><li><p>Select debug configurations with the small drop-down next to the bug symbol: <img src="'+a+'" alt="Eclipse: Debug config"></p></li><li><p>Then select <em>GDB SEGGER J-Link Debugging</em> and then the <strong>New config</strong> button on the top left. <img src="'+o+`" alt="Eclipse: GDB Segger Debug config"></p></li><li><p>Налаштування конфігурації збірки:</p><ul><li><p>Give it a name and set the <em>C/C++ Application</em> to the corresponding <strong>.elf</strong> file.</p></li><li><p>Choose <em>Disable Auto build</em></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Remember that you must build the target from the command line before starting a debug session.</p></div></li></ul></li></ol><p>:::</p><pre><code>![Eclipse: GDB Segger Debug config](../../assets/debug/eclipse_settings_debug_config_gdb_segger_build_config.png)
</code></pre><ol start="12"><li><p>The <em>Debugger</em> and <em>Startup</em> tabs shouldn’t need any modifications (just verify your settings with the screenshots below)</p><p><img src="`+n+'" alt="Eclipse: GDB Segger Debug config: debugger tab"><img src="'+s+'" alt="Eclipse: GDB Segger Debug config: startup tab"></p></li></ol><h2 id="відлагодження-з-урахуванням-завдань-segger" tabindex="-1">Відлагодження з урахуванням завдань SEGGER <a class="header-anchor" href="#відлагодження-з-урахуванням-завдань-segger" aria-label="Permalink to &quot;Відлагодження з урахуванням завдань SEGGER&quot;">​</a></h2><p>Task-aware debugging (also known as <a href="https://www.segger.com/products/debug-probes/j-link/tools/j-link-gdb-server/thread-aware-debugging/" target="_blank" rel="noreferrer">thread-aware debugging</a>) allows you to show the context of all running threads/tasks instead of just the stack current task. Це досить корисно, оскільки PX4 має тенденцію запускати виконання багато різних завдань.</p><p>Для активації цієї функції в Eclipse:</p><ol><li><p>You first need to enable <code>CONFIG_DEBUG_TCBINFO</code> in the NuttX configuration for your build (to expose the TCB offsets).</p><ul><li><p>Відкрийте термінал у кореневій теці вихідного коду PX4-Autopilot</p></li><li><p>In the terminal, open <code>menuconfig</code> using the appropriate make target for the build. Це виглядатиме приблизно так:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boardguiconfig</span></span></code></pre></div><p>(See <a href="./../hardware/porting_guide_config.html#px4-menuconfig-setup">PX4 Menuconfig Setup</a> for more information) on using the config tools).</p></li><li><p>Ensure that the <em>Enable TCBinfo struct for debug</em> is selected as shown: <img src="'+r+'" alt="NuttX: Menuconfig: CONFIGDEBUGTCBINFO"></p></li></ul></li><li><p>Compile the <strong>jlink-nuttx.so</strong> library in the terminal by running the following command in the terminal: <code>make jlink-nuttx</code></p></li><li><p>Змініть Eclipse, щоб використовувати цю бібліотеку. In the <em>J-Link GDB Server Setup</em> configuration, update <strong>Other options</strong> to include <code>-rtos /home/&lt;PX4 path&gt;/Tools/jlink-nuttx.so</code>, as shown in the image below.</p><p><img src="'+p+'" alt="Eclipse: GDB Segger Debug config RTOS aware: debugger tab"></p></li><li><p>Під час запуску налагоджувача ви повинні побачити зараз декілька потоків замість одного:</p><p><img src="'+g+'" alt="Eclipse: GDB Segger Debug config RTOS aware: debug session"></p></li></ol><h2 id="усунення-проблем" tabindex="-1">Усунення проблем <a class="header-anchor" href="#усунення-проблем" aria-label="Permalink to &quot;Усунення проблем&quot;">​</a></h2><h3 id="цільовии-процесор-відсутніи-в-package-manager" tabindex="-1">Цільовий процесор відсутній в Package Manager <a class="header-anchor" href="#цільовии-процесор-відсутніи-в-package-manager" aria-label="Permalink to &quot;Цільовий процесор відсутній в Package Manager&quot;">​</a></h3><p>Якщо цільовий ЦП не відображається в package manager, вам може знадобитися ці крок для запуску відображення реєстру.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This should not generally happen (but anecdotally has been reported when connecting to an STM F7 controller).</p></div><p>Adding missing SVD files for the <em>Peripheral View</em>:</p><ol><li><p>Find out where MCU Eclipse stores its packages (<strong>Preferences &gt; C/C++ &gt; MCU Packages</strong>):</p><p><img src="'+c+'" alt="Eclipse: MCU Packages"></p></li><li><p>Завантажте відсутні пакети з: <a href="http://www.keil.com/dd2/Pack/" target="_blank" rel="noreferrer">http://www.keil.com/dd2/Pack/</a></p></li><li><p>Open downloaded pack with a decompression tool, and extract the <strong>.SVD</strong> files from: <strong>/CMSIS/SVD</strong>.</p></li><li><p>Select desired <strong>.SVD</strong> file in: <strong>Debug Options &gt; GDB SEGGER JLink Debugging &gt; SVD Path</strong></p><p><img src="'+h+'" alt="Eclipse: SVD File path"></p></li></ol>',34)]))}const x=d(k,[["render",f]]);export{C as __pageData,x as default};
