import{_ as e,c as a,a8 as i,o as s}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"NuttX 보드 포팅 가이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/hardware/porting_guide_nuttx.md","filePath":"ko/hardware/porting_guide_nuttx.md"}'),n={name:"ko/hardware/porting_guide_nuttx.md"};function r(o,t,l,h,p,d){return s(),a("div",null,t[0]||(t[0]=[i(`<h1 id="nuttx-보드-포팅-가이드" tabindex="-1">NuttX 보드 포팅 가이드 <a class="header-anchor" href="#nuttx-보드-포팅-가이드" aria-label="Permalink to &quot;NuttX 보드 포팅 가이드&quot;">​</a></h1><p>NuttX의 PX4를 포팅하려면, 하드웨어가 NuttX를 지원하여야 합니다. The NuttX project maintains an excellent <a href="https://cwiki.apache.org/confluence/display/NUTTX/Porting+Guide" target="_blank" rel="noreferrer">porting guide</a> for porting NuttX to a new computing platform.</p><p>The following guide assumes you are using an already supported hardware target or have ported NuttX (including the <a href="https://github.com/PX4/PX4-Autopilot/tree/main/platforms/nuttx/src/px4" target="_blank" rel="noreferrer">PX4 base layer</a>) already.</p><p>The configuration files for all boards, including linker scripts and other required settings, are located under <a href="https://github.com/PX4/PX4-Autopilot/tree/main/boards/" target="_blank" rel="noreferrer">/boards</a> in a vendor- and board-specific directory (i.e. <strong>boards/<em>VENDOR</em>/<em>MODEL</em>/</strong>).</p><p>The following example uses FMUv5 as it is a recent <a href="./../hardware/reference_design.html">reference configuration</a> for NuttX based flight controllers:</p><ul><li>Running <code>make px4_fmu-v5_default</code> from the <strong>PX4-Autopilot</strong> directory will build the FMUv5 config</li><li>The base FMUv5 configuration files are located in: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/boards/px4/fmu-v5" target="_blank" rel="noreferrer">/boards/px4/fmu-v5</a>. <ul><li>Board specific header (NuttX pins and clock configuration): <a href="https://github.com/PX4/PX4-Autopilot/blob/main/boards/px4/fmu-v5/nuttx-config/include/board.h" target="_blank" rel="noreferrer">/boards/px4/fmu-v5/nuttx-config/include/board.h</a>.</li><li>Board specific header (PX4 configuration): <a href="https://github.com/PX4/PX4-Autopilot/blob/main/boards/px4/fmu-v5/src/board_config.h" target="_blank" rel="noreferrer">/boards/px4/fmu-v5/src/board_config.h</a>.</li><li>NuttX OS config (created with NuttX menuconfig): <a href="https://github.com/PX4/PX4-Autopilot/blob/main/boards/px4/fmu-v5/nuttx-config/nsh/defconfig" target="_blank" rel="noreferrer">/boards/px4/fmu-v5/nuttx-config/nsh/defconfig</a>.</li><li>Build configuration: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/boards/px4/fmu-v5/default.px4board" target="_blank" rel="noreferrer">boards/px4/fmu-v5/default.px4board</a>.</li></ul></li></ul><h2 id="nuttx-메뉴-구성-설정" tabindex="-1">NuttX 메뉴 구성 설정 <a class="header-anchor" href="#nuttx-메뉴-구성-설정" aria-label="Permalink to &quot;NuttX 메뉴 구성 설정&quot;">​</a></h2><p>To modify the NuttX OS configuration, you can use <a href="https://bitbucket.org/patacongo/nuttx/src/master/" target="_blank" rel="noreferrer">menuconfig</a> using the PX4 shortcuts:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> menuconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qconfig</span></span></code></pre></div><p>For fresh installs of PX4 onto Ubuntu using <a href="https://github.com/PX4/PX4-Autopilot/blob/main/Tools/setup/ubuntu.sh" target="_blank" rel="noreferrer">ubuntu.sh</a> you will also need to install <em>kconfig</em> tools from <a href="https://bitbucket.org/nuttx/tools/src/master/" target="_blank" rel="noreferrer">NuttX tools</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The following steps are not required if using the <a href="https://hub.docker.com/r/px4io/px4-dev-nuttx/" target="_blank" rel="noreferrer">px4-dev-nuttx</a> docker container or have installed to macOS using our normal instructions (as these include<code>kconfig-mconf</code>).</p></div><p>임의의 디렉터리에서 다음 명령어를 실행합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://bitbucket.org/nuttx/tools.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tools/kconfig-frontends</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gperf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-mconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-nconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-gconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-qconf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=/usr</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>The <code>--prefix=/usr</code> determines the specific installation location (which must be in the <code>PATH</code> environment variable). The <code>--enable-mconf</code> and <code>--enable-qconf</code> options will enable the <code>menuconfig</code> and <code>qconfig</code> options respectively.</p><p>To run <code>qconfig</code> you may need to install additional Qt dependencies.</p><h3 id="부트로더" tabindex="-1">부트로더 <a class="header-anchor" href="#부트로더" aria-label="Permalink to &quot;부트로더&quot;">​</a></h3><p>먼저 하드웨어 대상에 적합한 부트로더가 필요합니다.</p><ul><li>STM32H7: 부트로더는 NuttX를 기반으로 하며, PX4 펌웨어에 포함되어 있습니다. See <a href="https://github.com/PX4/PX4-Autopilot/tree/main/boards/holybro/durandal-v1/nuttx-config/bootloader" target="_blank" rel="noreferrer">here</a> for an example.</li><li>다른 대상의 경우 <a href="https://github.com/PX4/Bootloader%EA%B0%80" target="_blank" rel="noreferrer">https://github.com/PX4/Bootloader가</a> 사용됩니다. See <a href="https://github.com/PX4/Bootloader/pull/155/files" target="_blank" rel="noreferrer">here</a> for an example how to add a new target. Then checkout the <a href="./../software_update/stm32_bootloader.html">building and flashing instructions</a>.</li></ul><h3 id="펌웨어-포팅-단계" tabindex="-1">펌웨어 포팅 단계 <a class="header-anchor" href="#펌웨어-포팅-단계" aria-label="Permalink to &quot;펌웨어 포팅 단계&quot;">​</a></h3><ol><li><p>Make sure you have a working <a href="./../dev_setup/dev_env.html">development setup</a> and installed the NuttX \`menuconfig\`\` tool (see above).</p></li><li><p>소스 코드를 다운로드하고 기존 대상을 빌드할 수 있는 지 확인합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5</span></span></code></pre></div></li><li><p>동일한(또는 유사한) CPU 유형을 사용하는 기존 대상을 복사합니다. 예: STM32F7의 경우</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boards/manufacturer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boards/px4/fmu-v5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boards/manufacturer/my-target-v1</span></span></code></pre></div><p>Change <strong>manufacturer</strong> to the manufacturer name and <strong>my-target-v1</strong> to your board name.</p></li></ol><p>Next you need to go through all files under <strong>boards/manufacturer/my-target-v1</strong> and update them according to your board.</p><ol><li><strong>firmware.prototype</strong>: update the board ID and name</li><li><strong>default.px4board</strong>: update the <strong>VENDOR</strong> and <strong>MODEL</strong> to match the directory names (<strong>my-target-v1</strong>). 직렬 포트를 설정합니다.</li><li>Configure NuttX (<strong>defconfig</strong>) via <code>make manufacturer_my-target-v1 menuconfig</code>: Adjust the CPU and chip, configure the peripherals (UART&#39;s, SPI, I2C, ADC).</li><li><strong>nuttx-config/include/board.h</strong>: Configure the NuttX pins. 여러 가지 핀 옵션이 있는 주변 장치에서는 NuttX는 핀 정보을 알아야 합니다. They are defined in the chip-specific pinmap header file, for example <a href="https://github.com/PX4/NuttX/blob/px4_firmware_nuttx-8.2/arch/arm/src/stm32f7/hardware/stm32f74xx75xx_pinmap.h" target="_blank" rel="noreferrer">stm32f74xx75xx_pinmap.h</a>.</li><li><strong>src</strong>: go through all files under <strong>src</strong> and update them as needed, in particular <strong>board_config.h</strong>.</li><li><strong>init/rc.board_sensors</strong>: start the sensors that are attached to the board.</li></ol>`,22)]))}const g=e(n,[["render",r]]);export{c as __pageData,g as default};
