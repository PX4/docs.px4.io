import{_ as a,a as r,b as i,c as l,d as t,e as o,f as s,g as n,h}from"./chunks/pullup.ZkydBtNY.js";import{_ as d,c,a8 as p,o as u}from"./chunks/framework.BDnHobkS.js";const R=JSON.parse('{"title":"Omnibus F4 SD","description":"","frontmatter":{},"headers":[],"relativePath":"ko/flight_controller/omnibus_f4_sd.md","filePath":"ko/flight_controller/omnibus_f4_sd.md"}'),m={name:"ko/flight_controller/omnibus_f4_sd.md"};function b(f,e,g,S,_,k){return u(),c("div",null,e[0]||(e[0]=[p('<h1 id="omnibus-f4-sd" tabindex="-1">Omnibus F4 SD <a class="header-anchor" href="#omnibus-f4-sd" aria-label="Permalink to &quot;Omnibus F4 SD&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This flight controller has been <a href="./../flight_controller/autopilot_experimental.html">discontinued</a> and is no longer commercially available.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>PX4 does not manufacture this (or any) autopilot. 지원 또는 규정준수 문제는 제조업체에 문의하십시오.</p></div><p>The <em>Omnibus F4 SD</em> is a controller board designed for racers. 일반적인 레이서 보드와 달리 SD 카드와 고속 CPU 등이 추가되었습니다.</p><img src="'+a+'" width="400px" title="Omnibus F4 SD"><p>These are the main differences compared to a <a href="./../flight_controller/pixracer.html">Pixracer</a>:</p><ul><li>저렴한 가격</li><li>더 적은 IO 포트(예 : GPS 또는 Flow 센서를 연결은 가능함)</li><li>Requires external pull up resistor on the I2C bus for external GPS, see <a href="#i2c">I2C</a> below.</li><li>Less RAM (192 KB vs. 256 KB) and FLASH (1 MB vs. 2 MB)</li><li>Same board dimensions as a <em>Pixracer</em>, but slightly smaller form factor (because it has less connectors)</li><li>통합 OSD(아직 소프트웨어에서 구현되지 않음)</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>All the usual PX4 features can still be used for your racer!</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This flight controller is <a href="./../flight_controller/autopilot_manufacturer_supported.html">manufacturer supported</a>.</p></div><h2 id="주요-특징" tabindex="-1">주요 특징 <a class="header-anchor" href="#주요-특징" aria-label="Permalink to &quot;주요 특징&quot;">​</a></h2><ul><li>Main System-on-Chip: <a href="https://www.st.com/en/microcontrollers/stm32f405rg.html" target="_blank" rel="noreferrer">STM32F405RGT6</a><ul><li>CPU : 단정밀도 FPU의 168MHz ARM Cortex M4</li><li>RAM : 192KB SRAM</li><li>FLASH: 1 MB</li></ul></li><li>표준 레이서 폼 팩터 : 36x36mm, 표준 30.5mm 구멍 패턴</li><li>MPU6000 가속/자이로</li><li>BMP280 기압계(모든 보드에 마운트된 것은 아님)</li><li>microSD (로깅)</li><li>Futaba S.BUS 및 S.BUS2/Spektrum DSM2 및 DSMX/Graupner SUMD/PPM 입력/Yuneec ST24</li><li>OneShot PWM 출력(설정 가능)</li><li>내장 전류 센서</li><li>내장 OSD 칩(SPI를 통한 AB7456)</li></ul><h2 id="구매처" tabindex="-1">구매처 <a class="header-anchor" href="#구매처" aria-label="Permalink to &quot;구매처&quot;">​</a></h2><p>보드는 몇 가지 변형된 형태(예 : 기압계 포함 또는 제외)로 여러 공급 업체에서 생산합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>PX4 is compatible with boards that support the Betaflight OMNIBUSF4SD target (if <em>OMNIBUSF4SD</em> is present on the product page the board should work with PX4).</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Any Omnibus F4 labeled derivative (e.g. clone) should work as well. 그러나, 이러한 보드의 배전은 품질이 다양합니다.</p></div><p>아래의 보드들은 테스트되고 작동하는 것입니다.</p><ul><li><p><a href="https://www.hobbywing.com/en/products/info.html?id=164" target="_blank" rel="noreferrer">Hobbywing XRotor Flight Controller F4</a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This board fits on top of the <a href="https://www.hobbywing.com/en/products/info.html?id=116" target="_blank" rel="noreferrer">Hobbywing XRotor Micro 40A 4in1 ESC</a> without soldering. 이 ESC 보드는 또한 Omnibus 보드에 전원을 제공합니다.</p></div></li></ul><p>:::</p><p>구매처:</p><ul><li><p><a href="https://www.getfpv.com/hobbywing-xrotor-f4-flight-controller-w-osd.html" target="_blank" rel="noreferrer">Hobbywing XRotor F4 Flight Controller w/OSD</a> (getfpv)</p></li><li><p>오리지널 Airbot Omnibus F4 SD</p><p>구매처:</p><ul><li><a href="https://store.myairbot.com/omnibusf4prov3.html" target="_blank" rel="noreferrer">Airbot (CN manufacturer)</a></li><li><a href="https://quadsrtf.com/product/flip-32-f4-omnibus-rev-2/" target="_blank" rel="noreferrer">Ready To Fly Quads (US reseller)</a></li></ul></li></ul><p>액세서리에는 아래의 내용물이 포함됩니다.</p><ul><li><a href="./../telemetry/esp8266_wifi_module.html">ESP8266 WiFi Module</a> for MAVLink telemetry. 다음 핀을 연결하여야합니다: GND, RX, TX, VCC 및 CH-PD (CH-PD ~ 3.3V). 전송 속도는 921600입니다.</li></ul><h2 id="커넥터" tabindex="-1">커넥터 <a class="header-anchor" href="#커넥터" aria-label="Permalink to &quot;커넥터&quot;">​</a></h2><p>이 설계를 기반으로 한 다른 공급 업체의 보드는 레이아웃이 상당히 다를 수 있습니다. 다양한 버전의 레이아웃/실크스크린이 아래와 같습니다.</p><h3 id="에어-봇-옴니버스-f4-sd" tabindex="-1">에어 봇 옴니버스 F4 SD <a class="header-anchor" href="#에어-봇-옴니버스-f4-sd" aria-label="Permalink to &quot;에어 봇 옴니버스 F4 SD&quot;">​</a></h3><p>아래는 상단과 하단을 모두 보여주는 Airbot Omnibus F4 SD (V1)의 실크 스크린입니다.</p><p><img src="'+r+'" alt="Omnibus F4 SD v1 Silkscreen Top"><img src="'+i+'" alt="Omnibus F4 SD v1 Silkscreen Bottom"></p><h3 id="hobbywing-xrotor-비행-콘트롤러-f4" tabindex="-1">Hobbywing XRotor 비행 콘트롤러 F4 <a class="header-anchor" href="#hobbywing-xrotor-비행-콘트롤러-f4" aria-label="Permalink to &quot;Hobbywing XRotor 비행 콘트롤러 F4&quot;">​</a></h3><p>아래는 Hobbywing XRotor 비행 콘트롤러 F4의 실크스크린입니다.</p><p><img src="'+l+'" alt="Hobbywing XRotor Flight Controller F4 Silkscreen"></p><h2 id="핀배열" tabindex="-1">핀배열 <a class="header-anchor" href="#핀배열" aria-label="Permalink to &quot;핀배열&quot;">​</a></h2><h3 id="무선-조종" tabindex="-1">무선 조종 <a class="header-anchor" href="#무선-조종" aria-label="Permalink to &quot;무선 조종&quot;">​</a></h3><p>RC는 다음 포트중 하나에 연결됩니다.</p><ul><li>UART1</li><li>SBUS/PPM 포트(인버터를 통해 내부적으로 UART1로 이동)</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Some Omnibus F4 boards have a jumper connecting either or both the MCU SBUS and PPM to a single pin header. 사용하기 전에 점퍼 또는 솔더 브리지를 적절한 MCU 핀으로 설정하십시오.</p></div><h3 id="uart" tabindex="-1">UART <a class="header-anchor" href="#uart" aria-label="Permalink to &quot;UART&quot;">​</a></h3><ul><li><p>UART6: GPS 포트</p><ul><li><p>TX: MCU 핀 PC6</p></li><li><p>RX: MCU 핀 PC7</p></li><li><p>Airbot Omnibus F4 SD 핀아웃은 포트 J10(TX6 / RX6)에 있습니다.</p></li></ul><p><img src="'+t+'" alt="Omnibus F4 SD UART6"></p></li><li><p>UART4</p><ul><li>TX: MCU 핀 PA0</li><li>RX: MCU 핀 PA1</li><li>초당 전송속도: 57600</li><li>This can be configured as the <code>TELEM 2</code> port.</li><li>에어 봇 옴니버스 F4 SD 핀배열: <ul><li>TX: RSSI 핀</li><li>RX: PWM 출력 5</li></ul></li></ul><p><img src="'+o+'" alt="Omnibus F4 SD UART4"></p><p><img src="'+s+'" alt="Omnibus F4 SD UART4 Top"></p></li></ul><h3 id="i2c" tabindex="-1">I2C <a class="header-anchor" href="#i2c" aria-label="Permalink to &quot;I2C&quot;">​</a></h3><p>다음을 통해 사용 가능한 I2C 포트가 하나 있습니다.</p><ul><li>SCL: MCU 핀 PB10 (TX3로 표시 될 수 있음)</li><li>SDA: MCU 핀 PB11 (RX3로 표시 될 수 있음)</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You will need external pullups on both signals (clock and data). 예를 들어, 2.2k 풀업을 사용하여 외부 매거진을 연결할 수 있습니다.</p></div><ul><li>Airbot Omnibus F4 SD Pinout is on Port J10 (SCL [clock] / SCA [data]): <img src="'+t+'" title="Omnibus F4 SD UART6"></li></ul><p>다음은 구현의 예입니다. 저는 Spektrum 플러그를 사용하여 DSM 포트에서 3.3v를 얻었으며 2.2k 저항을 통해 각 라인에 3.3v+ 만 연결하였습니다.</p><p><img src="'+n+'" alt="Omnibus F4 SD Pullup"></p><p><img src="'+h+'" alt="Omnibus F4 SD Pullup Implementation"></p><h2 id="시리얼-포트-매핑" tabindex="-1">시리얼 포트 매핑 <a class="header-anchor" href="#시리얼-포트-매핑" aria-label="Permalink to &quot;시리얼 포트 매핑&quot;">​</a></h2><table tabindex="0"><thead><tr><th>UART</th><th>장치</th><th>포트</th></tr></thead><tbody><tr><td>USART1</td><td>/dev/ttyS0</td><td>SerialRX</td></tr><tr><td>USART4</td><td>/dev/ttyS1</td><td>TELEM1</td></tr><tr><td>USART6</td><td>/dev/ttyS2</td><td>GPS</td></tr></tbody></table><h2 id="rc-텔레메트리" tabindex="-1">RC 텔레메트리 <a class="header-anchor" href="#rc-텔레메트리" aria-label="Permalink to &quot;RC 텔레메트리&quot;">​</a></h2><p>The Omnibus supports telemetry to the RC Transmitter using <a href="./../peripherals/frsky_telemetry.html">FrSky Telemetry</a> or <a href="#crsf_telemetry">CRSF Crossfire Telemetry</a>.</p><p><a id="crsf_telemetry"></a></p><h3 id="crsf-crossfire-텔레메트리" tabindex="-1">CRSF Crossfire 텔레메트리 <a class="header-anchor" href="#crsf-crossfire-텔레메트리" aria-label="Permalink to &quot;CRSF Crossfire 텔레메트리&quot;">​</a></h3><p><a href="./../telemetry/crsf_telemetry.html">TBS CRSF Telemetry</a> may be used to send telemetry data from the flight controller (the vehicle&#39;s attitude, battery, flight mode and GPS data) to an RC transmitter such as a Taranis.</p><p>Benefits over <a href="./../peripherals/frsky_telemetry.html">FrSky telemetry</a> include:</p><ul><li>RC와 텔레메트리에는 단일 UART 만 필요합니다.</li><li>CRSF 프로토콜은 응답시간 느린 장치에 최적화되어 있습니다.</li><li>150Hz RC 업데이트 속도.</li><li>신호는 반전되지 않으므로 외부 인버터 로직이 필요하지 않습니다.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you use CRSF Telemetry you will need to build custom PX4 firmware. By contrast, FrSky telemetry can use prebuilt firmware.</p></div><p>For Omnibus we recommend the <a href="http://team-blacksheep.com/products/prod:crossfire_nano_rx" target="_blank" rel="noreferrer">TBS Crossfire Nano RX</a>, since it is specifically designed for small Quads.</p><p>On the handheld controller (e.g. Taranis) you will also need a <a href="http://team-blacksheep.com/shop/cat:rc_transmitters#product_listing" target="_blank" rel="noreferrer">Transmitter Module</a>. 이것은 RC 콘트롤러의 뒷면에 장착할 수 있습니다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The referenced links above contains the documentation for the TX/RX modules.</p></div><h4 id="설정" tabindex="-1">설정 <a class="header-anchor" href="#설정" aria-label="Permalink to &quot;설정&quot;">​</a></h4><p>다음과 같이 Nano RX와 Omnibus 핀을 연결합니다.</p><table tabindex="0"><thead><tr><th>Omnibus UART1</th><th>Nano RX</th></tr></thead><tbody><tr><td>TX</td><td>Ch2</td></tr><tr><td>RX</td><td>Ch1</td></tr></tbody></table><p>다음으로 TX/RX 모듈을 업데이트하여 CRSF 프로토콜을 사용하고 텔레메트리를 설정합니다. Instructions for this are provided in the <a href="https://www.team-blacksheep.com/tbs-crossfire-manual.pdf" target="_blank" rel="noreferrer">TBS Crossfire Manual</a> (search for &#39;Setting up radio for CRSF&#39;).</p><h4 id="px4-crsf-configuration" tabindex="-1">PX4 CRSF Configuration <a class="header-anchor" href="#px4-crsf-configuration" aria-label="Permalink to &quot;PX4 CRSF Configuration&quot;">​</a></h4><p>You will need to build custom firmware to use CRSF. For more information see <a href="./../telemetry/crsf_telemetry.html#px4-configuration">CRSF Telemetry</a>.</p><h2 id="회로도" tabindex="-1">회로도 <a class="header-anchor" href="#회로도" aria-label="Permalink to &quot;회로도&quot;">​</a></h2><p>The schematics are provided by <a href="https://myairbot.com/" target="_blank" rel="noreferrer">Airbot</a>: <a href="http://bit.ly/obf4pro" target="_blank" rel="noreferrer">OmnibusF4-Pro-Sch.pdf</a>.</p><p><a id="bootloader"></a></p><h2 id="부트로더-업데이트" tabindex="-1">부트로더 업데이트 <a class="header-anchor" href="#부트로더-업데이트" aria-label="Permalink to &quot;부트로더 업데이트&quot;">​</a></h2><p>The board comes pre-installed with <a href="https://github.com/betaflight/betaflight/wiki" target="_blank" rel="noreferrer">Betaflight</a>. Before PX4 firmware can be installed, the <em>PX4 bootloader</em> must be flashed. Download the <a href="https://github.com/PX4/PX4-user_guide/raw/main/assets/flight_controller/omnibus_f4_sd/omnibusf4sd_bl_d52b70cb39.hex" target="_blank" rel="noreferrer">omnibusf4sd_bl.hex</a> bootloader binary and read <a href="./../advanced_config/bootloader_update_from_betaflight.html">this page</a> for flashing instructions.</p><h2 id="펌웨어-빌드" tabindex="-1">펌웨어 빌드 <a class="header-anchor" href="#펌웨어-빌드" aria-label="Permalink to &quot;펌웨어 빌드&quot;">​</a></h2><p>To <a href="./../dev_setup/building_px4.html">build PX4</a> for this target:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make omnibus_f4sd_default</span></span></code></pre></div><h2 id="펌웨어-설치" tabindex="-1">펌웨어 설치 <a class="header-anchor" href="#펌웨어-설치" aria-label="Permalink to &quot;펌웨어 설치&quot;">​</a></h2><p>미리 빌드된 펌웨어나 사용자 지정 펌웨어를 사용할 수 있습니다.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you use <a href="./../telemetry/crsf_telemetry.html#px4-configuration">CRSF Telemetry</a> in your radio system, as describe above, then you must use custom firmware.</p></div><p>펌웨어는 일반적인 방법으로 설치할 수 있습니다.</p><ul><li><p>소스 빌드 및 업로드</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make omnibus_f4sd_default upload</span></span></code></pre></div></li><li><p><a href="./../config/firmware.html">Load the firmware</a> using <em>QGroundControl</em>.</p></li></ul><h2 id="설정-1" tabindex="-1">설정 <a class="header-anchor" href="#설정-1" aria-label="Permalink to &quot;설정&quot;">​</a></h2><p>In addition to the <a href="./../config/">basic configuration</a>, the following parameters are important:</p><table tabindex="0"><thead><tr><th>매개변수</th><th>설정</th></tr></thead><tbody><tr><td><a href="./../advanced_config/parameter_reference.html#SYS_HAS_MAG">SYS_HAS_MAG</a></td><td>보드에 내부 자력계가 없기 때문에 비활성화하여야 합니다. 외부 자력계를 연결하여 활성화 할 수 있습니다.</td></tr><tr><td><a href="./../advanced_config/parameter_reference.html#SYS_HAS_BARO">SYS_HAS_BARO</a></td><td>보드에 기압계가 없는 경우에는 비활성화 하십시오.</td></tr></tbody></table><h2 id="추가-정보" tabindex="-1">추가 정보 <a class="header-anchor" href="#추가-정보" aria-label="Permalink to &quot;추가 정보&quot;">​</a></h2><p><a href="https://blog.dronetrest.com/omnibus-f4-flight-controller-guide/" target="_blank" rel="noreferrer">This page</a> provides a good overview with pinouts and setup instructions.</p>',82)]))}const C=d(m,[["render",b]]);export{R as __pageData,C as default};
