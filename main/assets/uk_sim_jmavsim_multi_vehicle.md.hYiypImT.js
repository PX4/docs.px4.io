import{_ as i,c as s,a8 as t,o as a}from"./chunks/framework.BDnHobkS.js";const m=JSON.parse('{"title":"Симуляція кількох рухомих засобів з JMAVSim","description":"","frontmatter":{},"headers":[],"relativePath":"uk/sim_jmavsim/multi_vehicle.md","filePath":"uk/sim_jmavsim/multi_vehicle.md"}'),l={name:"uk/sim_jmavsim/multi_vehicle.md"};function o(n,e,c,h,r,p){return a(),s("div",null,e[0]||(e[0]=[t('<h1 id="симуляція-кількох-рухомих-засобів-з-jmavsim" tabindex="-1">Симуляція кількох рухомих засобів з JMAVSim <a class="header-anchor" href="#симуляція-кількох-рухомих-засобів-з-jmavsim" aria-label="Permalink to &quot;Симуляція кількох рухомих засобів з JMAVSim&quot;">​</a></h1><p>This topic explains how to simulate multiple UAV (multicopter) vehicles using <a href="./../sim_jmavsim/">JMAVSim</a> and SITL. Усі екземпляри транспортних засобів починають рух з однакової позиції в симуляції.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is the easiest way to simulate multiple vehicles running PX4. It is suitable for testing multi-vehicle support in <em>QGroundControl</em> (or the <a href="https://mavsdk.mavlink.io/" target="_blank" rel="noreferrer">MAVSDK</a>, etc.). <a href="./../simulation/multi-vehicle-simulation.html">Multi-Vehicle Simulation with Gazebo</a> should be used for swarm simulations with many vehicles, or for testing features like computer vision that are only supported by Gazebo.</p></div><h2 id="як-запустити-кілька-екземплярів" tabindex="-1">Як запустити кілька екземплярів <a class="header-anchor" href="#як-запустити-кілька-екземплярів" aria-label="Permalink to &quot;Як запустити кілька екземплярів&quot;">​</a></h2><p>Для запуску кількох екземплярів (на окремих портах):</p><ol><li><p>Збірка PX4</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span></span></code></pre></div></li><li><p>Run <strong>sitl_multiple_run.sh</strong>, specifying the number of instances to start (e.g. 2):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/sitl_multiple_run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></li><li><p>Запустіть перший екземпляр в тому ж терміналі (це буде працювати на передньому плані):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/simulation/jmavsim/jmavsim_run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span></code></pre></div></li><li><p>Open a new terminal for each subsequent instance, specifying the <em>simulation</em> TCP port for the instance:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/simulation/jmavsim/jmavsim_run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4560</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span></code></pre></div><p>The port should be set to <code>4560+i</code> where <code>i</code> iterates for each instance (from <code>0</code> to <code>N-1</code>)</p></li></ol><p><em>QGroundControl</em> should automatically connect to all the new vehicle instances (all GCS traffic is sent to PX4&#39;s remote UDP port: <code>14550</code> from all instances). The vehicle that is currently being controlled is displayed in the application to bar; you can select this vehicle text to display a selection list of all of the (simulated) connected vehicle instances (<code>Vehicle 1</code>, <code>Vehicle 2</code>, etc.) and choose a new vehicle to control.</p><p>Developer APIs such as <em>MAVSDK</em> or <em>MAVROS</em> can connect to individual instances by listening on sequentially allocated PX4 remote UDP ports from <code>14540</code> (first instance) to <code>14549</code>. Additional instances <em>all</em> connect to port <code>14549</code>.</p><blockquote><p><strong>Tip</strong> The <strong>sitl_multiple_run.sh</strong> script starts a separate process for each vehicle. To restart the simulations after killing one of them, you must call <strong>sitl_multiple_run.sh</strong> again, and also restart each of the individual instances in their own terminals.</p></blockquote><h2 id="додаткові-ресурси" tabindex="-1">Додаткові ресурси <a class="header-anchor" href="#додаткові-ресурси" aria-label="Permalink to &quot;Додаткові ресурси&quot;">​</a></h2><ul><li>See <a href="./../simulation/">Simulation</a> for more information about the port configuration.</li></ul>',11)]))}const u=i(l,[["render",o]]);export{m as __pageData,u as default};
