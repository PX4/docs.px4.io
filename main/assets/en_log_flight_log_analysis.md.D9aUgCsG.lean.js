import{_ as i,a,b as t,c as l,d as e,e as n}from"./chunks/data_comets_overview.CdOGRg3d.js";import{_ as h,c as o,a8 as r,o as p}from"./chunks/framework.BDnHobkS.js";const E=JSON.parse('{"title":"Flight Log Analysis","description":"","frontmatter":{},"headers":[],"relativePath":"en/log/flight_log_analysis.md","filePath":"en/log/flight_log_analysis.md"}'),k={name:"en/log/flight_log_analysis.md"};function g(d,s,F,c,u,y){return p(),o("div",null,s[0]||(s[0]=[r('<h1 id="flight-log-analysis" tabindex="-1">Flight Log Analysis <a class="header-anchor" href="#flight-log-analysis" aria-label="Permalink to &quot;Flight Log Analysis&quot;">​</a></h1><p>This topic provide an overview of the tools and methods that can be used to analyze PX4 flight logs (more detailed topics are linked below in some cases).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><a href="./../getting_started/flight_reporting.html">Flight Reporting</a> explains how to download a log and report/discuss issues about a flight with the development team.</p></div><h2 id="structured-analysis" tabindex="-1">Structured Analysis <a class="header-anchor" href="#structured-analysis" aria-label="Permalink to &quot;Structured Analysis&quot;">​</a></h2><p>Before analyzing a flight log it is important to establish its context:</p><ul><li>If the analysis is done after a malfunction, did the log capture the crash or did it stop mid-air?</li><li>Did all controllers track their references? The easiest way to establish this is to compare attitude roll and pitch rates to their set points.</li><li>Does the sensor data look valid? Was there very strong vibration (a reasonable threshold for strong vibration is anything with a peak-to-peak of more than 2-3 m/s/s).</li><li>If the root cause is not specific to the vehicle make sure to report it with a link to the log file (and video if one exists) on the <a href="https://github.com/PX4/PX4-Autopilot/issues/new" target="_blank" rel="noreferrer">PX4 issue tracker</a>.</li></ul><h2 id="ruling-out-power-failures" tabindex="-1">Ruling Out Power Failures <a class="header-anchor" href="#ruling-out-power-failures" aria-label="Permalink to &quot;Ruling Out Power Failures&quot;">​</a></h2><p>If a log file ends mid-air, two main causes are possible: a power failure <em>or</em> a hard fault of the operating system.</p><p>On autopilots based on the <a href="http://www.st.com/en/microcontrollers/stm32-32-bit-arm-cortex-mcus.html" target="_blank" rel="noreferrer">STM32 series</a>, hard faults are logged to the SD card. These are located on the top level of the SD card and named <em>fault_date.log</em>, e.g. <strong>fault_2017_04_03_00_26_05.log</strong>. You should check for the presence of this file if a flight log ends abruptly.</p><h2 id="analysis-tools" tabindex="-1">Analysis Tools <a class="header-anchor" href="#analysis-tools" aria-label="Permalink to &quot;Analysis Tools&quot;">​</a></h2><h3 id="flight-review-online-tool" tabindex="-1">Flight Review (Online Tool) <a class="header-anchor" href="#flight-review-online-tool" aria-label="Permalink to &quot;Flight Review (Online Tool)&quot;">​</a></h3><p><a href="http://logs.px4.io" target="_blank" rel="noreferrer">Flight Review</a> is the successor of <em>Log Muncher</em>. It is used in combination with the new <a href="./../dev_log/ulog_file_format.html">ULog</a> logging format.</p><p>Key features:</p><ul><li>Web based, great for end-users.</li><li>Users can upload logs through the web interface, and then share report with others (bulk upload is supported using the <a href="https://github.com/PX4/PX4-Autopilot/blob/main/Tools/upload_log.py" target="_blank" rel="noreferrer">upload_log.py</a> script)</li><li>Interactive plots.</li></ul><p><img src="'+i+'" alt="Flight Review Charts"></p><p>See <a href="./../log/flight_review.html">Log Analysis using Flight Review</a> for an introduction.</p><h3 id="plotjuggler" tabindex="-1">PlotJuggler <a class="header-anchor" href="#plotjuggler" aria-label="Permalink to &quot;PlotJuggler&quot;">​</a></h3><p><a href="https://github.com/facontidavide/PlotJuggler" target="_blank" rel="noreferrer">PlotJuggler</a> is a desktop application that allows users to easily visualize and analyze data expressed in the form of time series. This is one of the best ULog analysis tools as it exposes all information in the log (<a href="#flight-review-online-tool">Flight Review</a>, by comparison, only shows a small subset of the data).</p><p>It supports ULog files (.ulg) since version 2.1.4.</p><p>Key features:</p><ul><li>Intuitive drag &amp; drop interface.</li><li>Arrange your data in multiple plots, tabs or windows.</li><li>All uORB topics are shown and can be graphed.</li><li>Once you arranged your data, save it into a &quot;Layout&quot; file and reload it multiple times.</li><li>Process your data inside <em>PlotJuggler</em> itself, using custom &quot;data transformations&quot;.</li></ul><p>Source code and downloads are available on <a href="https://github.com/facontidavide/PlotJuggler" target="_blank" rel="noreferrer">Github</a>.</p><p><img src="'+a+`" alt="PlotJuggler"></p><p>See <a href="./../log/plotjuggler_log_analysis.html">Log Analysis using Plot Juggler</a> for an introduction.</p><h3 id="pyulog" tabindex="-1">pyulog <a class="header-anchor" href="#pyulog" aria-label="Permalink to &quot;pyulog&quot;">​</a></h3><p><a href="https://github.com/PX4/pyulog" target="_blank" rel="noreferrer">pyulog</a> is a python package to parse ULog files, along with a set of command-line scripts to extract/display ULog information and convert them to other file formats.</p><p>Key features:</p><ul><li>Python library for parsing ULog files. Base library used by a number of other ULog analysis and visualisation tools.</li><li>Scripts to extract/display ULog information: <ul><li><em>ulog_info</em>: display information from an ULog file.</li><li><em>ulog_messages</em>: display logged messages from an ULog file.</li><li><em>ulog_params</em>: extract parameters from an ULog file.</li></ul></li><li>Scripts to convert ULog files to other formats: <ul><li><em>ulog2csv</em>: convert ULog to (several) CSV files.</li><li><em>ulog2kml</em>: convert ULog to (several) KML files.</li></ul></li></ul><p>All scripts are installed as system-wide applications (i.e. they be called on the command line - provided Python is installed), and support the <code>-h</code> flag for getting usage instructions. For example:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ulog_info</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ulog_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-h] [-v] file.ulg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Display</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> information</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ULog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">positional</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arguments:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  file.ulg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ULog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optional</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arguments:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -h,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -v,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span></span></code></pre></div><p>Below we see the kind of information exported from a sample file using <em>ulog_info</em>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ulog_info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sample.ulg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Logging</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0:01:52,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> duration:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0:01:08</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Dropouts:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> duration:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 62</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mean:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 29</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Messages:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sys_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> time_ref_utc:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ver_hw:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AUAV_X21</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ver_sw:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fd483321a5cf50ead91164356d15aa474643aa73</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (multi </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">id,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    number of data points, total bytes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> actuator_controls_0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                 3269     156912</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> actuator_outputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">76</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                    1311      99636</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commander_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                       678       6102</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> control_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">122</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                      3268     398696</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cpuload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                               69       1104</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ekf2_innovations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">140</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                   3271     457940</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> estimator_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">309</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                   1311     405099</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sensor_combined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">72</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                    17070    1229040</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sensor_preflight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                   17072     273152</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> telemetry_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                      70       2520</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vehicle_attitude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                    6461     232596</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vehicle_attitude_setpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)           3272     179960</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vehicle_local_position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)              678      83394</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vehicle_rates_setpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)              6448     154752</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vehicle_status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                       294      13230</span></span></code></pre></div><h3 id="flightplot" tabindex="-1">FlightPlot <a class="header-anchor" href="#flightplot" aria-label="Permalink to &quot;FlightPlot&quot;">​</a></h3><p><a href="https://github.com/PX4/FlightPlot" target="_blank" rel="noreferrer">FlightPlot</a> is a desktop based tool for log analysis. It can be downloaded from <a href="https://github.com/PX4/FlightPlot/releases" target="_blank" rel="noreferrer">FlightPlot Downloads</a> (Linux, MacOS, Windows).</p><p>Key features:</p><ul><li>Java based, cross-platform.</li><li>Intuitive GUI, no programming knowledge required.</li><li>Supports both new and old PX4 log formats (.ulg, .px4log, .bin)</li><li>Allows saving plots as images.</li></ul><p><img src="`+t+'" alt="FlightPlot Charts"></p><h3 id="px4tools" tabindex="-1">PX4Tools <a class="header-anchor" href="#px4tools" aria-label="Permalink to &quot;PX4Tools&quot;">​</a></h3><p><a href="https://github.com/dronecrew/px4tools" target="_blank" rel="noreferrer">PX4Tools</a> is a log analysis toolbox for the PX4 autopilot written in Python. The recommended installation procedure is to use <a href="https://conda.io/docs/index.html" target="_blank" rel="noreferrer">anaconda3</a>. See <a href="https://github.com/dronecrew/px4tools" target="_blank" rel="noreferrer">px4tools github page</a> for details.</p><p>Key features:</p><ul><li>Easy to share, users can view notebooks on Github (e.g. <a href="https://github.com/jgoppert/lpe-analysis/blob/master/15-09-30%20Kabir%20Log.ipynb" target="_blank" rel="noreferrer">15-09-30 Kabir Log.ipynb</a>)</li><li>Python based, cross platform, works with anaconda 2 and anaconda3</li><li>iPython/ jupyter notebooks can be used to share analysis easily</li><li>Advanced plotting capabilities to allow detailed analysis</li></ul><p><img src="'+l+'" alt="PX4Tools-based analysis"></p><h3 id="mavgcl" tabindex="-1">MAVGCL <a class="header-anchor" href="#mavgcl" aria-label="Permalink to &quot;MAVGCL&quot;">​</a></h3><p><a href="https://github.com/ecmnet/MAVGCL" target="_blank" rel="noreferrer">MAVGCL</a> is an in-flight log analyzer for PX4. It can also be used in offline mode with downloaded uLog files.</p><p>Key features:</p><ul><li>Realtime data acquisition (50ms sampling, 100ms rolling display) based on MAVLink messages or ULOG data over MAVLink</li><li>Timechart annotated by messages (MAVLink and ULog) and parameter changes (MAVLink only)</li><li>XY Analysis for selected key-figures</li><li>3D View (vehicle and observer perspective)</li><li>MAVLink inspector (reporting raw MAVLink messages)</li><li>Offline-mode: Import of key-figures from PX4Log/ULog (file or last log from device via WiFi)</li><li>Java based. Known to work on macOS and Ubuntu.</li><li>And many more ...</li></ul><p><img src="'+e+'" alt="MAVGCL"></p><h3 id="data-comets" tabindex="-1">Data Comets <a class="header-anchor" href="#data-comets" aria-label="Permalink to &quot;Data Comets&quot;">​</a></h3><p><a href="https://github.com/dsaffo/DataComets" target="_blank" rel="noreferrer">Data Comets</a> is a interactive PX4 flight log analysis tool that allows you to encode flight data onto the flight path, filter and brush the data by time - and much more!</p><p>You can use the online version of the tool for small log files (&lt; 32Mb), or run it locally in order to analyze longer flights.</p><p><img src="'+n+'" alt="Data Comets"></p>',51)]))}const C=h(k,[["render",g]]);export{E as __pageData,C as default};
