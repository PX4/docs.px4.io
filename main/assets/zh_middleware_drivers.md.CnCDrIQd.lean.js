import{_ as i,c as a,a8 as e,o as n}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"驱动开发","description":"","frontmatter":{},"headers":[],"relativePath":"zh/middleware/drivers.md","filePath":"zh/middleware/drivers.md"}'),t={name:"zh/middleware/drivers.md"};function p(l,s,h,d,r,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="驱动开发" tabindex="-1">驱动开发 <a class="header-anchor" href="#驱动开发" aria-label="Permalink to &quot;驱动开发&quot;">​</a></h1><p>PX4 device drivers are based on the <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/lib/drivers/device" target="_blank" rel="noreferrer">Device</a> framework.</p><h2 id="创建驱动程序" tabindex="-1">创建驱动程序 <a class="header-anchor" href="#创建驱动程序" aria-label="Permalink to &quot;创建驱动程序&quot;">​</a></h2><p>PX4 almost exclusively consumes data from <a href="./../middleware/uorb.html">uORB</a>. 常见外设类型的驱动程序必须发布正确的 uORB 消息（例如: 陀螺仪、加速度计、压力传感器等）。</p><p>The best approach for creating a new driver is to start with a similar driver as a template (see <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers" target="_blank" rel="noreferrer">src/drivers</a>).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>More detailed information about working with specific I/O buses and sensors may be available in <a href="./../sensor_bus/">Sensor and Actuator Buses</a> section.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Publishing the correct uORB topics is the only pattern that drivers <em>must</em> follow.</p></div><h2 id="核心架构" tabindex="-1">核心架构 <a class="header-anchor" href="#核心架构" aria-label="Permalink to &quot;核心架构&quot;">​</a></h2><p>PX4 is a <a href="./../concept/architecture.html">reactive system</a> and uses <a href="./../middleware/uorb.html">uORB</a> publish/subscribe to transport messages. File handles are not required or used for the core operation of the system. Two main APIs are used:</p><ul><li>Publish / subscribe 系统具有文件、网络或共享内存后端，具体取决于系统 PX4 运行。</li><li>The global device registry, which can be used to enumerate devices and get/set their configuration. This can be as simple as a linked list or map to the file system. 这可以像链接列表或映射到文件系统一样简单。</li></ul><h2 id="设备id" tabindex="-1">设备ID <a class="header-anchor" href="#设备id" aria-label="Permalink to &quot;设备ID&quot;">​</a></h2><p>For the example of three magnetometers on a system, use the flight log (.px4log) to dump the parameters. The three parameters encode the sensor IDs and <code>MAG_PRIME</code> identifies which magnetometer is selected as the primary sensor. Each MAGx_ID is a 24bit number and should be padded left with zeros for manual decoding. 这三个参数解码传感器的 ID， 并且 <code>MAG_PRIME</code> 区分那个磁力计作为主传感器。</p><p>The order of sensors (e.g. if there is a <code>/dev/mag0</code> and an alternate <code>/dev/mag1</code>) does not determine priority - the priority is instead stored as part of the published uORB topic.</p><h3 id="解码示例" tabindex="-1">解码示例 <a class="header-anchor" href="#解码示例" aria-label="Permalink to &quot;解码示例&quot;">​</a></h3><p>This is the internal HMC5983 connected via SPI, bus 1, slave select slot 5. It will show up in the log file as <code>IMU1.MagX</code>. The three parameters encode the sensor IDs and <code>MAG_PRIME</code> identifies which magnetometer is selected as the primary sensor. Each MAGx_ID is a 24bit number and should be padded left with zeros for manual decoding.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CAL_MAG0_ID = 73225.0</span></span>
<span class="line"><span>CAL_MAG1_ID = 66826.0</span></span>
<span class="line"><span>CAL_MAG2_ID = 263178.0</span></span>
<span class="line"><span>CAL_MAG_PRIME = 73225.0</span></span></code></pre></div><p>This is the external HMC5983 connected via I2C, bus 1 at address <code>0x1E</code>: It will show up in the log file as <code>IMU.MagX</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># device ID 73225 in 24-bit binary:</span></span>
<span class="line"><span>00000001  00011110  00001 001</span></span>
<span class="line"><span></span></span>
<span class="line"><span># decodes to:</span></span>
<span class="line"><span>HMC5883   0x1E    bus 1 I2C</span></span></code></pre></div><p>根据此格式，设备 ID 是一个24bit 数字。 It will show up in the log file as <code>IMU1.MagX</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># device ID 66826 in 24-bit binary:</span></span>
<span class="line"><span>00000001  00000101  00001 010</span></span>
<span class="line"><span></span></span>
<span class="line"><span># decodes to:</span></span>
<span class="line"><span>HMC5883   dev 5   bus 1 SPI</span></span></code></pre></div><p>And this is the internal MPU9250 magnetometer connected via SPI, bus 1, slave select slot 4. It will show up in the log file as <code>IMU2.MagX</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># device ID 263178 in 24-bit binary:</span></span>
<span class="line"><span>00000100  00000100  00001 010</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#decodes to:</span></span>
<span class="line"><span>MPU9250   dev 4   bus 1 SPI</span></span></code></pre></div><h3 id="设备-id-编码" tabindex="-1">设备 ID 编码 <a class="header-anchor" href="#设备-id-编码" aria-label="Permalink to &quot;设备 ID 编码&quot;">​</a></h3><p>The device ID is a 24bit number according to this format. Note that the first fields are the least significant bits in the decoding example above.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeviceStructure {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeviceBusType bus_type : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bus: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // which instance of the bus type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> address;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // address on the bus (eg. I2C address)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> devtype;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // device class specific device type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>The <code>bus_type</code> is decoded according to:</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeviceBusType {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_I2C     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_SPI     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DeviceBusType_UAVCAN  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>and <code>devtype</code> is decoded according to:</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_HMC5883</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_LSM303D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">02</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_ACCELSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">03</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_MAG_DEVTYPE_MPU9250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_LSM303D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_BMA180</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_MPU6000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_ACCELSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_GYROSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_ACC_DEVTYPE_MPU9250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_MPU6000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_L3GD20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_GYROSIM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_GYR_DEVTYPE_MPU9250</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_RNG_DEVTYPE_MB12XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRV_RNG_DEVTYPE_LL40LS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span></span></code></pre></div><h2 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h2><p>For general debugging topics see: <a href="./../debug/">Debugging/Logging</a>.</p><h3 id="使用操纵杆" tabindex="-1">使用操纵杆 <a class="header-anchor" href="#使用操纵杆" aria-label="Permalink to &quot;使用操纵杆&quot;">​</a></h3><p>Drivers (and other modules) output minimally verbose logs strings by default (e.g. for <code>PX4_DEBUG</code>, <code>PX4_WARN</code>, <code>PX4_ERR</code>, etc.).</p><p>Log verbosity is defined at build time using the <code>RELEASE_BUILD</code> (default), <code>DEBUG_BUILD</code> (verbose) or <code>TRACE_BUILD</code> (extremely verbose) macros.</p><p>Change the logging level using <code>COMPILE_FLAGS</code> in the driver <code>px4_add_module</code> function (<strong>CMakeLists.txt</strong>). The code fragment below shows the required change to enable DEBUG_BUILD level debugging for a single module or driver.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>px4_add_module(</span></span>
<span class="line"><span>	MODULE templates__module</span></span>
<span class="line"><span>	MAIN module</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>	COMPILE_FLAGS</span></span>
<span class="line"><span>		-DDEBUG_BUILD</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>	SRCS</span></span>
<span class="line"><span>		module.cpp</span></span>
<span class="line"><span>	DEPENDS</span></span>
<span class="line"><span>		modules__uORB</span></span>
<span class="line"><span>	)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Verbose logging can also be enabled on a per-file basis, by adding <code>#define DEBUG_BUILD</code> at the very top of a .cpp file (before any includes).</p></div>`,39)]))}const g=i(t,[["render",p]]);export{c as __pageData,g as default};
