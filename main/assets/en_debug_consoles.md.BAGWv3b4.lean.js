import{_ as s,c as a,a8 as t,o as i}from"./chunks/framework.BDnHobkS.js";const u=JSON.parse('{"title":"PX4 Consoles/Shells","description":"","frontmatter":{},"headers":[],"relativePath":"en/debug/consoles.md","filePath":"en/debug/consoles.md"}'),o={name:"en/debug/consoles.md"};function l(n,e,h,p,d,c){return i(),a("div",null,e[0]||(e[0]=[t(`<h1 id="px4-consoles-shells" tabindex="-1">PX4 Consoles/Shells <a class="header-anchor" href="#px4-consoles-shells" aria-label="Permalink to &quot;PX4 Consoles/Shells&quot;">​</a></h1><p>PX4 enables terminal access to the system through the <a href="./../debug/mavlink_shell.html">MAVLink Shell</a> and the <a href="./../debug/system_console.html">System Console</a>.</p><p>This page explains the main differences and how the console/shell are used.</p><p><a id="console_vs_shell"></a></p><h2 id="system-console-vs-shells" tabindex="-1">System Console vs. Shells <a class="header-anchor" href="#system-console-vs-shells" aria-label="Permalink to &quot;System Console vs. Shells&quot;">​</a></h2><p>The PX4 <em>System Console</em> provides low-level access to the system, debug output and analysis of the system boot process.</p><p>There is just one <em>System Console</em>, which runs on one specific UART (the debug port, as configured in NuttX), and is commonly attached to a computer via an FTDI cable (or some other debug adapter like a <a href="https://kb.zubax.com/display/MAINKB/Dronecode+Probe+documentation" target="_blank" rel="noreferrer">Dronecode probe</a>).</p><ul><li>Used for <em>low-level debugging/development</em>: bootup, NuttX, startup scripts, board bringup, development on central parts of PX4 (e.g. uORB).</li><li>In particular, is the only place where all boot output (including information about applications auto-started on boot) is printed.</li></ul><p>Shells provide higher-level access to the system:</p><ul><li>Used for basic module testing/running commands.</li><li>Only <em>directly</em> display the output of modules you start.</li><li>Cannot <em>directly</em> display the output of tasks running on the work queue.</li><li>Can&#39;t debug problems when the system doesn&#39;t start (as it isn&#39;t running yet).</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>dmesg</code> command is now available through the shell on some boards, enabling much lower level debugging than previously possible. For example, with <code>dmesg -f &amp;</code> you also see the output of background tasks.</p></div><p>There can be several shells, either running on a dedicated UART, or via MAVLink. Since MAVLink provides more flexibility, currently only the <a href="./../debug/mavlink_shell.html">MAVLink Shell</a> is used.</p><p>The <a href="./../debug/system_console.html">System Console</a> is essential when the system does not boot (it displays the system boot log when power-cycling the board). The <a href="./../debug/mavlink_shell.html">MAVLink Shell</a> is much easier to setup, and so is more generally recommended for most debugging.</p><p><a id="using_the_console"></a></p><h2 id="using-consoles-shells" tabindex="-1">Using Consoles/Shells <a class="header-anchor" href="#using-consoles-shells" aria-label="Permalink to &quot;Using Consoles/Shells&quot;">​</a></h2><p>The MAVLink shell/console and the <a href="./../debug/system_console.html">System Console</a> are used in much the same way.</p><p>For example, type <code>ls</code> to view the local file system, <code>free</code> to see the remaining free RAM, <code>dmesg</code> to look at boot output.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">free</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dmesg</span></span></code></pre></div><p>Below are a couple of commands which can be used in the <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139629410" target="_blank" rel="noreferrer">NuttShell</a> to get insights of the system.</p><p>This NSH command provides the remaining free memory:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span></span></code></pre></div><p>The top command shows the stack usage per application:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">top</span></span></code></pre></div><p>Note that stack usage is calculated with stack coloring and is the maximum since the start of the task (not the current usage).</p><p>To see what is running in the work queues and at what rate, use:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">work_queue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><p>To debug uORB topics:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uorb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> top</span></span></code></pre></div><p>To inspect a specific uORB topic:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">topic_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Many other system commands and modules are listed in the <a href="./../modules/modules_main.html">Modules and Command Reference</a> (e.g. <code>top</code>, <code>listener</code>, etc.).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Some commands may be disabled on some boards (i.e. the some modules are not included in firmware for boards with RAM or FLASH constraints). In this case you will see the response: <code>command not found</code></p></div>`,32)]))}const m=s(o,[["render",l]]);export{u as __pageData,m as default};
