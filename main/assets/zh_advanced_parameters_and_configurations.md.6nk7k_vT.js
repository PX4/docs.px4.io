import{_ as s,c as i,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"Parameters & Configurations","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced/parameters_and_configurations.md","filePath":"zh/advanced/parameters_and_configurations.md"}'),n={name:"zh/advanced/parameters_and_configurations.md"};function p(l,a,h,r,d,o){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="parameters-configurations" tabindex="-1">Parameters &amp; Configurations <a class="header-anchor" href="#parameters-configurations" aria-label="Permalink to &quot;Parameters &amp; Configurations&quot;">​</a></h1><p>PX4 uses the <em>param subsystem</em> (a flat table of <code>float</code> and <code>int32_t</code> values) and text files (for startup scripts) to store its configuration.</p><p>This section discusses the <em>param</em> subsystem in detail. 它涵盖如何列出、保存和加载参数，以及如何定义这些参数并使这些参数在地面站上显示。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./../concept/system_startup.html">System startup</a> and the way that <a href="./../dev_airframes/adding_a_new_frame.html">frame configuration</a> startup scripts work are detailed on other pages.</p></div><h2 id="命令行使用方法" tabindex="-1">命令行使用方法 <a class="header-anchor" href="#命令行使用方法" aria-label="Permalink to &quot;命令行使用方法&quot;">​</a></h2><p>The PX4 <a href="./../debug/system_console.html">system console</a> offers the <a href="./../modules/modules_command.html#param">param</a> tool, which can be used to set parameters, read their value, save them, and export and restore to/from files.</p><h3 id="获取和设置参数" tabindex="-1">获取和设置参数 <a class="header-anchor" href="#获取和设置参数" aria-label="Permalink to &quot;获取和设置参数&quot;">​</a></h3><p>The <code>param show</code> command lists all system parameters:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span></span></code></pre></div><p>为了更有选择性，部分参数名称可以使用通配符 &quot;*&quot; ：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RC_MAP_A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Symbols:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> saved,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unsaved</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [359,498] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [360,499] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [361,500] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_ACRO_SW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [375,514] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 723</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> total,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 532</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used.</span></span></code></pre></div><p>You can use the <code>-c</code> flag to show all parameters that have changed (from their defaults):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span></code></pre></div><p>You can use <code>param show-for-airframe</code> to show all parameters that have changed from their defaults for just the current airframe&#39;s definition file (and defaults it imports).</p><h3 id="导出和加载参数" tabindex="-1">导出和加载参数 <a class="header-anchor" href="#导出和加载参数" aria-label="Permalink to &quot;导出和加载参数&quot;">​</a></h3><p>You can save any parameters that have been <em>changed</em> (that are different from airframe defaults).</p><p>The standard <code>param save</code> command will store the parameters in the current default file:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span></code></pre></div><p>如果提供了参数，它会将参数存储到这个新位置:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span></code></pre></div><p>There are two different commands to <em>load</em> parameters:</p><ul><li><code>param load</code> first does a full reset of all parameters to their defaults, and then overwrites parameter values with any values stored in the file.</li><li><code>param import</code> just overwrites parameter values with the values from the file and then saves the result (i.e. effectively calls <code>param save</code>).</li></ul><p>The <code>load</code> effectively resets the parameters to the state when the parameters were saved (we say &quot;effectively&quot; because any parameters saved in the file will be updated, but other parameters may have different firmware-defined default values than when the parameters file was created).</p><p>By contrast, <code>import</code> merges the parameters in the file with the current state of the vehicle. 例如，这可以用来只导入包含校准数据的参数文件，而不覆盖系统配置的其余部分。</p><p>这两种情况的示例如下所示:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件保存时重置参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 选择性的保存参数 (不自动加载)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将保存的参数与当前参数合并</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span></code></pre></div><h2 id="参数创建-定义" tabindex="-1">参数创建/定义 <a class="header-anchor" href="#参数创建-定义" aria-label="Permalink to &quot;参数创建/定义&quot;">​</a></h2><p>参数定义有两部分:</p><ul><li><a href="#parameter-metadata">Parameter metadata</a> specifies the default value for each parameter in firmware along with other metadata for presentation (and editing) of parameters in ground control stations and documentation.</li><li><a href="#c-c-api">C/C++ Code</a> that provides access to get and/or subscribe to parameter values from within PX4 modules and drivers.</li></ul><p>以下描述了编写元数据和代码的几种方法。 Where possible code should use newer <a href="#yaml-metadata">YAML metadata</a> and <a href="#c-api">C++ API</a> over the older C parameter/code definitions, as these are more flexible and robust.</p><p>Parameter metadata is <a href="#publishing-parameter-metadata-to-a-gcs">compiled into the firmware</a>, and made available to ground stations via the <a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer">MAVLink Component Information service</a>.</p><h3 id="参数名称" tabindex="-1">参数名称 <a class="header-anchor" href="#参数名称" aria-label="Permalink to &quot;参数名称&quot;">​</a></h3><p>参数名称不得超过 16 个 ASCII 字符。</p><p>By convention, every parameter in a group should share the same (meaningful) string prefix followed by an underscore, and <code>MC_</code> and <code>FW_</code> are used for parameters related specifically to Multicopter or Fixed-wing systems. 此惯例不强制执行。</p><p>The name must match in both code and <a href="#parameter-metadata">parameter metadata</a> to correctly associate the parameter with its metadata (including default value in Firmware).</p><h3 id="c-c-api" tabindex="-1">C / C++ API <a class="header-anchor" href="#c-c-api" aria-label="Permalink to &quot;C / C++ API&quot;">​</a></h3><p>有单独的 C 和 C++ 的 API 可用于从 PX4 模块和驱动程序中访问参数值。</p><p>API 之间的一个重要区别是，C++ 版本具有更有效的标准化机制，可与参数值的更改（即来自 GCS 的更改）同步。</p><p>同步很重要，因为参数可能随时被更改为另一个值。 Your code should <em>always</em> use the current value from the parameter store. If getting the latest version is not possible, then a reboot will be required after the parameter is changed (set this requirement using the <code>@reboot_required</code> metadata).</p><p>此外，C++ 版本有更好的类型安全和更小的 RAM 开销。 缺点是参数名称必须在编译时知道，而 C 语言 API 可以将动态创建的名称作为字符串。</p><h4 id="c-api" tabindex="-1">C++ API <a class="header-anchor" href="#c-api" aria-label="Permalink to &quot;C++ API&quot;">​</a></h4><p>The C++ API provides macros to declare parameters as <em>class attributes</em>. You add some &quot;boilerplate&quot; code to regularly listen for changes in the <a href="./../middleware/uorb.html">uORB Topic</a> associated with <em>any</em> parameter update. 框架代码然后 (在不可见的情况下) 处理追踪影响 uORB 消息，并保持参数属性和 uORB 消息同步。 在代码的其余部分中，您只能使用定义的参数属性，它们将始终是最新的！</p><p>首先在您的模块或驱动程序的类头文件中包含所需的头文件:</p><ul><li><p><strong>px4_platform_common/module_params.h</strong> to get the <code>DEFINE_PARAMETERS</code> macro:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;px4_platform_common/module_params.h&gt;</span></span></code></pre></div></li><li><p><strong>parameter_update.h</strong> to access the uORB <code>parameter_update</code> message:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;uORB/topics/parameter_update.h&gt;</span></span></code></pre></div></li><li><p><strong>Subscription.hpp</strong> for the uORB C++ subscription API:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;uORB/Subscription.hpp&gt;</span></span></code></pre></div></li></ul><p>Derive your class from <code>ModuleParams</code>, and use <code>DEFINE_PARAMETERS</code> to specify a list of parameters and their associated parameter attributes. 参数的名称必须与其参数元数据定义相同。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : ..., </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModuleParams</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Check for parameter changes and update them if needed.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parameters_update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	DEFINE_PARAMETERS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		(ParamInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SYS_AUTOSTART</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_sys_autostart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /**&lt; example parameter */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		(ParamFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ATT_BIAS_MAX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_att_bias_max</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**&lt; another parameter */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Subscriptions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	uORB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SubscriptionInterval _parameter_update_sub{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ORB_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parameter_update), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>使用模板更新 CPP 文件，以检查与参数更新相关的 uORB 消息。</p><p>Call <code>parameters_update();</code> periodically in code to check if there has been an update:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parameters_update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_parameter_update_sub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		parameter_update_s param_update;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		_parameter_update_sub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">param_update);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// If any parameter updated, call updateParams() to check if</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// this class attributes need updating (and do so).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		updateParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述方法中：</p><ul><li><code>_parameter_update_sub.updated()</code> tells us if there is <em>any</em> update to the <code>param_update</code> uORB message (but not what parameter is affected).</li><li>If there has been &quot;some&quot; parameter updated, we copy the update into a <code>parameter_update_s</code> (<code>param_update</code>), to clear the pending update.</li><li>Then we call <code>ModuleParams::updateParams()</code>. This &quot;under the hood&quot; updates all parameter attributes listed in our <code>DEFINE_PARAMETERS</code> list.</li></ul><p>The parameter attributes (<code>_sys_autostart</code> and <code>_att_bias_max</code> in this case) can then be used to represent the parameters, and will be updated whenever the parameter value changes.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="./../modules/module_template.html">Application/Module Template</a> uses the new-style C++ API but does not include <a href="#parameter-metadata">parameter metadata</a>.</p></div><h4 id="c-api-1" tabindex="-1">C API <a class="header-anchor" href="#c-api-1" aria-label="Permalink to &quot;C API&quot;">​</a></h4><p>C API 可以在模块和驱动程序中使用。</p><p>首先包括参数 API 头文件:</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;parameters/param.h&gt;</span></span></code></pre></div><p>Then retrieve the parameter and assign it to a variable (here <code>my_param</code>), as shown below for <code>PARAM_NAME</code>. The variable <code>my_param</code> can then be used in your module code.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PARAM_NAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">my_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If <code>PARAM_NAME</code> was declared in parameter metadata then its default value will be set, and the above call to find the parameter should always succeed.</p></div><p><code>param_find()</code> is an &quot;expensive&quot; operation, which returns a handle that can be used by <code>param_get()</code>. If you&#39;re going to read the parameter multiple times, you may cache the handle and use it in <code>param_get()</code> when needed</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Get the handle to the parameter</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">param_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PARAM_INVALID;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_param_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> param_find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PARAM_NAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Query the value of the parameter when needed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_param_handle, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_param);</span></span></code></pre></div><h3 id="参数元数据" tabindex="-1">参数元数据 <a class="header-anchor" href="#参数元数据" aria-label="Permalink to &quot;参数元数据&quot;">​</a></h3><p>PX4 使用广泛的参数元数据系统来驱动面向用户的参数表示，并在固件中设置的每个参数的默认值。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Correct metadata is critical for good user experience in a ground station.</p></div><p>Parameter metadata can be stored anywhere in the source tree as either <strong>.c</strong> or <strong>.yaml</strong> parameter definitions (the YAML definition is newer, and more flexible). 通常，它与关联的模块一起存储。</p><p>The build system extracts the metadata (using <code>make parameters_metadata</code>) to build the <a href="./../advanced_config/parameter_reference.html">parameter reference</a> and the parameter information <a href="#publishing-parameter-metadata-to-a-gcs">used by ground stations</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>After adding a <em>new</em> parameter file you should call <code>make clean</code> before building to generate the new parameters (parameter files are added as part of the <em>cmake</em> configure step, which happens for clean builds and if a cmake file is modified).</p></div><h4 id="yaml-元数据" tabindex="-1">YAML 元数据 <a class="header-anchor" href="#yaml-元数据" aria-label="Permalink to &quot;YAML 元数据&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>At time of writing YAML parameter definitions cannot be used in <em>libraries</em>.</p></div><p>YAML meta data is intended as a full replacement for the <strong>.c</strong> definitions. 它支持所有相同的元数据，以及多实例定义等新功能。</p><ul><li><p>The YAML parameter metadata schema is here: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/validation/module_schema.yaml" target="_blank" rel="noreferrer">validation/module_schema.yaml</a>.</p></li><li><p>An example of YAML definitions being used can be found in the MAVLink parameter definitions: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/mavlink/module.yaml" target="_blank" rel="noreferrer">/src/modules/mavlink/module.yaml</a>.</p></li><li><p>通过添加到 cmake 构建系统中注册一个 YAML 文件</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODULE_CONFIG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	module.yaml</span></span></code></pre></div><p>to the <code>px4_add_module</code> section of the <code>CMakeLists.txt</code> file of that module.</p></li></ul><h4 id="多实例-模块化-yaml-元数据" tabindex="-1">多实例（模块化）YAML 元数据 <a class="header-anchor" href="#多实例-模块化-yaml-元数据" aria-label="Permalink to &quot;多实例（模块化）YAML 元数据&quot;">​</a></h4><p>Templated parameter definitions are supported in <a href="https://github.com/PX4/PX4-Autopilot/blob/main/validation/module_schema.yaml" target="_blank" rel="noreferrer">YAML parameter definitions</a> (templated parameter code is not supported).</p><p>The YAML allows you to define instance numbers in parameter names, descriptions, etc. using <code>\${i}</code>. 例如，下面将生成 MY_PARAM_1_RATE、MY_PARAM_2_RATE 等。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MY_PARAM_\${i}_RATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Maximum rate for instance \${i}</span></span></code></pre></div><p>以下 YAML 定义提供起始和结束索引。</p><ul><li><code>num_instances</code> (default 1): Number of instances to generate (&gt;=1)</li><li><code>instance_start</code> (default 0): First instance number. If 0, <code>\${i}</code> expands to [0, N-1]\`.</li></ul><p>For a full example see the MAVLink parameter definitions: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/mavlink/module.yaml" target="_blank" rel="noreferrer">/src/modules/mavlink/module.yaml</a></p><h4 id="c-参数元数据" tabindex="-1">c 参数元数据 <a class="header-anchor" href="#c-参数元数据" aria-label="Permalink to &quot;c 参数元数据&quot;">​</a></h4><p>The legacy approach for defining parameter metadata is in a file with extension <strong>.c</strong> (at time of writing this is the approach most commonly used in the source tree).</p><p>参数的元数据部分看起来像下面的例子:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Pitch P gain</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Pitch proportional gain, i.e. desired angular speed in rad/s for error 1 rad.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @unit 1/s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @min 0.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @max 10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @decimal 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @increment 0.0005</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @reboot_required true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group Multicopter Attitude Control</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PARAM_DEFINE_FLOAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MC_PITCH_P, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Acceleration compensation based on GPS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * velocity.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group Attitude Q estimator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @boolean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PARAM_DEFINE_INT32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ATT_ACC_COMP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The <code>PARAM_DEFINE_*</code> macro at the end specifies the type of parameter (<code>PARAM_DEFINE_FLOAT</code> or <code>PARAM_DEFINE_INT32</code>), the name of the parameter (which must match the name used in code), and the default value in firmware.</p><p>注释块中的行都是可选的，主要用于控制地面站内的显示和编辑选项。 The purpose of each line is given below (for more detail see <a href="https://github.com/PX4/PX4-Autopilot/blob/main/validation/module_schema.yaml" target="_blank" rel="noreferrer">module_schema.yaml</a>).</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;title&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;longer description, can be multi-line&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @unit &lt;the unit, e.g. m for meters&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @min &lt;the minimum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @max &lt;the maximum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @decimal &lt;the minimum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @increment &lt;the &quot;ticks&quot; in which this value will increment in the UI&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @reboot_required true &lt;add this if changing the param requires a system restart.&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @boolean &lt;add this for integer parameters that represent a boolean value&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group &lt;a title for parameters that form a group&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h2 id="发布参数的元数据到地面站" tabindex="-1">发布参数的元数据到地面站 <a class="header-anchor" href="#发布参数的元数据到地面站" aria-label="Permalink to &quot;发布参数的元数据到地面站&quot;">​</a></h2><p>The parameter metadata JSON file is compiled into firmware (or hosted on the Internet), and made available to ground stations via the <a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer">MAVLink Component Metadata service</a>. 这确保了元数据始终与载具上运行的代码保持最新。</p><p>This process is the same as for <a href="./../concept/events_interface.html#publishing-event-metadata-to-a-gcs">events metadata</a>. For more information see <a href="./../advanced/px4_metadata.html">PX4 Metadata (Translation &amp; Publication)</a></p><h2 id="更多信息" tabindex="-1">更多信息 <a class="header-anchor" href="#更多信息" aria-label="Permalink to &quot;更多信息&quot;">​</a></h2><ul><li><a href="./../advanced_config/parameters.html">Finding/Updating Parameters</a></li><li><a href="./../advanced_config/parameter_reference.html">Parameter Reference</a></li><li><a href="https://github.com/PX4/PX4-Autopilot/blob/main/platforms/common/include/px4_platform_common/param.h#L129" target="_blank" rel="noreferrer">Param implementation</a> (information on <code>.get()</code>, <code>.commit()</code>, and other methods)</li></ul>`,93)]))}const m=s(n,[["render",p]]);export{c as __pageData,m as default};
