import{_ as t,a as i,b as a,c as s}from"./chunks/qgc_hitl_autoconnect.BB2nZkz6.js";import{_ as o,c as n,a8 as l,o as r}from"./chunks/framework.BDnHobkS.js";const b=JSON.parse('{"title":"Hardware in the Loop Simulation (HITL)","description":"","frontmatter":{},"headers":[],"relativePath":"en/simulation/hitl.md","filePath":"en/simulation/hitl.md"}'),h={name:"en/simulation/hitl.md"};function p(c,e,d,m,u,g){return r(),n("div",null,e[0]||(e[0]=[l('<h1 id="hardware-in-the-loop-simulation-hitl" tabindex="-1">Hardware in the Loop Simulation (HITL) <a class="header-anchor" href="#hardware-in-the-loop-simulation-hitl" aria-label="Permalink to &quot;Hardware in the Loop Simulation (HITL)&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>HITL is <a href="./../simulation/community_supported_simulators.html">community supported and maintained</a>. It may or may not work with current versions of PX4.</p><p>See <a href="./../dev_setup/dev_env.html">Toolchain Installation</a> for information about the environments and tools supported by the core development team.</p></div><p>Hardware-in-the-Loop (HITL or HIL) is a simulation mode in which normal PX4 firmware is run on real flight controller hardware. This approach has the benefit of testing most of the actual flight code on the real hardware.</p><p>PX4 supports HITL for multicopters (using <a href="./../sim_jmavsim/">jMAVSim</a> or <a href="./../sim_gazebo_classic/">Gazebo Classic</a>) and VTOL (using Gazebo Classic).</p><p><a id="compatible_airframe"></a></p><h2 id="hitl-compatible-airframes" tabindex="-1">HITL-Compatible Airframes <a class="header-anchor" href="#hitl-compatible-airframes" aria-label="Permalink to &quot;HITL-Compatible Airframes&quot;">​</a></h2><p>The set of compatible airframes vs simulators is:</p><table tabindex="0"><thead><tr><th>Airframe</th><th><code>SYS_AUTOSTART</code></th><th>Gazebo Classic</th><th>jMAVSim</th></tr></thead><tbody><tr><td><a href="./../airframes/airframe_reference.html#copter_simulation_hil_quadcopter_x">HIL Quadcopter X</a></td><td>1001</td><td>Y</td><td>Y</td></tr><tr><td><a href="./../airframes/airframe_reference.html#vtol_standard_vtol_hil_standard_vtol_quadplane">HIL Standard VTOL QuadPlane</a></td><td>1002</td><td>Y</td><td></td></tr><tr><td><a href="./../airframes/airframe_reference.html#copter_quadrotor_x_generic_quadcopter">Generic Quadrotor x</a> copter</td><td>4001</td><td>Y</td><td>Y</td></tr></tbody></table><p><a id="simulation_environment"></a></p><h2 id="hitl-simulation-environment" tabindex="-1">HITL Simulation Environment <a class="header-anchor" href="#hitl-simulation-environment" aria-label="Permalink to &quot;HITL Simulation Environment&quot;">​</a></h2><p>With Hardware-in-the-Loop (HITL) simulation the normal PX4 firmware is run on real hardware. JMAVSim or Gazebo Classic (running on a development computer) are connected to the flight controller hardware via USB/UART. The simulator acts as gateway to share MAVLink data between PX4 and <em>QGroundControl</em>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The simulator can also be connected via UDP if the flight controller has networking support and uses a stable, low-latency connection (e.g. a wired Ethernet connection - WiFi is usually not sufficiently reliable). For example, this configuration has been tested with PX4 running on a Raspberry Pi connected via Ethernet to the computer (a startup configuration that includes the command for running jMAVSim can be found <a href="https://github.com/PX4/PX4-Autopilot/blob/main/posix-configs/rpi/px4_hil.config" target="_blank" rel="noreferrer">here</a>).</p></div><p>The diagram below shows the simulation environment:</p><ul><li>A HITL configuration is selected (via <em>QGroundControl</em>) that doesn&#39;t start any real sensors.</li><li><em>jMAVSim</em> or <em>Gazebo Classic</em> are connected to the flight controller via USB.</li><li>The simulator is connected to <em>QGroundControl</em> via UDP and bridges its MAVLink messages to PX4.</li><li><em>Gazebo Classic</em> and <em>jMAVSim</em> can also connect to an offboard API and bridge MAVLink messages to PX4.</li><li>(Optional) A serial connection can be used to connect Joystick/Gamepad hardware via <em>QGroundControl</em>.</li></ul><p><img src="'+t+'" alt="HITL Setup - jMAVSim and Gazebo Classic"></p><h2 id="hitl-vs-sitl" tabindex="-1">HITL vs SITL <a class="header-anchor" href="#hitl-vs-sitl" aria-label="Permalink to &quot;HITL vs SITL&quot;">​</a></h2><p>SITL runs on a development computer in a simulated environment, and uses firmware specifically generated for that environment. Other than simulation drivers to provide fake environmental data from the simulator the system behaves normally.</p><p>By contrast, HITL runs normal PX4 firmware in &quot;HITL mode&quot;, on normal hardware. The simulation data enters the system at a different point than for SITL. Core modules like commander and sensors have HITL modes at startup that bypass some of the normal functionality.</p><p>In summary, HITL runs PX4 on the actual hardware using standard firmware, but SITL actually executes more of the standard system code.</p><h2 id="setting-up-hitl" tabindex="-1">Setting up HITL <a class="header-anchor" href="#setting-up-hitl" aria-label="Permalink to &quot;Setting up HITL&quot;">​</a></h2><h3 id="px4-configuration" tabindex="-1">PX4 Configuration <a class="header-anchor" href="#px4-configuration" aria-label="Permalink to &quot;PX4 Configuration&quot;">​</a></h3><ol><li><p>Connect the autopilot directly to <em>QGroundControl</em> via USB.</p></li><li><p>Enable HITL Mode</p><ol><li><p>Open <strong>Setup &gt; Safety</strong> section.</p></li><li><p>Enable HITL mode by selecting <strong>Enabled</strong> from the <em>HITL Enabled</em> list:</p><p><img src="'+i+'" alt="QGroundControl HITL configuration"></p></li></ol></li><li><p>Select Airframe</p><ol><li><p>Open <strong>Setup &gt; Airframes</strong></p></li><li><p>Select a <a href="#compatible_airframe">compatible airframe</a> you want to test. Then click <strong>Apply and Restart</strong> on top-right of the <em>Airframe Setup</em> page.</p><p><img src="'+a+'" alt="Select Airframe"></p></li></ol></li><li><p>Calibrate your RC or Joystick, if needed.</p></li><li><p>Setup UDP</p><ol><li><p>Under the <em>General</em> tab of the settings menu, uncheck all <em>AutoConnect</em> boxes except for <strong>UDP</strong>.</p><p><img src="'+s+`" alt="QGC Auto-connect settings for HITL"></p></li></ol></li><li><p>(Optional) Configure Joystick and Failsafe. Set the following <a href="./../advanced_config/parameters.html">parameters</a> in order to use a joystick instead of an RC remote control transmitter:</p><ul><li><a href="./../advanced_config/parameter_reference.html#COM_RC_IN_MODE">COM_RC_IN_MODE</a> to &quot;Joystick/No RC Checks&quot;. This allows joystick input and disables RC input checks.</li><li><a href="./../advanced_config/parameter_reference.html#NAV_RCL_ACT">NAV_RCL_ACT</a> to &quot;Disabled&quot;. This ensures that no RC failsafe actions interfere when not running HITL with a radio control.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <em>QGroundControl User Guide</em> also has instructions on <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/setup_view/joystick.html" target="_blank" rel="noreferrer">Joystick</a> and <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/virtual_joystick.html" target="_blank" rel="noreferrer">Virtual Joystick</a> setup.</p></div></li></ol><p>Once configuration is complete, <strong>close</strong> <em>QGroundControl</em> and disconnect the flight controller hardware from the computer.</p><h3 id="simulator-specific-setup" tabindex="-1">Simulator-Specific Setup <a class="header-anchor" href="#simulator-specific-setup" aria-label="Permalink to &quot;Simulator-Specific Setup&quot;">​</a></h3><p>Follow the appropriate setup steps for the specific simulator in the following sections.</p><h4 id="gazebo-classic" tabindex="-1">Gazebo Classic <a class="header-anchor" href="#gazebo-classic" aria-label="Permalink to &quot;Gazebo Classic&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Make sure <em>QGroundControl</em> is not running!</p></div><ol><li><p>Build PX4 with <a href="./../sim_gazebo_classic/">Gazebo Classic</a> (in order to build the Gazebo Classic plugins).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Firmware_clon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DONT_RUN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div></li><li><p>Open the vehicle model&#39;s sdf file (e.g. <strong>Tools/simulation/gazebo-classic/sitl_gazebo-classic/models/iris_hitl/iris_hitl.sdf</strong>).</p></li><li><p>Replace the <code>serialDevice</code> parameter (<code>/dev/ttyACM0</code>) if necessary.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The serial device depends on what port is used to connect the vehicle to the computer (this is usually <code>/dev/ttyACM0</code>). An easy way to check on Ubuntu is to plug in the autopilot, open up a terminal, and type <code>dmesg | grep &quot;tty&quot;</code>. The correct device will be the last one shown.</p></div></li><li><p>Set up the environment variables:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/setup_gazebo.bash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/build/px4_sitl_default</span></span></code></pre></div><p>and run Gazebo Classic in HITL mode:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gazebo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds/hitl_iris.world</span></span></code></pre></div></li><li><p>Start <em>QGroundControl</em>. It should autoconnect to PX4 and Gazebo Classic.</p></li></ol><h4 id="jmavsim-quadrotor-only" tabindex="-1">jMAVSim (Quadrotor only) <a class="header-anchor" href="#jmavsim-quadrotor-only" aria-label="Permalink to &quot;jMAVSim (Quadrotor only)&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Make sure <em>QGroundControl</em> is not running!</p></div><ol><li><p>Connect the flight controller to the computer and wait for it to boot.</p></li><li><p>Run jMAVSim in HITL mode:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/simulation/jmavsim/jmavsim_run.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/ttyACM0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 921600</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Replace the serial port name <code>/dev/ttyACM0</code> as appropriate. On macOS this port would be <code>/dev/tty.usbmodem1</code>. On Windows (including Cygwin) it would be the COM1 or another port - check the connection in the Windows Device Manager.</p></div></li><li><p>Start <em>QGroundControl</em>. It should autoconnect to PX4 and jMAVSim.</p></li></ol><h2 id="fly-an-autonomous-mission-in-hitl" tabindex="-1">Fly an Autonomous Mission in HITL <a class="header-anchor" href="#fly-an-autonomous-mission-in-hitl" aria-label="Permalink to &quot;Fly an Autonomous Mission in HITL&quot;">​</a></h2><p>You should be able to use <em>QGroundControl</em> to <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/fly_view/fly_view.html#missions" target="_blank" rel="noreferrer">run missions</a> and otherwise control the vehicle.</p>`,33)]))}const v=o(h,[["render",p]]);export{b as __pageData,v as default};
