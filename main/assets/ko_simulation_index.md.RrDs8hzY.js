import{_ as a,a as i}from"./chunks/px4_sitl_overview.C_WnxCTy.js";import{_ as t,c as s,a8 as o,o as n}from"./chunks/framework.BDnHobkS.js";const g=JSON.parse('{"title":"시뮬레이션","description":"","frontmatter":{},"headers":[],"relativePath":"ko/simulation/index.md","filePath":"ko/simulation/index.md"}'),l={name:"ko/simulation/index.md"};function r(h,e,p,d,c,m){return n(),s("div",null,e[0]||(e[0]=[o('<h1 id="시뮬레이션" tabindex="-1">시뮬레이션 <a class="header-anchor" href="#시뮬레이션" aria-label="Permalink to &quot;시뮬레이션&quot;">​</a></h1><p>시뮬레이터는 PX4 비행 코드가 시뮬레이션된 가상 &quot;세계&quot;에서 컴퓨터로 모델링된 기체를 제어합니다. You can interact with this vehicle just as you might with a real vehicle, using <em>QGroundControl</em>, an offboard API, or a radio controller/gamepad.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Simulation is a quick, easy, and most importantly, <em>safe</em> way to test changes to PX4 code before attempting to fly in the real world. 실험할 기체가 없은 경우 PX4로 비행을 시작하는 것도 좋은 방법입니다.</p></div><p>PX4 supports both <em>Software In the Loop (SITL)</em> simulation, where the flight stack runs on computer (either the same computer or another computer on the same network) and <em>Hardware In the Loop (HITL)</em> simulation using a simulation firmware on a real flight controller board.</p><p>사용 가능한 시뮬레이터와 설정 방법을 다음 섹션에서 설명합니다. The other sections provide general information about how the simulator works, and are not required to <em>use</em> the simulators.</p><h2 id="지원되는-시뮬레이터" tabindex="-1">지원되는 시뮬레이터 <a class="header-anchor" href="#지원되는-시뮬레이터" aria-label="Permalink to &quot;지원되는 시뮬레이터&quot;">​</a></h2><p>The following simulators are supported by the PX4 core development team.</p><table tabindex="0"><thead><tr><th>시뮬레이터</th><th>설명</th></tr></thead><tbody><tr><td><a href="./../sim_gazebo_gz/">Gazebo</a></td><td><p><strong>This simulator is highly recommended.</strong></p><p>Gazebo supersedes <a href="./../sim_gazebo_classic/">Gazebo Classic</a>, featuring more advanced rendering, physics and sensor models. It is the only version of Gazebo available from Ubuntu Linux 22.04</p><p>A powerful 3D simulation environment that is particularly suitable for testing object-avoidance and computer vision. <a href="./../simulation/multi-vehicle-simulation.html">다중 차량시뮬레이션</a>에도 사용할 수 있으며 일반적으로 차량 제어 자동화를 위한 도구 모음인 <a href="./../simulation/ros_interface.html">ROS</a>와 함께 사용됩니다. </p><p><strong>Supported Vehicles:</strong> Quad, Standard VTOL, Plane</p></td></tr><tr><td><a href="./../sim_gazebo_classic/">Gazebo Classic</a></td><td><p><strong>This simulator is highly recommended.</strong></p><p>A powerful 3D simulation environment that is particularly suitable for testing object-avoidance and computer vision. It can also be used for <a href="./../simulation/multi-vehicle-simulation.html">multi-vehicle simulation</a> and is commonly used with <a href="./../simulation/ros_interface.html">ROS</a>, a collection of tools for automating vehicle control.</p><p><strong>Supported Vehicles:</strong> Quad (<a href="./../airframes/airframe_reference.html#copter_quadrotor_x_generic_quadcopter">Iris</a>, Hex (Typhoon H480), <a href="./../airframes/airframe_reference.html#vtol_standard_vtol_generic_standard_vtol">Generic Standard VTOL (QuadPlane)</a>, Tailsitter, Plane, Rover, Submarine </p></td></tr></tbody></table><p>There are also a number of <a href="./../simulation/community_supported_simulators.html">Community Supported Simulators</a>.</p><hr><p>이 항목의 나머지 부분은 시뮬레이션 인프라 작동 방식에 대한 &quot;다소 일반적인&quot; 설명입니다. It is not required to <em>use</em> the simulators.</p><h2 id="simulator-mavlink-api" tabindex="-1">Simulator MAVLink API <a class="header-anchor" href="#simulator-mavlink-api" aria-label="Permalink to &quot;Simulator MAVLink API&quot;">​</a></h2><p>All simulators except for Gazebo communicate with PX4 using the Simulator MAVLink API. 이 API는 시뮬레이션된 세계에서 PX4로 센서 데이터를 제공하고, 시뮬레이션된 차량에 적용될 비행 코드에서 모터 및 액추에이터 값을 반환하는 MAVLink 메시지 세트를 정의합니다. 아래 이미지는 메시지 흐름을 나타냅니다.</p><p><img src="'+a+'" alt="Simulator MAVLink API"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>A SITL build of PX4 uses <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/simulation/simulator_mavlink/SimulatorMavlink.cpp" target="_blank" rel="noreferrer">SimulatorMavlink.cpp</a> to handle these messages while a hardware build in HIL mode uses <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/mavlink/mavlink_receiver.cpp" target="_blank" rel="noreferrer">mavlink_receiver.cpp</a>. 시뮬레이터의 센서 데이터는 PX4 uORB 주제에 기록됩니다. 모든 모터/액츄에이터가 차단되지만, 내부 소프트웨어는 완전하게 작동합니다.</p></div><p>메시지는 아래에 설명되어 있습니다(자세한 내용은 링크 참조).</p><table tabindex="0"><thead><tr><th>메시지</th><th>방향</th><th>설명</th></tr></thead><tbody><tr><td><a href="https://mavlink.io/en/messages/common.html#MAV_MODE_FLAG_HIL_ENABLED" target="_blank" rel="noreferrer">MAV_MODE:MAV_MODE_FLAG_HIL_ENABLED</a></td><td>NA</td><td>시뮬레이션 모드 플래그입니다. 모든 모터/액추에이터가 차단되지만, 내부 소프트웨어는 완전하게 작동합니다.</td></tr><tr><td><a href="https://mavlink.io/en/messages/common.html#HIL_ACTUATOR_CONTROLS" target="_blank" rel="noreferrer">HIL_ACTUATOR_CONTROLS</a></td><td>PX4 → Sim</td><td>PX4 제어 출력(모터, 액추에이터).</td></tr><tr><td><a href="https://mavlink.io/en/messages/common.html#HIL_SENSOR" target="_blank" rel="noreferrer">HIL_SENSOR</a></td><td>Sim → PX4</td><td>NED 본체 프레임의 SI 단위로 시뮬레이션된 IMU 판독값.</td></tr><tr><td><a href="https://mavlink.io/en/messages/common.html#HIL_GPS" target="_blank" rel="noreferrer">HIL_GPS</a></td><td>Sim → PX4</td><td>시뮬레이션된 GPS RAW 센서 값입니다.</td></tr><tr><td><a href="https://mavlink.io/en/messages/common.html#HIL_OPTICAL_FLOW" target="_blank" rel="noreferrer">HIL_OPTICAL_FLOW</a></td><td>Sim → PX4</td><td>흐름 센서에서 시뮬레이션된 광류(예: PX4FLOW 또는 광학 마우스 센서)</td></tr><tr><td><a href="https://mavlink.io/en/messages/common.html#HIL_STATE_QUATERNION" target="_blank" rel="noreferrer">HIL_STATE_QUATERNION</a></td><td>Sim → PX4</td><td>실제 &quot;시뮬레이션된&quot; 차량 위치, 자세, 속도 등이 포함됩니다. 이것은 분석 및 디버깅에 대한 PX4의 추정치와 비교 기록될 수 있습니다(예: 노이즈가 있는(시뮬레이션된) 센서 입력에 대해 추정기가 얼마나 잘 작동하는 지 확인).</td></tr><tr><td><a href="https://mavlink.io/en/messages/common.html#HIL_RC_INPUTS_RAW" target="_blank" rel="noreferrer">HIL_RC_INPUTS_RAW</a></td><td>Sim → PX4</td><td>수신된 RC 채널의 RAW 값입니다.</td></tr></tbody></table><p>PX4 directly uses the <a href="https://gazebosim.org/docs" target="_blank" rel="noreferrer">Gazebo API</a> to interface with <a href="./../sim_gazebo_gz/">Gazebo</a> and MAVlink is not required.</p><h2 id="기본-px4-mavlink-udp-포트" tabindex="-1">기본 PX4 MAVLink UDP 포트 <a class="header-anchor" href="#기본-px4-mavlink-udp-포트" aria-label="Permalink to &quot;기본 PX4 MAVLink UDP 포트&quot;">​</a></h2><p>By default, PX4 uses commonly established UDP ports for MAVLink communication with ground control stations (e.g. <em>QGroundControl</em>), Offboard APIs (e.g. MAVSDK, MAVROS) and simulator APIs (e.g. Gazebo). 해당 포트는 다음과 같습니다:</p><ul><li>PX4&#39;s remote UDP Port <strong>14550</strong> is used for communication with ground control stations. GCS는 이 포트에서 연결 수신을 예상합니다. <em>QGroundControl</em> listens to this port by default.</li><li>PX4&#39;s remote UDP Port <strong>14540</strong> is used for communication with offboard APIs. 오프보드 API는 이 포트에서 연결 수신을 예상합니다.<div class="info custom-block"><p class="custom-block-title">INFO</p><p>Multi-vehicle simulations use a separate remote port for each instance, allocated sequentially from <code>14540</code> to <code>14549</code> (additional instances all use port <code>14549</code>).</p></div></li></ul><p>:::</p><ul><li>The simulator&#39;s local TCP Port, <strong>4560</strong>, is used for communication with PX4. PX4는 이 포트를 수신하고, 시뮬레이터는 이 포트에 데이터를 브로드캐스트하여 통신을 시작합니다.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The ports for the GCS, offboard APIs and simulator are specified by startup scripts. See <a href="./../concept/system_startup.html">System Startup</a> to learn more.</p></div><h2 id="sitl-시뮬레이션-환경" tabindex="-1">SITL 시뮬레이션 환경 <a class="header-anchor" href="#sitl-시뮬레이션-환경" aria-label="Permalink to &quot;SITL 시뮬레이션 환경&quot;">​</a></h2><p>The diagram below shows a typical SITL simulation environment for any of the supported simulators that use MAVLink (i.e. all of them except Gazebo).</p><p><img src="'+i+`" alt="PX4 SITL overview"></p><p>시스템의 차이점은 UDP를 통해 연결되며, 동일 컴퓨터 또는 동일 네트워크의 다른 컴퓨터에서도 실행됩니다.</p><ul><li><p>PX4는 시뮬레이션 전용 모듈을 사용하여, 시뮬레이터의 로컬 TCP 포트 4560에 연결합니다. Simulators then exchange information with PX4 using the <a href="#simulator-mavlink-api">Simulator MAVLink API</a> described above. SITL 및 시뮬레이터의 PX4는 동일 컴퓨터 또는 동일 네트워크의 다른 컴퓨터에서 실행할 수 있습니다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Simulators can also use the <em>uxrce-dds bridge</em> (<a href="./../middleware/uxrce_dds.html">XRCE-DDS</a>) to directly interact with PX4 (i.e. via <a href="./../middleware/uorb.html">UORB topics</a> rather than MAVLink). This approach <em>may</em> used by Gazebo Classic for <a href="./../sim_gazebo_classic/multi_vehicle_simulation.html#build-and-test-xrce-dds">multi-vehicle simulation</a>.</p></div></li></ul><p>:::</p><ul><li><p>PX4는 일반 MAVLink 모듈을 사용하여, MAVSDK 또는 ROS와 같은 외부 개발자 API와 지상국에 연결합니다.</p><ul><li>Ground stations listen to PX4&#39;s remote UDP port: <code>14550</code></li><li>External developer APIs listen to PX4&#39;s remote UDP port: <code>14540</code>. For multi-vehicle simulations, PX4 sequentially allocates a separate remote port for each instance from <code>14540</code> to <code>14549</code> (additional instances all use port <code>14549</code>).</li></ul></li><li><p>PX4 defines a number of <em>local</em> UDP ports (<code>14580</code>,<code>18570</code>), which are sometimes used when networking with PX4 running in a container or virtual machine. 이는 &quot;일반적인&quot; 용도로는 권장되지 않으며, 향후 변경될 수 있습니다.</p></li><li><p>A serial connection may be used to connect <a href="./../config/joystick.html">Joystick/Gamepad</a> hardware via <em>QGroundControl</em>.</p></li></ul><p>If you use the normal build system SITL <code>make</code> configuration targets (see next section) then both SITL and the Simulator will be launched on the same computer and the ports above will automatically be configured. 추가 MAVLink UDP 연결을 구성하거나 빌드 구성 및 초기화 파일에서 시뮬레이션 환경을 수정할 수 있습니다.</p><h3 id="sitl-시뮬레이션-시작-구축" tabindex="-1">SITL 시뮬레이션 시작/구축 <a class="header-anchor" href="#sitl-시뮬레이션-시작-구축" aria-label="Permalink to &quot;SITL 시뮬레이션 시작/구축&quot;">​</a></h3><p>빌드 시스템으로 SITL에서 PX4를 빌드하여 시뮬레이터를 시작/연결할 수 있습니다. 구문(단순화)은 다음과 같습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simulator[_vehicle-model]</span></span></code></pre></div><p>where <code>simulator</code> is <code>gz</code> (for Gazebo), <code>gazebo-classic</code>, <code>jmavsim</code> or some other simulator, and vehicle-model is a particular vehicle type supported by that simulator (<a href="./../sim_gazebo_gz/">Gazebo</a> and <a href="./../sim_jmavsim/">jMAVSim</a> only support multicopters at time of writing, while <a href="./../sim_gazebo_classic/">Gazebo Classic</a> supports many different types).</p><p>아래에는 여러가지 예가 있으며, 각 시뮬레이터의 개별 페이지에는 더 많은 예제들이 있습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start Gazebo with the x500 multicopter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gz_x500</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start Gazebo Classic with plane</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic_plane</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start Gazebo Classic with iris and optical flow</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic_iris_opt_flow</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start JMavSim with iris (default vehicle model)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jmavsim</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start PX4 with no simulator (i.e. to use your own &quot;custom&quot; simulator)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> none_iris</span></span></code></pre></div><p>시뮬레이션은 환경 변수를 통하여 추가로 설정이 가능합니다.</p><ul><li><code>PX4_ESTIMATOR</code>: This variable configures which estimator to use. Possible options are: <code>ekf2</code> (default), <code>lpe</code> (deprecated). It can be set via <code>export PX4_ESTIMATOR=lpe</code> before running the simulation.</li></ul><p>The syntax described here is simplified, and there are many other options that you can configure via <em>make</em> - for example, to set that you wish to connect to an IDE or debugger. For more information see: <a href="./../dev_setup/building_px4.html#px4-make-build-targets">Building the Code &gt; PX4 Make Build Targets</a>.</p><p><a id="simulation_speed"></a></p><h3 id="실제보다-빠른-속도로-시뮬레이션-실행" tabindex="-1">실제보다 빠른 속도로 시뮬레이션 실행 <a class="header-anchor" href="#실제보다-빠른-속도로-시뮬레이션-실행" aria-label="Permalink to &quot;실제보다 빠른 속도로 시뮬레이션 실행&quot;">​</a></h3><p>SITL can be run faster or slower than realtime when using jMAVSim or Gazebo Classic.</p><p>The speed factor is set using the environment variable <code>PX4_SIM_SPEED_FACTOR</code>. 예를 들어, 실시간 속도의 2배로 jMAVSim 시뮬레이션을 실행하려면:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PX4_SIM_SPEED_FACTOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jmavsim</span></span></code></pre></div><p>실시간 절반으로 실행하려면:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PX4_SIM_SPEED_FACTOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0.5</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jmavsim</span></span></code></pre></div><p>You can apply the factor to all SITL runs in the current session using <code>EXPORT</code>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PX4_SIM_SPEED_FACTOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jmavsim</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>At some point IO or CPU will limit the speed that is possible on your machine and it will be slowed down &quot;automatically&quot;. 강력한 데스크탑 컴퓨터는 일반적으로 약 6-10x에서 시뮬레이션할 수 있으며, 노트북의 경우의 최고 속도는 약 3-4x 입니다.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>To avoid PX4 detecting data link timeouts, increase the value of param <a href="./../advanced_config/parameter_reference.html#COM_DL_LOSS_T">COM_DL_LOSS_T</a> proportional to the simulation rate. For example, if <code>COM_DL_LOSS_T</code> is 10 in realtime, at 10x simulation rate increase to 100.</p></div><h3 id="잠금단계시뮬레이션" tabindex="-1">잠금단계시뮬레이션 <a class="header-anchor" href="#잠금단계시뮬레이션" aria-label="Permalink to &quot;잠금단계시뮬레이션&quot;">​</a></h3><p>PX4 SITL and the simulators (jMAVSim or Gazebo Classic) have been set up to run in <em>lockstep</em>. What this means is that PX4 and the simulator wait on each other for sensor and actuator messages, rather than running at their own speeds.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Lockstep makes it possible to <a href="#simulation_speed">run the simulation faster or slower than realtime</a>, and also to pause it in order to step through code.</p></div><p>잠금단계의 순서는 다음과 같습니다.</p><ol><li>The simulation sends a sensor message <a href="https://mavlink.io/en/messages/common.html#HIL_SENSOR" target="_blank" rel="noreferrer">HIL_SENSOR</a> including a timestamp <code>time_usec</code> to update the sensor state and time of PX4.</li><li>PX4 receives this and does one iteration of state estimation, controls, etc. and eventually sends an actuator message <a href="https://mavlink.io/en/messages/common.html#HIL_ACTUATOR_CONTROLS" target="_blank" rel="noreferrer">HIL_ACTUATOR_CONTROLS</a>.</li><li>시뮬레이션은 액추에이터/모터 메시지를 수신후에, 물리적 시뮬레이션후에 PX4로 전송할 다음 센서 메시지를 계산합니다.</li></ol><p>시스템은 시뮬레이션 시간을 포함하는 센서 메시지를 전송하는 &quot;프리휠링&quot; 기간으로 시작하므로, 초기화되고 액추에이터 메시지로 응답시까지 PX4를 실행합니다.</p><h4 id="잠금단계-시뮬레이션-비활성화" tabindex="-1">잠금단계 시뮬레이션 비활성화 <a class="header-anchor" href="#잠금단계-시뮬레이션-비활성화" aria-label="Permalink to &quot;잠금단계 시뮬레이션 비활성화&quot;">​</a></h4><p>SITL이 이 기능을 지원하지 않는 시뮬레이터와 함께 사용되는 경우에는 잠금단계 시뮬레이션을 비활성화할 수 있습니다. 이 경우 시뮬레이터와 PX4는 호스트 시스템 시간을 사용하며 서로를 기다리지 않습니다.</p><p>To disable lockstep in PX4, run <code>make px4_sitl_default boardconfig</code> and set the <code>BOARD_NOLOCKSTEP</code> &quot;Force disable lockstep&quot; symbol which is located under toolchain.</p><p>To disable lockstep in Gazebo, edit <a href="https://github.com/PX4/PX4-SITL_gazebo-classic/blob/3062d287c322fabf1b41b8e33518eb449d4ac6ed/models/plane/plane.sdf#L449" target="_blank" rel="noreferrer">the model SDF file</a> and set <code>&lt;enable_lockstep&gt;false&lt;/enable_lockstep&gt;</code>.</p><p>To disable lockstep in jMAVSim, remove <code>-l</code> in <a href="https://github.com/PX4/PX4-Autopilot/blob/main/Tools/simulation/jsbsim/sitl_run.sh#L40" target="_blank" rel="noreferrer">sitl_run.sh</a>, or make sure otherwise that the java binary is started without the <code>-lockstep</code> flag.</p><h3 id="시작-스크립트" tabindex="-1">시작 스크립트 <a class="header-anchor" href="#시작-스크립트" aria-label="Permalink to &quot;시작 스크립트&quot;">​</a></h3><p>스크립트는 매개변수 설정과 시작 모듈 제어에 사용됩니다. They are located in the <a href="https://github.com/PX4/PX4-Autopilot/tree/main/ROMFS/px4fmu_common/init.d-posix" target="_blank" rel="noreferrer">ROMFS/px4fmu_common/init.d-posix</a> directory, the <code>rcS</code> file is the main entry point. See <a href="./../concept/system_startup.html">System Startup</a> for more information.</p><h3 id="안정장치-및-센서-하드웨어-오류-시뮬레이션" tabindex="-1">안정장치 및 센서/하드웨어 오류 시뮬레이션 <a class="header-anchor" href="#안정장치-및-센서-하드웨어-오류-시뮬레이션" aria-label="Permalink to &quot;안정장치 및 센서/하드웨어 오류 시뮬레이션&quot;">​</a></h3><p><a href="./../simulation/failsafes.html">Simulate Failsafes</a> explains how to trigger safety failsafes like GPS failure and battery drain.</p><h2 id="hitl-시뮬레이션-환경" tabindex="-1">HITL 시뮬레이션 환경 <a class="header-anchor" href="#hitl-시뮬레이션-환경" aria-label="Permalink to &quot;HITL 시뮬레이션 환경&quot;">​</a></h2><p>HITL(Hardware-in-the-Loop) 시뮬레이션을 사용하여, 일반 PX4 펌웨어가 실제 하드웨어에서 실행됩니다. The HITL Simulation Environment in documented in: <a href="./../simulation/hitl.html">HITL Simulation</a>.</p><h2 id="조이스틱-게임패드-통합" tabindex="-1">조이스틱/게임패드 통합 <a class="header-anchor" href="#조이스틱-게임패드-통합" aria-label="Permalink to &quot;조이스틱/게임패드 통합&quot;">​</a></h2><p><em>QGroundControl</em> desktop versions can connect to a USB Joystick/Gamepad and send its movement commands and button presses to PX4 over MAVLink. 이것은 SITL 및 HITL 시뮬레이션 모두에서 작동하며, 시뮬레이션 차량을 직접 제어할 수 있습니다. 조이스틱이 없는 경우 QGroundControl의 화면 가상 썸스틱을 사용하여 차량을 제어할 수도 있습니다.</p><p>For setup information see the <em>QGroundControl User Guide</em>:</p><ul><li><a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/setup_view/joystick.html" target="_blank" rel="noreferrer">Joystick Setup</a></li><li><a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/virtual_joystick.html" target="_blank" rel="noreferrer">Virtual Joystick</a></li></ul><h2 id="카메라-시뮬레이션" tabindex="-1">카메라 시뮬레이션 <a class="header-anchor" href="#카메라-시뮬레이션" aria-label="Permalink to &quot;카메라 시뮬레이션&quot;">​</a></h2><p>PX4 supports capture of both still images and video from within the <a href="./../sim_gazebo_classic/">Gazebo Classic</a> simulated environment. This can be enabled/set up as described in <a href="./../sim_gazebo_classic/#video-streaming">Gazebo Glassic &gt; Video Streaming</a>.</p><p>The simulated camera is a gazebo classic plugin that implements the <a href="https://mavlink.io/en/protocol/camera.html" target="_blank" rel="noreferrer">MAVLink Camera Protocol</a> . PX4 connects/integrates with this camera in <em>exactly the same way</em> as it would with any other MAVLink camera:</p><ol><li><a href="./../advanced_config/parameter_reference.html#TRIG_INTERFACE">TRIG_INTERFACE</a> must be set to <code>3</code> to configure the camera trigger driver for use with a MAVLink camera<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In this mode the driver just sends a <a href="https://mavlink.io/en/messages/common.html#CAMERA_TRIGGER" target="_blank" rel="noreferrer">CAMERA_TRIGGER</a> message whenever an image capture is requested. For more information see <a href="./../camera/fc_connected_camera.html">Cameras Connected to Flight Controller Outputs</a>.</p></div></li></ol><p>::: 2. PX4는 GCS와 (시뮬레이터) MAVLink 카메라 사이의 모든 카메라 명령을 전달하여야 합니다. You can do this by starting <a href="./../modules/modules_communication.html#mavlink">MAVLink</a> with the <code>-f</code> flag as shown, specifying the UDP ports for the new connection.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14558</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14530</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> camera</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>More than just the camera MAVLink messages will be forwarded, but the camera will ignore those that it doesn&#39;t consider relevant.</p></div><p>다른 시뮬레이터에서도 동일한 접근 방식을 사용하여 카메라 지원을 구현할 수 있습니다.</p><h2 id="원격-서버에서-시뮬레이션-실행" tabindex="-1">원격 서버에서 시뮬레이션 실행 <a class="header-anchor" href="#원격-서버에서-시뮬레이션-실행" aria-label="Permalink to &quot;원격 서버에서 시뮬레이션 실행&quot;">​</a></h2><p>한 컴퓨터에서 시뮬레이터를 실행하고 동일 네트워크(또는 적절한 라우팅이 있는 다른 네트워크)의 다른 컴퓨터에서 시뮬레이터에 접근할 수 있습니다. 시뮬레이션 차량을 실행하는 실제 보조 컴퓨터에서 실행되는 드론 애플리케이션을 테스트하는 경우에 유용합니다.</p><p>(네트워크 스팸과 서로 다른 시뮬레이션이 서로 간섭하는 것을 방지하기 위하여) PX4는 기본적으로 패킷을 외부 인터페이스로 라우팅하지 않기 때문에 &quot;즉시&quot; 작동하지 않습니다. 대신 내부적으로 트래픽을 &quot;localhost&quot;로 라우팅합니다.</p><p>아래에 설명된 대로 외부 인터페이스에서 UDP 패킷을 사용하는 여러 방법이 있습니다.</p><h3 id="mavlink-라우터-사용" tabindex="-1">MAVLink 라우터 사용 <a class="header-anchor" href="#mavlink-라우터-사용" aria-label="Permalink to &quot;MAVLink 라우터 사용&quot;">​</a></h3><p>The <a href="https://github.com/mavlink-router/mavlink-router" target="_blank" rel="noreferrer">mavlink-router</a> can be used to route packets from localhost to an external interface.</p><p>To route packets between SITL running on one computer (sending MAVLink traffic to localhost on UDP port 14550), and QGC running on another computer (e.g. at address <code>10.73.41.30</code>) you could:</p><ul><li><p>Start <em>mavlink-router</em> with the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavlink-routerd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.73.41.30:14550</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:14550</span></span></code></pre></div></li><li><p>Use a <em>mavlink-router</em> conf file.</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[UdpEndpoint QGC]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = Normal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 10.73.41.30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 14550</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[UdpEndpoint SIM]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = Eavesdropping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 14550</span></span></code></pre></div></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>More information about <em>mavlink-router</em> configuration can be found <a href="https://github.com/mavlink-router/mavlink-router#running" target="_blank" rel="noreferrer">here</a>.</p></div><h3 id="udp-브로드캐스트-활성화" tabindex="-1">UDP 브로드캐스트 활성화 <a class="header-anchor" href="#udp-브로드캐스트-활성화" aria-label="Permalink to &quot;UDP 브로드캐스트 활성화&quot;">​</a></h3><p>The <a href="./../modules/modules_communication.html#mavlink_usage">mavlink module</a> routes to <em>localhost</em> by default, but you can enable UDP broadcasting of heartbeats using its <code>-p</code> option. Any remote computer on the network can then connect to the simulator by listening to the appropriate port (i.e. 14550 for <em>QGroundControl</em>).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>UDP broadcasting provides a simple way to set up the connection when there is only one simulation running on the network. Do not use this approach if there are multiple simulations running on the network (you might instead <a href="#enable-streaming-to-specific-address">publish to a specific address</a>).</p></div><p>This should be done in an appropriate configuration file where <code>mavlink start</code> is called. For example: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/ROMFS/px4fmu_common/init.d-posix/px4-rc.mavlink" target="_blank" rel="noreferrer">/ROMFS/px4fmu_common/init.d-posix/px4-rc.mavlink</a>.</p><h3 id="특정-주소로-스트리밍-활성화" tabindex="-1">특정 주소로 스트리밍 활성화 <a class="header-anchor" href="#특정-주소로-스트리밍-활성화" aria-label="Permalink to &quot;특정 주소로 스트리밍 활성화&quot;">​</a></h3><p>The <a href="./../modules/modules_communication.html#mavlink_usage">mavlink module</a> routes to <em>localhost</em> by default, but you can specify an external IP address to stream to using its <code>-t</code> option. The specified remote computer can then connect to the simulator by listening to the appropriate port (i.e. 14550 for <em>QGroundControl</em>).</p><p>This should be done in various configuration files where <code>mavlink start</code> is called. For example: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/ROMFS/px4fmu_common/init.d-posix/px4-rc.mavlink" target="_blank" rel="noreferrer">/ROMFS/px4fmu_common/init.d-posix/px4-rc.mavlink</a>.</p><h3 id="ssh-터널링" tabindex="-1">SSH 터널링 <a class="header-anchor" href="#ssh-터널링" aria-label="Permalink to &quot;SSH 터널링&quot;">​</a></h3><p>SSH 터널링을 사용하면 시뮬레이션 컴퓨터와 이를 사용하는 시스템이 동일 네트워크에 있지 않아도 됩니다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You might similarly use VPN to provide a tunnel to an external interface (on the same network or another network).</p></div><p>터널을 만드는 한 가지 방법은 SSH 터널링 옵션을 사용하는 것입니다. The tunnel itself can be created by running the following command on <em>localhost</em>, where <code>remote.local</code> is the name of a remote computer:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 14551:localhost:14551</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote.local</span></span></code></pre></div><p>UDP 패킷은 SSH를 통해 라우팅될 수 있도록 TCP 패킷으로 변환되어야 합니다. The <a href="https://en.wikipedia.org/wiki/Netcat" target="_blank" rel="noreferrer">netcat</a> utility can be used on both sides of the tunnel - first to convert packets from UDP to TCP, and then back to UDP at the other end.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>QGC must be running before executing <em>netcat</em>.</p></div><p>On the <em>QGroundControl</em> computer, UDP packet translation may be implemented by running following commands:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkfifo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/tcp2udp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">netcat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lvp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14551</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/tcp2udp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> netcat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14550</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/tcp2udp</span></span></code></pre></div><p>SSH 터널의 시뮬레이터 측에서 명령어는 다음과 같습니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkfifo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/udp2tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">netcat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lvup</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14550</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/udp2tcp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> netcat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14551</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/udp2tcp</span></span></code></pre></div><p>The port number <code>14550</code> is valid for connecting to QGroundControl or another GCS, but should be adjusted for other endpoints (e.g. developer APIs etc.).</p><p>The tunnel may in theory run indefinitely, but <em>netcat</em> connections may need to be restarted if there is a problem.</p><p>The <a href="https://raw.githubusercontent.com/ThunderFly-aerospace/sitl_gazebo/autogyro-sitl/scripts/QGC_remote_connect.bash" target="_blank" rel="noreferrer">QGC_remote_connect.bash</a> script can be run on the QGC computer to automatically setup/run the above instructions. 시뮬레이션은 원격 서버에서 실행 중이어야 하며, 해당 서버로 SSH 연결이 가능하여야 합니다.</p>`,111)]))}const b=t(l,[["render",r]]);export{g as __pageData,b as default};
