import{_ as t,a as n}from"./chunks/jmavsim_windows_cygwin.CDXpKj8o.js";import{_ as l,c as o,a8 as a,j as i,a as s,o as h}from"./chunks/framework.BDnHobkS.js";const F=JSON.parse('{"title":"Windows Development Environment (Cygwin-based)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/dev_setup/dev_env_windows_cygwin.md","filePath":"zh/dev_setup/dev_env_windows_cygwin.md"}'),p={name:"zh/dev_setup/dev_env_windows_cygwin.md"};function r(d,e,c,k,u,g){return h(),o("div",null,e[0]||(e[0]=[a('<h1 id="windows-development-environment-cygwin-based" tabindex="-1">Windows Development Environment (Cygwin-based) <a class="header-anchor" href="#windows-development-environment-cygwin-based" aria-label="Permalink to &quot;Windows Development Environment (Cygwin-based)&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This development environment is <a href="./../advanced/community_supported_dev_env.html">community supported and maintained</a>. It may or may not work with current versions of PX4.</p><p>The toolchain was previously recommended, but does not work with PX4 v1.12 and later due to packaging issues. The <a href="./../dev_setup/dev_env_windows_wsl.html">Windows WSL2-Based Development Environment</a> should be used by preference.</p><p>See <a href="./../dev_setup/dev_env.html">Toolchain Installation</a> for information about the environments and tools supported by the core development team.</p></div><p>该工具链非常轻便，而且容易安装和使用。 根据本文的指示构建的开发环境可以用编译：</p><ul><li>基于 NuttX 的硬件 (Pixhawk等)</li><li><a href="./../sim_jmavsim/">jMAVSim Simulation</a></li></ul><p><a id="installation"></a></p><h2 id="安装说明" tabindex="-1">安装说明 <a class="header-anchor" href="#安装说明" aria-label="Permalink to &quot;安装说明&quot;">​</a></h2><ol><li><p>Download the latest version of the ready-to-use MSI installer from: <a href="https://github.com/PX4/windows-toolchain/releases" target="_blank" rel="noreferrer">Github releases</a> or <a href="https://s3-us-west-2.amazonaws.com/px4-tools/PX4+Windows+Cygwin+Toolchain/PX4+Windows+Cygwin+Toolchain+0.9.msi" target="_blank" rel="noreferrer">Amazon S3</a> (fast download).</p></li><li><p>Run it, choose your desired installation location, let it install:</p><p><img src="'+t+'" alt="jMAVSimOnWindows"></p></li><li><p>Tick the box at the end of the installation to <em>clone the PX4 repository, build and run simulation with jMAVSim</em> (this simplifies the process to get you started).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you missed this step you will need to <a href="#getting-started">clone the PX4-Autopilot repository manually</a>.</p></div></li></ol><p>:::</p>',8),i("div",{class:"warning custom-block"},[i("p",{class:"custom-block-title"},"WARNING"),i("p",null,[s("At time of writing the installer is missing some dependencies (and cannot yet be rebuilt to add them - see "),i("a",{href:"https://github.com/PX4/PX4-windows-toolchain/issues/31",target:"_blank",rel:"noreferrer"},"PX4-windows-toolchain#31"),s(").")]),i("p",null,"To add these yourself:"),i("ol",null,[i("li",null,[i("p",null,[s("进入到工具链的安装目录(默认"),i("strong",{"x-id":"1"},"C:\\PX4"),s(")")])]),i("li",null,[i("p",null,[s("Run "),i("strong",null,"run-console.bat"),s(" (double click) to start the linux-like Cygwin bash console")])]),i("li",null,[i("p",null,"Enter the following command in the console:"),i("div",{class:"language-sh vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"sh"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pip3"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," --user"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," kconfiglib"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," jsonschema"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," future")])])])])])])],-1),i("h2",{id:"入门指南",tabindex:"-1"},[s("入门指南 "),i("a",{class:"header-anchor",href:"#入门指南","aria-label":'Permalink to "入门指南"'},"​")],-1),i("p",null,[s("The toolchain uses a specially configured console window (started by running the "),i("strong",null,"run-console.bat"),s(" script) from which you can call the normal PX4 build commands:")],-1),i("ol",null,[i("li",null,[i("p",null,[s("进入到工具链的安装目录(默认"),i("strong",{"x-id":"1"},"C:\\PX4"),s(")")])]),i("li",null,[i("p",null,[s("Run "),i("strong",null,"run-console.bat"),s(" (double click) to start the linux-like Cygwin bash console (you must use this console to build PX4).")])]),i("li",null,[i("p",null,"Clone the PX4 PX4-Autopilot repository from within the console:"),i("div",{class:"info custom-block"},[i("p",{class:"custom-block-title"},"INFO"),i("p",null,[s("Skip this step if you ticked the installer option to "),i("em",null,"clone the PX4 repository, build and run simulation with jMAVSim"),s(". Cloning only needs to be done once!")])])])],-1),a(`<p>:::</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clone the PX4-Autopilot repository into the home folder &amp; loads submodules in parallel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span></code></pre></div><p>You can now use the console/PX4-Autopilot repository to build PX4.</p><ol start="4"><li><p>For example, to run JMAVSim:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Navigate to PX4-Autopilot repo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Firmware</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and runs SITL simulation with jMAVSim to test the setup</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jmavsim</span></span></code></pre></div><p>The console will then display:</p><p><img src="`+n+`" alt="jMAVSimOnWindows"></p></li></ol><h2 id="gazebo-dependencies" tabindex="-1">Gazebo dependencies <a class="header-anchor" href="#gazebo-dependencies" aria-label="Permalink to &quot;Gazebo dependencies&quot;">​</a></h2><p>Once you have finished setting up the command-line toolchain:</p><ul><li>Install the <a href="./../dev_setup/qgc_daily_build.html">QGroundControl Daily Build</a></li><li>Continue to the <a href="./../dev_setup/building_px4.html">build instructions</a>.</li></ul><h2 id="故障处理" tabindex="-1">故障处理 <a class="header-anchor" href="#故障处理" aria-label="Permalink to &quot;故障处理&quot;">​</a></h2><h3 id="windows-amp-git-特殊情况" tabindex="-1">Windows &amp; Git 特殊情况 <a class="header-anchor" href="#windows-amp-git-特殊情况" aria-label="Permalink to &quot;Windows &amp;amp; Git 特殊情况&quot;">​</a></h3><p>Antivirus and other background file monitoring tools can significantly slow down both installation of the toolchain and PX4 build times.</p><p>You may wish to halt them temporarily during builds (at your own risk).</p><h3 id="windows-git-special-cases" tabindex="-1">Windows &amp; Git Special Cases <a class="header-anchor" href="#windows-git-special-cases" aria-label="Permalink to &quot;Windows &amp; Git Special Cases&quot;">​</a></h3><h4 id="windows-cr-lf-对比-unix-lf-行结尾" tabindex="-1">Windows CR+LF 对比 Unix LF 行结尾 <a class="header-anchor" href="#windows-cr-lf-对比-unix-lf-行结尾" aria-label="Permalink to &quot;Windows CR+LF 对比 Unix LF 行结尾&quot;">​</a></h4><p>We recommend that you force Unix style LF endings for every repository you&#39;re working with using this toolchain (and use an editor which preserves them when saving your changes - e.g. Eclipse or VS Code). Compilation of source files also works with CR+LF endings checked out locally, but there are cases in Cygwin (e.g. execution of shell scripts) that require Unix line endings (otherwise you get errors like <code>$&#39;\\r&#39;: Command not found.</code>). Luckily git can do this for you when you execute the two commands in the root directory of your repo:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.autocrlf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.eol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lf</span></span></code></pre></div><p>If you work with this toolchain on multiple repositories you can also set these two configurations globally for your machine:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>This is not recommended because it may affect any other (unrelated) git use on your Windows machine.</p><h4 id="unix-执行权限" tabindex="-1">Unix 执行权限 <a class="header-anchor" href="#unix-执行权限" aria-label="Permalink to &quot;Unix 执行权限&quot;">​</a></h4><p>Under Unix there&#39;s a flag in the permissions of each file that tells the OS whether or not the file is allowed to be executed. <em>git</em> under Cygwin supports and cares about that bit (even though the Windows NTFS file system does not use it). This often results in <em>git</em> finding &quot;false-positive&quot; differences in permissions. The resulting diff might look like this:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100644</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100755</span></span></code></pre></div><p>We recommend globally disabling the permission check on Windows to avoid the problem:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.fileMode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # disable execution bit check globally for the machine</span></span></code></pre></div><p>For existing repositories that have this problem caused by a local configuration, additionally:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># remove the local option for this repository to apply the global one</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.filemode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># remove the local option for all submodules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foreach</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.filemode</span></span></code></pre></div>`,25)]))}const b=l(p,[["render",r]]);export{F as __pageData,b as default};
