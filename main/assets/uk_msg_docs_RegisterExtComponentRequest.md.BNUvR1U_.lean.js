import{_ as i,c as a,a8 as e,o as n}from"./chunks/framework.BDnHobkS.js";const d=JSON.parse('{"title":"RegisterExtComponentRequest (Повідомлення UORB)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/msg_docs/RegisterExtComponentRequest.md","filePath":"uk/msg_docs/RegisterExtComponentRequest.md"}'),t={name:"uk/msg_docs/RegisterExtComponentRequest.md"};function l(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="registerextcomponentrequest-повідомлення-uorb" tabindex="-1">RegisterExtComponentRequest (Повідомлення UORB) <a class="header-anchor" href="#registerextcomponentrequest-повідомлення-uorb" aria-label="Permalink to &quot;RegisterExtComponentRequest (Повідомлення UORB)&quot;">​</a></h1><p>Запит на реєстрацію зовнішнього компонента</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/RegisterExtComponentRequest.msg" target="_blank" rel="noreferrer">вихідний файл</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Request to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> an external component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 request_id                  # ID, set this to a random value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] name                      # either the requested mode name, or component name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint16 LATEST_PX4_ROS2_API_VERSION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # API version compatibility. Increase this on a breaking semantic change. Changes to any message field are detected separately and </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> not require an API version change.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint16 px4_ros2_api_version   # Set to LATEST_PX4_ROS2_API_VERSION</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Components to be registered</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> register_arming_check</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> register_mode                 # registering a mode also requires arming_check to be set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> register_mode_executor        # registering an executor also requires a mode to be </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (which is the owned mode by the </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">executor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enable_replace_internal_mode  # set to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> an internal mode should be replaced</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 replace_internal_mode        # vehicle_status::NAVIGATION_STATE_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activate_mode_immediately     # </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to the registered </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (can only be set in combination with an </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">executor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 ORB_QUEUE_LENGTH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div>`,4)]))}const g=i(t,[["render",l]]);export{d as __pageData,g as default};
