import{_ as i,c as a,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"Docker контейнери для PX4","description":"","frontmatter":{},"headers":[],"relativePath":"uk/test_and_ci/docker.md","filePath":"uk/test_and_ci/docker.md"}'),n={name:"uk/test_and_ci/docker.md"};function h(l,s,p,o,r,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="docker-контеинери-для-px4" tabindex="-1">Docker контейнери для PX4 <a class="header-anchor" href="#docker-контеинери-для-px4" aria-label="Permalink to &quot;Docker контейнери для PX4&quot;">​</a></h1><p>Docker containers are provided for the complete <a href="./../dev_setup/dev_env.html#supported-targets">PX4 development toolchain</a> including NuttX and Linux based hardware, <a href="./../sim_gazebo_classic/">Gazebo Classic</a> simulation, and <a href="./../simulation/ros_interface.html">ROS</a>.</p><p>This topic shows how to use the <a href="#px4_containers">available docker containers</a> to access the build environment in a local Linux computer.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Dockerfiles and README can be found on <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github here</a>. They are built automatically on <a href="https://hub.docker.com/u/px4io/" target="_blank" rel="noreferrer">Docker Hub</a>.</p></div><h2 id="вимоги" tabindex="-1">Вимоги <a class="header-anchor" href="#вимоги" aria-label="Permalink to &quot;Вимоги&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>PX4 containers are currently only supported on Linux (if you don&#39;t have Linux you can run the container <a href="#virtual_machine">inside a virtual machine</a>). Do not use <code>boot2docker</code> with the default Linux image because it contains no X-Server.</p></div><p><a href="https://docs.docker.com/installation/" target="_blank" rel="noreferrer">Install Docker</a> for your Linux computer, preferably using one of the Docker-maintained package repositories to get the latest stable version. You can use either the <em>Enterprise Edition</em> or (free) <em>Community Edition</em>.</p><p>For local installation of non-production setups on <em>Ubuntu</em>, the quickest and easiest way to install Docker is to use the <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script" target="_blank" rel="noreferrer">convenience script</a> as shown below (alternative installation methods are found on the same page):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get.docker.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-docker.sh</span></span></code></pre></div><p>The default installation requires that you invoke <em>Docker</em> as the root user (i.e. using <code>sudo</code>). However, for building the PX4 firmware we suggest to <a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noreferrer">use docker as a non-root user</a>. Таким чином, директорія для збірки не буде належати користувачу root після використання docker.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create docker group (may not be required)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add your user to the docker group.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Log in/out again before using docker!</span></span></code></pre></div><p><a id="px4_containers"></a></p><h2 id="ієрархія-контеинерів" tabindex="-1">Ієрархія контейнерів <a class="header-anchor" href="#ієрархія-контеинерів" aria-label="Permalink to &quot;Ієрархія контейнерів&quot;">​</a></h2><p>The available containers are on <a href="https://github.com/PX4/PX4-containers/tree/master?tab=readme-ov-file#container-hierarchy" target="_blank" rel="noreferrer">Github here</a>.</p><p>Вони дозволяють тестувати різні цілі збірки та конфігурації (включені інструменти можна зрозуміти з їх назв). Контейнери є ієрархічними, тобто такими, що мають функціональність вихідних контейнерів. For example, the partial hierarchy below shows that the docker container with nuttx build tools (<code>px4-dev-nuttx-focal</code>) does not include ROS 2, while the simulation containers do:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- px4io/px4-dev-base-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-focal</span></span>
<span class="line"><span>  - px4io/px4-dev-simulation-focal</span></span>
<span class="line"><span>    - px4io/px4-dev-ros-noetic</span></span>
<span class="line"><span>      - px4io/px4-dev-ros2-foxy</span></span>
<span class="line"><span>  - px4io/px4-dev-ros2-rolling</span></span>
<span class="line"><span>- px4io/px4-dev-base-jammy</span></span>
<span class="line"><span>  - px4io/px4-dev-nuttx-jammy</span></span></code></pre></div><p>The most recent version can be accessed using the <code>latest</code> tag: <code>px4io/px4-dev-nuttx-focal:latest</code> (available tags are listed for each container on <em>hub.docker.com</em>. For example, the <code>px4io/px4-dev-nuttx-focal</code> tags can be found <a href="https://hub.docker.com/r/px4io/px4-dev-nuttx-focal/tags?page=1&amp;ordering=last_updated" target="_blank" rel="noreferrer">here</a>).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Typically you should use a recent container, but not necessarily the <code>latest</code> (as this changes too often).</p></div><h2 id="використання-docker-контеинера" tabindex="-1">Використання Docker контейнера <a class="header-anchor" href="#використання-docker-контеинера" aria-label="Permalink to &quot;Використання Docker контейнера&quot;">​</a></h2><p>Наступні інструкції показують, як зібрати вихідний код PX4 на основному комп&#39;ютері за допомогою інструментарію, що працює у docker контейнері. The information assumes that you have already downloaded the PX4 source code to <strong>src/PX4-Autopilot</strong>, as shown:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span></code></pre></div><h3 id="допоміжнии-скрипт-docker-run-sh" tabindex="-1">Допоміжний скрипт (docker_run.sh) <a class="header-anchor" href="#допоміжнии-скрипт-docker-run-sh" aria-label="Permalink to &quot;Допоміжний скрипт (docker_run.sh)&quot;">​</a></h3><p>The easiest way to use the containers is via the <a href="https://github.com/PX4/PX4-Autopilot/blob/main/Tools/docker_run.sh" target="_blank" rel="noreferrer">docker_run.sh</a> helper script. This script takes a PX4 build command as an argument (e.g. <code>make tests</code>). Він запускає docker із найновішою версією відповідного контейнера (вказано в коді) і слушними налаштуваннями середовища.</p><p>For example, to build SITL you would call (from within the <strong>/PX4-Autopilot</strong> directory):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;make px4_sitl_default&#39;</span></span></code></pre></div><p>Або почати сеанс bash використовуючи інструментарій NuttX:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bash&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The script is easy because you don&#39;t need to know anything much about <em>Docker</em> or think about what container to use. Однак він не дуже надійний! The manual approach discussed in the <a href="#manual_start">section below</a> is more flexible and should be used if you have any problems with the script.</p></div><p><a id="manual_start"></a></p><h3 id="запуск-docker-вручну" tabindex="-1">Запуск Docker вручну <a class="header-anchor" href="#запуск-docker-вручну" aria-label="Permalink to &quot;Запуск Docker вручну&quot;">​</a></h3><p>Синтаксис типової команди показано нижче. Це запускає Docker контейнер з підтримкою переадресації X (що робить графічний інтерфейс симуляції доступним з середини контейнера). It maps the directory <code>&lt;host_src&gt;</code> from your computer to <code>&lt;container_src&gt;</code> inside the container and forwards the UDP port needed to connect <em>QGroundControl</em>. With the <code>-–privileged</code> option it will automatically have access to the devices on your host (e.g. a joystick and GPU). Якщо ви під&#39;єднуєте/від&#39;єднуєте пристрій, вам слід перезапустити контейнер.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable access to xhost from the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host_sr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_sr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 14570:14570/udp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local_container_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">containe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build_comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Де:</p><ul><li><code>&lt;host_src&gt;</code>: The host computer directory to be mapped to <code>&lt;container_src&gt;</code> in the container. This should normally be the <strong>PX4-Autopilot</strong> directory.</li><li><code>&lt;container_src&gt;</code>: The location of the shared (source) directory when inside the container.</li><li><code>&lt;local_container_name&gt;</code>: A name for the docker container being created. Це потім можна використовувати, якщо потрібно посилатись на контейнер знову.</li><li><code>&lt;container&gt;:&lt;tag&gt;</code>: The container with version tag to start - e.g.: <code>px4io/px4-dev-ros:2017-10-23</code>.</li><li><code>&lt;build_command&gt;</code>: The command to invoke on the new container. Наприклад, <code>bash</code> is used to open a bash shell in the container.</li></ul><p>The concrete example below shows how to open a bash shell and share the directory <strong>~/src/PX4-Autopilot</strong> on the host computer.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># дозвольте доступ до xhost з контейнера</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запуск docker та оболонки bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--env=LOCAL_USER_ID=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/src/PX4-Autopilot:/src/PX4-Autopilot/:rw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/tmp/.X11-unix:/tmp/.X11-unix:ro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DISPLAY=:0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--network </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name=px4-ros </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px4io/px4-dev-ros2-foxy:2022-07-31</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>We use the host network mode to avoid conflicts between the UDP port access control when using QGroundControl on the same system as the docker container.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you encounter the error &quot;Can&#39;t open display: :0&quot;, <code>DISPLAY</code> may need to be set to a different value. On Linux (XWindow) hosts you can change <code>-e DISPLAY=:0</code> to <code>-e DISPLAY=$DISPLAY</code>. On other hosts you might iterate the value of <code>0</code> in <code>-e DISPLAY=:0</code> until the &quot;Can&#39;t open display: :0&quot; error goes away.</p></div><p>Якщо все пройшло добре, ви повинні бути в новій оболонці bash. Перевірте, чи все працює запустивши, наприклад, SITL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/PX4-Autopilot</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #This is &lt;container_src&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div><h3 id="повторнии-вхід-в-контеинер" tabindex="-1">Повторний вхід в контейнер <a class="header-anchor" href="#повторнии-вхід-в-контеинер" aria-label="Permalink to &quot;Повторний вхід в контейнер&quot;">​</a></h3><p>The <code>docker run</code> command can only be used to create a new container. Щоб повернутися у цей контейнер (що збереже ваші зміни) просто зробіть:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запуск контейнера</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># запуск нової оболонки bash shell в цьому контейнері</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>Якщо вам потрібні кілька консолей, підключених до контейнера, просто відкрийте нову оболонку і виконайте останню команду знову.</p><h3 id="видалення-контеинера" tabindex="-1">Видалення контейнера <a class="header-anchor" href="#видалення-контеинера" aria-label="Permalink to &quot;Видалення контейнера&quot;">​</a></h3><p>Іноді може знадобитися взагалі видалити контейнер. Це можна зробити, використовуючи його ім&#39;я:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><p>Якщо ви не можете згадати назву, ви можете знайти неактивні ідентифікатори контейнерів і видалити їх, як показано нижче:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">45eeb98f1dd9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 45eeb98f1dd9</span></span></code></pre></div><h3 id="qgroundcontrol" tabindex="-1">QGroundControl <a class="header-anchor" href="#qgroundcontrol" aria-label="Permalink to &quot;QGroundControl&quot;">​</a></h3><p>When running a simulation instance e.g. SITL inside the docker container and controlling it via <em>QGroundControl</em> from the host, the communication link has to be set up manually. The autoconnect feature of <em>QGroundControl</em> does not work here.</p><p>In <em>QGroundControl</em>, navigate to <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/settings_view.html" target="_blank" rel="noreferrer">Settings</a> and select Comm Links. Створіть новий канал, що використовує UDP-протокол. The port depends on the used <a href="https://github.com/PX4/PX4-Autopilot/blob/main/ROMFS/px4fmu_common/init.d-posix/rcS" target="_blank" rel="noreferrer">configuration</a> e.g. port 14570 for the SITL config. IP-адреса є адресою одного з ваших контейнерів, зазвичай це адреса з мережі 172.17.0.1/16 при використанні мережі за замовчуванням. The IP address of the docker container can be found with the following command (assuming the container name is <code>mycontainer</code>):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mycontainer</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Spaces between double curly braces above should be not be present (they are needed to avoid a UI rendering problem in gitbook).</p></div><h3 id="усунення-проблем" tabindex="-1">Усунення проблем <a class="header-anchor" href="#усунення-проблем" aria-label="Permalink to &quot;Усунення проблем&quot;">​</a></h3><h4 id="помилки-з-правами-доступу" tabindex="-1">Помилки з правами доступу <a class="header-anchor" href="#помилки-з-правами-доступу" aria-label="Permalink to &quot;Помилки з правами доступу&quot;">​</a></h4><p>Контейнер створює файли, необхідні для роботи від імені стандартного користувача, як правило, &quot;root&quot;. Це може призвести до помилок прав доступу, коли користувач на основному комп&#39;ютері не має доступу до файлів, створених контейнером.</p><p>The example above uses the line <code>--env=LOCAL_USER_ID=&quot;$(id -u)&quot;</code> to create a user in the container with the same UID as the user on the host. Це гарантує, що всі файли, створені у контейнері, будуть доступні з основного комп&#39;ютера.</p><h4 id="проблеми-з-драиверами-графіки" tabindex="-1">Проблеми з драйверами графіки <a class="header-anchor" href="#проблеми-з-драиверами-графіки" aria-label="Permalink to &quot;Проблеми з драйверами графіки&quot;">​</a></h4><p>Можливо, що запуск Gazebo Classic призведе до подібного повідомлення про помилку:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libGL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> driver:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swrast</span></span></code></pre></div><p>У цьому випадку необхідно встановити нативний графічний драйвер для вашої системи. Завантажте відповідний драйвер і встановіть його всередині контейнера. Для драйверів Nvidia слід використовувати наступну команду (інакше встановлювач побачить завантажені модулі на головній машині та відмовиться продовжувати):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./NVIDIA-DRIVER.run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ui=none</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-kernel-module</span></span></code></pre></div><p>More information on this can be found <a href="http://gernotklingler.com/blog/howto-get-hardware-accelerated-opengl-support-docker/" target="_blank" rel="noreferrer">here</a>.</p><p><a id="virtual_machine"></a></p><h2 id="підтримка-віртуальних-машин" tabindex="-1">Підтримка віртуальних машин <a class="header-anchor" href="#підтримка-віртуальних-машин" aria-label="Permalink to &quot;Підтримка віртуальних машин&quot;">​</a></h2><p>Будь-який останній дистрибутив Linux повинен працювати.</p><p>Наступна конфігурація протестована:</p><ul><li>OS X з підтримкою VMWare Fusion і Ubuntu 14.04 (Docker контейнер з підтримкою GUI в Parallels призводить до падіння X-Server).</li></ul><p><strong>Memory</strong></p><p>Потрібно не менше 4 ГБ пам&#39;яті для віртуальної машини.</p><p><strong>Compilation problems</strong></p><p>Якщо компіляція завершується з помилками на кшталт:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bug</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reproducible,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> likely</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hardware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> problem.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c++:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> internal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Killed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (program </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cc1plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Спробуйте вимкнути паралельну збірку.</p><p><strong>Allow Docker Control from the VM Host</strong></p><p>Edit <code>/etc/defaults/docker</code> and add this line:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCKER_OPTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} -H unix:///var/run/docker.sock -H 0.0.0.0:2375&quot;</span></span></code></pre></div><p>Тепер можна керувати docker на вашій основній ОС:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DOCKER_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tcp://</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip of your VM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:2375</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run some docker command to see if it works, e.g. ps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div>`,80)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
