import{_ as i}from"./chunks/payload_delivery_mission_architecture.CQVWY2Kq.js";import{_ as t,c as r,j as a,a as c,G as n,a8 as s,B as d,o as l}from"./chunks/framework.BDnHobkS.js";const y=JSON.parse('{"title":"包裹投递任务","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced/package_delivery.md","filePath":"zh/advanced/package_delivery.md"}'),h={name:"zh/advanced/package_delivery.md"};function p(m,e,u,f,g,v){const o=d("Badge");return l(),r("div",null,[e[0]||(e[0]=a("h1",{id:"包裹投递任务",tabindex:"-1"},[c("包裹投递任务 "),a("a",{class:"header-anchor",href:"#包裹投递任务","aria-label":'Permalink to "包裹投递任务"'},"​")],-1)),n(o,{type:"tip",text:"PX4 v1.14"}),e[1]||(e[1]=s('<p>包裹投递任务是航点任务的拓展，用户可以计划将包裹作为航点进行投递。</p><p>本节解释了包裹投递功能的架构。 它的目的是为从事扩展架构的开发者提供支持，例如支持新的有效载荷投递机制。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Currently only <a href="./../peripherals/gripper.html">Grippers</a> can be used for package delivery. 绞盘尚未支持。</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The detailed documentation on how to setup a package delivery mission plan can be found <a href="./../flying/package_delivery_mission.html">here</a>. Setup for the <code>payload_deliverer</code> module is covered in the documentation for the delivery mechanism, such as <a href="./../peripherals/gripper.html#px4-configuration">Gripper</a>.</p></div><h2 id="包裹投递架构图" tabindex="-1">包裹投递架构图 <a class="header-anchor" href="#包裹投递架构图" aria-label="Permalink to &quot;包裹投递架构图&quot;">​</a></h2><p><img src="'+i+'" alt="Package delivery architecture overview"></p><p>Package Delivery feature is centered around the <a href="./../msg_docs/VehicleCommand.html">VehicleCommand</a> &amp; <a href="./../msg_docs/VehicleCommandAck.html">VehicleCommandAck</a> messages.</p><p>The central idea lies in having an entity that handles the <code>DO_GRIPPER</code> or <code>DO_WINCH</code> vehicle command, executes it and sends back an acknowledgement when the successful delivery is confirmed.</p><p>Because PX4 automatically broadcasts the <code>VehicleCommand</code> uORB message to a UART port configured to communicate in MAVLink as a <a href="https://mavlink.io/en/messages/common.html#COMMAND_LONG" target="_blank" rel="noreferrer"><code>COMMAND_LONG</code></a> message, an external payload can receive the command and execute it.</p><p>Likewise, since PX4 automatically translates the <a href="https://mavlink.io/en/messages/common.html#COMMAND_ACK" target="_blank" rel="noreferrer"><code>COMMAND_ACK</code></a> message coming in from an external source through a UART port configured for MAVLink into a <code>vehicle_command_ack</code> uORB message, an external payload&#39;s acknowledgement for a successful package deployment can be received by PX4&#39;s <code>navigator</code> module.</p><p>下面解释了包裹投递架构中涉及的每个实体。</p><h2 id="导航器" tabindex="-1">导航器 <a class="header-anchor" href="#导航器" aria-label="Permalink to &quot;导航器&quot;">​</a></h2><p>导航器处理接收车辆命令 ACK (下文所述)。 在收到成功部署确认消息后，它会设置任务块级别中的标志，以表示有效载荷部署已成功。</p><p>这允许任务安全地继续到下一个项目(例如路径点)，因为我们确信部署已成功得到确认。</p><h2 id="车辆命令-ack" tabindex="-1">车辆命令 ACK <a class="header-anchor" href="#车辆命令-ack" aria-label="Permalink to &quot;车辆命令 ACK&quot;">​</a></h2><p>We are waiting for the ACK coming from either internally (via <code>payload_deliverer</code> module), or externally (external entity sending the MAVLink message <code>COMMAND_ACK</code>) to determine if the package delivery action has been successful (either <code>DO_GRIPPER</code> or <code>DO_WINCH</code>).</p><h2 id="mission" tabindex="-1">Mission <a class="header-anchor" href="#mission" aria-label="Permalink to &quot;Mission&quot;">​</a></h2><p>The Gripper / Winch command is placed as a <code>Mission Item</code>. This is possible since all the Mission item has the <code>MAV_CMD</code> to execute (e.g. Land, Takeoff, Waypoint, etc) which can get set to either <code>DO_GRIPPER</code> or <code>DO_WINCH</code>.</p><p>In the Mission logic (green box above) if either Gripper/Winch mission item is reached, it implements brake_for_hold functionality (which sets the <code>valid</code> flag of the next mission item waypoint to <code>false</code>) for rotary wings (e.g. Multicopter) so that the vehicle would hold it&#39;s position while the deployment is getting executed.</p><p>固定翼飞机和其他车辆不考虑特殊制动条件。 所以如果你有一个固定翼的悬停任务，飞机在悬停的同时投递包裹，飞机不会停止 (因为这是不可能的)。</p><h2 id="任务块" tabindex="-1">任务块 <a class="header-anchor" href="#任务块" aria-label="Permalink to &quot;任务块&quot;">​</a></h2><p><code>MissionBlock</code> is the parent class of <code>Mission</code> that handles the part &quot;Is Mission completed?&quot;.</p><p>This all performed in the <code>is_mission_item_reached_or_completed</code> function, to handle the time delay / mission item advancement.</p><p>Also it implements the actual issue_command function, which will issue a vehicle command corresponding to the mission item&#39;s <code>MAV_CMD</code>, which will then be received by an external payload or the <code>payload_deliverer</code> module internally.</p><h2 id="payload-deliverer" tabindex="-1">Payload Deliverer <a class="header-anchor" href="#payload-deliverer" aria-label="Permalink to &quot;Payload Deliverer&quot;">​</a></h2><p>This is a dedicated module that handles gripper / winch support, which is used for the standard <a href="./../flying/package_delivery_mission.html">package delivery mission plan</a>.</p><p>Setup for the <code>payload_deliverer</code> module is covered within setting up an actual package release mechanism setup documentation like <a href="./../peripherals/gripper.html#px4-configuration">Gripper</a>.</p>',27))])}const b=t(h,[["render",p]]);export{y as __pageData,b as default};
