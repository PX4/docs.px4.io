import{_ as a,c as i,a8 as t,o as e}from"./chunks/framework.BDnHobkS.js";const E=JSON.parse('{"title":"FollowTargetStatus (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"en/msg_docs/FollowTargetStatus.md","filePath":"en/msg_docs/FollowTargetStatus.md"}'),n={name:"en/msg_docs/FollowTargetStatus.md"};function l(r,s,p,h,o,k){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="followtargetstatus-uorb-message" tabindex="-1">FollowTargetStatus (UORB message) <a class="header-anchor" href="#followtargetstatus-uorb-message" aria-label="Permalink to &quot;FollowTargetStatus (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/FollowTargetStatus.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp                  # [microseconds] time since system start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 tracked_target_course     # [rad] Tracked target course in NED local </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (North is course </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 follow_angle              # [rad] Current follow angle setting</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 orbit_angle_setpoint      # [rad] Current orbit angle setpoint from the smooth trajectory generator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 angular_rate_setpoint     # [rad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Angular rate commanded from Jerk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">limited Orbit Angle trajectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orbit Angle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] desired_position_raw   # [m] Raw </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;idealistic&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> desired drone position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a drone could teleport from place to places</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> in_emergency_ascent          # [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] True when doing emergency </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ascent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (when distance to ground is below safety </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">altitude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 gimbal_pitch              # [rad] Gimbal pitch commanded to track target in the center of the frame</span></span></code></pre></div>`,3)]))}const g=a(n,[["render",l]]);export{E as __pageData,g as default};
