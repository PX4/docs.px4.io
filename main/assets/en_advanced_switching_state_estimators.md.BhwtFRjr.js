import{_ as t,c as a,a8 as i,o}from"./chunks/framework.BDnHobkS.js";const p=JSON.parse('{"title":"Switching State Estimators","description":"","frontmatter":{},"headers":[],"relativePath":"en/advanced/switching_state_estimators.md","filePath":"en/advanced/switching_state_estimators.md"}'),s={name:"en/advanced/switching_state_estimators.md"};function r(n,e,l,c,d,m){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="switching-state-estimators" tabindex="-1">Switching State Estimators <a class="header-anchor" href="#switching-state-estimators" aria-label="Permalink to &quot;Switching State Estimators&quot;">​</a></h1><p>This page shows you which state estimators are available and how you can switch between them.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>EKF2 is the default and should be used unless you have a reason not to (in particular on vehicles with a GNSS/GPS). The Q-Estimator can be used if you don&#39;t have GPS, and is commonly used in <a href="./../config_mc/racer_setup.html">multicopter racers</a>.</p></div><h2 id="available-estimators" tabindex="-1">Available Estimators <a class="header-anchor" href="#available-estimators" aria-label="Permalink to &quot;Available Estimators&quot;">​</a></h2><p>The available estimators are:</p><ul><li><p><strong>EKF2 attitude, position and wind states estimator</strong> (<em>recommended</em>) - An extended Kalman filter estimating attitude, 3D position / velocity and wind states.</p></li><li><p><strong>LPE position estimator</strong> (<em>deprecated</em>) - An extended Kalman filter for 3D position and velocity states.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>LPE is deprecated. It works (at time of writing, in PX4 v1.14) but is no longer supported or maintained.</p></div></li><li><p><strong>Q attitude estimator</strong> - A very simple, quaternion based complementary filter for attitude. It does not require a GPS, magnetometer, or barometer.</p></li></ul><h2 id="how-to-enable-different-estimators" tabindex="-1">How to Enable Different Estimators <a class="header-anchor" href="#how-to-enable-different-estimators" aria-label="Permalink to &quot;How to Enable Different Estimators&quot;">​</a></h2><p>To enable a particular estimator enable its parameter and disable the others:</p><ul><li><a href="./../advanced_config/parameter_reference.html#EKF2_EN">EKF2_EN</a> - EKF2 (default/recommended)</li><li><a href="./../advanced_config/parameter_reference.html#ATT_EN">ATT_EN</a> - Q Estimator (quaternion based attitude estimator)</li><li><a href="./../advanced_config/parameter_reference.html#LPE_EN">LPE_EN</a> - LPE (not supported for Fixed-wing)</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is important to enable one, and only one, estimator. If more than one is enabled, the first to publish the UOrb topics <a href="./../msg_docs/VehicleAttitude.html">vehicle_attitude</a> or <a href="./../msg_docs/VehicleLocalPosition.html">vehicle_local_position</a> is used. If none are enabled then the topics are not published.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For FMU-v2 (only) you will also need to build PX4 to specifically include required estimator (e.g. EKF2: <code>make px4_fmu-v2</code>, LPE: <code>make px4_fmu-v2_lpe</code>). This is required because FMU-v2 is too resource constrained to include both estimators. Other Pixhawk FMU versions include both.</p></div>',11)]))}const u=t(s,[["render",r]]);export{p as __pageData,u as default};
