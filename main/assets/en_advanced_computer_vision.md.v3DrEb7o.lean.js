import{_ as o,c as i,a8 as a,o as t}from"./chunks/framework.BDnHobkS.js";const d=JSON.parse('{"title":"Computer Vision (Optical Flow, MoCap, VIO, Avoidance)","description":"","frontmatter":{},"headers":[],"relativePath":"en/advanced/computer_vision.md","filePath":"en/advanced/computer_vision.md"}'),n={name:"en/advanced/computer_vision.md"};function r(s,e,l,c,p,m){return t(),i("div",null,e[0]||(e[0]=[a('<h1 id="computer-vision-optical-flow-mocap-vio-avoidance" tabindex="-1">Computer Vision (Optical Flow, MoCap, VIO, Avoidance) <a class="header-anchor" href="#computer-vision-optical-flow-mocap-vio-avoidance" aria-label="Permalink to &quot;Computer Vision (Optical Flow, MoCap, VIO, Avoidance)&quot;">​</a></h1><p><a href="https://en.wikipedia.org/wiki/Computer_vision" target="_blank" rel="noreferrer">Computer vision</a> techniques enable computers to use visual data to make sense of their environment.</p><p>PX4 uses computer vision systems (primarily running on <a href="./../companion_computer/">Companion Computers</a>) in order to support the following features:</p><ul><li><a href="#optical-flow">Optical Flow</a> provides 2D velocity estimation (using a downward facing camera and a downward facing distance sensor).</li><li><a href="#motion-capture">Motion Capture</a> provides 3D pose estimation using a vision system that is <em>external</em> to the vehicle. It is primarily used for indoor navigation.</li><li><a href="#visual-inertial-odometry-vio">Visual Inertial Odometry</a> provides 3D pose and velocity estimation using an onboard vision system and IMU. It is used for navigation when GNSS position information is absent or unreliable.</li><li><a href="./../computer_vision/collision_prevention.html">Collision Prevention</a> is used to stop vehicles before they can crash into an obstacle (primarily when flying in manual modes).</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="./../complete_vehicles_mc/px4_vision_kit.html">PX4 Vision Autonomy Development Kit</a> (Holybro) is a robust and inexpensive kit for developers working with computer vision on PX4.</p></div><h2 id="motion-capture" tabindex="-1">Motion Capture <a class="header-anchor" href="#motion-capture" aria-label="Permalink to &quot;Motion Capture&quot;">​</a></h2><p>Motion Capture (MoCap) is a technique for estimating the 3D <em>pose</em> (position and orientation) of a vehicle using a positioning mechanism that is <em>external</em> to the vehicle. MoCap systems most commonly detect motion using infrared cameras, but other types of cameras, Lidar, or Ultra Wideband (UWB) may also be used.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>MoCap is commonly used to navigate a vehicle in situations where GPS is absent (e.g. indoors), and provides position relative to a <em>local</em> coordinate system.</p></div><p>For information about MoCap see:</p><ul><li><a href="./../ros/external_position_estimation.html">External Position Estimation</a></li><li><a href="./../tutorials/motion-capture.html">Flying with Motion Capture (VICON, NOKOV, Optitrack)</a></li><li><a href="./../advanced_config/tuning_the_ecl_ekf.html#external-vision-system">EKF &gt; External Vision System</a></li></ul><h2 id="visual-inertial-odometry-vio" tabindex="-1">Visual Inertial Odometry (VIO) <a class="header-anchor" href="#visual-inertial-odometry-vio" aria-label="Permalink to &quot;Visual Inertial Odometry (VIO)&quot;">​</a></h2><p>Visual Inertial Odometry (VIO) is used for estimating the 3D <em>pose</em> (position and orientation) and <em>velocity</em> of a moving vehicle relative to a <em>local</em> starting position. It is commonly used to navigate a vehicle in situations where GPS is absent (e.g. indoors) or unreliable (e.g. when flying under a bridge).</p><p>VIO uses <a href="https://en.wikipedia.org/wiki/Visual_odometry" target="_blank" rel="noreferrer">Visual Odometry</a> to estimate vehicle <em>pose</em> from visual information, combined with inertial measurements from an IMU (to correct for errors associated with rapid vehicle movement resulting in poor image capture).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>One difference between VIO and <a href="#motion-capture">MoCap</a> is that VIO cameras/IMU are vehicle-based, and additionally provide velocity information.</p></div><p>For information about configuring VIO on PX4 see:</p><ul><li><a href="./../advanced_config/tuning_the_ecl_ekf.html#external-vision-system">EKF &gt; External Vision System</a></li><li><a href="./../peripherals/camera_t265_vio.html">T265 Setup guide</a></li></ul><h2 id="optical-flow" tabindex="-1">Optical Flow <a class="header-anchor" href="#optical-flow" aria-label="Permalink to &quot;Optical Flow&quot;">​</a></h2><p><a href="./../sensor/optical_flow.html">Optical Flow</a> provides 2D velocity estimation (using a downward facing camera and a downward facing distance sensor).</p><p>For information about optical flow see:</p><ul><li><a href="./../sensor/optical_flow.html">Optical Flow</a></li><li><a href="./../advanced_config/tuning_the_ecl_ekf.html#optical-flow">EKF &gt; Optical Flow</a></li></ul><h2 id="comparisons" tabindex="-1">Comparisons <a class="header-anchor" href="#comparisons" aria-label="Permalink to &quot;Comparisons&quot;">​</a></h2><h3 id="optical-flow-vs-vio-for-local-position-estimation" tabindex="-1">Optical Flow vs VIO for Local Position Estimation <a class="header-anchor" href="#optical-flow-vs-vio-for-local-position-estimation" aria-label="Permalink to &quot;Optical Flow vs VIO for Local Position Estimation&quot;">​</a></h3><p>Both these techniques use cameras and measure differences between frames. Optical flow uses a downward facing camera, while VIO uses a stereo camera or a 45 degree tracking camera. Assuming both are well calibrated, which is better for local position estimation?</p><p>The consensus <a href="https://discuss.px4.io/t/vio-vs-optical-flow/34680" target="_blank" rel="noreferrer">appears to be</a>:</p><p>Optical flow:</p><ul><li>Downward facing optical flow gives you a planar velocity thats corrected for angular velocity with the gyro.</li><li>Requires an accurate distance to the ground and assumes a planar surface. Given those conditions it can be just as accurate/reliable as VIO (such as indoor flight)</li><li>Is more robust than VIO as it has fewer states.</li><li>Is significantly cheaper and easier to set up as it only requires a flow sensor, a rangefinder, and setting up a few parameters (which can be connected to the flight controller).</li></ul><p>VIO:</p><ul><li>Is more expensive to purchase and harder to set up. It requires a separate companion computer, calibration, software, configuration and so on.</li><li>Will be less effective if there are no point features to track (in practice the real world generally has point features).</li><li>Is more flexible, allowing additional features such as obstacle avoidance and mapping.</li></ul><p>A combination (fusing both) is probably the most reliable, though not necessary in most real-world scenarios. Normally you will select the system that suits your operating environment, required features, and cost constraints:</p><ul><li>Use VIO if you plan on flying outdoors without GPS (or outdoors and indoors), or if you need to support obstacle avoidance and other computer vision features.</li><li>Use Optical Flow if you plan on only flying indoors (without GPS) and cost is an important consideration.</li></ul><h2 id="external-resources" tabindex="-1">External Resources <a class="header-anchor" href="#external-resources" aria-label="Permalink to &quot;External Resources&quot;">​</a></h2><ul><li><a href="https://github.com/robin-shaun/XTDrone/blob/master/README.en.md" target="_blank" rel="noreferrer">XTDrone</a> - ROS + PX4 simulation environment for computer vision. The <a href="https://www.yuque.com/xtdrone/manual_en" target="_blank" rel="noreferrer">XTDrone Manual</a> has everything you need to get started!</li></ul>',32)]))}const h=o(n,[["render",r]]);export{d as __pageData,h as default};
