import{_ as a,c as i,a8 as t,o as e}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"UlogStreamAck (повідомлення UORB)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/msg_docs/UlogStreamAck.md","filePath":"uk/msg_docs/UlogStreamAck.md"}'),n={name:"uk/msg_docs/UlogStreamAck.md"};function l(p,s,h,k,r,o){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="ulogstreamack-повідомлення-uorb" tabindex="-1">UlogStreamAck (повідомлення UORB) <a class="header-anchor" href="#ulogstreamack-повідомлення-uorb" aria-label="Permalink to &quot;UlogStreamAck (повідомлення UORB)&quot;">​</a></h1><p>Підтверджуйте попереднє повідомлення ulog_stream, в якому був встановлений прапорець NEED_ACK</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/UlogStreamAck.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Ack a previously sent ulog_stream message that had</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># the NEED_ACK flag set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp		# time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int32 ACK_TIMEOUT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		# timeout waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> an ack until we retry to send the message [ms]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int32 ACK_MAX_TRIES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	# maximum amount of tries </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)send a message, each time waiting ACK_TIMEOUT ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint16 msg_sequence</span></span></code></pre></div>`,4)]))}const g=a(n,[["render",l]]);export{c as __pageData,g as default};
