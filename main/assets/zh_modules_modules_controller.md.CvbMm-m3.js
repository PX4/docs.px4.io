import{_ as s,c as n,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const u=JSON.parse('{"title":"模块参考：控制器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/modules/modules_controller.md","filePath":"zh/modules/modules_controller.md"}'),o={name:"zh/modules/modules_controller.md"};function l(p,a,r,i,c,h){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="模块参考-控制器" tabindex="-1">模块参考：控制器 <a class="header-anchor" href="#模块参考-控制器" aria-label="Permalink to &quot;模块参考：控制器&quot;">​</a></h1><h2 id="fw-att-control" tabindex="-1">fw_att_control <a class="header-anchor" href="#fw-att-control" aria-label="Permalink to &quot;fw_att_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/airship_att_control" target="_blank" rel="noreferrer">modules/airship_att_control</a></p><h3 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>This implements the airship attitude and rate controller. Ideally it would take attitude setpoints (<code>vehicle_attitude_setpoint</code>) or rate setpoints (in acro mode via <code>manual_control_setpoint</code> topic) as inputs and outputs actuator control messages.</p><p>Currently it is feeding the <code>manual_control_setpoint</code> topic directly to the actuators.</p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>To reduce control latency, the module directly polls on the gyro topic published by the IMU driver.</p><p><a id="airship_att_control_usage"></a></p><h3 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>airship_att_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="control-allocator" tabindex="-1">control_allocator <a class="header-anchor" href="#control-allocator" aria-label="Permalink to &quot;control_allocator&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/control_allocator" target="_blank" rel="noreferrer">modules/control_allocator</a></p><h3 id="描述-1" tabindex="-1">描述 <a class="header-anchor" href="#描述-1" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>This implements control allocation. It takes torque and thrust setpoints as inputs and outputs actuator setpoint messages.</p><p><a id="control_allocator_usage"></a></p><h3 id="用法-1" tabindex="-1">用法 <a class="header-anchor" href="#用法-1" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>control_allocator &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="fw-pos-control-l1" tabindex="-1">fw_pos_control_l1 <a class="header-anchor" href="#fw-pos-control-l1" aria-label="Permalink to &quot;fw_pos_control_l1&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/flight_mode_manager" target="_blank" rel="noreferrer">modules/flight_mode_manager</a></p><h3 id="描述-2" tabindex="-1">描述 <a class="header-anchor" href="#描述-2" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>This implements the setpoint generation for all modes. It takes the current mode state of the vehicle as input and outputs setpoints for controllers.</p><p><a id="flight_mode_manager_usage"></a></p><h3 id="用法-2" tabindex="-1">用法 <a class="header-anchor" href="#用法-2" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>flight_mode_manager &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="mc-att-control" tabindex="-1">mc_att_control <a class="header-anchor" href="#mc-att-control" aria-label="Permalink to &quot;mc_att_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/fw_att_control" target="_blank" rel="noreferrer">modules/fw_att_control</a></p><h3 id="描述-3" tabindex="-1">描述 <a class="header-anchor" href="#描述-3" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>fw_att_control is the fixed wing attitude controller.</p><p><a id="fw_att_control_usage"></a></p><h3 id="用法-3" tabindex="-1">用法 <a class="header-anchor" href="#用法-3" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fw_att_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span>     [vtol]      VTOL mode</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="fw-pos-control" tabindex="-1">fw_pos_control <a class="header-anchor" href="#fw-pos-control" aria-label="Permalink to &quot;fw_pos_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/fw_pos_control" target="_blank" rel="noreferrer">modules/fw_pos_control</a></p><h3 id="描述-4" tabindex="-1">描述 <a class="header-anchor" href="#描述-4" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>fw_pos_control is the fixed-wing position controller.</p><p><a id="fw_pos_control_usage"></a></p><h3 id="用法-4" tabindex="-1">用法 <a class="header-anchor" href="#用法-4" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fw_pos_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span>     [vtol]      VTOL mode</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="fw-rate-control" tabindex="-1">fw_rate_control <a class="header-anchor" href="#fw-rate-control" aria-label="Permalink to &quot;fw_rate_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/fw_rate_control" target="_blank" rel="noreferrer">modules/fw_rate_control</a></p><h3 id="描述-5" tabindex="-1">描述 <a class="header-anchor" href="#描述-5" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>fw_rate_control is the fixed-wing rate controller.</p><p><a id="fw_rate_control_usage"></a></p><h3 id="用法-5" tabindex="-1">用法 <a class="header-anchor" href="#用法-5" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fw_rate_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span>     [vtol]      VTOL mode</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="mc-att-control-1" tabindex="-1">mc_att_control <a class="header-anchor" href="#mc-att-control-1" aria-label="Permalink to &quot;mc_att_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/mc_att_control" target="_blank" rel="noreferrer">modules/mc_att_control</a></p><h3 id="描述-6" tabindex="-1">描述 <a class="header-anchor" href="#描述-6" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>This implements the multicopter attitude controller. It takes attitude setpoints (<code>vehicle_attitude_setpoint</code>) as inputs and outputs a rate setpoint.</p><p>The controller has a P loop for angular error</p><p>The different internal modes are implemented as separate classes that inherit from a common base class <code>NavigatorMode</code>. The member <code>_navigation_mode</code> contains the current active mode.</p><p><a href="https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/154099/eth-7387-01.pdf" target="_blank" rel="noreferrer">https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/154099/eth-7387-01.pdf</a></p><p><a id="mc_att_control_usage"></a></p><h3 id="用法-6" tabindex="-1">用法 <a class="header-anchor" href="#用法-6" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mc_att_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span>     [vtol]      VTOL mode</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="navigator" tabindex="-1">navigator <a class="header-anchor" href="#navigator" aria-label="Permalink to &quot;navigator&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/mc_pos_control" target="_blank" rel="noreferrer">modules/mc_pos_control</a></p><h3 id="描述-7" tabindex="-1">描述 <a class="header-anchor" href="#描述-7" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>The controller has two loops: a P loop for position error and a PID loop for velocity error. Output of the velocity controller is thrust vector that is split to thrust direction (i.e. rotation matrix for multicopter orientation) and thrust scalar (i.e. multicopter thrust itself).</p><p>The controller doesn&#39;t use Euler angles for its work, they are generated only for more human-friendly control and logging.</p><p><a id="mc_pos_control_usage"></a></p><h3 id="用法-7" tabindex="-1">用法 <a class="header-anchor" href="#用法-7" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mc_pos_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span>     [vtol]      VTOL mode</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="mc-rate-control" tabindex="-1">mc_rate_control <a class="header-anchor" href="#mc-rate-control" aria-label="Permalink to &quot;mc_rate_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/mc_rate_control" target="_blank" rel="noreferrer">modules/mc_rate_control</a></p><h3 id="描述-8" tabindex="-1">描述 <a class="header-anchor" href="#描述-8" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>This implements the multicopter rate controller. It takes rate setpoints (in acro mode via <code>manual_control_setpoint</code> topic) as inputs and outputs actuator control messages.</p><p>The controller has a PID loop for angular rate error.</p><p><a id="mc_rate_control_usage"></a></p><h3 id="用法-8" tabindex="-1">用法 <a class="header-anchor" href="#用法-8" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mc_rate_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span>     [vtol]      VTOL mode</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="navigator-1" tabindex="-1">navigator <a class="header-anchor" href="#navigator-1" aria-label="Permalink to &quot;navigator&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/navigator" target="_blank" rel="noreferrer">modules/navigator</a></p><h3 id="描述-9" tabindex="-1">描述 <a class="header-anchor" href="#描述-9" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>Module that is responsible for autonomous flight modes. This includes missions (read from dataman), takeoff and RTL. It is also responsible for geofence violation checking.</p><h3 id="实现-1" tabindex="-1">实现 <a class="header-anchor" href="#实现-1" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>The different internal modes are implemented as separate classes that inherit from a common base class <code>NavigatorMode</code>. The member <code>_navigation_mode</code> contains the current active mode.</p><p>Navigator publishes position setpoint triplets (<code>position_setpoint_triplet_s</code>), which are then used by the position controller.</p><p><a id="navigator_usage"></a></p><h3 id="用法-9" tabindex="-1">用法 <a class="header-anchor" href="#用法-9" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>navigator &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   fencefile     load a geofence file from SD card, stored at etc/geofence.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   fake_traffic  publishes 24 fake transponder_report_s uORB messages</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="rover-ackermann" tabindex="-1">rover_ackermann <a class="header-anchor" href="#rover-ackermann" aria-label="Permalink to &quot;rover_ackermann&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/rover_ackermann" target="_blank" rel="noreferrer">modules/rover_ackermann</a></p><h3 id="描述-10" tabindex="-1">描述 <a class="header-anchor" href="#描述-10" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>Rover ackermann module.</p><p><a id="rover_ackermann_usage"></a></p><h3 id="用法-10" tabindex="-1">用法 <a class="header-anchor" href="#用法-10" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rover_ackermann &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="rover-differential" tabindex="-1">rover_differential <a class="header-anchor" href="#rover-differential" aria-label="Permalink to &quot;rover_differential&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/rover_differential" target="_blank" rel="noreferrer">modules/rover_differential</a></p><h3 id="描述-11" tabindex="-1">描述 <a class="header-anchor" href="#描述-11" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>Rover Differential controller.</p><p><a id="rover_differential_usage"></a></p><h3 id="用法-11" tabindex="-1">用法 <a class="header-anchor" href="#用法-11" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rover_differential &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="rover-mecanum" tabindex="-1">rover_mecanum <a class="header-anchor" href="#rover-mecanum" aria-label="Permalink to &quot;rover_mecanum&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/rover_mecanum" target="_blank" rel="noreferrer">modules/rover_mecanum</a></p><h3 id="描述-12" tabindex="-1">描述 <a class="header-anchor" href="#描述-12" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>Rover Mecanum controller.</p><p><a id="rover_mecanum_usage"></a></p><h3 id="用法-12" tabindex="-1">用法 <a class="header-anchor" href="#用法-12" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rover_mecanum &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="rover-pos-control" tabindex="-1">rover_pos_control <a class="header-anchor" href="#rover-pos-control" aria-label="Permalink to &quot;rover_pos_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/rover_pos_control" target="_blank" rel="noreferrer">modules/rover_pos_control</a></p><h3 id="描述-13" tabindex="-1">描述 <a class="header-anchor" href="#描述-13" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>Controls the position of a ground rover using an L1 controller.</p><p>Publishes <code>vehicle_thrust_setpoint (only in x) and vehicle_torque_setpoint (only yaw)</code> messages at IMU_GYRO_RATEMAX.</p><h3 id="实现-2" tabindex="-1">实现 <a class="header-anchor" href="#实现-2" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>Currently, this implementation supports only a few modes:</p><ul><li>Full manual: Throttle and yaw controls are passed directly through to the actuators</li><li>Auto mission: The rover runs missions</li><li>Loiter: The rover will navigate to within the loiter radius, then stop the motors</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>CLI usage example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rover_pos_control start</span></span>
<span class="line"><span>rover_pos_control status</span></span>
<span class="line"><span>rover_pos_control stop</span></span></code></pre></div><p><a id="rover_pos_control_usage"></a></p><h3 id="用法-13" tabindex="-1">用法 <a class="header-anchor" href="#用法-13" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rover_pos_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="uuv-att-control" tabindex="-1">uuv_att_control <a class="header-anchor" href="#uuv-att-control" aria-label="Permalink to &quot;uuv_att_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/uuv_att_control" target="_blank" rel="noreferrer">modules/uuv_att_control</a></p><h3 id="描述-14" tabindex="-1">描述 <a class="header-anchor" href="#描述-14" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>Controls the attitude of an unmanned underwater vehicle (UUV).</p><p>Publishes <code>vehicle_thrust_setpont</code> and <code>vehicle_torque_setpoint</code> messages at a constant 250Hz.</p><h3 id="实现-3" tabindex="-1">实现 <a class="header-anchor" href="#实现-3" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>Currently, this implementation supports only a few modes:</p><ul><li>Full manual: Roll, pitch, yaw, and throttle controls are passed directly through to the actuators</li><li>Auto mission: The uuv runs missions</li></ul><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>CLI usage example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uuv_att_control start</span></span>
<span class="line"><span>uuv_att_control status</span></span>
<span class="line"><span>uuv_att_control stop</span></span></code></pre></div><p><a id="uuv_att_control_usage"></a></p><h3 id="用法-14" tabindex="-1">用法 <a class="header-anchor" href="#用法-14" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uuv_att_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="uuv-pos-control" tabindex="-1">uuv_pos_control <a class="header-anchor" href="#uuv-pos-control" aria-label="Permalink to &quot;uuv_pos_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/uuv_pos_control" target="_blank" rel="noreferrer">modules/uuv_pos_control</a></p><h3 id="描述-15" tabindex="-1">描述 <a class="header-anchor" href="#描述-15" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>Controls the attitude of an unmanned underwater vehicle (UUV). Publishes <code>attitude_setpoint</code> messages.</p><h3 id="实现-4" tabindex="-1">实现 <a class="header-anchor" href="#实现-4" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>Currently, this implementation supports only a few modes:</p><ul><li>Full manual: Roll, pitch, yaw, and throttle controls are passed directly through to the actuators</li><li>Auto mission: The uuv runs missions</li></ul><h3 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>CLI usage example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uuv_pos_control start</span></span>
<span class="line"><span>uuv_pos_control status</span></span>
<span class="line"><span>uuv_pos_control stop</span></span></code></pre></div><p><a id="uuv_pos_control_usage"></a></p><h3 id="用法-15" tabindex="-1">用法 <a class="header-anchor" href="#用法-15" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uuv_pos_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span>   start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div><h2 id="vtol-att-control" tabindex="-1">vtol_att_control <a class="header-anchor" href="#vtol-att-control" aria-label="Permalink to &quot;vtol_att_control&quot;">​</a></h2><p>Source: <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/vtol_att_control" target="_blank" rel="noreferrer">modules/vtol_att_control</a></p><h3 id="描述-16" tabindex="-1">描述 <a class="header-anchor" href="#描述-16" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>fw_att_control is the fixed wing attitude controller.</p><p><a id="vtol_att_control_usage"></a></p><h3 id="用法-16" tabindex="-1">用法 <a class="header-anchor" href="#用法-16" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vtol_att_control &lt;command&gt; [arguments...]</span></span>
<span class="line"><span> Commands:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   stop</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   status        print status info</span></span></code></pre></div>`,151)]))}const m=s(o,[["render",l]]);export{u as __pageData,m as default};
