import{_ as t,a as o,b as i,c as a,d as r,e as l,f as n,g as s,h as d,i as u}from"./chunks/vscode_intellisense.CXZ8jIR2.js";import{_ as p,c,a8 as h,o as g}from"./chunks/framework.BDnHobkS.js";const x=JSON.parse('{"title":"Visual Studio Code IDE (VSCode)","description":"","frontmatter":{},"headers":[],"relativePath":"en/dev_setup/vscode.md","filePath":"en/dev_setup/vscode.md"}'),m={name:"en/dev_setup/vscode.md"};function b(f,e,w,v,k,y){return g(),c("div",null,e[0]||(e[0]=[h('<h1 id="visual-studio-code-ide-vscode" tabindex="-1">Visual Studio Code IDE (VSCode) <a class="header-anchor" href="#visual-studio-code-ide-vscode" aria-label="Permalink to &quot;Visual Studio Code IDE (VSCode)&quot;">​</a></h1><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> is a powerful cross-platform source code editor/IDE that can be used for PX4 development on Ubuntu, Windows, and macOS.</p><p>There are a number of reasons to use VSCode for PX4 development:</p><ul><li>Getting setup <em>really</em> only takes a few minutes.</li><li>A rich extension ecosystem that enables a huge range of tools needed for PX4 development: C/C++ (with solid <em>cmake</em> integration), <em>Python</em>, <em>Jinja2</em>, ROS messages, and even DroneCAN dsdl.</li><li>Excellent Github integration.</li></ul><p>This topic explains how to setup the IDE and start developing.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>There are other powerful IDEs, but they typically take more effort to integrate with PX4. With <em>VScode</em>, configuration is stored in the PX4/PX4-Autopilot tree (<a href="https://github.com/PX4/PX4-Autopilot/tree/main/.vscode" target="_blank" rel="noreferrer">PX4-Autopilot/.vscode</a>) so the setup process is as simple as adding the project folder.</p></div><h2 id="preconditions" tabindex="-1">Preconditions <a class="header-anchor" href="#preconditions" aria-label="Permalink to &quot;Preconditions&quot;">​</a></h2><p>You must already have installed the command line <a href="./../dev_setup/dev_env.html">PX4 developer environment</a> for your platform and downloaded the <em>Firmware</em> source code repo.</p><h2 id="installation-setup" tabindex="-1">Installation &amp; Setup <a class="header-anchor" href="#installation-setup" aria-label="Permalink to &quot;Installation &amp; Setup&quot;">​</a></h2><ol><li><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Download and install VSCode</a> (you will be offered the correct version for your OS).</p></li><li><p>Open VSCode and add the PX4 source code:</p><ul><li>Select <em>Open folder ...</em> option on the welcome page (or using the menu: <strong>File &gt; Open Folder</strong>): <img src="'+t+'" alt="Open Folder"></li><li>A file selection dialog will appear. Select the <strong>PX4-Autopilot</strong> directory and then press <strong>OK</strong>.</li></ul><p>The project files and configuration will then load into <em>VSCode</em>.</p></li><li><p>Press <strong>Install All</strong> on the <em>This workspace has extension recommendations</em> prompt (this will appear on the bottom right of the IDE). <img src="'+o+'" alt="Install extensions"></p><p>VSCode will open the <em>Extensions</em> panel on the left hand side so you can watch the progress of installation.</p><p><img src="'+i+'" alt="PX4 loaded into VSCode Explorer"></p></li><li><p>A number of notifications/prompts may appear in the bottom right corner</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If the prompts disappear, click the little &quot;alarm&quot; icon on the right of the bottom blue bar.</p></div><ul><li>If prompted to install a new version of <em>cmake</em>: <ul><li>Say <strong>No</strong> (the right version is installed with the <a href="./../dev_setup/dev_env.html">PX4 developer environment</a>).</li></ul></li><li>If prompted to sign into <em>github.com</em> and add your credentials: <ul><li>This is up to you! It provides a deep integration between Github and the IDE, which may simplify your workflow.</li></ul></li><li>Other prompts are optional, and may be installed if they seem useful. </li></ul></li></ol><p><a id="building"></a></p><h2 id="building-px4" tabindex="-1">Building PX4 <a class="header-anchor" href="#building-px4" aria-label="Permalink to &quot;Building PX4&quot;">​</a></h2><p>To build:</p><ol><li><p>Select your build target (&quot;cmake build config&quot;):</p><ul><li><p>The current <em>cmake build target</em> is shown on the blue <em>config</em> bar at the bottom (if this is already your desired target, skip to next step). <img src="'+a+'" alt="Select Cmake build target"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The cmake target you select affects the targets offered for when <a href="#debugging">building/debugging</a> (i.e. for hardware debugging you must select a hardware target like <code>px4_fmu-v6</code>).</p></div></li><li><p>Click the target on the config bar to display other options, and select the one you want (this will replace any selected target).</p></li><li><p><em>Cmake</em> will then configure your project (see notification in bottom right). <img src="'+r+'" alt="Cmake config project"></p></li><li><p>Wait until configuration completes. When this is done the notification will disappear and you&#39;ll be shown the build location: <img src="'+l+'" alt="Cmake config project">.</p></li></ul></li><li><p>You can then kick off a build from the config bar (select either <strong>Build</strong> or <strong>Debug</strong>). <img src="'+n+'" alt="Run debug or build"></p></li></ol><p>After building at least once you can now use [code completion](#code completion) and other <em>VSCode</em> features.</p><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p><a id="debugging_sitl"></a></p><h3 id="sitl-debugging" tabindex="-1">SITL Debugging <a class="header-anchor" href="#sitl-debugging" aria-label="Permalink to &quot;SITL Debugging&quot;">​</a></h3><p>To debug PX4 on SITL:</p><ol><li><p>Select the debug icon on the sidebar (marked in red) to display the debug panel. <img src="'+s+'" alt="Run debug"></p></li><li><p>Then choose your debug target (e.g. <em>Debug SITL (Gazebo Iris)</em>) from the top bar debug dropdown (purple box).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The debug targets that are offered (purple box) match your build target (yellow box on the bottom bar). For example, to debug SITL targets, your build target must include SITL.</p></div></li><li><p>Start debugging by clicking the debug &quot;play&quot; arrow (next to the debug target in the top bar - pink box).</p></li></ol><p>While debugging you can set breakpoints, step over code, and otherwise develop as normal.</p><h3 id="hardware-debugging" tabindex="-1">Hardware Debugging <a class="header-anchor" href="#hardware-debugging" aria-label="Permalink to &quot;Hardware Debugging&quot;">​</a></h3><p>The instructions in <a href="./../debug/swd_debug.html">SWD Debug Port</a> explain how to connect to the SWD interface on common flight controllers (for example, using the Dronecode or Blackmagic probes).</p><p>After connecting to the SWD interface, hardware debugging in VSCode is then the same as for <a href="#debugging_sitl">SITL Debugging</a> except that you select a debug target appropriate for your debugger type (and firmware) - e.g. <code>jlink (px4_fmu-v5)</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To see the <code>jlink</code> option you must have selected a <a href="#building-px4">cmake target for building firmware</a>.</p></div><p><img src="'+d+'" alt="Image showing hardware targets with options for the different probes"></p><p><a id="code completion"></a></p><h2 id="code-completion" tabindex="-1">Code Completion <a class="header-anchor" href="#code-completion" aria-label="Permalink to &quot;Code Completion&quot;">​</a></h2><p>In order for the code completion to work (and other IntelliSense magic) you need an active configuration and to have <a href="#building">built the code</a>.</p><p>Once that is done you don&#39;t need to do anything else; the toolchain will automatically offer you symbols as you type.</p><p><img src="'+u+'" alt="IntelliSense"></p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><p>This section includes guidance on setup and build errors.</p><h3 id="ubuntu-18-04-visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace" tabindex="-1">Ubuntu 18.04: &quot;Visual Studio Code is unable to watch for file changes in this large workspace&quot; <a class="header-anchor" href="#ubuntu-18-04-visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace" aria-label="Permalink to &quot;Ubuntu 18.04: &quot;Visual Studio Code is unable to watch for file changes in this large workspace&quot;&quot;">​</a></h3><p>This error surfaces on startup. On some systems, there is an upper-limit of 8192 file handles imposed on applications, which means that VSCode might not be able to detect file modifications in <code>/PX4-Autopilot</code>.</p><p>You can increase this limit to avoid the error, at the expense of memory consumption. Follow the <a href="https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc" target="_blank" rel="noreferrer">instructions here</a>. A value of 65536 should be more than sufficient.</p>',36)]))}const P=p(m,[["render",b]]);export{x as __pageData,P as default};
