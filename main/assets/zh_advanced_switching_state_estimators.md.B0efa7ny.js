import{_ as t,c as a,a8 as i,o}from"./chunks/framework.BDnHobkS.js";const u=JSON.parse('{"title":"切换状态估计器","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced/switching_state_estimators.md","filePath":"zh/advanced/switching_state_estimators.md"}'),s={name:"zh/advanced/switching_state_estimators.md"};function n(r,e,l,c,d,m){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="切换状态估计器" tabindex="-1">切换状态估计器 <a class="header-anchor" href="#切换状态估计器" aria-label="Permalink to &quot;切换状态估计器&quot;">​</a></h1><p>此页显示了可用的状态估计器以及如何在它们之间切换。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>EKF2 is the default and should be used unless you have a reason not to (in particular on vehicles with a GNSS/GPS). The Q-Estimator can be used if you don&#39;t have GPS, and is commonly used in <a href="./../config_mc/racer_setup.html">multicopter racers</a>.</p></div><h2 id="可用的估计器" tabindex="-1">可用的估计器 <a class="header-anchor" href="#可用的估计器" aria-label="Permalink to &quot;可用的估计器&quot;">​</a></h2><p>可用的估计器如下：</p><ul><li><p><strong>EKF2 attitude, position and wind states estimator</strong> (<em>recommended</em>) - An extended Kalman filter estimating attitude, 3D position / velocity and wind states.</p></li><li><p><strong>LPE position estimator</strong> (<em>deprecated</em>) - An extended Kalman filter for 3D position and velocity states.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>LPE is deprecated. （在开发 PX4 v1.14时）它是工作的，但是不再支持或维护。</p></div></li></ul><p>:::</p><ul><li><strong>Q attitude estimator</strong> - A very simple, quaternion based complementary filter for attitude. 它不需要 GPS、磁力计或气压计。 </li></ul><h2 id="如何启用不同的估计器" tabindex="-1">如何启用不同的估计器 <a class="header-anchor" href="#如何启用不同的估计器" aria-label="Permalink to &quot;如何启用不同的估计器&quot;">​</a></h2><p>要启用特定的估算器，请启用其参数并禁用其他参数：</p><ul><li><a href="./../advanced_config/parameter_reference.html#EKF2_EN">EKF2_EN</a> - EKF2 (default/recommended)</li><li><a href="./../advanced_config/parameter_reference.html#ATT_EN">ATT_EN</a> - Q Estimator (quaternion based attitude estimator)</li><li><a href="./../advanced_config/parameter_reference.html#LPE_EN">LPE_EN</a> - LPE (not supported for Fixed-wing)</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is important to enable one, and only one, estimator. If more than one is enabled, the first to publish the UOrb topics <a href="./../msg_docs/VehicleAttitude.html">vehicle_attitude</a> or <a href="./../msg_docs/VehicleLocalPosition.html">vehicle_local_position</a> is used. 如果没有启用，主题将不发布。</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For FMU-v2 (only) you will also need to build PX4 to specifically include required estimator (e.g. EKF2: <code>make px4_fmu-v2</code>, LPE: <code>make px4_fmu-v2_lpe</code>). 这是因为 FMU-v2 不具有足够的资源同时包含这两个估计器。 其他的 Pixhawk FMU 版本同时拥有两个估计器。</p></div>',13)]))}const h=t(s,[["render",n]]);export{u as __pageData,h as default};
