import{_ as i,c as a,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"우분투 서버 기반 파일럿파이","description":"","frontmatter":{},"headers":[],"relativePath":"ko/flight_controller/raspberry_pi_pilotpi_ubuntu_server.md","filePath":"ko/flight_controller/raspberry_pi_pilotpi_ubuntu_server.md"}'),n={name:"ko/flight_controller/raspberry_pi_pilotpi_ubuntu_server.md"};function l(h,s,p,r,o,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="우분투-서버-기반-파일럿파이" tabindex="-1">우분투 서버 기반 파일럿파이 <a class="header-anchor" href="#우분투-서버-기반-파일럿파이" aria-label="Permalink to &quot;우분투 서버 기반 파일럿파이&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Ubuntu Server on RPi 4B consumes a lot of current and generates a lot of heat. 이 하드웨어를 사용시에는 고열 방출과 고전력 소비 환경을 고려하여 설계되었습니다.</p></div><h2 id="개발자-가이드" tabindex="-1">개발자 가이드 <a class="header-anchor" href="#개발자-가이드" aria-label="Permalink to &quot;개발자 가이드&quot;">​</a></h2><h3 id="os-이미지" tabindex="-1">OS 이미지 <a class="header-anchor" href="#os-이미지" aria-label="Permalink to &quot;OS 이미지&quot;">​</a></h3><p>armhf와 arm64 arch가 모두 지원됩니다.</p><h4 id="armhf" tabindex="-1">armhf <a class="header-anchor" href="#armhf" aria-label="Permalink to &quot;armhf&quot;">​</a></h4><ul><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-armhf+raspi2.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi2</a></li><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-armhf+raspi3.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi3</a></li><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-armhf+raspi4.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi4</a></li><li><a href="https://cdimage.ubuntu.com/releases/20.04.1/release/ubuntu-20.04.2-preinstalled-server-arm64+raspi.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 20.04.1 for RPi 2/3/4</a></li></ul><h4 id="arm64" tabindex="-1">arm64 <a class="header-anchor" href="#arm64" aria-label="Permalink to &quot;arm64&quot;">​</a></h4><ul><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-arm64+raspi3.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi3</a></li><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-arm64+raspi4.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi4</a></li><li><a href="https://cdimage.ubuntu.com/releases/20.04.1/release/ubuntu-20.04.2-preinstalled-server-arm64+raspi.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 20.04.1 for RPi 3/4</a></li></ul><h4 id="최신-운영체제" tabindex="-1">최신 운영체제 <a class="header-anchor" href="#최신-운영체제" aria-label="Permalink to &quot;최신 운영체제&quot;">​</a></h4><p>Please refer to official <a href="https://cdimage.ubuntu.com/releases/" target="_blank" rel="noreferrer">cdimage</a> page for any new updates.</p><h3 id="최초-부팅" tabindex="-1">최초 부팅 <a class="header-anchor" href="#최초-부팅" aria-label="Permalink to &quot;최초 부팅&quot;">​</a></h3><p>When setting up RPi&#39;s WiFi for the first time we recommended using a wired Ethernet connection between your home router and RPi, and a monitor and keyboard.</p><h4 id="부팅전-과정" tabindex="-1">부팅전 과정 <a class="header-anchor" href="#부팅전-과정" aria-label="Permalink to &quot;부팅전 과정&quot;">​</a></h4><p>SD 카드를 컴퓨터에 장착하고 네트워크 설정을 수정합니다. Please follow the official instruction <a href="https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#3-wifi-or-ethernet" target="_blank" rel="noreferrer">here</a>.</p><p>이제 SD 카드를 라즈베리파이에 삽입하고, 처음으로 부팅하십시오. 유선 이더넷을 통한 SSH 연결하거나 또는 키보드 및 모니터를 통하여 라즈베리파이 쉘 액세스 권한을 확인하십시오.</p><h4 id="wifi-지역" tabindex="-1">WiFi 지역 <a class="header-anchor" href="#wifi-지역" aria-label="Permalink to &quot;WiFi 지역&quot;">​</a></h4><p>먼저 필요한 패키지를 설치하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crda</span></span></code></pre></div><p>Edit the file <code>/etc/default/crda</code> to change the correct WiFi region. <a href="https://www.arubanetworks.com/techdocs/InstantWenger_Mobile/Advanced/Content/Instant%20User%20Guide%20-%20volumes/Country_Codes_List.htm" target="_blank" rel="noreferrer">Reference List</a></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/default/crda</span></span></code></pre></div><p>라즈베리파이는 재부팅후 WiFi 네트워크에 연결할 수 있습니다.</p><h4 id="호스트명과-mdns" tabindex="-1">호스트명과 mDNS <a class="header-anchor" href="#호스트명과-mdns" aria-label="Permalink to &quot;호스트명과 mDNS&quot;">​</a></h4><p>먼저 호스트 이름을 설정합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/hostname</span></span></code></pre></div><p>호스트 이름을 적절하게 변경하십시오. 그런 다음 mDNS에 필요한 패키지를 설치합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> avahi-daemon</span></span></code></pre></div><p>재부팅합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reboot</span></span></code></pre></div><p>위의 작업 후 WiFi 접근성을 회복하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu@pi_hostname.local</span></span></code></pre></div><h4 id="무-비밀번호-인증-선택-사항" tabindex="-1">무 비밀번호 인증 (선택 사항) <a class="header-anchor" href="#무-비밀번호-인증-선택-사항" aria-label="Permalink to &quot;무 비밀번호 인증 (선택 사항)&quot;">​</a></h4><p>You may want to setup <a href="https://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md" target="_blank" rel="noreferrer">passwordless auth</a> as well.</p><h3 id="운영체제-설정" tabindex="-1">운영체제 설정 <a class="header-anchor" href="#운영체제-설정" aria-label="Permalink to &quot;운영체제 설정&quot;">​</a></h3><h4 id="config-txt" tabindex="-1">config.txt <a class="header-anchor" href="#config-txt" aria-label="Permalink to &quot;config.txt&quot;">​</a></h4><p>The corresponding file in Ubuntu is <code>/boot/firmware/usercfg.txt</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/usercfg.txt</span></span></code></pre></div><p>파일을 다음의 내용으로 변경합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable sc16is752 overlay</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtoverlay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sc16is752-spi1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable I2C-1 and set the frequency to 400KHz</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtparam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i2c_arm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">on,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i2c_arm_baudrate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">400000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable spidev0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtparam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">on</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable RC input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enable_uart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable I2C-0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtparam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i2c_vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">on</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># switch Bluetooth to miniuart</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtoverlay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">miniuart-bt</span></span></code></pre></div><h4 id="cmdline-txt" tabindex="-1">cmdline.txt <a class="header-anchor" href="#cmdline-txt" aria-label="Permalink to &quot;cmdline.txt&quot;">​</a></h4><p>우분투 서버 20.04 에서:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/cmdline.txt</span></span></code></pre></div><p>On Ubuntu Server 18.04 or earlier, <code>nobtcmd.txt</code> and <code>btcmd.txt</code> should both be modified.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/nobtcmd.txt</span></span></code></pre></div><p>Find <code>console=/dev/ttyAMA0,115200</code> and remove that part to disable the login shell on serial interface.</p><p>Append <code>isolcpus=2</code> after the last word. 그러면 전체 파일이 다음과 같이 표시됩니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ifnames</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dwc_otg.lpm_enable=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> console=tty1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root=LABEL=writable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rootfstype=ext4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elevator=deadline</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rootwait</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fixrtc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isolcpus=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div><p>위의 줄은 Linux 커널이 CPU 코어 2에서 프로세스를 예약하지 않음을 나타냅니다. 나중에 해당 코어에서 PX4를 수동으로 실행합니다.</p><p>재부팅하고 라즈베리파이에 SSH로 로그인합니다.</p><p>UART 인터페이스를 확인합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/tty</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>There should be <code>/dev/ttyAMA0</code>, <code>/dev/ttySC0</code> and <code>/dev/ttySC1</code>.</p><p>I2C 인터페이스를 확인합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/i2c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>There should be <code>/dev/i2c-0</code> and <code>/dev/i2c-1</code></p><p>SPI 인터페이스를 확인합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/spidev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>There should be <code>/dev/spidev0.0</code>.</p><h4 id="rc-local" tabindex="-1">rc.local <a class="header-anchor" href="#rc-local" aria-label="Permalink to &quot;rc.local&quot;">​</a></h4><p>In this section we will configure the auto-start script in <strong>rc.local</strong>. 이 파일은 Ubuntu OS에 설치시에는 존재하지 않으므로, 생성하여야합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/rc.local</span></span></code></pre></div><p>아래 내용을 파일에 추가하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;25&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/export</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;in&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/gpio25/direction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/gpio25/value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Launching PX4&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/ubuntu/px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taskset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pilotpi_mc.config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /home/ubuntu/px4/px4.log &amp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;25&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/unexport</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>저장후 종료합니다. 그런 다음 권한을 설정하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/rc.local</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Don&#39;t forget to turn off the switch when it is not needed!</p></div><h4 id="csi-카메라" tabindex="-1">CSI 카메라 <a class="header-anchor" href="#csi-카메라" aria-label="Permalink to &quot;CSI 카메라&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Enable CSI camera will stop anything works on I2C-0.</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/usercfg.txt</span></span></code></pre></div><p>파일 끝에 다음 내용을 추가합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">start_x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span></code></pre></div><h3 id="코드-빌드" tabindex="-1">코드 빌드 <a class="header-anchor" href="#코드-빌드" aria-label="Permalink to &quot;코드 빌드&quot;">​</a></h3><p>To get the <em>very latest</em> version onto your computer, enter the following command into a terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is all you need to do just to build the latest code.</p></div><h4 id="라즈베리파이-업로드-대상-설정" tabindex="-1">라즈베리파이 업로드 대상 설정 <a class="header-anchor" href="#라즈베리파이-업로드-대상-설정" aria-label="Permalink to &quot;라즈베리파이 업로드 대상 설정&quot;">​</a></h4><p>다음을 사용하여 라즈베리파이의 IP(또는 호스트 이름)를 설정합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">192.168.X.X</span></span></code></pre></div><p>또는</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pi_hostname.local</span></span></code></pre></div><p>사용자 이름을 설정하여야 합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_USER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ubuntu</span></span></code></pre></div><h4 id="armhf-타겟용-빌드" tabindex="-1">armhf 타겟용 빌드 <a class="header-anchor" href="#armhf-타겟용-빌드" aria-label="Permalink to &quot;armhf 타겟용 빌드&quot;">​</a></h4><p>실행 파일을 빌드하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Firmware</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_default</span></span></code></pre></div><p>다음 명령으로 업로드하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><h4 id="armhf용-대체-빌드-방법-도커-사용" tabindex="-1">armhf용 대체 빌드 방법 (도커 사용) <a class="header-anchor" href="#armhf용-대체-빌드-방법-도커-사용" aria-label="Permalink to &quot;armhf용 대체 빌드 방법 (도커 사용)&quot;">​</a></h4><p>If you are compiling for the first time with docker, please refer to the <a href="./../test_and_ci/docker.html#prerequisites">official docs</a>.</p><p>firmware 폴더에서 다음 명령을 실행합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;export AUTOPILOT_HOST=192.168.X.X; export AUTOPILOT_USER=ubuntu; export NO_NINJA_BUILD=1; make scumaker_pilotpi_default upload&quot;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>mDNS is not supported within docker. 업로드시에 올바른 IP 주소를 설정하여야합니다.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If your IDE doesn&#39;t support ninja build, <code>NO_NINJA_BUILD=1</code> option will help. 업로드하지 않고도 컴파일할 수 있습니다. Just remove <code>upload</code> target.</p></div><p>다음 명령으로 코드를 컴파일합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;make scumaker_pilotpi_default&quot;</span></span></code></pre></div><h4 id="arm64-타겟용-빌드" tabindex="-1">arm64 타겟용 빌드 <a class="header-anchor" href="#arm64-타겟용-빌드" aria-label="Permalink to &quot;arm64 타겟용 빌드&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This step requires <code>aarch64-linux-gnu</code> tool-chain to be installed.</p></div><p>실행 파일을 빌드하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_arm64</span></span></code></pre></div><p>다음 명령으로 업로드하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_arm64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><h4 id="arm64용-대체-빌드-방법-도커-사용" tabindex="-1">arm64용 대체 빌드 방법 (도커 사용) <a class="header-anchor" href="#arm64용-대체-빌드-방법-도커-사용" aria-label="Permalink to &quot;arm64용 대체 빌드 방법 (도커 사용)&quot;">​</a></h4><p>If you are compiling for the first time with docker, please refer to the <a href="./../test_and_ci/docker.html#prerequisites">official docs</a>.</p><p>Execute the command in <code>PX4-Autopilot</code> folder:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;export AUTOPILOT_HOST=192.168.X.X; export AUTOPILOT_USER=ubuntu; export NO_NINJA_BUILD=1; make scumaker_pilotpi_arm64 upload&quot;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>mDNS is not supported within docker. 업로드시에 올바른 IP 주소를 설정하여야합니다.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If your IDE doesn&#39;t support ninja build, <code>NO_NINJA_BUILD=1</code> option will help. You can compile without uploading too - just remove the <code>upload</code> target.</p></div><p>다음 명령으로 코드를 컴파일합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;make scumaker_pilotpi_arm64&quot;</span></span></code></pre></div><h4 id="수동-px4-실행" tabindex="-1">수동 PX4 실행 <a class="header-anchor" href="#수동-px4-실행" aria-label="Permalink to &quot;수동 PX4 실행&quot;">​</a></h4><p>ssh에서 다음을 명령어를 실행하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taskset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pilotpi_mc.config</span></span></code></pre></div><p>이제 PX4는 다중로터 설정으로 시작합니다.</p><p>If you encountered the similar problem executing <code>bin/px4</code> on your Pi as following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bin/px4: /lib/xxxx/xxxx: version \`GLIBC_2.29&#39; not found (required by bin/px4)</span></span></code></pre></div><p>docker로 컴파일하여야 합니다.</p><p>다음 단계로 진행하기 전에 먼저 기존 빌드를 삭제합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/scumaker_pilotpi_</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>그런 다음 위의 해당 부분에서 계속 진행합니다.</p><h3 id="사후-설정" tabindex="-1">사후 설정 <a class="header-anchor" href="#사후-설정" aria-label="Permalink to &quot;사후 설정&quot;">​</a></h3><p>Please refer to the instructions <a href="./raspberry_pi_pilotpi_rpios.html">here</a></p>`,121)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
