import{_ as i,c as a,a8 as l,o as s}from"./chunks/framework.BDnHobkS.js";const u=JSON.parse('{"title":"System Failure Injection","description":"","frontmatter":{},"headers":[],"relativePath":"en/debug/failure_injection.md","filePath":"en/debug/failure_injection.md"}'),t={name:"en/debug/failure_injection.md"};function n(o,e,r,d,h,c){return s(),a("div",null,e[0]||(e[0]=[l(`<h1 id="system-failure-injection" tabindex="-1">System Failure Injection <a class="header-anchor" href="#system-failure-injection" aria-label="Permalink to &quot;System Failure Injection&quot;">​</a></h1><p>System failure injection allows you to induce different types of sensor and system failures, either programmatically using the <a href="https://mavsdk.mavlink.io/main/en/cpp/api_reference/classmavsdk_1_1_failure.html" target="_blank" rel="noreferrer">MAVSDK failure plugin</a>, or &quot;manually&quot; via a PX4 console like the <a href="./../debug/mavlink_shell.html#mavlink-shell">MAVLink shell</a>. This enables easier testing of <a href="./../config/safety.html">safety failsafe</a> behaviour, and more generally, of how PX4 behaves when systems and sensors stop working correctly.</p><p>Failure injection is disabled by default, and can be enabled using the <a href="./../advanced_config/parameter_reference.html#SYS_FAILURE_EN">SYS_FAILURE_EN</a> parameter.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Failure injection still in development. At time of writing (PX4 v1.14):</p><ul><li>It can only be used in simulation (support for both failure injection in real flight is planned).</li><li>It requires support in the simulator. It is supported in Gazebo Classic</li><li>Many failure types are not broadly implemented. In those cases the command will return with an &quot;unsupported&quot; message.</li></ul></div><h2 id="failure-system-command" tabindex="-1">Failure System Command <a class="header-anchor" href="#failure-system-command" aria-label="Permalink to &quot;Failure System Command&quot;">​</a></h2><p>Failures can be injected using the <a href="./../modules/modules_command.html#failure">failure system command</a> from any PX4 console/shell, specifying both the target and type of the failure.</p><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h3><p>The full syntax of the <a href="./../modules/modules_command.html#failure">failure</a> command is:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">componen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">failure_typ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">instance_numbe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span></span></code></pre></div><p>where:</p><ul><li><em>component</em>: <ul><li>Sensors: <ul><li><code>gyro</code>: Gyro.</li><li><code>accel</code>: Accelerometer.</li><li><code>mag</code>: Magnetometer</li><li><code>baro</code>: Barometer</li><li><code>gps</code>: GPS</li><li><code>optical_flow</code>: Optical flow.</li><li><code>vio</code>: Visual inertial odometry.</li><li><code>distance_sensor</code>: Distance sensor (rangefinder).</li><li><code>airspeed</code>: Airspeed sensor.</li></ul></li><li>Systems: <ul><li><code>battery</code>: Battery.</li><li><code>motor</code>: Motor.</li><li><code>servo</code>: Servo.</li><li><code>avoidance</code>: Avoidance.</li><li><code>rc_signal</code>: RC Signal.</li><li><code>mavlink_signal</code>: MAVLink signal (data telemetry).</li></ul></li></ul></li><li><em>failure_type</em>: <ul><li><code>ok</code>: Publish as normal (Disable failure injection).</li><li><code>off</code>: Stop publishing.</li><li><code>stuck</code>: Report same value every time (<em>could</em> indicate a malfunctioning sensor).</li><li><code>garbage</code>: Publish random noise. This looks like reading uninitialized memory.</li><li><code>wrong</code>: Publish invalid values (that still look reasonable/aren&#39;t &quot;garbage&quot;).</li><li><code>slow</code>: Publish at a reduced rate.</li><li><code>delayed</code>: Publish valid data with a significant delay.</li><li><code>intermittent</code>: Publish intermittently.</li></ul></li><li><em>instance number</em> (optional): Instance number of affected sensor. 0 (default) indicates all sensors of specified type.</li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>To simulate losing RC signal without having to turn off your RC controller:</p><ol><li><p>Enable the parameter <a href="./../advanced_config/parameter_reference.html#SYS_FAILURE_EN">SYS_FAILURE_EN</a>.</p></li><li><p>Enter the following commands on the MAVLink console or SITL <em>pxh shell</em>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fail RC (turn publishing off)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rc_signal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> off</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Restart RC publishing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">failure</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rc_signal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ok</span></span></code></pre></div></li></ol><h2 id="mavsdk-failure-plugin" tabindex="-1">MAVSDK Failure Plugin <a class="header-anchor" href="#mavsdk-failure-plugin" aria-label="Permalink to &quot;MAVSDK Failure Plugin&quot;">​</a></h2><p>The <a href="https://mavsdk.mavlink.io/main/en/cpp/api_reference/classmavsdk_1_1_failure.html" target="_blank" rel="noreferrer">MAVSDK failure plugin</a> can be used to programmatically inject failures. It is used in <a href="./../test_and_ci/integration_testing_mavsdk.html">PX4 Integration Testing</a> to simulate failure cases (for example, see <a href="https://github.com/PX4/PX4-Autopilot/blob/main/test/mavsdk_tests/autopilot_tester.cpp" target="_blank" rel="noreferrer">PX4-Autopilot/test/mavsdk_tests/autopilot_tester.cpp</a>).</p><p>The plugin API is a direct mapping of the failure command shown above, with a few additional error signals related to the connection.</p>`,17)]))}const m=i(t,[["render",n]]);export{u as __pageData,m as default};
