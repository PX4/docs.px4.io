import{_ as i,c as a,a8 as t,o as n}from"./chunks/framework.BDnHobkS.js";const d=JSON.parse('{"title":"EstimatorBias (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/msg_docs/EstimatorBias.md","filePath":"ko/msg_docs/EstimatorBias.md"}'),e={name:"ko/msg_docs/EstimatorBias.md"};function l(h,s,p,r,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="estimatorbias-uorb-message" tabindex="-1">EstimatorBias (UORB message) <a class="header-anchor" href="#estimatorbias-uorb-message" aria-label="Permalink to &quot;EstimatorBias (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/EstimatorBias.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp                # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample         # the timestamp of the raw </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 device_id		# unique device ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the sensor that does not change between power cycles</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 bias			# estimated barometric altitude </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 bias_var		# estimated barometric altitude bias </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">variance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 innov			# innovation of the last measurement </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 innov_var		# innovation variance of the last measurement </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 innov_test_ratio	# normalized innovation squared test ratio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># TOPICS estimator_baro_bias estimator_gnss_hgt_bias</span></span></code></pre></div>`,3)]))}const m=i(e,[["render",l]]);export{d as __pageData,m as default};
