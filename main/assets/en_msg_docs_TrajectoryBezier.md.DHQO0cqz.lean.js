import{_ as i,c as e,a8 as a,o as t}from"./chunks/framework.BDnHobkS.js";const d=JSON.parse('{"title":"TrajectoryBezier (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"en/msg_docs/TrajectoryBezier.md","filePath":"en/msg_docs/TrajectoryBezier.md"}'),n={name:"en/msg_docs/TrajectoryBezier.md"};function r(l,s,p,h,o,c){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="trajectorybezier-uorb-message" tabindex="-1">TrajectoryBezier (UORB message) <a class="header-anchor" href="#trajectorybezier-uorb-message" aria-label="Permalink to &quot;TrajectoryBezier (UORB message)&quot;">â€‹</a></h1><p>Bezier Trajectory description. See also Mavlink TRAJECTORY msg The topic trajectory_bezier describe each waypoint defined in vehicle_trajectory_bezier</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/TrajectoryBezier.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Bezier Trajectory description. See also Mavlink TRAJECTORY msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># The topic trajectory_bezier describe each waypoint defined in vehicle_trajectory_bezier</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp		# time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] position     # local position x,y,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (metres)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 yaw             # yaw </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rad)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 delta           # time it should take to get to this waypoint, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> this is the final </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waypoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (seconds)</span></span></code></pre></div>`,4)]))}const E=i(n,[["render",r]]);export{d as __pageData,E as default};
