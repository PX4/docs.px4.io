import{_ as t,c as i,a8 as o,o as a}from"./chunks/framework.BDnHobkS.js";const h=JSON.parse('{"title":"Multicopter Setpoint Tuning (Trajectory Generator)","description":"","frontmatter":{},"headers":[],"relativePath":"en/config_mc/mc_trajectory_tuning.md","filePath":"en/config_mc/mc_trajectory_tuning.md"}'),n={name:"en/config_mc/mc_trajectory_tuning.md"};function r(l,e,s,c,m,d){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="multicopter-setpoint-tuning-trajectory-generator" tabindex="-1">Multicopter Setpoint Tuning (Trajectory Generator) <a class="header-anchor" href="#multicopter-setpoint-tuning-trajectory-generator" aria-label="Permalink to &quot;Multicopter Setpoint Tuning (Trajectory Generator)&quot;">​</a></h1><p>This document provides an overview of the multicopter tuning parameters that change the <em>user experience</em>: how fast the vehicle reacts to stick movements or direction changes in missions, the maximum allowed velocity, etc.</p><p>In other words, this topic explains how to tune the parameters that affect the value of a <em>desired setpoint</em> rather than those that affect how well the vehicle <em>tracks</em> the setpoint).</p><p>The algorithm that generates those setpoints is called a &quot;trajectory generator&quot;.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This guide is for advanced users/experts.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Follow the instructions in the <a href="./../config_mc/pid_tuning_guide_multicopter.html">Multicopter PID Tuning Guide</a> <em>before</em> doing any of the tuning described here. Do not use these tuning parameters to fix bad tracking or vibration!</p></div><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The input to the P/PID controller is a <em>desired setpoint</em> that the vehicle should attempt to track. <a href="./../config_mc/pid_tuning_guide_multicopter.html">PID Tuning</a> (&quot;Lower level tuning&quot;) aims to reduce the error between the desired setpoint and the estimate of the vehicle state.</p><p>The <em>desired setpoint</em> passed to the P/PID controller is itself calculated from a <em>demanded setpoint</em> based on a stick position (in RC modes) or from a mission command. The demanded setpoint can change very quickly (e.g. if a user moves stick from zero to maximum value as a &quot;step&quot;). Vehicle flight characteristics are better if the corresponding desired setpoint changes as a &quot;ramp&quot;.</p><p><em>Setpoint value tuning</em> (&quot;higher level tuning&quot;) is used to specify the mapping between the <em>demanded</em> and the <em>desired</em> setpoints - i.e. defining the &quot;ramp&quot; at which the desired setpoint follows the demanded setpoint.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Poorly tuned <a href="./../config_mc/pid_tuning_guide_multicopter.html">P/PID Gains</a> can lead to instability. Poorly tuned <em>setpoint values</em> cannot result in instability, but may result in either very jerky or very unresponsive reactions to setpoint changes.</p></div><p><a id="modes"></a></p><h2 id="flight-modes-trajectory-support" tabindex="-1">Flight Modes Trajectory Support <a class="header-anchor" href="#flight-modes-trajectory-support" aria-label="Permalink to &quot;Flight Modes Trajectory Support&quot;">​</a></h2><p><a href="./../flight_modes_mc/mission.html">Mission mode</a> used the <a href="./../config_mc/mc_jerk_limited_type_trajectory.html">Jerk-limited</a> trajectory all the time.</p><p><a href="./../flight_modes_mc/position.html">Position mode</a> supports the <a href="#position-mode-implementations">implementations</a> listed below. It uses the acceleration based mapping by default; other types can be set using <a href="./../advanced_config/parameter_reference.html#MPC_POS_MODE">MPC_POS_MODE</a>.</p><p><a href="./../flight_modes_mc/altitude.html">Altitude mode</a> similarly supports the <a href="#altitude-mode-implementations">implementations</a> selected by <a href="./../advanced_config/parameter_reference.html#MPC_POS_MODE">MPC_POS_MODE</a>, but <em>only</em> for smoothing the vertical component (i.e. when controlling the altitude).</p><p>No other modes support trajectory tuning.</p><h2 id="position-mode-implementations" tabindex="-1">Position Mode Implementations <a class="header-anchor" href="#position-mode-implementations" aria-label="Permalink to &quot;Position Mode Implementations&quot;">​</a></h2><p>The following list provides an <em>overview</em> of the different implementations of how the stick input is interpreted and turned into trajectory setpoints:</p><ul><li>Acceleration based (Default) <ul><li>Horizontal stick input mapped to acceleration setpoints.</li><li>Intuitive stick feel because it&#39;s like pushing the vehicle around.</li><li>No unexpected tilt changes upon reaching travel speed velocity.</li><li>Vertical stick input mapped with jerk-limited trajectory.</li><li>Set in position mode using <code>MPC_POS_MODE=Acceleration based</code>.</li></ul></li><li><a href="./../config_mc/mc_jerk_limited_type_trajectory.html">Jerk-limited</a><ul><li>Used when smooth motion is required (e.g.: filming, mapping, cargo).</li><li>Generates symmetric smooth S-curves where the jerk and acceleration limits are always guaranteed.</li><li>May not be suitable for vehicles/use-cases that require a faster response - e.g. race quads.</li><li>Set in position mode using <code>MPC_POS_MODE=Smoothed velocity</code>.</li></ul></li><li><strong>Simple position control</strong><ul><li>Sticks map directly to velocity setpoints without smoothing.</li><li>Useful for velocity control tuning.</li><li>Set in position mode using <code>MPC_POS_MODE=Direct velocity</code>.</li></ul></li></ul><h2 id="altitude-mode-implementations" tabindex="-1">Altitude Mode Implementations <a class="header-anchor" href="#altitude-mode-implementations" aria-label="Permalink to &quot;Altitude Mode Implementations&quot;">​</a></h2><p>Analogously to <a href="#position-mode-implementations">position mode implementations</a> these are the implementations for interpreting vertical stick input:</p><ul><li><a href="./../config_mc/mc_jerk_limited_type_trajectory.html">Jerk-limited</a><ul><li>Smoothed vertical input.</li><li>Set in altitude mode with <code>MPC_POS_MODE</code> Smoothed velocity or Acceleration based.</li></ul></li><li><strong>Simple altitude control</strong><ul><li>Unsmoothed vertical input.</li><li>Set in altitude mode only when using <code>MPC_POS_MODE=Direct velocity</code>.</li></ul></li></ul>',23)]))}const u=t(n,[["render",r]]);export{h as __pageData,u as default};
