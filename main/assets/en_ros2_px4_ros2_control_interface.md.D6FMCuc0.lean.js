import{_ as n,a as l}from"./chunks/qgc_mode_assignment.DLr7gAgm.js";import{_ as h,a as p}from"./chunks/mode_requirements_diagram.BqXitC0F.js";import{_ as o,c as r,j as a,a as e,G as t,a8 as k,B as d,o as c}from"./chunks/framework.BDnHobkS.js";const v=JSON.parse('{"title":"PX4 ROS 2 Control Interface","description":"","frontmatter":{},"headers":[],"relativePath":"en/ros2/px4_ros2_control_interface.md","filePath":"en/ros2/px4_ros2_control_interface.md"}'),g={name:"en/ros2/px4_ros2_control_interface.md"};function E(y,s,u,m,F,f){const i=d("Badge");return c(),r("div",null,[s[0]||(s[0]=a("h1",{id:"px4-ros-2-control-interface",tabindex:"-1"},[e("PX4 ROS 2 Control Interface "),a("a",{class:"header-anchor",href:"#px4-ros-2-control-interface","aria-label":'Permalink to "PX4 ROS 2 Control Interface"'},"​")],-1)),t(i,{type:"tip",text:"PX4 v1.15"}),s[1]||(s[1]=e()),t(i,{type:"warning",text:"Experimental"}),s[2]||(s[2]=k('<div class="warning custom-block"><p class="custom-block-title">Experimental</p><p>At the time of writing, parts of the PX4 ROS 2 Control Interface are experimental, and hence subject to change:</p><ul><li>The architecture and core interfaces for defining modes in ROS 2 modes are largely stable, and are tested in CI. The library offers significant benefits over using offboard mode in its current state.</li><li>Only a few setpoint types have settled (the others are still under development). You may need to use internal PX4 topics which may not remain backwards-compatible over time.</li><li>The API is not fully documented.</li></ul></div><p>The <a href="./../ros2/px4_ros2_interface_lib.html">PX4 ROS 2 Interface Library</a> is a C++ library that simplifies controlling PX4 from ROS 2.</p><p>Developers use the library to create and dynamically register modes written using ROS 2. These modes are dynamically registered with PX4, and appear to be part of PX4 to a ground station or other external system. They can even replace the default modes in PX4 with enhanced ROS 2 versions, falling back to the original version if the ROS2 mode fails.</p><p>The library also provides classes for sending different types of setpoints, ranging from high-level navigation tasks all the way down to direct actuator controls. These classes abstract the internal setpoints used by PX4, and that can therefore be used to provide a consistent ROS 2 interface for future PX4 and ROS releases.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>This diagram provides a conceptual overview of how the control interface modes and mode executors interact with PX4.</p><p><img src="'+n+`" alt="ROS2 modes overview diagram"></p><p>The following sections define and explain the terms used in the diagram.</p><h3 id="definitions" tabindex="-1">Definitions <a class="header-anchor" href="#definitions" aria-label="Permalink to &quot;Definitions&quot;">​</a></h3><h4 id="mode" tabindex="-1">Mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;Mode&quot;">​</a></h4><p>A mode defined using the interface library has the following properties:</p><ul><li>A mode is a component that can send setpoints to the vehicle in order to control its motion (such as velocity or direct actuator commands).</li><li>A mode selects a setpoint type and sends it while it is active. It can switch between multiple setpoint types.</li><li>A mode can&#39;t activate other modes, and must be activated by the user (through RC/GCS), the flight controller in a failsafe situation, a <em>mode executor</em>, or some other external system.</li><li>Has a name displayed by the GCS.</li><li>Can configure its mode requirements (for example that it requires a valid position estimate).</li><li>A mode can perform different tasks, such as flying to a target, lowering a winch, releasing a payload and then fly back.</li><li>A mode can replace a mode defined in PX4.</li></ul><h4 id="mode-executor" tabindex="-1">Mode Executor <a class="header-anchor" href="#mode-executor" aria-label="Permalink to &quot;Mode Executor&quot;">​</a></h4><p>A mode executor is an optional component for scheduling modes. For example, the mode executor for a custom payload delivery or survey mode might first trigger a take-off, then switch to the custom mode, and when that completes trigger an RTL.</p><p>Specifically, it has the following properties:</p><ul><li>A mode executor is an optional component one level higher than a mode. It is a state machine that can activate modes, and wait for their completion.</li><li>It can only do so while it is in charge. For that, an executor has exactly one <em>owned mode</em> (and a mode can be owned by at most one executor). This mode serves as activation for the executor: when the user selects the mode, the owning executor gets activated and can select any mode. It stays in charge until the user switches modes (by RC or from a GCS), or a failsafe triggers a mode switch. Should the failsafe clear, the executor gets reactivated.</li><li>This allows multiple executors to coexist.</li><li>Executors cannot activate other executors.</li><li>Within the library, a mode executor is always implemented in combination with a custom mode.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>These definitions guarantee that a user can take away control from a custom mode or executor at any point in time by commanding a mode switch through RC or a GCS.</li><li>A mode executor is transparent to the user. It gets indirectly selected and activated through the owning mode, and thus the mode should be named accordingly.</li></ul></div><h4 id="configuration-overrides" tabindex="-1">Configuration Overrides <a class="header-anchor" href="#configuration-overrides" aria-label="Permalink to &quot;Configuration Overrides&quot;">​</a></h4><p>Both modes and executors can define configuration overrides, allowing customisation of certain behaviors while the mode or executor is active.</p><p>These are currently implemented:</p><ul><li><em>Disabling auto-disarm</em>. This permits landing and then taking off again (e.g. to release a payload).</li><li><em>Ability to defer non-essential failsafes</em>. This allows an executor to run an action without being interrupted by non-critical failsafe. For example, ignoring a low-battery failsafe so that a winch operation can complete.</li></ul><h3 id="comparison-to-offboard-control" tabindex="-1">Comparison to Offboard Control <a class="header-anchor" href="#comparison-to-offboard-control" aria-label="Permalink to &quot;Comparison to Offboard Control&quot;">​</a></h3><p>The above concepts provide a number of advantages over traditional <a href="./../ros/offboard_control.html">offboard control</a>:</p><ul><li>Multiple nodes or applications can coexist and even run at the same time. But only one node can <em>control the vehicle</em> at a given time, and this node is well defined.</li><li>Modes have a distinct name and be displayed/selected in the GCS.</li><li>Modes are integrated with the failsafe state machine and arming checks.</li><li>The setpoint types that can be sent are well defined.</li><li>ROS 2 modes can replace flight controller internal modes (such as <a href="./../flight_modes/return.html">Return mode</a>).</li></ul><h2 id="installation-and-first-test" tabindex="-1">Installation and First Test <a class="header-anchor" href="#installation-and-first-test" aria-label="Permalink to &quot;Installation and First Test&quot;">​</a></h2><p>The following steps are required to get started:</p><ol><li><p>Make sure you have a working <a href="./../ros2/user_guide.html">ROS 2 setup</a>, with <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer"><code>px4_msgs</code></a> in the ROS 2 workspace.</p></li><li><p>Clone the repository into the workspace:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ros_workspace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Auterion/px4-ros2-interface-lib</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>To ensure compatibility, use the latest <em>main</em> branches for PX4, <em>px4_msgs</em> and the library. See also <a href="https://github.com/Auterion/px4-ros2-interface-lib#compatibility-with-px4" target="_blank" rel="noreferrer">here</a>.</p></div></li><li><p>Build the workspace:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colcon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install/setup.bash</span></span></code></pre></div></li><li><p>In a different shell, start PX4 SITL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $px4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gazebo-classic</span></span></code></pre></div><p>(here we use Gazebo-Classic, but you can use any model or simulator)</p></li><li><p>Run the micro XRCE agent in a new shell (you can keep it running afterward):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MicroXRCEAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span></span></code></pre></div></li><li><p>Start QGroundControl.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Use QGroundControl Daily, which supports dynamically updating the list of modes.</p></div></li><li><p>Back in the ROS 2 terminal, run one of the example modes:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example_mode_manual_cpp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example_mode_manual</span></span></code></pre></div><p>You should get an output like this showing &#39;My Manual Mode&#39; mode being registered:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Checking message compatibility...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Subscriber found, continuing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Publisher found, continuing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Registering </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My Manual Mode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arming</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> executor:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Subscriber found, continuing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Publisher found, continuing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Got RegisterExtComponentReply</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Arming check request (id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> only</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> printed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>On the PX4 shell, you can check that PX4 registered the new mode:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commander</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><p>The output should contain:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INFO  [commander] Disarmed</span></span>
<span class="line"><span>INFO  [commander] navigation mode: Position</span></span>
<span class="line"><span>INFO  [commander] user intended navigation mode: Position</span></span>
<span class="line"><span>INFO  [commander] in failsafe: no</span></span>
<span class="line"><span>INFO  [commander] External Mode 1: nav_state: 23, name: My Manual Mode</span></span></code></pre></div></li><li><p>At this point you should be able to see the mode in QGroundControl as well:</p><p><img src="`+h+`" alt="QGC Modes"></p></li><li><p>Select the mode, make sure you have a manual control source (physical or virtual joystick), and arm the vehicle. The mode will then activate, and it should print the following output:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DEBUG] [example_mode_manual]: Mode </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My Manual Mode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activated</span></span></code></pre></div></li><li><p>Now you are ready to create your own mode.</p></li></ol><h2 id="how-to-use-the-library" tabindex="-1">How to use the Library <a class="header-anchor" href="#how-to-use-the-library" aria-label="Permalink to &quot;How to use the Library&quot;">​</a></h2><p>The following sections describe specific functionality provided by this library. In addition, any other PX4 topic can be subscribed or published.</p><h3 id="mode-class-definition" tabindex="-1">Mode Class Definition <a class="header-anchor" href="#mode-class-definition" aria-label="Permalink to &quot;Mode Class Definition&quot;">​</a></h3><p>This section steps through an example of how to create a class for a custom mode.</p><p>For a complete application, check out the <a href="https://github.com/Auterion/px4-ros2-interface-lib/tree/main/examples/cpp" target="_blank" rel="noreferrer">examples in the <code>Auterion/px4-ros2-interface-lib</code> repository</a>, such as <a href="https://github.com/Auterion/px4-ros2-interface-lib/blob/main/examples/cpp/modes/manual/include/mode.hpp" target="_blank" rel="noreferrer">examples/cpp/modes/manual</a>.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModeBase</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModeBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, Settings{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [2]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [3]</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _manual_control_input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ManualControlInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _rates_setpoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RatesSetpointType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onActivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Called whenever our mode gets selected</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onDeactivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Called when our mode gets deactivated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateSetpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> dt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [4]</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Eigen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Vector3f thrust_sp{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_manual_control_input-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()};</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Eigen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Vector3f rates_sp{</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _manual_control_input-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">roll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M_PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 180.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_manual_control_input-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pitch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M_PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 180.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _manual_control_input-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M_PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 180.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _rates_setpoint-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rates_sp, thrust_sp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ManualControlInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _manual_control_input;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::RatesSetpointType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _rates_setpoint;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>[1]</code>: First we create a class that inherits from <a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1ModeBase.html" target="_blank" rel="noreferrer"><code>px4_ros2::ModeBase</code></a>.</li><li><code>[2]</code>: In the constructor, we pass the mode name. This also allows us to configure some other things, like replacing a flight controller internal mode.</li><li><code>[3]</code>: This is where we create all objects that we want to use later on. This can be RC input, setpoint type(s), or telemetry. <code>*this</code> is passed as a <code>Context</code> to each object, which associates the object with the mode.</li><li><code>[4]</code>: Whenever the mode is active, this method gets called regularly (the update rate depends on the setpoint type). Here is where we can do our work and generate a new setpoint.</li></ul><p>After creating an instance of that mode, <code>mode-&gt;doRegister()</code> must be called which does the actual registration with the flight controller and returns <code>false</code> if it fails. In case a mode executor is used, <code>doRegister()</code> must be called on the mode executor, instead of for the mode.</p><h3 id="mode-executor-class-definition" tabindex="-1">Mode Executor Class Definition <a class="header-anchor" href="#mode-executor-class-definition" aria-label="Permalink to &quot;Mode Executor Class Definition&quot;">​</a></h3><p>This section steps through an example of how to create a mode executor class.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModeExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModeExecutorBase</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MyModeExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModeBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> owned_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [2]</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModeExecutorBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModeExecutorBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Settings{}, owned_mode),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> State </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [3]</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Reset,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TakingOff,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MyMode,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RTL,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WaitUntilDisarmed,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onActivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::TakingOff, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Success);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [4]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onDeactivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeactivateReason</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> previous_result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (previous_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Success) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      RCLCPP_ERROR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;State </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: previous state failed: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)state,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resultToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(previous_result));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [5]</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Reset:</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::TakingOff:</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        takeoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::MyMode, result);});</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::MyMode:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [6]</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scheduleMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          ownedMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            runState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::RTL, result);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          });</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::RTL:</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        rtl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::WaitUntilDisarmed, result);});</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::WaitUntilDisarmed:</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        waitUntilDisarmed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            RCLCPP_INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_node.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;All states complete (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resultToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result));</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          });</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rclcpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _node;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>[1]</code>: First we create a class that inherits from <a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1ModeExecutorBase.html" target="_blank" rel="noreferrer"><code>px4_ros2::ModeExecutorBase</code></a>.</li><li><code>[2]</code>: The constructor takes our custom mode that is associated with the executor and passes it to the constructor of <code>ModeExecutorBase</code>.</li><li><code>[3]</code>: We define an enum for the states we want to run through.</li><li><code>[4]</code>: <code>onActivate</code> gets called when the executor becomes active. At this point we can start to run through our states. How you do this is up to you, in this example a method <code>runState</code> is used to execute the next state.</li><li><code>[5]</code>: On switching to a state we call an asynchronous method from <code>ModeExecutorBase</code> to start the desired mode: <code>run</code>, <code>takeoff</code>, <code>rtl</code>, and so on. These methods are passed a function that is called on completion; the callback provides a <code>Result</code> argument that tells you whether the operation succeeded or not. The callback runs the next state on success.</li><li><code>[6]</code>: We use the <code>scheduleMode()</code> method to start the executor&#39;s &quot;owned mode&quot;, following the same pattern as the other state handlers.</li></ul><h3 id="setpoint-types" tabindex="-1">Setpoint Types <a class="header-anchor" href="#setpoint-types" aria-label="Permalink to &quot;Setpoint Types&quot;">​</a></h3><p>A mode can choose its setpoint type(s) it wants to use to control the vehicle. The used types also define the compatibility with different vehicle types.</p><p>The following sections provide a list of supported setpoint types:</p><ul><li><a href="#go-to-setpoint-gotosetpointtype">GotoSetpointType</a>: Smooth position and (optionally) heading control</li><li><a href="#direct-actuator-control-setpoint-directactuatorssetpointtype">DirectActuatorsSetpointType</a>: Direct control of motors and flight surface servo setpoints</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The other setpoint types are currently experimental, and can be found in: <a href="https://github.com/Auterion/px4-ros2-interface-lib/tree/main/px4_ros2_cpp/include/px4_ros2/control/setpoint_types/experimental" target="_blank" rel="noreferrer">px4_ros2/control/setpoint_types/experimental</a>.</p><p>You can add your own setpoint types by adding a class that inherits from <code>px4_ros2::SetpointBase</code>, sets the configuration flags according to what the setpoint requires, and then publishes any topic containing a setpoint.</p></div><h4 id="go-to-setpoint-gotosetpointtype" tabindex="-1">Go-to Setpoint (GotoSetpointType) <a class="header-anchor" href="#go-to-setpoint-gotosetpointtype" aria-label="Permalink to &quot;Go-to Setpoint (GotoSetpointType)&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This setpoint type is currently only supported for multicopters.</p></div><p>Smoothly control position and (optionally) heading setpoints with the <a href="https://github.com/Auterion/px4-ros2-interface-lib/blob/main/px4_ros2_cpp/include/px4_ros2/control/setpoint_types/goto.hpp" target="_blank" rel="noreferrer">px4_ros2::GotoSetpointType</a> setpoint type. The setpoint type is streamed to FMU based position and heading smoothers formulated with time-optimal, maximum-jerk trajectories, with velocity and acceleration constraints.</p><p>The most trivial use is simply inputting a 3D position into the update method:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Eigen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Vector3f target_position_m{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_goto_setpoint-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target_position_m);</span></span></code></pre></div><p>In this case, heading will remain <em>uncontrolled</em>. To additionally control heading, specify it as the second input argument:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Eigen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Vector3f target_position_m{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> heading_rad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_goto_setpoint-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target_position_m,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heading_rad);</span></span></code></pre></div><p>An additional feature of the go-to setpoint is dynamic control on the underlying smoothers&#39; speed limits (i.e. maximum horizontal and vertical translational velocities as well as heading rate). If, as above, left unspecified, the smoothers will default to the vehicle&#39;s default maximums (typically set to the physical limitations). The smoothers will <em>only</em> decrease speed limits, never increase.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_goto_setpoint-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target_position_m,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heading_rad,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  max_horizontal_velocity_m_s,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  max_vertical_velocity_m_s,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  max_heading_rate_rad_s);</span></span></code></pre></div><p>All arguments in the update method except the position are templated as <code>std::optional&lt;float&gt;</code>, meaning that if one desires constraining the heading rate, but not the translating velocities, this is possible using a <code>std::nullopt</code>:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_goto_setpoint-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target_position_m,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  heading_rad,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::nullopt,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::nullopt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  max_heading_rate_rad_s);</span></span></code></pre></div><h4 id="direct-actuator-control-setpoint-directactuatorssetpointtype" tabindex="-1">Direct Actuator Control Setpoint (DirectActuatorsSetpointType) <a class="header-anchor" href="#direct-actuator-control-setpoint-directactuatorssetpointtype" aria-label="Permalink to &quot;Direct Actuator Control Setpoint (DirectActuatorsSetpointType)&quot;">​</a></h4><p>Actuators can be directly controlled using the <a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1DirectActuatorsSetpointType.html" target="_blank" rel="noreferrer">px4_ros2::DirectActuatorsSetpointType</a> setpoint type. Motors and servos can be set independently. Be aware that the assignment is vehicle and setup-specific. For example to control a quadrotor, you need to set the first 4 motors according to its <a href="./../concept/control_allocation.html">output configuration</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you want to control an actuator that does not control the vehicle&#39;s motion, but for example a payload servo, see <a href="#controlling-an-independent-actuator-servo">below</a>.</p></div><h3 id="controlling-an-independent-actuator-servo" tabindex="-1">Controlling an Independent Actuator/Servo <a class="header-anchor" href="#controlling-an-independent-actuator-servo" aria-label="Permalink to &quot;Controlling an Independent Actuator/Servo&quot;">​</a></h3><p>If you want to control an independent actuator (a servo), follow these steps:</p><ol><li><a href="./../payloads/generic_actuator_control.html#generic-actuator-control-with-mavlink">Configure the output</a></li><li>Create an instance of <a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1PeripheralActuatorControls.html" target="_blank" rel="noreferrer">px4_ros2::PeripheralActuatorControls</a> in the constructor of your mode.</li><li>Call the <code>set()</code> method to control the actuator(s). This can be done independently of any active setpoints.</li></ol><h3 id="telemetry" tabindex="-1">Telemetry <a class="header-anchor" href="#telemetry" aria-label="Permalink to &quot;Telemetry&quot;">​</a></h3><p>You can access PX4 telemetry topics directly via the following classes:</p><ul><li><a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1OdometryGlobalPosition.html" target="_blank" rel="noreferrer">OdometryGlobalPosition</a>: Global position</li><li><a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1OdometryLocalPosition.html" target="_blank" rel="noreferrer">OdometryLocalPosition</a>: Local position, velocity, acceleration, and heading</li><li><a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1OdometryAttitude.html" target="_blank" rel="noreferrer">OdometryAttitude</a>: Vehicle attitude</li></ul><p>For example, you can query the vehicle&#39;s current position estimate as follows:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::OdometryLocalPosition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _vehicle_local_position;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get vehicle&#39;s last local position</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_vehicle_local_position-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">positionNed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check last horizontal position is valid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_vehicle_local_position-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">positionXYValid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>These topics provide a wrapper around the internal PX4 topics, allowing the library to maintain compatibility if the internal topics change. Check <a href="https://github.com/Auterion/px4-ros2-interface-lib/tree/main/px4_ros2_cpp/include/px4_ros2/odometry" target="_blank" rel="noreferrer">px4_ros2/odometry</a> for new topics, and of course you can use any ROS 2 topic published from PX4.</p></div><h3 id="failsafes-and-mode-requirements" tabindex="-1">Failsafes and Mode Requirements <a class="header-anchor" href="#failsafes-and-mode-requirements" aria-label="Permalink to &quot;Failsafes and Mode Requirements&quot;">​</a></h3><p>Each mode has a set of requirement flags. These are generally automatically set, depending on which objects are used within the context of a mode. For example when adding manual control input with the code below the requirement flag for manual control gets set:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_manual_control_input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4_ros2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ManualControlInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Specifically, setting a flag has the following consequences in PX4, if the condition is not met:</p><ul><li>arming is not allowed, while the mode is selected</li><li>when already armed, the mode cannot be selected</li><li>when armed and the mode is selected, the relevant failsafe is triggered (e.g. RC loss for the manual control requirement). Check the <a href="./../config/safety.html">safety page</a> for how to configure failsafe behavior. A failsafe is also triggered when the mode crashes or becomes unresponsive while it is selected.</li></ul><p>This is the corresponding flow diagram for the manual control flag:</p><p><img src="`+p+'" alt="Mode requirements diagram"></p><p>It is possible to manually update any mode requirement after the mode is registered. For example to add home position as requirement:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modeRequirements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().home_position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>The full list of flags can be found in <a href="https://github.com/Auterion/px4-ros2-interface-lib/blob/main/px4_ros2_cpp/include/px4_ros2/common/requirement_flags.hpp" target="_blank" rel="noreferrer">requirement_flags.hpp</a>.</p><h4 id="deferring-failsafes" tabindex="-1">Deferring Failsafes <a class="header-anchor" href="#deferring-failsafes" aria-label="Permalink to &quot;Deferring Failsafes&quot;">​</a></h4><p>A mode or mode executor can temporarily defer non-essential failsafes by calling the method <a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1ModeExecutorBase.html#a16ec5be6ebe70e1d0625bf696c3e29ae" target="_blank" rel="noreferrer"><code>deferFailsafesSync()</code></a>. To get notified when a failsafe would be triggered, override the method <a href="https://auterion.github.io/px4-ros2-interface-lib/classpx4__ros2_1_1ModeExecutorBase.html#ad80a234c8cb2f4c186fa2b7bffd1a1dd" target="_blank" rel="noreferrer"><code>void onFailsafeDeferred()</code></a>.</p><p>Check the <a href="https://github.com/Auterion/px4-ros2-interface-lib/blob/main/px4_ros2_cpp/test/integration/overrides.cpp" target="_blank" rel="noreferrer">integration test</a> for an example.</p><h3 id="assigning-a-mode-to-an-rc-switch-or-joystick-action" tabindex="-1">Assigning a Mode to an RC Switch or Joystick Action <a class="header-anchor" href="#assigning-a-mode-to-an-rc-switch-or-joystick-action" aria-label="Permalink to &quot;Assigning a Mode to an RC Switch or Joystick Action&quot;">​</a></h3><p>External modes can be assigned to <a href="./../config/flight_mode.html">RC switches</a> or joystick actions. When assigning a mode to an RC switch, you need to know the index (because the parameter metadata does not contain the dynamic mode name). Use <code>commander status</code> while the mode is running to get that information.</p><p>For example:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   INFO  [commander] External Mode 1: nav_state: 23, name: My Manual Mode</span></span></code></pre></div><p>means you would select <strong>External Mode 1</strong> in QGC:</p><p><img src="'+l+'" alt="QGC Mode Assignment"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>PX4 ensures a given mode is always assigned to the same index by storing a hash of the mode name. This makes it independent of startup ordering in case of multiple external modes.</p></div><h3 id="replacing-an-internal-mode" tabindex="-1">Replacing an Internal Mode <a class="header-anchor" href="#replacing-an-internal-mode" aria-label="Permalink to &quot;Replacing an Internal Mode&quot;">​</a></h3><p>An external mode can replace an existing internal mode, such as <a href="./../flight_modes/return.html">Return</a> mode (RTL). By doing so, whenever RTL gets selected (through the user or a failsafe situation), the external mode is used instead of the internal one. The internal one is only used as a fallback when the external one becomes unresponsive or crashes.</p><p>The replacement mode can be set in the settings of the <code>ModeBase</code> constructor:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Settings{kName, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModeBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::kModeIDRtl}</span></span></code></pre></div>',91))])}const x=o(g,[["render",E]]);export{v as __pageData,x as default};
