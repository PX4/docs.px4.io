import{_ as r,a as p,b as d,c}from"./chunks/qgc_setup_summary_airframe_firmware.mlA6F8dN.js";import{_ as u}from"./chunks/qgc_goto.BIYIp9sq.js";import{_ as k,c as m,a8 as l,G as i,w as s,B as h,o as g,j as a,a as o}from"./chunks/framework.BDnHobkS.js";const w=JSON.parse('{"title":"构建 PX4 软件","description":"","frontmatter":{},"headers":[],"relativePath":"zh/dev_setup/building_px4.md","filePath":"zh/dev_setup/building_px4.md"}'),b={name:"zh/dev_setup/building_px4.md"};function f(F,e,v,y,_,C){const t=h("tab"),n=h("tabs");return g(),m("div",null,[e[4]||(e[4]=l('<h1 id="构建-px4-软件" tabindex="-1">构建 PX4 软件 <a class="header-anchor" href="#构建-px4-软件" aria-label="Permalink to &quot;构建 PX4 软件&quot;">​</a></h1><p>无论对于模拟器还是硬件目标设备，PX4固件可以在控制台或者IDE中从源码构建</p><p>You need to build PX4 in order to use <a href="./../simulation/">simulators</a>, or if you want to modify PX4 and create a custom build. If you just want to try out PX4 on real hardware then <a href="./../config/firmware.html">load the prebuilt binaries</a> using QGroundControl (there is no need to follow these instructions).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Before following these instructions you must first install the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a> for your host operating system and target hardware. If you have any problems after following these steps see the <a href="#troubleshooting">Troubleshooting</a> section below.</p></div><h2 id="下载-px4-源代码" tabindex="-1">下载 PX4 源代码 <a class="header-anchor" href="#下载-px4-源代码" aria-label="Permalink to &quot;下载 PX4 源代码&quot;">​</a></h2><p>The PX4 source code is stored on Github in the <a href="https://github.com/PX4/PX4-Autopilot" target="_blank" rel="noreferrer">PX4/PX4-Autopilot</a> repository.</p><p>To get the <em>very latest</em> (<code>main</code> branch) version onto your computer, enter the following command into a terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><p>Note that you may already have done this when installing the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is all you need to do in order to get the latest code. If needed you can also <a href="./../contribute/git_examples.html#get-a-specific-release">get the source code specific to a particular release</a>. <a href="./../contribute/git_examples.html">GIT Examples</a> provides a lot more information working with releases and contributing to PX4.</p></div><h2 id="初次构建-使用模拟器" tabindex="-1">初次构建（使用模拟器） <a class="header-anchor" href="#初次构建-使用模拟器" aria-label="Permalink to &quot;初次构建（使用模拟器）&quot;">​</a></h2><p>首先我们要用控制台环境来构建一个模拟器目标 这使我们能够在转移到真正的硬件和 IDE 之前验证系统设置。</p><p>Navigate into the <strong>PX4-Autopilot</strong> directory. Depending on your operating system you will have installed either <a href="./../sim_gazebo_gz/">Gazebo SITL</a> or <a href="./../sim_gazebo_classic/">Gazebo Classic SITL</a> (if you don&#39;t know which you can try both).</p>',13)),i(n,null,{default:s(()=>[i(t,{name:"Gazebo"},{default:s(()=>e[0]||(e[0]=[a("p",null,[o("Start "),a("a",{href:"./../sim_gazebo_gz/"},"Gazebo SITL"),o(" using the following command:")],-1),a("div",{class:"language-sh vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"sh"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gz_x500")])])])],-1)])),_:1}),i(t,{name:"Gazebo-Classic"},{default:s(()=>e[1]||(e[1]=[a("p",null,[o("Start "),a("a",{href:"./../sim_gazebo_gz/"},"Gazebo SITL"),o(" using the following command:")],-1),a("div",{class:"language-sh vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"sh"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"make"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," px4_sitl"),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," gazebo-classic")])])])],-1)])),_:1})]),_:1}),e[5]||(e[5]=l('<p>这将显示 PX4 控制台：</p><p><img src="'+r+'" alt="PX4 Console"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You may need to start <em>QGroundControl</em> before proceeding, as the default PX4 configuration requires a ground control connection before takeoff. This can be <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html" target="_blank" rel="noreferrer">downloaded from here</a>.</p></div><p>可以通过键入以下命令（如上方控制台中所示）来控制飞行器。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commander</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> takeoff</span></span></code></pre></div><p>该机体将起飞，您将在模拟器UI中看到：</p>',6)),i(n,null,{default:s(()=>[i(t,{name:"Gazebo"},{default:s(()=>e[2]||(e[2]=[a("p",null,[a("img",{src:p,alt:"Gazebo UI with vehicle taking off"})],-1)])),_:1}),i(t,{name:"Gazebo-Classic"},{default:s(()=>e[3]||(e[3]=[a("p",null,[a("img",{src:d,alt:"Gazebo Classic UI with vehicle taking off"})],-1)])),_:1})]),_:1}),e[6]||(e[6]=l('<p>The drone can be landed by typing <code>commander land</code> and the whole simulation can be stopped by doing <strong>CTRL+C</strong> (or by entering <code>shutdown</code>).</p><p>与地面站一起飞模拟器更接近飞机的实际运行。 在飞机飞行时（Takeoff飞行模式），单击地图上的某个位置并启用滑块。 这将重新定位飞机。</p><p><img src="'+u+`" alt="QGroundControl GoTo"></p><h2 id="基于nuttx-pixhawk-的飞控板" tabindex="-1">基于NuttX / Pixhawk 的飞控板 <a class="header-anchor" href="#基于nuttx-pixhawk-的飞控板" aria-label="Permalink to &quot;基于NuttX / Pixhawk 的飞控板&quot;">​</a></h2><h3 id="为nuttx构建" tabindex="-1">为NuttX构建 <a class="header-anchor" href="#为nuttx构建" aria-label="Permalink to &quot;为NuttX构建&quot;">​</a></h3><p>To build for NuttX- or Pixhawk- based boards, navigate into the <strong>PX4-Autopilot</strong> directory and then call <code>make</code> with the build target for your board.</p><p>For example, to build for <a href="./../flight_controller/pixhawk4.html">Pixhawk 4</a> hardware you could use the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span></span></code></pre></div><p>运行成功后将输出类似结果：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> written</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[954/954] Creating /home/youruser/src/PX4-Autopilot/build/px4_fmu-v4_default/px4_fmu-v4_default.px4</span></span></code></pre></div><p>The first part of the build target <code>px4_fmu-v4</code> indicates the target flight controller hardware for the firmware. The suffix, in this case <code>_default</code>, indicates a firmware <em>configuration</em>, such as supporting or omitting particular features.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>_default</code> suffix is optional. For example, <code>make px4_fmu-v5</code> and <code>px4_fmu-v5_default</code> result in the same firmware.</p></div><p>The following list shows the build commands for the <a href="./../flight_controller/autopilot_pixhawk_standard.html">Pixhawk standard</a> boards:</p><ul><li><p><a href="./../flight_controller/pixhawk6x-rt.html">Holybro Pixhawk 6X-RT (FMUv6X)</a>: <code>make px4_fmu-v6xrt_default</code></p></li><li><p><a href="./../flight_controller/pixhawk6x.html">Holybro Pixhawk 6X (FMUv6X)</a>: <code>make px4_fmu-v6x_default</code></p></li><li><p><a href="./../flight_controller/pixhawk6c.html">Holybro Pixhawk 6C (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></p></li><li><p><a href="./../flight_controller/pixhawk6c_mini.html">Holybro Pixhawk 6C Mini (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></p></li><li><p><a href="./../flight_controller/holybro_pix32_v6.html">Holybro Pix32 v6 (FMUv6C)</a>: <code>make px4_fmu-v6c_default</code></p></li><li><p><a href="./../flight_controller/pixhawk5x.html">Holybro Pixhawk 5X (FMUv5X)</a>: <code>make px4_fmu-v5x_default</code></p></li><li><p><a href="./../flight_controller/pixhawk4.html">Pixhawk 4 (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/pixhawk4_mini.html">Pixhawk 4 Mini (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/cuav_v5_plus.html">CUAV V5+ (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/cuav_v5_nano.html">CUAV V5 nano (FMUv5)</a>: <code>make px4_fmu-v5_default</code></p></li><li><p><a href="./../flight_controller/pixracer.html">Pixracer (FMUv4)</a>: <code>make px4_fmu-v4_default</code></p></li><li><p><a href="./../flight_controller/pixhawk3_pro.html">Pixhawk 3 Pro</a>: <code>make px4_fmu-v4pro_default</code></p></li><li><p><a href="./../flight_controller/pixhawk_mini.html">Pixhawk Mini</a>: <code>make px4_fmu-v3_default</code></p></li><li><p><a href="./../flight_controller/pixhawk-2.html">Pixhawk 2 (Cube Black) (FMUv3)</a>: <code>make px4_fmu-v3_default</code></p></li><li><p><a href="./../flight_controller/mro_pixhawk.html">mRo Pixhawk (FMUv3)</a>: <code>make px4_fmu-v3_default</code> (supports 2MB Flash)</p></li><li><p><a href="./../flight_controller/holybro_pix32.html">Holybro pix32 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p></li><li><p><a href="./../flight_controller/pixfalcon.html">Pixfalcon (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p></li><li><p><a href="./../flight_controller/dropix.html">Dropix (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p></li><li><p><a href="./../flight_controller/pixhawk.html">Pixhawk 1 (FMUv2)</a>: <code>make px4_fmu-v2_default</code></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>must</strong> use a supported version of GCC to build this board (e.g. the same as used by <a href="./../test_and_ci/docker.html">CI/docker</a>) or remove modules from the build. Building with an unsupported GCC may fail, as PX4 is close to the board&#39;s 1MB flash limit.</p></div></li></ul><p>:::</p><ul><li>Pixhawk 1 with 2 MB flash: <code>make px4_fmu-v3_default</code></li></ul><p>Build commands for non-Pixhawk NuttX fight controllers (and for all other-boards) are provided in the documentation for the individual <a href="./../flight_controller/">flight controller boards</a>.</p><h3 id="将固件烧录到飞控板" tabindex="-1">将固件烧录到飞控板 <a class="header-anchor" href="#将固件烧录到飞控板" aria-label="Permalink to &quot;将固件烧录到飞控板&quot;">​</a></h3><p>Append <code>upload</code> to the make commands to upload the compiled binary to the autopilot hardware via USB. 例如</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v4_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><p>运行成功后将有以下输出：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Erase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Verify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [====================] 100.0%</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rebooting.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[100%] Built target upload</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is not supported when developing on WSL2. See <a href="./../dev_setup/dev_env_windows_wsl.html#flash-a-flight-control-board"> Windows Development Environment (WSL2-Based) &gt; Flash a Control Board</a>.</p></div><h2 id="其他飞控板" tabindex="-1">其他飞控板 <a class="header-anchor" href="#其他飞控板" aria-label="Permalink to &quot;其他飞控板&quot;">​</a></h2><p>Build commands for other boards are given the <a href="./../flight_controller/">board-specific flight controller pages</a> (usually under a heading <em>Building Firmware</em>).</p><p>您还可以使用以下命令列出所有配置目标：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div><h2 id="用图形界面-ide-编译" tabindex="-1">用图形界面 IDE 编译 <a class="header-anchor" href="#用图形界面-ide-编译" aria-label="Permalink to &quot;用图形界面 IDE 编译&quot;">​</a></h2><p><a href="./../dev_setup/vscode.html">VSCode</a> is the officially supported (and recommended) IDE for PX4 development. It is easy to set up and can be used to compile PX4 for both simulation and hardware environments.</p><h2 id="故障处理" tabindex="-1">故障处理 <a class="header-anchor" href="#故障处理" aria-label="Permalink to &quot;故障处理&quot;">​</a></h2><h3 id="常规构建错误" tabindex="-1">常规构建错误 <a class="header-anchor" href="#常规构建错误" aria-label="Permalink to &quot;常规构建错误&quot;">​</a></h3><p>许多构建问题是由不匹配的子模块或未完全清理的构建环境引起的。 Updating the submodules and doing a <code>distclean</code> can fix these kinds of errors:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> distclean</span></span></code></pre></div><h3 id="闪存溢出了-xxx-字节" tabindex="-1">闪存溢出了 XXX 字节 <a class="header-anchor" href="#闪存溢出了-xxx-字节" aria-label="Permalink to &quot;闪存溢出了 XXX 字节&quot;">​</a></h3><p>The <code>region &#39;flash&#39; overflowed by XXXX bytes</code> error indicates that the firmware is too large for the target hardware platform. This is common for <code>make px4_fmu-v2_default</code> builds, where the flash size is limited to 1MB.</p><p>If you&#39;re building the <em>vanilla</em> master branch, the most likely cause is using an unsupported version of GCC. In this case, install the version specified in the <a href="./../dev_setup/dev_env.html">Developer Toolchain</a> instructions.</p><p>如果在构建自己的分支，您可能已将固件大小增加到超过1MB的限制。 在这种情况下，您需要从构建中删除您不需要的任何驱动程序/模块。</p><h3 id="macos-打开文件过多错误" tabindex="-1">macOS：打开文件过多错误 <a class="header-anchor" href="#macos-打开文件过多错误" aria-label="Permalink to &quot;macOS：打开文件过多错误&quot;">​</a></h3><p>MacOS 默认允许在所有正在运行的进程中最多打开256个文件。 PX4构建系统打开大量文件，因此您可能会超出此数量。</p><p>The build toolchain will then report <code>Too many open files</code> for many files, as shown below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/Cellar/gcc-arm-none-eabi/20171218/bin/../lib/gcc/arm-none-eabi/7.2.1/../../../../arm-none-eabi/bin/ld:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NuttX/nuttx/fs/libfs.a:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Too</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> many</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span></span></code></pre></div><p>解决方案是增加允许打开文件的最大数量（例如增加到300）。 You can do this in the macOS <em>Terminal</em> for each session:</p><ul><li><p>Run this script <a href="https://github.com/PX4/PX4-Autopilot/blob/main/Tools/mac_set_ulimit.sh" target="_blank" rel="noreferrer">Tools/mac_set_ulimit.sh</a>, or</p></li><li><p>运行这个命令:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span></code></pre></div></li></ul><h3 id="macos-catalina-运行cmake时出现问题" tabindex="-1">macOS Catalina：运行cmake时出现问题 <a class="header-anchor" href="#macos-catalina-运行cmake时出现问题" aria-label="Permalink to &quot;macOS Catalina：运行cmake时出现问题&quot;">​</a></h3><p>As of macOS Catalina 10.15.1 there may be problems when trying to build the simulator with <em>cmake</em>. 如果您在这个平台上遇到构建问题，请尝试在终端中运行以下命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcode-select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/include/</span></span></code></pre></div><h3 id="ubuntu-18-04-涉及arm-none-eabi-gcc的编译错误" tabindex="-1">Ubuntu 18.04：涉及arm_none_eabi_gcc的编译错误 <a class="header-anchor" href="#ubuntu-18-04-涉及arm-none-eabi-gcc的编译错误" aria-label="Permalink to &quot;Ubuntu 18.04：涉及arm_none_eabi_gcc的编译错误&quot;">​</a></h3><p>Build issues related to <code>arm_none_eabi_gcc</code>may be due to a broken g++ toolchain installation. 您可以通过检查缺少的依赖项来验证这一点：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>缺少依赖项的 bash 输出示例：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span></span></code></pre></div><p>This can be resolved by removing and <a href="https://askubuntu.com/questions/1243252/how-to-install-arm-none-eabi-gdb-on-ubuntu-20-04-lts-focal-fossa" target="_blank" rel="noreferrer">reinstalling the compiler</a>.</p><h3 id="ubuntu-18-04-visual-studio-code-无法监视此大型工作区中的文件更改" tabindex="-1">Ubuntu 18.04：Visual Studio Code 无法监视此大型工作区中的文件更改 <a class="header-anchor" href="#ubuntu-18-04-visual-studio-code-无法监视此大型工作区中的文件更改" aria-label="Permalink to &quot;Ubuntu 18.04：Visual Studio Code 无法监视此大型工作区中的文件更改&quot;">​</a></h3><p>See <a href="./../dev_setup/vscode.html#troubleshooting">Visual Studio Code IDE (VSCode) &gt; Troubleshooting</a>.</p><h3 id="导入python软件包失败" tabindex="-1">导入Python软件包失败 <a class="header-anchor" href="#导入python软件包失败" aria-label="Permalink to &quot;导入Python软件包失败&quot;">​</a></h3><p>&quot;Failed to import&quot; errors when running the <code>make px4_sitl jmavsim</code> command indicates that some Python packages are not installed (where expected).</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> named</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jinja2&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">您可能需要使用以下方式进行安装:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span></span></code></pre></div><p>如果您已经安装了这些依赖关系，这可能是因为计算机上存在多个 Python 版本（例如 Python 2.7.16 和 Python 3.8.3），并且该模块不存在于构建工具链使用的版本中。</p><p>您应该能够按照所示明确安装依赖项来解决此问题。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyserial</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numpy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pandas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jinja2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyyaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyros-genmsg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packaging</span></span></code></pre></div><h2 id="px4-创建生成目标" tabindex="-1">PX4 创建生成目标 <a class="header-anchor" href="#px4-创建生成目标" aria-label="Permalink to &quot;PX4 创建生成目标&quot;">​</a></h2><p>The previous sections showed how you can call <em>make</em> to build a number of different targets, start simulators, use IDEs etc. This section shows how <em>make</em> options are constructed and how to find the available choices.</p><p>The full syntax to call <em>make</em> with a particular configuration and initialization file is:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [VENDOR_][MODEL][_VARIANT] [VIEWER_MODEL_DEBUGGER_WORLD]</span></span></code></pre></div><p><strong>VENDOR_MODEL_VARIANT</strong>: (also known as <code>CONFIGURATION_TARGET</code>)</p><ul><li><strong>VENDOR:</strong> The manufacturer of the board: <code>px4</code>, <code>aerotenna</code>, <code>airmind</code>, <code>atlflight</code>, <code>auav</code>, <code>beaglebone</code>, <code>intel</code>, <code>nxp</code>, etc. The vendor name for Pixhawk series boards is <code>px4</code>.</li><li><strong>MODEL:</strong> The <em>board model</em> &quot;model&quot;: <code>sitl</code>, <code>fmu-v2</code>, <code>fmu-v3</code>, <code>fmu-v4</code>, <code>fmu-v5</code>, <code>navio2</code>, etc.</li><li><strong>VARIANT:</strong> Indicates particular configurations: e.g. <code>bootloader</code>, <code>cyphal</code>, which contain components that are not present in the <code>default</code> configuration. Most commonly this is <code>default</code>, and may be omitted.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can get a list of <em>all</em> available <code>CONFIGURATION_TARGET</code> options using the command below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_config_targets</span></span></code></pre></div></div><p><strong>VIEWER_MODEL_DEBUGGER_WORLD:</strong></p><ul><li><p><strong>VIEWER:</strong> This is the simulator (&quot;viewer&quot;) to launch and connect: <code>gz</code>, <code>gazebo</code>, <code>jmavsim</code>, <code>none</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>none</code> can be used if you want to launch PX4 and wait for a simulator (jmavsim, Gazebo, Gazebo Classic, or some other simulator). For example, <code>make px4_sitl none_iris</code> launches PX4 without a simulator (but with the iris airframe).</p></div></li></ul><p>:::</p><ul><li><p><strong>MODEL:</strong> The <em>vehicle</em> model to use (e.g. <code>iris</code> (<em>default</em>), <code>rover</code>, <code>tailsitter</code>, etc), which will be loaded by the simulator. The environment variable <code>PX4_SIM_MODEL</code> will be set to the selected model, which is then used in the <a href="./../simulation/#startup-scripts">startup script</a> to select appropriate parameters.</p></li><li><p><strong>DEBUGGER:</strong> Debugger to use: <code>none</code> (<em>default</em>), <code>ide</code>, <code>gdb</code>, <code>lldb</code>, <code>ddd</code>, <code>valgrind</code>, <code>callgrind</code>. For more information see <a href="./../debug/simulation_debugging.html">Simulation Debugging</a>.</p></li><li><p><strong>WORLD:</strong> (Gazebo Classic only). Set the world (<a href="https://github.com/PX4/PX4-SITL_gazebo-classic/tree/main/worlds" target="_blank" rel="noreferrer">PX4-Autopilot/Tools/simulation/gazebo-classic/sitl_gazebo-classic/worlds</a>) that is loaded. Default is <a href="https://github.com/PX4/PX4-SITL_gazebo-classic/blob/main/worlds/empty.world" target="_blank" rel="noreferrer">empty.world</a>. For more information see <a href="./../sim_gazebo_classic/#loading-a-specific-world">Gazebo Classic &gt; Loading a Specific World</a>.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can get a list of <em>all</em> available <code>VIEWER_MODEL_DEBUGGER_WORLD</code> options using the command below:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_vmd_make_targets</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>Most of the values in the <code>CONFIGURATION_TARGET</code> and <code>VIEWER_MODEL_DEBUGGER</code> have defaults, and are hence optional. For example, <code>gazebo-classic</code> is equivalent to <code>gazebo-classic_iris</code> or <code>gazebo-classic_iris_none</code>.</li><li>如果要在其他两个设置之间指定默认值，可以使用三个下划线。 For example, <code>gazebo-classic___gdb</code> is equivalent to <code>gazebo-classic_iris_gdb</code>.</li><li>You can use a <code>none</code> value for <code>VIEWER_MODEL_DEBUGGER</code> to start PX4 and wait for a simulator. For example start PX4 using <code>make px4_sitl_default none</code> and jMAVSim using <code>./Tools/simulation/jmavsim/jmavsim_run.sh -l</code>.</li></ul></div><p>The <code>VENDOR_MODEL_VARIANT</code> options map to particular <em>px4board</em> configuration files in the PX4 source tree under the <a href="https://github.com/PX4/PX4-Autopilot/tree/main/boards" target="_blank" rel="noreferrer">/boards</a> directory. Specifically <code>VENDOR_MODEL_VARIANT</code> maps to a configuration file <strong>boards/VENDOR/MODEL/VARIANT.px4board</strong> (e.g. <code>px4_fmu-v5_default</code> corresponds to <a href="https://github.com/PX4/PX4-Autopilot/blob/main/boards/px4/fmu-v5/default.px4board" target="_blank" rel="noreferrer">boards/px4/fmu-v5/default.px4board</a>).</p><p>其他 make 目标在相关章节中讨论：</p><ul><li><code>bloaty_compare_master</code>: <a href="./../debug/binary_size_profiling.html">Binary Size Profiling</a></li><li>...</li></ul><h2 id="firmware-version-git-tags" tabindex="-1">Firmware Version &amp; Git Tags <a class="header-anchor" href="#firmware-version-git-tags" aria-label="Permalink to &quot;Firmware Version &amp; Git Tags&quot;">​</a></h2><p>The <em>PX4 Firmware Version</em> and <em>Custom Firmware Version</em> are published using the MAVLink <a href="https://mavlink.io/en/messages/common.html#AUTOPILOT_VERSION" target="_blank" rel="noreferrer">AUTOPILOT_VERSION</a> message, and displayed in the <em>QGroundControl</em> <strong>Setup &gt; Summary</strong> airframe panel:</p><p><img src="`+c+'" alt="Firmware info"></p><p>These are extracted at build time from the active <em>git tag</em> for your repo tree. The git tag should be formatted as <code>&lt;PX4-version&gt;-&lt;vendor-version&gt;</code> (e.g. the tag in the image above was set to <code>v1.8.1-2.22.1</code>).</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you use a different git tag format, versions information may not be displayed properly.</p></div>',81))])}const P=k(b,[["render",f]]);export{w as __pageData,P as default};
