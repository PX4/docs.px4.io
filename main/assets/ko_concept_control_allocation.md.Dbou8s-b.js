import{_ as t,a}from"./chunks/control_allocation_pipeline.BoExmcYK.js";import{_ as i,c as o,a8 as r,o as n}from"./chunks/framework.BDnHobkS.js";const g=JSON.parse('{"title":"Control Allocation (Mixing)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/concept/control_allocation.md","filePath":"ko/concept/control_allocation.md"}'),s={name:"ko/concept/control_allocation.md"};function l(h,e,p,c,d,u){return n(),o("div",null,e[0]||(e[0]=[r('<h1 id="control-allocation-mixing" tabindex="-1">Control Allocation (Mixing) <a class="header-anchor" href="#control-allocation-mixing" aria-label="Permalink to &quot;Control Allocation (Mixing)&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Control allocation replaces the legacy mixing approach used in PX4 v1.13 and earlier. For PX4 v1.13 documentation see: <a href="https://docs.px4.io/v1.13/en/concept/mixing.html" target="_blank" rel="noreferrer">Mixing &amp; Actuators</a>, <a href="https://docs.px4.io/v1.13/en/concept/geometry_files.html" target="_blank" rel="noreferrer">Geometry Files</a> and <a href="https://docs.px4.io/v1.13/en/dev_airframes/adding_a_new_frame.html" target="_blank" rel="noreferrer">Adding a New Airframe Configuration</a>.</p></div><p>PX4 takes desired torque and thrust commands from the core controllers and translates them to actuator commands which control motors or servos.</p><p>The translation depends on the physical geometry of the airframe. For example, given a torque command to &quot;turn right&quot; (say):</p><ul><li>A plane with one servo per aileron will command one of servo high and the other low.</li><li>A multicopter will yaw right by changing the speed of all motors.</li></ul><p>PX4 separates this translation logic, which is referred to as &quot;mixing&quot; from the attitude/rate controller. This ensures that the core controllers do not require special handling for each airframe geometry, and greatly improves reusability.</p><p>In addition, PX4 abstracts the mapping of output functions to specific hardware outputs. This means that any motor or servo can be assigned to almost any physical output.</p><p><img src="'+t+'" alt="Mixing Overview"></p><h2 id="actuator-control-pipeline" tabindex="-1">Actuator Control Pipeline <a class="header-anchor" href="#actuator-control-pipeline" aria-label="Permalink to &quot;Actuator Control Pipeline&quot;">​</a></h2><p>Overview of the mixing pipeline in terms of modules and uORB topics (press to show full-screen):</p><p><img src="'+a+`" alt="Pipeline Overview"></p><p>참고:</p><ul><li>The rate controller outputs torque and thrust setpoints</li><li>the <code>control_allocator</code> module: <ul><li>handles different geometries based on configuration parameters</li><li>does the mixing</li><li>handles motor failures</li><li>publishes the motor and servo control signals</li><li>publishes the servo trims separately so they can be added as an offset when <a href="./../config/actuators.html#actuator-testing">testing actuators</a> (using the test sliders).</li></ul></li><li>the output drivers: <ul><li>handle the hardware initialization and update</li><li>use a shared library <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/lib/mixer_module/" target="_blank" rel="noreferrer">src/libs/mixer_module</a>. The driver defines a parameter prefix, e.g. <code>PWM_MAIN</code> that the library then uses for configuration. Its main task is to select from the input topics and assign the right data to the outputs based on the user set <code>&lt;param_prefix&gt;_FUNCx</code> parameter values. For example if <code>PWM_MAIN_FUNC3</code> is set to <strong>Motor 2</strong>, the 3rd output is set to the 2nd motor from <code>actuator_motors</code>.</li><li>output functions are defined under <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/lib/mixer_module/output_functions.yaml" target="_blank" rel="noreferrer">src/lib/mixer_module/output_functions.yaml</a>.</li></ul></li><li>if you want to control an output from MAVLink, set the relevant output function to <strong>Offboard Actuator Set x</strong>, and then send the <a href="https://mavlink.io/en/messages/common.html#MAV_CMD_DO_SET_ACTUATOR" target="_blank" rel="noreferrer">MAV_CMD_DO_SET_ACTUATOR</a> MAVLink command.</li></ul><h2 id="adding-a-new-geometry-or-output-function" tabindex="-1">Adding a new Geometry or Output Function <a class="header-anchor" href="#adding-a-new-geometry-or-output-function" aria-label="Permalink to &quot;Adding a new Geometry or Output Function&quot;">​</a></h2><p>See <a href="https://github.com/PX4/PX4-Autopilot/commit/5cdb6fbd8e1352dcb94bd58918da405f8ff930d7" target="_blank" rel="noreferrer">this commit</a> for how to add a new geometry. The QGC UI will then automatically show the right configuration UI when <a href="./../advanced_config/parameter_reference.html#CA_AIRFRAME">CA_AIRFRAME</a> is set to the new geometry.</p><p><a href="https://github.com/PX4/PX4-Autopilot/commit/a65533b46986e32254b64b7c92469afb8178e370" target="_blank" rel="noreferrer">This commit</a> shows how to add a new output function. Any uORB topic can be subscribed and assigned to a function.</p><p>Note that parameters for control allocation are defined in <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/control_allocator/module.yaml" target="_blank" rel="noreferrer">src/modules/control_allocator/module.yaml</a> The schema for this file is <a href="https://github.com/PX4/PX4-Autopilot/blob/main/validation/module_schema.yaml#L440=" target="_blank" rel="noreferrer">here</a> (in particular, search for the key <code>mixer:</code></p><h2 id="setting-the-default-frame-geometry" tabindex="-1">Setting the Default Frame Geometry <a class="header-anchor" href="#setting-the-default-frame-geometry" aria-label="Permalink to &quot;Setting the Default Frame Geometry&quot;">​</a></h2><p>When <a href="./../dev_airframes/adding_a_new_frame.html">adding a new frame configuration</a>, set the appropriate <a href="./../advanced_config/parameter_reference.html#CA_AIRFRAME">CA_AIRFRAME</a> and other default mixer values for the geometry.</p><p>You can see this, for example, in the airframe configuration file <a href="https://github.com/PX4/PX4-Autopilot/blob/main/ROMFS/px4fmu_common/init.d/airframes/13200_generic_vtol_tailsitter" target="_blank" rel="noreferrer">13200_generic_vtol_tailsitter</a></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA_AIRFRAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA_ROTOR_COUNT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA_ROTOR0_KM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -0.05</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA_ROTOR0_PY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><h2 id="setting-up-geometry-and-outputs" tabindex="-1">Setting up Geometry and Outputs <a class="header-anchor" href="#setting-up-geometry-and-outputs" aria-label="Permalink to &quot;Setting up Geometry and Outputs&quot;">​</a></h2><p>The broad geometry and default parameters for a vehicle are set (from the frame configuration file) when selecting the airframe in QGroundControl: <a href="./../config/airframe.html">Basic Configuration &gt; Airframe</a>.</p><p>The geometry parameters and output mapping for the specific frame and flight controller hardware are then configured using the QGroundControl <strong>Actuators</strong> setup screen: <a href="./../config/actuators.html">Basic Configuration &gt; Actuator Configuration and Testing</a>.</p>`,24)]))}const k=i(s,[["render",l]]);export{g as __pageData,k as default};
