import{_ as t}from"./chunks/ekf2_ev_delay_tuning.DPyJAJWg.js";import{_ as o,c as a,a8 as i,o as r}from"./chunks/framework.BDnHobkS.js";const f=JSON.parse('{"title":"Visual Inertial Odometry (VIO)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/computer_vision/visual_inertial_odometry.md","filePath":"zh/computer_vision/visual_inertial_odometry.md"}'),n={name:"zh/computer_vision/visual_inertial_odometry.md"};function s(l,e,d,h,c,m){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="visual-inertial-odometry-vio" tabindex="-1">Visual Inertial Odometry (VIO) <a class="header-anchor" href="#visual-inertial-odometry-vio" aria-label="Permalink to &quot;Visual Inertial Odometry (VIO)&quot;">​</a></h1><p><em>Visual Inertial Odometry</em> (VIO) is a <a href="./../computer_vision/">computer vision</a> technique used for estimating the 3D <em>pose</em> (local position and orientation) and <em>velocity</em> of a moving vehicle relative to a <em>local</em> starting position. 它通常用于在GPS不存在或不可靠的情况下（例如室内或在桥下飞行时）给载具导航。</p><p>VIO uses <a href="https://en.wikipedia.org/wiki/Visual_odometry" target="_blank" rel="noreferrer">Visual Odometry</a> to estimate vehicle <em>pose</em> from camera images, combined with inertial measurements from the vehicle IMU (to correct for errors associated with rapid vehicle movement resulting in poor image capture).</p><p>This topic gives guidance on configuring PX4 and a companion computer for a VIO setup.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The suggested setup uses ROS for routing VIO information to PX4. However, PX4 itself does not care about the source of messages, provided they are provided via the appropriate <a href="./../ros/external_position_estimation.html#px4-mavlink-integration">MAVLink Interface</a>.</p></div><h2 id="suggested-setup" tabindex="-1">Suggested Setup <a class="header-anchor" href="#suggested-setup" aria-label="Permalink to &quot;Suggested Setup&quot;">​</a></h2><p>A hardware and software setup for VIO is suggested in the sections below as an illustration of how to interface a VIO system with PX4. It makes use of an off-the-shelf tracking camera and a companion computer running ROS. ROS is used to read odometry information from the camera and supply it to PX4.</p><p>An example of a suitable tracking camera is the <a href="./../peripherals/camera_t265_vio.html">Intel® RealSense™ Tracking Camera T265</a>.</p><h3 id="相机安装" tabindex="-1">相机安装 <a class="header-anchor" href="#相机安装" aria-label="Permalink to &quot;相机安装&quot;">​</a></h3><p>将相机连接到机载计算机并将其安装到机架上：</p><ul><li>尽可能使镜头朝下安装相机（默认）。</li><li>Cameras are typically very sensitive to vibration; a soft mounting is recommended (e.g. using vibration isolation foam).</li></ul><h3 id="companion-setup" tabindex="-1">Companion Setup <a class="header-anchor" href="#companion-setup" aria-label="Permalink to &quot;Companion Setup&quot;">​</a></h3><p>To setup ROS and PX4:</p><ul><li><p>On the companion computer, install and configure <a href="./../ros/mavros_installation.html">MAVROS</a>.</p></li><li><p>Implement and run a ROS node to read data from the camera and publish the VIO odometry using MAVROS.</p><ul><li>See the <a href="#vio_ros_node">VIO ROS node</a> section below for details of the requirements for this node.</li></ul></li><li><p>Follow the instructions <a href="#ekf2_tuning">below</a> for tuning the PX4 EKF2 estimator.</p></li><li><p>验证与飞控的连接。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can use the <em>QGroundControl</em> <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/analyze_view/mavlink_inspector.html" target="_blank" rel="noreferrer">MAVLink Inspector</a> to verify that you&#39;re getting <code>ODOMETRY</code> or <code>VISION_POSITION_ESTIMATE</code> messages (or check for <code>HEARTBEAT</code> messages that have the component id 197 (<code>MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY</code>)).</p></div></li></ul><p>:::</p><ul><li><a href="#verify_estimate">Verify that VIO is set up correctly</a> before your first flight!</li></ul><p><a id="vio_ros_node"></a></p><h3 id="ros-vio-node" tabindex="-1">ROS VIO node <a class="header-anchor" href="#ros-vio-node" aria-label="Permalink to &quot;ROS VIO node&quot;">​</a></h3><p>In this suggested setup, a ROS node is required to</p><ol><li>interface with the chosen camera or sensor hardware,</li><li>produce odometry messages containing the position estimate, which will be sent to PX4 using MAVROS, and</li><li>publish messages to indicate the VIO system status.</li></ol><p>The implementation of the ROS node will be specific to the camera used and will need to be developed to use the interface and drivers appropriate for the camera.</p><p>The odometry messages should be of the type <a href="http://docs.ros.org/en/noetic/api/nav_msgs/html/msg/Odometry.html" target="_blank" rel="noreferrer"><code>nav_msgs/Odometry</code></a> and published to the topic <code>/mavros/odometry/out</code>.</p><p>System status messages of the type <a href="https://github.com/mavlink/mavros/blob/master/mavros_msgs/msg/CompanionProcessStatus.msg" target="_blank" rel="noreferrer"><code>mavros_msgs/CompanionProcessStatus</code></a> should be published to the topic <code>/mavros/companion_process/status</code>. These should identify the component as <code>MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY</code> (197) and indicate the <code>state</code> of the system. Recommended status values are:</p><ul><li><code>MAV_STATE_ACTIVE</code> when the VIO system is functioning as expected,</li><li><code>MAV_STATE_CRITICAL</code> when the VIO system is functioning, but with low confidence, and</li><li><code>MAV_STATE_FLIGHT_TERMINATION</code> when the system has failed or the estimate confidence is unacceptably low.</li></ul><p><a id="ekf2_tuning"></a></p><h3 id="px4-调试" tabindex="-1">PX4 调试 <a class="header-anchor" href="#px4-调试" aria-label="Permalink to &quot;PX4 调试&quot;">​</a></h3><p>将相机连接到机载计算机并将其安装到框架：</p><table tabindex="0"><thead><tr><th>参数</th><th>外部位置估计的设置</th></tr></thead><tbody><tr><td><a href="./../advanced_config/parameter_reference.html#EKF2_EV_CTRL">EKF2_EV_CTRL</a></td><td>Set <em>horizontal position fusion</em>, <em>vertical vision fusion</em>, <em>velocity fusion</em>, and <em>yaw fusion</em> according to your desired fusion model.</td></tr><tr><td><a href="./../advanced_config/parameter_reference.html#EKF2_HGT_REF">EKF2_HGT_REF</a></td><td>Set to <em>Vision</em> to use the vision as the reference sensor for altitude estimation.</td></tr><tr><td><a href="./../advanced_config/parameter_reference.html#EKF2_EV_DELAY">EKF2_EV_DELAY</a></td><td>设置为测量的时间戳和 &quot;实际&quot; 捕获时间之间的差异。 For more information see <a href="#tuning-EKF2_EV_DELAY">below</a>.</td></tr><tr><td><a href="./../advanced_config/parameter_reference.html#EKF2_EV_POS_X">EKF2_EV_POS_X</a>, <a href="./../advanced_config/parameter_reference.html#EKF2_EV_POS_Y">EKF2_EV_POS_Y</a>, <a href="./../advanced_config/parameter_reference.html#EKF2_EV_POS_Z">EKF2_EV_POS_Z</a></td><td>Set the position of the vision sensor with respect to the vehicle&#39;s body frame.</td></tr></tbody></table><p>These can be set in <em>QGroundControl</em> &gt; <strong>Vehicle Setup &gt; Parameters &gt; EKF2</strong> (remember to reboot the flight controller in order for parameter changes to take effect).</p><p>For more detailed/additional information, see: <a href="./../advanced_config/tuning_the_ecl_ekf.html#external-vision-system">ECL/EKF Overview &amp; Tuning &gt; External Vision System</a>.</p><p><a id="tuning-EKF2_EV_DELAY"></a></p><h4 id="调参-ekf2-ev-delay" tabindex="-1">调参 EKF2_EV_DELAY <a class="header-anchor" href="#调参-ekf2-ev-delay" aria-label="Permalink to &quot;调参 EKF2_EV_DELAY&quot;">​</a></h4><p><a href="./../advanced_config/parameter_reference.html#EKF2_EV_DELAY">EKF2_EV_DELAY</a> is the <em>Vision Position Estimator delay relative to IMU measurements</em>. 换而言之，这是视觉系统时间戳和 IMU 时钟（ EKF2 “时基” ）记录的“实际”捕获时间之间的差异。</p><p>Technically this can be set to 0 if there is correct timestamping (not just arrival time) and timesync (e.g. NTP) between MoCap and (for example) ROS computers. 实际应用中，这可能需要进行一些基于经验的调整，因为通信链路中的延迟与具体设置非常相关。 It is rare that a system is set up with an entirely synchronised chain!</p><p>通过检查 IMU 速率和 EV 速率之间的偏移，可以从日志中获取对延迟的粗略估计：</p><p><img src="'+t+'" alt="ekf2evdelay log"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>A plot of external data vs. onboard estimate (as above) can be generated using <a href="./../log/flight_log_analysis.html#flightplot">FlightPlot</a> or similar flight analysis tools.</p></div><p>可以通过更改参数来进一步调整该值，以找到在动态变化中最低的 EKF 更新值。</p><p><a id="verify_estimate"></a></p><h2 id="检查-校验-vio-估计" tabindex="-1">检查/校验 VIO 估计 <a class="header-anchor" href="#检查-校验-vio-估计" aria-label="Permalink to &quot;检查/校验 VIO 估计&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <a href="./../advanced_config/parameter_reference.html#MAV_ODOM_LP">MAV_ODOM_LP</a> parameter mentioned below was removed in PX4 v1.14. This section needs to be updated. </p></div><p>Perform the following checks to verify that VIO is working properly <em>before</em> your first flight:</p><ul><li>Set the PX4 parameter <code>MAV_ODOM_LP</code> to <code>1</code>. PX4 will then stream back the received external pose as MAVLink <a href="https://mavlink.io/en/messages/common.html#ODOMETRY" target="_blank" rel="noreferrer">ODOMETRY</a> messages. You can check these MAVLink messages with the <em>QGroundControl</em> <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/analyze_view/mavlink_inspector.html" target="_blank" rel="noreferrer">MAVLink Inspector</a></li><li>Yaw the vehicle until the quaternion of the <code>ODOMETRY</code> message is very close to a unit quaternion (w=1, x=y=z=0). <ul><li>At this point, the body frame is aligned with the reference frame of the external pose system.</li><li>如果在不使横滚或俯仰的情况下无法使四元数接近单位四元数，则机架可能仍存在俯仰或滚动偏移。 这种情况下不要再检查机架坐标系。</li></ul></li><li>Once aligned, you can pick the vehicle up from the ground and you should see the position&#39;s z coordinate decrease. Moving the vehicle in the forward direction should increase the position&#39;s x coordinate. Moving the vehicle to the right should increase the y coordinate.</li><li>Check that linear velocities in the message are expressed in the <em>FRD</em> body frame reference frame.</li><li>Set the PX4 parameter <code>MAV_ODOM_LP</code> back to 0. PX4 will stop streaming the <code>ODOMETRY</code> message back.</li></ul><p>可以通过更改参数来进一步调整该值，以找到在动态变化中最低的EKF更新值。</p><ol><li><p>Put the vehicle on the ground and start streaming <code>ODOMETRY</code> feedback (as above). 油门杆推到最低并解锁。</p><p>此时，设置为位置控制模式。 如果切换成功，飞控会闪绿灯。 绿灯代表：你的外部位置信息已经注入到飞控中，并且位置控制模式已经切换成功。</p></li><li><p>油门杆放到中间位置（死区），以便无人机保持飞行高度。 提高操控杆会增加参考高度，降低操控杆会降低参考高度。 Similarly, the other stick will change the position over the ground.</p></li><li><p>Increase the value of the throttle stick and the vehicle will take off. Move it back to the middle immediately afterwards.</p></li><li><p>确保无人机可以保持位置。</p></li></ol><h2 id="故障处理" tabindex="-1">故障处理 <a class="header-anchor" href="#故障处理" aria-label="Permalink to &quot;故障处理&quot;">​</a></h2><p>First, make sure MAVROS is able to connect successfully to the flight controller.</p><p>如果连接正确， 常见问题 / 解决方案是：</p><ul><li><p><strong>Problem:</strong> I get drift / flyaways when the drone flies, but not when I carry it around with the props off.</p><ul><li>If using the <a href="./../peripherals/camera_t265_vio.html">T265</a> try soft-mounting it (this camera is very sensitive to high-frequency vibrations).</li></ul></li><li><p><strong>Problem:</strong> I get toilet-bowling when VIO is enabled.</p><ul><li>确保相机的方向与启动文件中的变换匹配。 Use the <em>QGroundControl</em> <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/analyze_view/mavlink_inspector.html" target="_blank" rel="noreferrer">MAVLink Inspector</a> to verify that the velocities in the <code>ODOMETRY</code> message coming from MAVROS are aligned to the FRD coordinate system.</li></ul></li><li><p><strong>Problem:</strong> I want to use vision position to do loop closing, and also want to run GPS.</p><ul><li>这确实很困难，因为当他们不同意时，就会混淆 EKF。 通过测试，仅使用视觉速度更为可靠（如果您想出一种使该配置可靠的方法，请告诉我们）。</li></ul></li></ul><h2 id="开发人员信息" tabindex="-1">开发人员信息 <a class="header-anchor" href="#开发人员信息" aria-label="Permalink to &quot;开发人员信息&quot;">​</a></h2><p>Developers who are interested in extending this implementation (or writing a different one, which might not depend on ROS) should see <a href="./../ros/external_position_estimation.html">Using Vision or Motion Capture Systems for Position Estimation</a>.</p><p>本主题还说明了如何配置 VIO 来配合 LPE 估计器 一起使用（不推荐）。</p><h2 id="更多信息" tabindex="-1">更多信息 <a class="header-anchor" href="#更多信息" aria-label="Permalink to &quot;更多信息&quot;">​</a></h2><ul><li><a href="./../advanced_config/tuning_the_ecl_ekf.html#external-vision-system">ECL/EKF Overview &amp; Tuning &gt; External Vision System</a></li></ul>',54)]))}const g=o(n,[["render",s]]);export{f as __pageData,g as default};
