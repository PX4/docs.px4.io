import{_ as n,a}from"./chunks/kconfig-guiconfig.DrvYOidL.js";import{_ as o,c as i,a8 as t,o as s}from"./chunks/framework.BDnHobkS.js";const g=JSON.parse('{"title":"PX4 Board Configuration (Kconfig)","description":"","frontmatter":{},"headers":[],"relativePath":"ko/hardware/porting_guide_config.md","filePath":"ko/hardware/porting_guide_config.md"}'),c={name:"ko/hardware/porting_guide_config.md"};function r(l,e,d,p,f,u){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="px4-board-configuration-kconfig" tabindex="-1">PX4 Board Configuration (Kconfig) <a class="header-anchor" href="#px4-board-configuration-kconfig" aria-label="Permalink to &quot;PX4 Board Configuration (Kconfig)&quot;">​</a></h1><p>The PX4 Autopilot firmware can be configured at build time to adapt it for specialized applications (fixed-wing, multicopter, rover or more), to enable new and experimental features (such as Cyphal) or to save flash &amp; RAM usage by disabling some drivers and subsystems. This configuration is handled through <em>Kconfig</em>, which is the same <a href="./../hardware/porting_guide_nuttx.html#nuttx-menuconfig-setup">configuration system used by NuttX</a>.</p><p>The configuration options (often referred as &quot;symbols&quot; by the <em>kconfig</em> language) are defined in <code>Kconfig</code> files under the <strong>/src</strong> directory.</p><h2 id="px4-kconfig-symbol-naming-convention" tabindex="-1">PX4 Kconfig Symbol Naming Convention <a class="header-anchor" href="#px4-kconfig-symbol-naming-convention" aria-label="Permalink to &quot;PX4 Kconfig Symbol Naming Convention&quot;">​</a></h2><p>By convention, symbols for modules/drivers are named based on the module folder path. For example, the symbol for the ADC driver at <code>src/drivers/adc/board_adc</code> must be named <code>DRIVERS_ADC_BOARD_ADC</code>.</p><p>To add symbols for driver/module specific options, the naming convention is the module name followed by the option name. For example <code>UAVCAN_V1_GNSS_PUBLISHER</code> which is an option <code>GNSS_PUBLISHER</code> for the <code>UAVCAN_V1</code> module. The options have to be guarded behind an <code>if</code> statement to ensure that the options are only visible when the module itself is enabled.</p><p>Full example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>menuconfig DRIVERS_UAVCAN_V1</span></span>
<span class="line"><span>    bool &quot;UAVCANv1&quot;</span></span>
<span class="line"><span>    default n</span></span>
<span class="line"><span>    ---help---</span></span>
<span class="line"><span>        Enable support for UAVCANv1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if DRIVERS_UAVCAN_V1</span></span>
<span class="line"><span>    config UAVCAN_V1_GNSS_PUBLISHER</span></span>
<span class="line"><span>        bool &quot;GNSS Publisher&quot;</span></span>
<span class="line"><span>        default n</span></span>
<span class="line"><span>endif #DRIVERS_UAVCAN_V1</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Builds will silently ignore any missing or miss-spelled modules in the <code>*.px4board</code> configuration file.</p></div><h2 id="px4-kconfig-label-inheritance" tabindex="-1">PX4 Kconfig Label Inheritance <a class="header-anchor" href="#px4-kconfig-label-inheritance" aria-label="Permalink to &quot;PX4 Kconfig Label Inheritance&quot;">​</a></h2><p>Each PX4 board must have a <code>default.px4board</code> configuration and can have an optional <code>bootloader.px4board configuration</code>. However you can add also separate configurations under a different label e.g. <code>cyphal.px4board</code>. Note that by default the configuration of <code>cyphal.px4board</code> inherits all settings set in <code>default.px4board</code>. When changing the <code>cyphal.px4board</code> it only stores the delta of the Kconfig keys that are different compared to <code>default.px4board</code>, this is useful to simplify configurations management</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>When modifying a Kconfig key in <code>default.px4board</code> it will be modified in all derivative configurations of the same board that had the same config as well.</p></div><h2 id="px4-menuconfig-setup" tabindex="-1">PX4 Menuconfig Setup <a class="header-anchor" href="#px4-menuconfig-setup" aria-label="Permalink to &quot;PX4 Menuconfig Setup&quot;">​</a></h2><p>The <a href="https://pypi.org/project/kconfiglib/#menuconfig-interfaces" target="_blank" rel="noreferrer">menuconfig</a> tool is used to modify the PX4 board configuration, adding/removing modules, drivers, and other features.</p><p>There are command line and GUI variants, both of which can be launched using the PX4 build shortcuts:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make px4_fmu-v5_default boardconfig</span></span>
<span class="line"><span>make px4_fmu-v5_default boardguiconfig</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><em>Kconfiglib</em> and <em>menuconfig</em> come with the <em>kconfiglib</em> python package, which is installed by the normal <a href="https://github.com/PX4/PX4-Autopilot/blob/main/Tools/setup/ubuntu.sh" target="_blank" rel="noreferrer">ubuntu.sh</a> installation script. If <em>kconfiglib</em> is not installed, you can do so using the command: <code>pip3 install kconfiglib</code></p></div><p>The command line and GUI interfaces are shown below.</p><h3 id="menuconfig-command-line-interface" tabindex="-1">menuconfig Command Line Interface <a class="header-anchor" href="#menuconfig-command-line-interface" aria-label="Permalink to &quot;menuconfig Command Line Interface&quot;">​</a></h3><p><img src="`+n+'" alt="menuconfig command line interface"></p><h3 id="menuconfig-gui-interface" tabindex="-1">menuconfig GUI Interface <a class="header-anchor" href="#menuconfig-gui-interface" aria-label="Permalink to &quot;menuconfig GUI Interface&quot;">​</a></h3><p><img src="'+a+'" alt="menuconfig GUI interface"></p>',22)]))}const b=o(c,[["render",r]]);export{g as __pageData,b as default};
