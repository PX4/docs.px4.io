import{_ as s}from"./chunks/realtime_debugging.CsJe_UIY.js";import{_ as a,c as i,a8 as t,o}from"./chunks/framework.BDnHobkS.js";const m=JSON.parse('{"title":"Plotting uORB Topic Data in Real Time using PlotJuggler","description":"","frontmatter":{},"headers":[],"relativePath":"en/debug/plotting_realtime_uorb_data.md","filePath":"en/debug/plotting_realtime_uorb_data.md"}'),l={name:"en/debug/plotting_realtime_uorb_data.md"};function n(r,e,h,p,d,c){return o(),i("div",null,e[0]||(e[0]=[t('<h1 id="plotting-uorb-topic-data-in-real-time-using-plotjuggler" tabindex="-1">Plotting uORB Topic Data in Real Time using PlotJuggler <a class="header-anchor" href="#plotting-uorb-topic-data-in-real-time-using-plotjuggler" aria-label="Permalink to &quot;Plotting uORB Topic Data in Real Time using PlotJuggler&quot;">​</a></h1><p>This topic shows how you can graph the &quot;live&quot; values of <a href="./../msg_docs/">uORB topics</a> (in real time) using <a href="./../log/flight_log_analysis.html#plotjuggler">PlotJuggler</a> and the <em>uXRCE-DDS Agent</em>.</p><p>This technique uses PX4 <a href="./../middleware/uxrce_dds.html">uXRCE-DDS</a> middleware to export uORB topics as ROS2 topics, which can then be read and plotted by PlotJuggler as they change (PlotJuggler cannot directly read uORB topics, but the values of the corresponding ROS 2 topics are the same).</p><p>The video below demonstrates this for a simulated vehicle — the approach works equally well on real hardware.</p><p><video src="'+s+`" width="720" controls></video></p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>Follow the <a href="./../ros2/user_guide.html#installation-setup">ROS 2 Installation &amp; Setup</a> instructions in the <em>ROS2 user guide</em> to install:</p><ul><li><p>ROS 2</p></li><li><p><a href="./../ros2/user_guide.html#setup-micro-xrce-dds-agent-client">Micro XRCE-DDS Agent</a></p></li><li><p><a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a>: PX4/ROS2 shared message definitions.</p></li><li><p>PX4 source code and build the simulator.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you&#39;re using real hardware instead of the simulator, you will only need PX4 source code if you need to change the set of topics that are published to ROS 2 (only a subset of uORB topics are published by default).</p></div></li></ul><p>You will also need to install:</p><ul><li><p><a href="https://github.com/facontidavide/PlotJuggler" target="_blank" rel="noreferrer">PlotJuggler for ROS2</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Use the Debian packages (the snap files are not supported).</p></div></li></ul><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>First we need to build a ROS 2 workspace that includes the <code>px4_msgs</code> that correspond to the PX4 build to be monitored, and then launch PlotJuggler from within that workspace. This allows ROS 2 and PlotJuggler to interpret the messages. If you&#39;re using unmodified PX4, the definitions from <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a> can be used.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is the same process as covered in <a href="./../ros2/user_guide.html#build-ros-2-workspace">Build ROS 2 Workspace</a> in <em>ROS 2 Installation &amp; Setup</em>.</p></div><p>Assuming your ROS 2 workspace is named <code>~/ros2_ws/</code>, fetch and build the <code>px4_msgs</code> package in a terminal as shown:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ros2_ws/src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/px4_msgs.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colcon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install/setup.bash</span></span></code></pre></div><p>Then run PlotJuggler by entering the following commands in a terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ros2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plotjuggler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plotjuggler</span></span></code></pre></div><p>To start sending ROS 2 topics from PX4, the uXRCE-DDS <strong>client</strong> has to be running on PX4, and the <code>MicroXRCEAgent</code> has to be running on the same computer as PlotJuggler.</p><h3 id="px4-simulator" tabindex="-1">PX4 Simulator <a class="header-anchor" href="#px4-simulator" aria-label="Permalink to &quot;PX4 Simulator&quot;">​</a></h3><p>Next we&#39;ll start the <a href="./../sim_gazebo_gz/">Gazebo</a> simulator for a quadcopter. Because we&#39;re using a PX4 simulator the client is started automatically, but we will still need to start the agent and connect to the client.</p><p>First open another terminal. Then navigate to the root of the PX4 source code and start the simulator using the following commands:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gz_x500</span></span></code></pre></div><p>Open another terminal and start the <code>MicroXRCEAgent</code> to connect to the the simulator:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MicroXRCEAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>That&#39;s all that should be needed for connecting to the simulator.</p><h3 id="px4-on-hardware" tabindex="-1">PX4 on Hardware <a class="header-anchor" href="#px4-on-hardware" aria-label="Permalink to &quot;PX4 on Hardware&quot;">​</a></h3><p>If you&#39;re working with real hardware you&#39;ll need to explicitly start the client on PX4 and your agent connection command will be slightly different. <a href="./../ros2/user_guide.html#using-flight-controller-hardware">Using flight controller hardware</a> in the <em>ROS 2 User Guide</em> provides links to setup information.</p><h2 id="unavailable-new-messages" tabindex="-1">Unavailable/New Messages <a class="header-anchor" href="#unavailable-new-messages" aria-label="Permalink to &quot;Unavailable/New Messages&quot;">​</a></h2><p>All PX4 message definitions from <code>main</code> are exported to the <a href="https://github.com/PX4/px4_msgs" target="_blank" rel="noreferrer">PX4/px4_msgs</a> repository. These must be imported into your ROS 2 workspace, allowing PlotJuggler to interpret messages from PX4.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Exporting the messages allows ROS 2 and the uXRCE-DDS agent to be independent of PX4, which is why you only need the PX4 source code if you need to build the simulator or modify the messages.</p></div><p>While <code>px4_msgs</code> has messages for all uORB topics in PX4, not all messages in <code>px4_msgs</code> are available to ROS 2/PlotJuggler by default. The set that are available must be built into the client running on PX4. These are defined in <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>.</p><p>The instructions below explain the changes needed to monitor topics that are not available by default.</p><h3 id="missing-topics" tabindex="-1">Missing Topics <a class="header-anchor" href="#missing-topics" aria-label="Permalink to &quot;Missing Topics&quot;">​</a></h3><p>If a normal uORB topic is not available in PlotJuggler you will need to modify the <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a> to include the topic and rebuild PX4.</p><p>If working with real hardware you will need to build and <a href="./../config/firmware.html#installing-px4-main-beta-or-custom-firmware">install</a> custom firmware after changing the YAML file.</p><h3 id="modified-messages" tabindex="-1">Modified Messages <a class="header-anchor" href="#modified-messages" aria-label="Permalink to &quot;Modified Messages&quot;">​</a></h3><p>If you have modified any uORB messages you must update the ROS2 messages used by PlotJuggler.</p><p>You will need to rebuild PX4 with your new messages, and replace the <code>px4_msgs</code> (from the repository) in your workspace with the new ones.</p><p>Assuming that you have already built PX4 in the directory <code>~/PX4-Autopilot/</code>, and that <code>~/ros2_ws</code> is your ROS2 workspace, enter the following commands to copy the messages across and rebuild your workspace:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ros2_ws/src/px4_msgs/msg/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.msg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/PX4-Autopilot/msg/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ros2_ws/src/px4_msgs/msg/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/ros2_ws/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">colcon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="custom-topics" tabindex="-1">Custom Topics <a class="header-anchor" href="#custom-topics" aria-label="Permalink to &quot;Custom Topics&quot;">​</a></h3><p>After defining the topic, follow the instructions above to add the topic to <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/uxrce_dds_client/dds_topics.yaml" target="_blank" rel="noreferrer">dds_topics.yaml</a>, and export the new message into your ROS 2 workspace.</p><h2 id="see-also" tabindex="-1">See also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See also&quot;">​</a></h2><p><a href="./../ros2/user_guide.html">ROS 2 User Guide</a></p>`,44)]))}const k=a(l,[["render",n]]);export{m as __pageData,k as default};
