import{_ as i,a}from"./chunks/vscode_wsl.ZNy0u4g5.js";import{_ as e,c as t,a8 as n,o as l}from"./chunks/framework.BDnHobkS.js";const m=JSON.parse('{"title":"Середовище розробки Windows (засноване на WSL2)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/dev_setup/dev_env_windows_wsl.md","filePath":"uk/dev_setup/dev_env_windows_wsl.md"}'),o={name:"uk/dev_setup/dev_env_windows_wsl.md"};function p(h,s,r,d,c,u){return l(),t("div",null,s[0]||(s[0]=[n('<h1 id="середовище-розробки-windows-засноване-на-wsl2" tabindex="-1">Середовище розробки Windows (засноване на WSL2) <a class="header-anchor" href="#середовище-розробки-windows-засноване-на-wsl2" aria-label="Permalink to &quot;Середовище розробки Windows (засноване на WSL2)&quot;">​</a></h1><p>The following instructions explain how to set up a PX4 development environment on Windows 10 or 11, running on Ubuntu Linux within <a href="https://docs.microsoft.com/en-us/windows/wsl/about" target="_blank" rel="noreferrer">WSL2</a>.</p><p>Це середовище може бути використане для збірки PX4 для:</p><ul><li><a href="./../dev_setup/building_px4.html#nuttx-pixhawk-based-boards">Pixhawk and other NuttX-based hardware</a></li><li><a href="./../sim_gazebo_gz/">Gazebo Simulation</a></li><li><a href="./../sim_gazebo_classic/">Gazebo-Classic Simulation</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This setup is supported by the PX4 dev team. Середовище в теорії має бути здатне збирати будь-яку ціль збірки, яку можна зібрати на Ubuntu. The list above are those targets that are regularly tested.</p></div><h2 id="загальнии-огляд" tabindex="-1">Загальний огляд <a class="header-anchor" href="#загальнии-огляд" aria-label="Permalink to &quot;Загальний огляд&quot;">​</a></h2><p>The <a href="https://docs.microsoft.com/en-us/windows/wsl/about" target="_blank" rel="noreferrer">Windows Subsystem for Linux</a> (<a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions" target="_blank" rel="noreferrer">WSL2</a>) allows users to install and run the <a href="./../dev_setup/dev_env_linux_ubuntu.html">Ubuntu Development Environment</a> on Windows, <em>almost</em> as though we were running it on a Linux computer.</p><p>В цьому середовищі розробники можуть:</p><ul><li>Build any simulator or hardware target supported by <a href="./../dev_setup/dev_env_linux_ubuntu.html">Ubuntu Development Environment</a> in the WSL Shell. (Ubuntu є платформою розробки PX4, яка підтримується та протестована найкраще).</li><li>Debug code in <a href="./dev_env_windows_wsl.html#visual-studio-code-integration">Visual Studio Code</a> running on Windows.</li><li>Monitor a <em>simulation</em> using <em>QGroundControl for Linux</em> running in WSL. QGC для Linux автоматично під&#39;єднується до симуляції.</li></ul><p><em>QGroundControl for Windows</em> is additionally required if you need to:</p><ul><li><a href="#flash-a-flight-control-board">Update firmware</a> on a real vehicle.</li><li>Спостерігати за справжнім засобом. Note that you can also use it to monitor a simulation, but you must manually <a href="#qgroundcontrol-on-windows">connect to the simulation running in WSL</a>.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Connecting to a USB device from within WSL is not supported, so you can&#39;t update firmware using the <a href="./../dev_setup/building_px4.html#uploading-firmware-flashing-the-board"><code>upload</code></a> option when building on the command line, or from <em>QGroundControl for Linux</em>.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The approach is similar to installing PX4 in your <em>own</em> virtual machine, as described in <a href="./../dev_setup/dev_env_windows_vm.html">Windows VM-Hosted Toolchain</a>. Перевага WSL2 полягає в тому, що її віртуальна машина глибоко інтегрована в Windows, керується системою та оптимізована для ефективності.</p></div><h2 id="встановлення" tabindex="-1">Встановлення <a class="header-anchor" href="#встановлення" aria-label="Permalink to &quot;Встановлення&quot;">​</a></h2><h3 id="встановлення-wsl2" tabindex="-1">Встановлення WSL2 <a class="header-anchor" href="#встановлення-wsl2" aria-label="Permalink to &quot;Встановлення WSL2&quot;">​</a></h3><p>Щоб встановити WSL2 з Ubuntu на новій установці Windows 10 або 11:</p><ol><li><p>Переконайтеся, що функція віртуалізації увімкнена в BIOS вашого комп&#39;ютера. Зазвичай її називають &quot;Virtualization Technology&quot;, &quot;Intel VT-x&quot; чи &quot;AMD-V&quot; відповідно.</p></li><li><p>Open <em>cmd.exe</em> as administrator. This can be done by pressing the start key, typing <code>cmd</code>, right-clicking on the <em>Command prompt</em> entry and selecting <strong>Run as administrator</strong>.</p></li><li><p>Виконайте наступні команди для встановлення WSL2 та певної версії Ubuntu:</p><ul><li><p>Версія за замовчуванням (Ubuntu 22.04):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span></code></pre></div></li><li><p>Ubuntu 20.04 (<a href="./../sim_gazebo_classic/">Gazebo-Classic Simulation</a>)</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ubuntu-20.04</span></span></code></pre></div></li><li><p>Ubuntu 22.04 (<a href="./../sim_gazebo_gz/">Gazebo Simulation</a>)</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ubuntu-22.04</span></span></code></pre></div></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can also install<a href="https://www.microsoft.com/store/productId/9MTTCL66CPXJ" target="_blank" rel="noreferrer">Ubuntu 20.04</a> and <a href="https://www.microsoft.com/store/productId/9PN20MSR04DW" target="_blank" rel="noreferrer">Ubuntu 22.04</a> from the store, which allows you to delete the application using the normal Windows Add/Remove settings:</p></div></li></ol><p>:::</p><ol start="4"><li>WSL запитає про ім&#39;я користувача та пароль для встановлення Ubuntu. Запишіть ці облікові дані, оскільки вони знадобляться пізніше!</li></ol><p>Тепер командний рядок є терміналом в нововстановленому середовищі Ubuntu.</p><h3 id="відкриття-оболонки-wsl" tabindex="-1">Відкриття оболонки WSL <a class="header-anchor" href="#відкриття-оболонки-wsl" aria-label="Permalink to &quot;Відкриття оболонки WSL&quot;">​</a></h3><p>Всі операції для встановлення та збірки PX4 повинні бути виконані в оболонці WSL (можна використати ту саму оболонку в якій встановлювалася WSL2 або відкрити нову).</p><p>If you&#39;re using <a href="https://learn.microsoft.com/en-us/windows/terminal/install" target="_blank" rel="noreferrer">Windows Terminal</a> you can open a shell into an installed WSL environment as shown, and exit it by closing the tab.</p><p><img src="'+i+`" alt="Windows Terminal showing how to select a Ubuntu shell"></p><p>Щоб відкрити оболонку WSL за допомогою командного рядка:</p><ol><li><p>Відкрийте командний рядок:</p><ul><li>Press the Windows <strong>Start</strong> key.</li><li>Type <code>cmd</code> and press <strong>Enter</strong> to open the prompt.</li></ul></li><li><p>Щоб запустити WSL і отримати доступ до WSL оболонки, виконайте команду:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">distribution_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Наприклад:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ubuntu</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ubuntu-20.04</span></span></code></pre></div><p>If you only have one version of Ubuntu, you can just use <code>wsl</code>.</p></li></ol><p>Введіть наступні команди, щоб спочатку закрити WSL оболонку, а потім завершити WSL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">distribution_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shutdown</span></span></code></pre></div><p>Alternatively, after entering <code>exit</code> you can just close the prompt.</p><h3 id="встановлення-інструментарію-px4" tabindex="-1">Встановлення інструментарію PX4 <a class="header-anchor" href="#встановлення-інструментарію-px4" aria-label="Permalink to &quot;Встановлення інструментарію PX4&quot;">​</a></h3><p>Next we download the PX4 source code within the WSL2 environment, and use the normal <em>Ubuntu installer script</em> to set up the developer environment. This will install the toolchain for Gazebo Classic simulation and Pixhawk/NuttX hardware.</p><p>Щоб встановити інструментарій розробки:</p><ol><li><p><a href="#opening-a-wsl-shell">Open a WSL2 Shell</a> (if it is still open you can use the same one that was used to install WSL2).</p></li><li><p>Execute the command <code>cd ~</code> to switch to the home folder of WSL for the next steps.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is important! Якщо ви працюєте за межами файлової системи WSL, то ви стикнетесь з такими проблемами, як дуже повільне виконання та помилки прав доступу/дозволів.</p></div></li></ol><p>:::</p><ol start="3"><li><p>Download the PX4 source code using <code>git</code> (which is already installed in WSL2):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The environment setup scripts in the source usually work for recent PX4 releases. If working with an older version of PX4 you may need to <a href="./../contribute/git_examples.html#get-a-specific-release">get the source code specific to your release</a>.</p></div></li></ol><p>:::</p><ol start="4"><li><p>Run the <strong>ubuntu.sh</strong> installer script and acknowledge any prompts as the script progresses:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./PX4-Autopilot/Tools/setup/ubuntu.sh</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This installs tools to build PX4 for Pixhawk and either Gazebo or Gazebo Classic targets:</p><ul><li>You can use the <code>--no-nuttx</code> and <code>--no-sim-tools</code> options to omit the NuttX and/or simulation tools.</li><li>Other Linux build targets are untested (you can try these by entering the appropriate commands in <a href="./../dev_setup/dev_env_linux_ubuntu.html">Ubuntu Development Environment</a> into the WSL shell).</li></ul></div></li></ol><p>:::</p><ol start="5"><li><p>Перезапустіть &quot;комп&#39;ютер WSL&quot; після завершення скрипту (вийти з оболонки, вимкнути WSL та перезапустити WSL):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shutdown</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wsl</span></span></code></pre></div></li><li><p>Перейдіть в репозиторій PX4 в домашній директорії WSL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/PX4-Autopilot</span></span></code></pre></div></li><li><p>Зберіть ціль PX4 SITL та перевірте середовище:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_sitl</span></span></code></pre></div></li></ol><p>For more build options see <a href="./../dev_setup/building_px4.html">Building PX4 Software</a>.</p><h2 id="інтеграція-з-visual-studio-code" tabindex="-1">Інтеграція з Visual Studio Code <a class="header-anchor" href="#інтеграція-з-visual-studio-code" aria-label="Permalink to &quot;Інтеграція з Visual Studio Code&quot;">​</a></h2><p>VS Code на Windows добре інтегрований з WSL.</p><p>Для налаштування інтеграції:</p><ol><li><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Download</a> and install Visual Studio Code (VS Code) on Windows,</p></li><li><p>Open <em>VS Code</em>.</p></li><li><p>Install the extension called <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" target="_blank" rel="noreferrer">Remote - WSL</a> (marketplace)</p></li><li><p><a href="#opening-a-wsl-shell">Open a WSL shell</a></p></li><li><p>У WSL оболонці перейдіть у директорію PX4:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/PX4-Autopilot</span></span></code></pre></div></li><li><p>В оболонці WSL запустіть VS Code:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>Це відкриє IDE повністю інтегроване в WSL оболонку.</p><p>Переконайтеся, що ви завжди відкриваєте PX4 репозиторій у режимі Remote WSL.</p></li><li><p>Next time you want to develop WSL2 you can very easily open it again in Remote WSL mode by selecting <strong>Open Recent</strong> (as shown below). Це запустить WSL.</p><p><img src="`+a+`" alt=""></p><p>Зверніть увагу, що IP-адреса віртуальної машини WSL буде змінена, так що ви не зможете контролювати симуляцію з QGC для Windows (ви все ще можете використовувати QGC для Linux)</p></li></ol><h2 id="qgroundcontrol" tabindex="-1">QGroundControl <a class="header-anchor" href="#qgroundcontrol" aria-label="Permalink to &quot;QGroundControl&quot;">​</a></h2><p>Для підключення до запущеної симуляції, ви можете запустити QGroundControl або в WSL або у Windows. If you need to <a href="#flash-a-flight-control-board">flash a flight control board</a> with new firmware you can only do this from the QGroundControl for Windows.</p><h3 id="qgroundcontrol-у-wsl" tabindex="-1">QGroundControl у WSL <a class="header-anchor" href="#qgroundcontrol-у-wsl" aria-label="Permalink to &quot;QGroundControl у WSL&quot;">​</a></h3><p>Найпростіший спосіб налаштувати та використовувати QGroundControl - це завантажити версію для Linux у WSL.</p><p>Це можна зробити з оболонки WSL.</p><ol><li><p>In a web browser, navigate to the QGC <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html#ubuntu" target="_blank" rel="noreferrer">Ubuntu download section</a></p></li><li><p>Right-click on the <strong>QGroundControl.AppImage</strong> link, and select &quot;Copy link address&quot;. This will be something like _<a href="https://d176td9ibe4jno.cloudfront.net/builds/master/QGroundControl.AppImage_" target="_blank" rel="noreferrer">https://d176td9ibe4jno.cloudfront.net/builds/master/QGroundControl.AppImage_</a></p></li><li><p><a href="#opening-a-wsl-shell">Open a WSL shell</a> and enter the following commands to download the appimage and make it executable (replace the AppImage URL where indicated):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">the_copied_AppImage_UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> QGroundControl.AppImage</span></span></code></pre></div></li><li><p>Запустіть QGroundControl:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./QGroundControl.AppImage</span></span></code></pre></div></li></ol><p>QGroundControl запуститься та автоматично приєднається до запущеної симуляції, що дозволить вам спостерігати та контролювати ваші рухомі засоби.</p><p>Ви не зможете використовувати його для встановлення прошивки PX4, оскільки WSL не надає доступу до послідовних пристроїв.</p><h3 id="qgroundcontrol-on-windows" tabindex="-1">QGroundControl on Windows <a class="header-anchor" href="#qgroundcontrol-on-windows" aria-label="Permalink to &quot;QGroundControl on Windows&quot;">​</a></h3><p>Install <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html#windows" target="_blank" rel="noreferrer">QGroundControl on Windows</a> if you want to be able to update hardware with firmware created within PX4.</p><p>Ці кроки описують, як ви можете під&#39;єднатися до симуляції, яке працює в WSL:</p><ol><li><p><a href="#opening-a-wsl-shell">Open a WSL shell</a></p></li><li><p>Check the IP address of the WSL virtual machine by running the command <code>ip addr | grep eth0</code>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">6:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mtu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1500</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qdisc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> state</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> UP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qlen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.18.46.131/20</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> brd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.18.47.255</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scope</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span></span></code></pre></div><p>Copy the first part of the <code>eth0</code> interface <code>inet</code> address to the clipboard. In this case: <code>172.18.46.131</code>.</p></li><li><p>In QGC go to <strong>Q &gt; Application Settings &gt; Comm Links</strong></p></li><li><p>Add a UDP Link called &quot;WSL&quot; to port <code>18570</code> of the IP address copied above.</p></li><li><p>Збережіть і під&#39;єднайтеся до нього.</p></li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You will have to update the WSL comm link in QGC every time WSL restarts (because it gets a dynamic IP address).</p></div><h2 id="прошивка-плати-керування-польотом" tabindex="-1">Прошивка плати керування польотом <a class="header-anchor" href="#прошивка-плати-керування-польотом" aria-label="Permalink to &quot;Прошивка плати керування польотом&quot;">​</a></h2><p>Flashing a custom built PX4 binary has to be done using <a href="#qgroundcontrol-on-windows">QGroundControl for Windows</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>WSL2 does not natively offer direct access to serial/USB devices like Pixhawk flight controllers connected to your computer. That means you can&#39;t connect QGC running inside WSL2 to a flight controller to install firmware, or use the <code>upload</code> command to <a href="./../dev_setup/building_px4.html#uploading-firmware-flashing-the-board">upload firmware as it is built</a>. Instead you connect <a href="#qgroundcontrol-on-windows">QGroundControl for Windows</a> to PX4 running in WSL2 and to the Flight controller in order to upload the firmware.</p></div><p>Зробіть наступні кроки для прошивки вашого бінарного файлу, зібраного у WSL:</p><ol><li><p>If you haven&#39;t already built the binary in WSL e.g. with a <a href="./dev_env_windows_wsl.html#opening-a-wsl-shell">WSL shell</a> and by running:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Use the correct <code>make</code> target for your board. <code>px4_fmu-v5</code> can be used for a Pixhawk 4 board.</p></div></li></ol><p>:::</p><ol start="2"><li><p>Detach the USB cable of your Pixhawk board from the computer if it was connected.</p></li><li><p>Open QGC and navigate to <strong>Q &gt; Vehicle Setup &gt; Firmware</strong>.</p></li><li><p>Plug your Pixhawk board via USB</p></li><li><p>Once connected select &quot;PX4 Flight Stack&quot;, check <strong>Advanced settings</strong> and choose <em>Custom firmware file ...</em> from the drop down below.</p></li><li><p>Continue and select the firmware binary you just built in WSL.</p><p>У відкритому діалозі знайдіть розташування &quot;Linux&quot; з іконкою пінгвіна на лівій панелі. Зазвичай, вона в самому низу. Choose the file in the path: <code>Ubuntu\\home\\{your WSL user name}\\PX4-Autopilot\\build\\{your build target}\\{your build target}.px4</code></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can add the folder to the favourites to access it quickly next time.</p></div></li></ol><p>:::</p><ol start="7"><li>Почніть прошивку.</li></ol><p>For more information see <a href="./../config/firmware.html#installing-px4-main-beta-or-custom-firmware">Installing PX4 Main, Beta or Custom Firmware (Loading Firmware)</a>.</p><h2 id="усунення-проблем" tabindex="-1">Усунення проблем <a class="header-anchor" href="#усунення-проблем" aria-label="Permalink to &quot;Усунення проблем&quot;">​</a></h2><p>If you have any problems with your setup, check the current <a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noreferrer">Microsoft WSL installation documentation</a>.</p><p>We also recommend that you have the latest Windows GPU drivers installed and also install a recent version of <a href="https://launchpad.net/~kisak/+archive/ubuntu/kisak-mesa" target="_blank" rel="noreferrer">kisak mesa</a> in your Ubuntu environment so that most OpenGL features get emulated:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add-apt-repository</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ppa:kisak/kisak-mesa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span></span></code></pre></div>`,71)]))}const b=e(o,[["render",p]]);export{m as __pageData,b as default};
