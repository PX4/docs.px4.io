import{_ as i,c as s,a8 as a,o as t}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"MCU-Link Debug Probe","description":"","frontmatter":{},"headers":[],"relativePath":"ko/debug/probe_mculink.md","filePath":"ko/debug/probe_mculink.md"}'),n={name:"ko/debug/probe_mculink.md"};function l(o,e,r,p,h,d){return t(),s("div",null,e[0]||(e[0]=[a('<h1 id="mcu-link-debug-probe" tabindex="-1">MCU-Link Debug Probe <a class="header-anchor" href="#mcu-link-debug-probe" aria-label="Permalink to &quot;MCU-Link Debug Probe&quot;">​</a></h1><p>The <a href="https://www.nxp.com/design/design-center/software/development-software/mcuxpresso-software-and-tools-/mcu-link-debug-probe:MCU-LINK" target="_blank" rel="noreferrer">MCU-Link Debug Probe</a> is a cheap, fast and highly capable debug probe that can serve as a stand-alone debug and console communicator whn working with Pixhawk boards.</p><p>주요 기능:</p><ul><li>Just one single USB-C connection for Reset, SWD, SWO, and serial in a very small package!</li><li>Up to 9.6MBit/s SWO connection. Up to 5 MBaud serial. 1.2V to 5V target voltage. USB2 high-speed 480 Mbps connection.</li><li>Driven by NXP LinkServer or pyOCD software with wide device support.</li><li>Much cheaper (&lt;15€) than a Pixhawk Debug Adapter (~20€) with a JLink EDU mini (~55€) or JLink BASE (~400€) while having better hardware specs.</li></ul><p>The <a href="https://holybro.com/products/pixhawk-debug-adapter" target="_blank" rel="noreferrer">Pixhawk Debug Adapter</a> provides an easy way to connect a Pixhawk to an MCU-Link (the probe does not come with an adapter for working with Pixhawk flight controllers).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>These instructions have been tested on: FMUv6X-RT, FMUv6X, FMUv6c, FMUv5X.</p></div><h2 id="debugging-configuration-using-nxp-linkserver" tabindex="-1">Debugging Configuration using NXP LinkServer <a class="header-anchor" href="#debugging-configuration-using-nxp-linkserver" aria-label="Permalink to &quot;Debugging Configuration using NXP LinkServer&quot;">​</a></h2><p>The MCU-Link provides for NXP (FMUv6X-RT) chips the <a href="https://www.nxp.com/design/design-center/software/development-software/mcuxpresso-software-and-tools-/linkserver-for-microcontrollers:LINKERSERVER" target="_blank" rel="noreferrer">LinkServer</a> GDB server:</p><p><a href="https://www.nxp.com/design/design-center/software/development-software/mcuxpresso-software-and-tools-/linkserver-for-microcontrollers:LINKERSERVER#downloads" target="_blank" rel="noreferrer">Download</a> the Linkserver for your operating system and follow the installation instructions.</p><p>On Windows LinkServer gets installed to <code>C:\\NXP\\LinkServer_x.x.x</code> On Linux LinkServer gets installed <code>/usr/local/LinkServer/LinkServer</code></p><p>To flash you can use the <code>LinkServer flash</code> command with target <code>MIMXRT1176xxxxx:MIMXRT1170-EVK-CM7-ONLY</code> for the FMUv6X-RT</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/LinkServer/LinkServer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MIMXRT1176xxxxx:MIMXRT1170-EVK-CM7-ONLY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/px4_fmu-v6xrt_default/px4_fmu-v6xrt_default.elf</span></span></code></pre></div><p>You can launch the GDB server in a new terminal shell:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/local/LinkServer/LinkServer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdbserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MIMXRT1176xxxxx:MIMXRT1170-EVK-CM7-ONLY</span></span></code></pre></div><p>Then connect to port 3333 via GDB:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/px4_fmu-v6xrt_default/px4_fmu-v6xrt_default.elf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;target extended-remote :3333&quot;</span></span></code></pre></div><p>Use GDB to load the binary into the Pixhawk:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span></span></code></pre></div><h2 id="debugging-configuration-using-pyocd" tabindex="-1">Debugging Configuration using pyOCD <a class="header-anchor" href="#debugging-configuration-using-pyocd" aria-label="Permalink to &quot;Debugging Configuration using pyOCD&quot;">​</a></h2><p>The MCU-Link provides the <a href="https://pyocd.io/" target="_blank" rel="noreferrer">GDB server via pyOCD</a>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyocd</span></span></code></pre></div><p>You can launch the GDB server in a new terminal shell:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyocd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mimxrt1170_cm7</span></span></code></pre></div><p>The target needs to be one of:</p><ul><li>FMUv6X-RT: <code>mimxrt1170_cm7</code></li><li>FMUv6X: <code>stm32h743xx</code></li><li>FMUv6C: <code>stm32h743xx</code></li><li>FMUv5X: <code>stm32f767zi</code></li></ul><p>You can then connect to port 3333 via GDB:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arm-none-eabi-gdb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/px4_fmu-v6xrt_default/px4_fmu-v6xrt_default.elf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;target extended-remote :3333&quot;</span></span></code></pre></div><p>Use GDB to load the binary into the Pixhawk:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span></span></code></pre></div>',29)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
