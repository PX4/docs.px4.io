import{_ as s,c as i,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"Parameters & Configurations","description":"","frontmatter":{},"headers":[],"relativePath":"ko/advanced/parameters_and_configurations.md","filePath":"ko/advanced/parameters_and_configurations.md"}'),n={name:"ko/advanced/parameters_and_configurations.md"};function p(l,a,h,r,d,o){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="parameters-configurations" tabindex="-1">Parameters &amp; Configurations <a class="header-anchor" href="#parameters-configurations" aria-label="Permalink to &quot;Parameters &amp; Configurations&quot;">​</a></h1><p>PX4 uses the <em>param subsystem</em> (a flat table of <code>float</code> and <code>int32_t</code> values) and text files (for startup scripts) to store its configuration.</p><p>This section discusses the <em>param</em> subsystem in detail. 매개변수를 나열, 저장 및 로드하는 방법과 매개변수를 정의하고 지상국에서 사용하는 방법을 설명합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./../concept/system_startup.html">System startup</a> and the way that <a href="./../dev_airframes/adding_a_new_frame.html">frame configuration</a> startup scripts work are detailed on other pages.</p></div><h2 id="명령줄-사용법" tabindex="-1">명령줄 사용법 <a class="header-anchor" href="#명령줄-사용법" aria-label="Permalink to &quot;명령줄 사용법&quot;">​</a></h2><p>The PX4 <a href="./../debug/system_console.html">system console</a> offers the <a href="./../modules/modules_command.html#param">param</a> tool, which can be used to set parameters, read their value, save them, and export and restore to/from files.</p><h3 id="매개변수-가져오기-및-설정" tabindex="-1">매개변수 가져오기 및 설정 <a class="header-anchor" href="#매개변수-가져오기-및-설정" aria-label="Permalink to &quot;매개변수 가져오기 및 설정&quot;">​</a></h3><p>The <code>param show</code> command lists all system parameters:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span></span></code></pre></div><p>To be more selective, a partial parameter name with wildcard &quot;*&quot; can be used:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RC_MAP_A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Symbols:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> saved,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unsaved</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [359,498] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [360,499] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_AUX3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [361,500] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RC_MAP_ACRO_SW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [375,514] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 723</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> total,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 532</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> used.</span></span></code></pre></div><p>You can use the <code>-c</code> flag to show all parameters that have changed (from their defaults):</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span></code></pre></div><p>You can use <code>param show-for-airframe</code> to show all parameters that have changed from their defaults for just the current airframe&#39;s definition file (and defaults it imports).</p><h3 id="매개변수-내보내기-및-로드" tabindex="-1">매개변수 내보내기 및 로드 <a class="header-anchor" href="#매개변수-내보내기-및-로드" aria-label="Permalink to &quot;매개변수 내보내기 및 로드&quot;">​</a></h3><p>You can save any parameters that have been <em>changed</em> (that are different from airframe defaults).</p><p>The standard <code>param save</code> command will store the parameters in the current default file:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span></code></pre></div><p>인수가 제공되면, 이 새 위치 대신 매개변수를 저장합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span></code></pre></div><p>There are two different commands to <em>load</em> parameters:</p><ul><li><code>param load</code> first does a full reset of all parameters to their defaults, and then overwrites parameter values with any values stored in the file.</li><li><code>param import</code> just overwrites parameter values with the values from the file and then saves the result (i.e. effectively calls <code>param save</code>).</li></ul><p>The <code>load</code> effectively resets the parameters to the state when the parameters were saved (we say &quot;effectively&quot; because any parameters saved in the file will be updated, but other parameters may have different firmware-defined default values than when the parameters file was created).</p><p>By contrast, <code>import</code> merges the parameters in the file with the current state of the vehicle. 예를 들어, 시스템 설정의 나머지 부분을 덮어쓰지 않고 보정 데이터가 포함된 매개변수 파일을 가져오는 데 사용할 수 있습니다.</p><p>두 경우에 대한 예를 아래에서 설명합니다.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 파일을 저장하고 나면 매개변수 값 초기화</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 추가로 매개변수 값 저장 (불러온다고 해서 자동으로 끝나지는 않음)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 현재 매개변수 값 목록에 저장한 매개변수 값 병합</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /fs/microsd/vtol_param_backup</span></span></code></pre></div><h2 id="매개변수-생성-정의" tabindex="-1">매개변수 생성/정의 <a class="header-anchor" href="#매개변수-생성-정의" aria-label="Permalink to &quot;매개변수 생성/정의&quot;">​</a></h2><p>매개변수 정의에는 두 부분이 있습니다.</p><ul><li><a href="#parameter-metadata">Parameter metadata</a> specifies the default value for each parameter in firmware along with other metadata for presentation (and editing) of parameters in ground control stations and documentation.</li><li><a href="#c-c-api">C/C++ Code</a> that provides access to get and/or subscribe to parameter values from within PX4 modules and drivers.</li></ul><p>메타데이터와 코드를 작성하기 위한 몇 가지 접근 방식을 아래에서 설명합니다. Where possible code should use newer <a href="#yaml-metadata">YAML metadata</a> and <a href="#c-api">C++ API</a> over the older C parameter/code definitions, as these are more flexible and robust.</p><p>Parameter metadata is <a href="#publishing-parameter-metadata-to-a-gcs">compiled into the firmware</a>, and made available to ground stations via the <a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer">MAVLink Component Information service</a>.</p><h3 id="매개변수-이름" tabindex="-1">매개변수 이름 <a class="header-anchor" href="#매개변수-이름" aria-label="Permalink to &quot;매개변수 이름&quot;">​</a></h3><p>매개변수 이름은 ASCII 문자 16자 이하입니다.</p><p>By convention, every parameter in a group should share the same (meaningful) string prefix followed by an underscore, and <code>MC_</code> and <code>FW_</code> are used for parameters related specifically to Multicopter or Fixed-wing systems. 이 관례는 강제 사항은 아닙니다.</p><p>The name must match in both code and <a href="#parameter-metadata">parameter metadata</a> to correctly associate the parameter with its metadata (including default value in Firmware).</p><h3 id="c-c-api" tabindex="-1">C / C++ API <a class="header-anchor" href="#c-c-api" aria-label="Permalink to &quot;C / C++ API&quot;">​</a></h3><p>PX4 모듈 및 드라이버에서 매개변수 사용할 수 있는 C 및 C++ API가 있습니다.</p><p>API 간의 중요한 차이점 중 하나는 C++ 버전이 매개변수 값(예: GCS에서) 변경과 동기화하는 보다 효율적인 표준화 메커니즘이 있다는 것입니다.</p><p>매개변수는 언제든지 다른 값으로 변경될 수 있으므로, 동기화가 중요합니다. Your code should <em>always</em> use the current value from the parameter store. If getting the latest version is not possible, then a reboot will be required after the parameter is changed (set this requirement using the <code>@reboot_required</code> metadata).</p><p>또한, C++ 버전은 유형 안전성이 더 우수하고 메모리 사용량이 적습니다. 단점은 매개변수 이름을 컴파일 타임에 알아야 하는 반면에, C API는 동적으로 생성된 이름을 문자열로 사용할 수 있습니다.</p><h4 id="c-api" tabindex="-1">C++ API <a class="header-anchor" href="#c-api" aria-label="Permalink to &quot;C++ API&quot;">​</a></h4><p>The C++ API provides macros to declare parameters as <em>class attributes</em>. You add some &quot;boilerplate&quot; code to regularly listen for changes in the <a href="./../middleware/uorb.html">uORB Topic</a> associated with <em>any</em> parameter update. 그런 다음, 프레임워크 코드는 매개변수 속성에 영향을 미치는 uORB 메시지 추적을 처리하고 동기화 상태를 유지합니다. 나머지 코드에서는 정의된 매개변수 속성을 사용할 수 있으며, 항상 최신 상태를 유지합니다!</p><p>제일 먼저, 모듈 또는 드라이버의 클래스 헤더에 필요한 필수 헤더를 포함합니다.</p><ul><li><p><strong>px4_platform_common/module_params.h</strong> to get the <code>DEFINE_PARAMETERS</code> macro:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;px4_platform_common/module_params.h&gt;</span></span></code></pre></div></li><li><p><strong>parameter_update.h</strong> to access the uORB <code>parameter_update</code> message:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;uORB/topics/parameter_update.h&gt;</span></span></code></pre></div></li><li><p><strong>Subscription.hpp</strong> for the uORB C++ subscription API:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;uORB/Subscription.hpp&gt;</span></span></code></pre></div></li></ul><p>Derive your class from <code>ModuleParams</code>, and use <code>DEFINE_PARAMETERS</code> to specify a list of parameters and their associated parameter attributes. 매개변수의 이름은 매개변수 메타데이터 정의와 동일하여야 합니다.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : ..., </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModuleParams</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Check for parameter changes and update them if needed.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parameters_update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	DEFINE_PARAMETERS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		(ParamInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SYS_AUTOSTART</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_sys_autostart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /**&lt; example parameter */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		(ParamFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ATT_BIAS_MAX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_att_bias_max</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**&lt; another parameter */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Subscriptions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	uORB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::SubscriptionInterval _parameter_update_sub{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ORB_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parameter_update), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>매개변수 업데이트와 관련된 uORB 메시지를 확인하기 위해 상용구로 cpp 파일을 업데이트합니다.</p><p>Call <code>parameters_update();</code> periodically in code to check if there has been an update:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parameters_update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_parameter_update_sub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		parameter_update_s param_update;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		_parameter_update_sub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">param_update);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// If any parameter updated, call updateParams() to check if</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// this class attributes need updating (and do so).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		updateParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>위의 함수에서 :</p><ul><li><code>_parameter_update_sub.updated()</code> tells us if there is <em>any</em> update to the <code>param_update</code> uORB message (but not what parameter is affected).</li><li>If there has been &quot;some&quot; parameter updated, we copy the update into a <code>parameter_update_s</code> (<code>param_update</code>), to clear the pending update.</li><li>Then we call <code>ModuleParams::updateParams()</code>. This &quot;under the hood&quot; updates all parameter attributes listed in our <code>DEFINE_PARAMETERS</code> list.</li></ul><p>The parameter attributes (<code>_sys_autostart</code> and <code>_att_bias_max</code> in this case) can then be used to represent the parameters, and will be updated whenever the parameter value changes.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="./../modules/module_template.html">Application/Module Template</a> uses the new-style C++ API but does not include <a href="#parameter-metadata">parameter metadata</a>.</p></div><h4 id="c-api-1" tabindex="-1">C API <a class="header-anchor" href="#c-api-1" aria-label="Permalink to &quot;C API&quot;">​</a></h4><p>C API는 모듈과 드라이버 모두에서 사용할 수 있습니다.</p><p>먼저 매개변수 API를 포함합니다.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;parameters/param.h&gt;</span></span></code></pre></div><p>Then retrieve the parameter and assign it to a variable (here <code>my_param</code>), as shown below for <code>PARAM_NAME</code>. The variable <code>my_param</code> can then be used in your module code.</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PARAM_NAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">my_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If <code>PARAM_NAME</code> was declared in parameter metadata then its default value will be set, and the above call to find the parameter should always succeed.</p></div><p><code>param_find()</code> is an &quot;expensive&quot; operation, which returns a handle that can be used by <code>param_get()</code>. If you&#39;re going to read the parameter multiple times, you may cache the handle and use it in <code>param_get()</code> when needed</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Get the handle to the parameter</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">param_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PARAM_INVALID;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_param_handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> param_find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PARAM_NAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Query the value of the parameter when needed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_param_handle, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_param);</span></span></code></pre></div><h3 id="매개변수-메타데이터" tabindex="-1">매개변수 메타데이터 <a class="header-anchor" href="#매개변수-메타데이터" aria-label="Permalink to &quot;매개변수 메타데이터&quot;">​</a></h3><p>PX4는 확장 매개변수 메타데이터 시스템을 사용하여 사용자에게 매개변수를 표시하고 펌웨어의 매개변수들의 기본값을 설정합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Correct metadata is critical for good user experience in a ground station.</p></div><p>Parameter metadata can be stored anywhere in the source tree as either <strong>.c</strong> or <strong>.yaml</strong> parameter definitions (the YAML definition is newer, and more flexible). 일반적으로 연결된 모듈과 함께 저장됩니다.</p><p>The build system extracts the metadata (using <code>make parameters_metadata</code>) to build the <a href="./../advanced_config/parameter_reference.html">parameter reference</a> and the parameter information <a href="#publishing-parameter-metadata-to-a-gcs">used by ground stations</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>After adding a <em>new</em> parameter file you should call <code>make clean</code> before building to generate the new parameters (parameter files are added as part of the <em>cmake</em> configure step, which happens for clean builds and if a cmake file is modified).</p></div><h4 id="yaml-메타데이터" tabindex="-1">YAML 메타데이터 <a class="header-anchor" href="#yaml-메타데이터" aria-label="Permalink to &quot;YAML 메타데이터&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>At time of writing YAML parameter definitions cannot be used in <em>libraries</em>.</p></div><p>YAML meta data is intended as a full replacement for the <strong>.c</strong> definitions. 다중 인스턴스 정의와 같은 새로운 기능과 함께 동일한 메타데이터를 모두 지원합니다.</p><ul><li><p>The YAML parameter metadata schema is here: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/validation/module_schema.yaml" target="_blank" rel="noreferrer">validation/module_schema.yaml</a>.</p></li><li><p>An example of YAML definitions being used can be found in the MAVLink parameter definitions: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/mavlink/module.yaml" target="_blank" rel="noreferrer">/src/modules/mavlink/module.yaml</a>.</p></li><li><p>YAML 파일은 다음을 추가하여 cmake 빌드 시스템에 등록됩니다.</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MODULE_CONFIG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	module.yaml</span></span></code></pre></div><p>to the <code>px4_add_module</code> section of the <code>CMakeLists.txt</code> file of that module.</p></li></ul><h4 id="다중-인스턴스-템플릿-yaml-메타-데이터" tabindex="-1">다중 인스턴스(템플릿) YAML 메타 데이터 <a class="header-anchor" href="#다중-인스턴스-템플릿-yaml-메타-데이터" aria-label="Permalink to &quot;다중 인스턴스(템플릿) YAML 메타 데이터&quot;">​</a></h4><p>Templated parameter definitions are supported in <a href="https://github.com/PX4/PX4-Autopilot/blob/main/validation/module_schema.yaml" target="_blank" rel="noreferrer">YAML parameter definitions</a> (templated parameter code is not supported).</p><p>The YAML allows you to define instance numbers in parameter names, descriptions, etc. using <code>\${i}</code>. 예를 들어 아래는 MY_PARAM_1_RATE, MY_PARAM_2_RATE 등을 생성합니다.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MY_PARAM_\${i}_RATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Maximum rate for instance \${i}</span></span></code></pre></div><p>다음 YAML 정의는 시작과 끝 인덱스를 제공합니다.</p><ul><li><code>num_instances</code> (default 1): Number of instances to generate (&gt;=1)</li><li><code>instance_start</code> (default 0): First instance number. If 0, <code>\${i}</code> expands to [0, N-1]\`.</li></ul><p>For a full example see the MAVLink parameter definitions: <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/mavlink/module.yaml" target="_blank" rel="noreferrer">/src/modules/mavlink/module.yaml</a></p><h4 id="c-매개변수-메타데이터" tabindex="-1">c 매개변수 메타데이터 <a class="header-anchor" href="#c-매개변수-메타데이터" aria-label="Permalink to &quot;c 매개변수 메타데이터&quot;">​</a></h4><p>The legacy approach for defining parameter metadata is in a file with extension <strong>.c</strong> (at time of writing this is the approach most commonly used in the source tree).</p><p>매개변수 메타데이터 섹션은 다음 예와 같습니다.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Pitch P gain</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Pitch proportional gain, i.e. desired angular speed in rad/s for error 1 rad.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @unit 1/s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @min 0.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @max 10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @decimal 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @increment 0.0005</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @reboot_required true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group Multicopter Attitude Control</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PARAM_DEFINE_FLOAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MC_PITCH_P, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Acceleration compensation based on GPS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * velocity.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group Attitude Q estimator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @boolean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PARAM_DEFINE_INT32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ATT_ACC_COMP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The <code>PARAM_DEFINE_*</code> macro at the end specifies the type of parameter (<code>PARAM_DEFINE_FLOAT</code> or <code>PARAM_DEFINE_INT32</code>), the name of the parameter (which must match the name used in code), and the default value in firmware.</p><p>주석 블록의 행은 모두 선택 사항이며, 주로 지상국에서 표시 및 편집 옵션을 제어합니다. The purpose of each line is given below (for more detail see <a href="https://github.com/PX4/PX4-Autopilot/blob/main/validation/module_schema.yaml" target="_blank" rel="noreferrer">module_schema.yaml</a>).</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;title&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * &lt;longer description, can be multi-line&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @unit &lt;the unit, e.g. m for meters&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @min &lt;the minimum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @max &lt;the maximum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @decimal &lt;the minimum sane value. Can be overridden by the user&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @increment &lt;the &quot;ticks&quot; in which this value will increment in the UI&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @reboot_required true &lt;add this if changing the param requires a system restart.&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @boolean &lt;add this for integer parameters that represent a boolean value&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @group &lt;a title for parameters that form a group&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h2 id="gcs에-매개변수-메타데이터-게시" tabindex="-1">GCS에 매개변수 메타데이터 게시 <a class="header-anchor" href="#gcs에-매개변수-메타데이터-게시" aria-label="Permalink to &quot;GCS에 매개변수 메타데이터 게시&quot;">​</a></h2><p>The parameter metadata JSON file is compiled into firmware (or hosted on the Internet), and made available to ground stations via the <a href="https://mavlink.io/en/services/component_information.html" target="_blank" rel="noreferrer">MAVLink Component Metadata service</a>. This ensures that metadata is always up-to-date with the code running on the vehicle.</p><p>This process is the same as for <a href="./../concept/events_interface.html#publishing-event-metadata-to-a-gcs">events metadata</a>. For more information see <a href="./../advanced/px4_metadata.html">PX4 Metadata (Translation &amp; Publication)</a></p><h2 id="추가-정보" tabindex="-1">추가 정보 <a class="header-anchor" href="#추가-정보" aria-label="Permalink to &quot;추가 정보&quot;">​</a></h2><ul><li><a href="./../advanced_config/parameters.html">Finding/Updating Parameters</a></li><li><a href="./../advanced_config/parameter_reference.html">Parameter Reference</a></li><li><a href="https://github.com/PX4/PX4-Autopilot/blob/main/platforms/common/include/px4_platform_common/param.h#L129" target="_blank" rel="noreferrer">Param implementation</a> (information on <code>.get()</code>, <code>.commit()</code>, and other methods)</li></ul>`,93)]))}const m=s(n,[["render",p]]);export{c as __pageData,m as default};
