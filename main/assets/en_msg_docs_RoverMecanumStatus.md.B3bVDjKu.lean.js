import{_ as a,c as i,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const E=JSON.parse('{"title":"RoverMecanumStatus (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"en/msg_docs/RoverMecanumStatus.md","filePath":"en/msg_docs/RoverMecanumStatus.md"}'),n={name:"en/msg_docs/RoverMecanumStatus.md"};function l(p,s,r,h,o,k){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="rovermecanumstatus-uorb-message" tabindex="-1">RoverMecanumStatus (UORB message) <a class="header-anchor" href="#rovermecanumstatus-uorb-message" aria-label="Permalink to &quot;RoverMecanumStatus (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/RoverMecanumStatus.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 measured_forward_speed          # [m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Measured speed in body x direction. Positiv: forwards, Negativ: backwards</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 adjusted_forward_speed_setpoint # [m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Speed setpoint after applying slew rate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 measured_lateral_speed          # [m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Measured speed in body y direction. Positiv: right, Negativ: left</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 adjusted_lateral_speed_setpoint # [m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Speed setpoint after applying slew rate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 measured_yaw_rate  	        # [rad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Measured yaw rate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 clyaw_yaw_rate_setpoint         # [rad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Yaw rate setpoint output by the closed loop yaw controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 adjusted_yaw_rate_setpoint      # [rad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s] Yaw rate setpoint from the closed loop yaw controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 measured_yaw        	        # [rad] Measured yaw</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 adjusted_yaw_setpoint           # [rad] Yaw setpoint after applying slew rate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 pid_yaw_rate_integral  	        # Integral of the PID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the closed loop yaw rate controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 pid_yaw_integral       	        # Integral of the PID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the closed loop yaw controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 pid_forward_throttle_integral   # Integral of the PID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the closed loop forward speed controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 pid_lateral_throttle_integral   # Integral of the PID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the closed loop lateral speed controller</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># TOPICS rover_mecanum_status</span></span></code></pre></div>`,3)]))}const c=a(n,[["render",l]]);export{E as __pageData,c as default};
