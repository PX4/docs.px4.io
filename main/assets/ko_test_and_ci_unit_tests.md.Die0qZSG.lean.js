import{_ as i,c as t,a8 as e,o as a}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"단위 테스트","description":"","frontmatter":{},"headers":[],"relativePath":"ko/test_and_ci/unit_tests.md","filePath":"ko/test_and_ci/unit_tests.md"}'),n={name:"ko/test_and_ci/unit_tests.md"};function l(p,s,h,o,r,d){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="단위-테스트" tabindex="-1">단위 테스트 <a class="header-anchor" href="#단위-테스트" aria-label="Permalink to &quot;단위 테스트&quot;">​</a></h1><p>개발자는 기능 추가, 버그 수정, 리팩토링 등 전 영역에 걸쳐 단위 테스트를 하는 것이 바람직합니다.</p><p>PX4에서는 단위 테스트 작성에 필요한 몇가지 수단을 제공합니다:</p><ol><li>Unit tests with <a href="https://github.com/google/googletest/blob/main/docs/primer.md" target="_blank" rel="noreferrer">Google Test</a> (&quot;GTest&quot;) - tests that have minimal, internal-only dependencies</li><li>GTest로의 기능 시험 - 매개변수와 uORB 메세지에 따른 시험</li><li>SITL 단위 테스트. 완전한 SITL 실행에 필요한 테스트입니다. 이 테스트는 실행하기에 매우 느리거나 디버깅하기 어려운 부분입니다. 따라서 가능하면 GTest를 활용하시는게 좋습니다.</li></ol><h2 id="gtest-단위-테스트-작성" tabindex="-1">GTest 단위 테스트 작성 <a class="header-anchor" href="#gtest-단위-테스트-작성" aria-label="Permalink to &quot;GTest 단위 테스트 작성&quot;">​</a></h2><p><strong>Tip</strong>: In general, if you need access to advanced GTest utilities, data structures from the STL or need to link to <code>parameters</code> or <code>uorb</code> libraries you should use the functional tests instead.</p><p>새 단위 테스트의 작성 절차는 다음과 같습니다:</p><ol><li>단위 테스트는 설치, 실행, 결과 검사 세 부분으로 정리해야 합니다. 각 테스트에서는 매우 극히 일부의 동작을 시험하거나 설정 조건을 시험하기 때문에, 테스트에 실패했을 경우 어떤 부분에서 문제가 있는지 명백하게 드러납니다. 가능하면 이 표준을 따라주십시오.</li><li>Copy and rename the example unit test <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/modules/mc_att_control/AttitudeControl/AttitudeControlTest.cpp" target="_blank" rel="noreferrer">AttitudeControlTest</a> to the directory the code to be tested is in.</li><li>Add the new file to the directory&#39;s <code>CMakeLists.txt</code>. It should look something like <code>px4_add_unit_gtest(SRC MyNewUnitTest.cpp LINKLIBS &lt;library_to_be_tested&gt;)</code></li><li>원하는 시험 기능을 추가하십시오. 특정 테스트를 수행하려면 헤더 파일 추가가 필요하며, 새 테스트 추가(제각각의 이름을 지님), 설정 로직 배치, 시험할 코드 실행, 결과 검증을 기대대로 수행합니다.</li><li>If additional library dependencies are required, they should also be added to the CMakeLists after the <code>LINKLIBS</code> as shown above.</li></ol><p>Tests can be run via <code>make tests</code>, after which you will find the binary in <code>build/px4_sitl_test/unit-MyNewUnit</code>. 디버거에서 바로 실행할 수 있습니다.</p><h2 id="gtest-기능-테스트-작성" tabindex="-1">GTest 기능 테스트 작성 <a class="header-anchor" href="#gtest-기능-테스트-작성" aria-label="Permalink to &quot;GTest 기능 테스트 작성&quot;">​</a></h2><p>GTest 기능 시험은 매개변수, uORB 메세지, 고급 GTest 기능에 따라 테스트할 테스트 단위 또는 구성 요소가 있을 때 활용해야합니다. 게다가, 기능 테스트 과정에서 자체 STL 데이터 구조를 사용할 수 있습니다(플랫폼간 차이에 유의해야 함. 예: maxOS, Linux).</p><p>새 기능 테스트의 작성 절차는 다음과 같습니다:</p><ol><li>보통 (그리고 단위 테스트와 유사한 상황에서), 기능 테스트는 구성, 실행, 결과 검사 세부분으로 정리해야합니다. 각 테스트에서는 매우 극히 일부의 동작을 시험하거나 설정 조건을 시험하기 때문에, 테스트에 실패했을 경우 어떤 부분에서 문제가 있는지 명백하게 드러납니다. 가능하면 이 표준을 따라주십시오.</li><li>Copy and rename the example functional test <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/lib/parameters/ParameterTest.cpp" target="_blank" rel="noreferrer">ParameterTest</a> to the directory the code to be tested is in.</li><li>ParameterTest의 클래스 이름을 시험할 코드를 더 잘 구분할 수 있는 이름으로 변경하십시오.</li><li>Add the new file to the directory&#39;s <code>CMakeLists.txt</code>. It should look something like <code>px4_add_functional_gtest(SRC MyNewFunctionalTest.cpp LINKLIBS &lt;library_to_be_tested&gt;)</code></li><li>원하는 시험 기능을 추가하십시오. 특정 테스트를 수행하려면 헤더 파일 추가가 필요하며, 새 테스트 추가(제각각의 이름을 지님), 설정 로직 배치, 시험할 코드 실행, 결과 검증을 기대대로 수행합니다.</li><li>If additional library dependencies are required, they should also be added to the CMakeLists after the <code>LINKLIBS</code> as shown above.</li></ol><p>Tests can be run via <code>make tests</code>, after which you will find the binary in <code>build/px4_sitl_test/functional-MyNewFunctional</code>. It can be run directly in a debugger, however be careful to only run one test per executable invocation using the <a href="https://github.com/google/googletest/blob/main/docs/advanced.md#running-a-subset-of-the-tests" target="_blank" rel="noreferrer">--gtest_filter=&lt;regex&gt;</a> arguments, as some parts of the uORB and parameter libraries don&#39;t clean themselves up perfectly and may result in undefined behavior if set up multiple times.</p><h2 id="sitl-단위-테스트-작성" tabindex="-1">SITL 단위 테스트 작성 <a class="header-anchor" href="#sitl-단위-테스트-작성" aria-label="Permalink to &quot;SITL 단위 테스트 작성&quot;">​</a></h2><p>특히 비행체 제어 장치의 모든 부분 - 드라이버, 시간, 등을 시험하려면 SITL 단위 테스트를 거쳐야합니다. 이 테스트는 실행이 느리며(새 모듈 별로 1초씩 추가), 디버깅도 어려워, 보통 필요할 때만 테스트를 활용합니다.</p><p>새 SITL 단위 테스트의 작성 절차는 다음과 같습니다:</p><ol><li><p>Examine the sample <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/include/unit_test.h" target="_blank" rel="noreferrer">Unittest-class</a>.</p></li><li><p>Create a new .cpp file within <a href="https://github.com/PX4/PX4-Autopilot/tree/main/src/systemcmds/tests" target="_blank" rel="noreferrer">tests</a> with name <strong>test_[description].cpp</strong>.</p></li><li><p>Within <strong>test_[description].cpp</strong> include the base unittest-class <code>&lt;unit_test.h&gt;</code> and all files required to write a test for the new feature.</p></li><li><p>Within <strong>test_[description].cpp</strong> create a class <code>[Description]Test</code> that inherits from <code>UnitTest</code>.</p></li><li><p>Within <code>[Description]Test</code> class declare the public method <code>virtual bool run_tests()</code>.</p></li><li><p>Within <code>[Description]Test</code> class declare all private methods required to test the feature in question (<code>test1()</code>, <code>test2()</code>,...).</p></li><li><p>Within <strong>test_[description].cpp</strong> implement the <code>run_tests()</code> method where each test[1,2,...] will be run.</p></li><li><p>Within <strong>test_[description].cpp</strong>, implement the various tests.</p></li><li><p>At the bottom within <strong>test_[description].cpp</strong> declare the test.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ut_declare_test_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test_[description], [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]Test)</span></span></code></pre></div><p>서식은 아래와 같습니다:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unit_test.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[new feature].h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]Test : public UnitTest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run_tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run_tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ut_run_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ut_run_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_tests_failed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Description]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ut_[name of one of the unit test functions](...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ut_declare_test_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test_[description], [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]Test)</span></span></code></pre></div><p>Note that <code>ut_[name of one of the unit test functions]</code> corresponds to one of the unittest functions defined within <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/include/unit_test.h" target="_blank" rel="noreferrer">unit_test.h</a>.</p></li><li><p>Within <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/systemcmds/tests/tests_main.h" target="_blank" rel="noreferrer">tests_main.h</a> define the new test:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test_[description](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv[]);</span></span></code></pre></div></li><li><p>Within <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/systemcmds/tests/tests_main.c" target="_blank" rel="noreferrer">tests_main.c</a> add description name, test function and option:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} tests[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[description]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, test_[description], OPTION},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>OPTION</code> can be <code>OPT_NOALLTEST</code>,<code>OPT_NOJIGTEST</code> or <code>0</code> and is considered if within px4 shell one of the two commands are called:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span></span></code></pre></div><p>또는</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jig</span></span></code></pre></div><p>If a test has option <code>OPT_NOALLTEST</code>, then that test will be excluded when calling <code>tests all</code>. The same is true for <code>OPT_NOJITEST</code> when command <code>test jig</code> is called. Option <code>0</code> means that the test is never excluded, which is what most developer want to use.</p></li><li><p>Add the test <code>test_[description].cpp</code> to the <a href="https://github.com/PX4/PX4-Autopilot/blob/main/src/systemcmds/tests/CMakeLists.txt" target="_blank" rel="noreferrer">CMakeLists.txt</a>.</p></li></ol><h2 id="로컬-머신에서의-테스트" tabindex="-1">로컬 머신에서의 테스트 <a class="header-anchor" href="#로컬-머신에서의-테스트" aria-label="Permalink to &quot;로컬 머신에서의 테스트&quot;">​</a></h2><p>GTest 단위 시험, GTest 기능 시험, SITL 단위 시험 전체를 Bash 쉘에서 실행하십시오.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span></span></code></pre></div><p>The individual GTest test binaries are in the <code>build/px4_sitl_test/</code> directory, and can be run directly in most IDEs&#39; debugger.</p><p>테스트 하위 집합만 따로 실행하려면 이 명령에서 ctest 명칭에 대해 정규 표현식을 적용하여 걸러내십시오:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TESTFILTER=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">regex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expressio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>예:</p><ul><li><code>make tests TESTFILTER=unit</code> only run GTest unit tests</li><li><code>make tests TESTFILTER=sitl</code> only run simulation tests</li><li><code>make tests TESTFILTER=Attitude</code> only run the <code>AttitudeControl</code> test</li></ul>`,26)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
