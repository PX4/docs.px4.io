import{_ as i,c as a,a8 as n,o as e}from"./chunks/framework.BDnHobkS.js";const d=JSON.parse('{"title":"VehicleOpticalFlow (повідомлення UORB)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/msg_docs/VehicleOpticalFlow.md","filePath":"uk/msg_docs/VehicleOpticalFlow.md"}'),l={name:"uk/msg_docs/VehicleOpticalFlow.md"};function t(p,s,h,r,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="vehicleopticalflow-повідомлення-uorb" tabindex="-1">VehicleOpticalFlow (повідомлення UORB) <a class="header-anchor" href="#vehicleopticalflow-повідомлення-uorb" aria-label="Permalink to &quot;VehicleOpticalFlow (повідомлення UORB)&quot;">​</a></h1><p>Оптичний потік в кадрі тіла XYZ в одиницях SI.</p><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/VehicleOpticalFlow.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Optical flow in XYZ body frame in SI units.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp               # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 device_id               # unique device ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the sensor that does not change between power cycles</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] pixel_flow          # (radians) accumulated optical flow in radians where a positive value is produced by a RH rotation about the body axis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] delta_angle         # (radians) accumulated gyro radians where a positive value is produced by a RH rotation about the body axis. (NAN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unavailable)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 distance_m             # (meters) Distance to the center of the flow </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NAN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> unavailable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 integration_timespan_us # (microseconds) accumulation timespan in microseconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 quality                  # Average of quality of accumulated frames, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: bad quality, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: maximum quality</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 max_flow_rate          # (radians</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s) Magnitude of maximum angular which the optical flow sensor can measure reliably</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 min_ground_distance    # (meters) Minimum distance from ground at which the optical flow sensor operates reliably</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 max_ground_distance    # (meters) Maximum distance from ground at which the optical flow sensor operates reliably</span></span></code></pre></div>`,4)]))}const E=i(l,[["render",t]]);export{d as __pageData,E as default};
