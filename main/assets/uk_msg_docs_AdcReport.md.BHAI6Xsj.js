import{_ as i,c as a,a8 as t,o as e}from"./chunks/framework.BDnHobkS.js";const E=JSON.parse('{"title":"AdcReport (повідомлення UORB)","description":"","frontmatter":{},"headers":[],"relativePath":"uk/msg_docs/AdcReport.md","filePath":"uk/msg_docs/AdcReport.md"}'),n={name:"uk/msg_docs/AdcReport.md"};function l(h,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="adcreport-повідомлення-uorb" tabindex="-1">AdcReport (повідомлення UORB) <a class="header-anchor" href="#adcreport-повідомлення-uorb" aria-label="Permalink to &quot;AdcReport (повідомлення UORB)&quot;">​</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/AdcReport.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp		# time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 device_id		# unique device ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the sensor that does not change between power cycles</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">int16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] channel_id		# ADC channel IDs, negative </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> non</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">existent, TODO: should be kept same as array index</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] raw_data		# ADC channel raw value, accept negative value, valid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel ID is positive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 resolution		# ADC channel resolution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 v_ref			# ADC channel voltage reference, use to calculate LSB </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voltage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lsb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resolution)</span></span></code></pre></div>`,3)]))}const c=i(n,[["render",l]]);export{E as __pageData,c as default};
