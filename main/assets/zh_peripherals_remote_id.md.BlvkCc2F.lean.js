import{_ as i,a as l,b as s}from"./chunks/holybro_remote_id_pinout.9Aa_NAii.js";import{_ as d,c as h,j as t,a as r,G as o,a8 as n,B as c,o as p}from"./chunks/framework.BDnHobkS.js";const k=JSON.parse('{"title":"Remote ID (Open Drone ID)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/peripherals/remote_id.md","filePath":"zh/peripherals/remote_id.md"}'),m={name:"zh/peripherals/remote_id.md"};function u(b,e,f,_,g,D){const a=c("Badge");return p(),h("div",null,[e[3]||(e[3]=t("h1",{id:"remote-id-open-drone-id",tabindex:"-1"},[r("Remote ID (Open Drone ID) "),t("a",{class:"header-anchor",href:"#remote-id-open-drone-id","aria-label":'Permalink to "Remote ID (Open Drone ID)"'},"​")],-1)),o(a,{type:"tip",text:"PX4 v1.14"}),o(a,{type:"warning",text:"Experimental"}),e[4]||(e[4]=n('<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Experimental Remote ID support is experimental.</p></div><p>Remote ID is a government mandated technology for UAVs in Japan, the United States of America and the European Union, designed to enable safe sharing of airspace between UAVs and other aircraft. The specification requires that UAVs broadcast data such as: real-time location/altitude, serial number, operator ID/location, status, etc.</p><p>PX4 works with Remote ID modules that target the FAA <a href="https://www.faa.gov/uas/getting_started/remote_id" target="_blank" rel="noreferrer">standard Remote ID rules</a>. These are designed to be integrated into the vehicle, and broadcast Open Drone ID messages (Open Drone ID is an open source implementation of Remote ID) using id, position, and other information that is supplied by an autopilot. The &quot;standard rules&quot; modules enable less restrictive operation than &quot;broadcast rules&quot; modules, which are standalone modules with an integrated GPS that do not have any communication with the autopilot.</p><h2 id="支持的硬件" tabindex="-1">支持的硬件 <a class="header-anchor" href="#支持的硬件" aria-label="Permalink to &quot;支持的硬件&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Remote ID hardware can only be connected via DroneCAN on <code>main</code> branch builds (builds <em>after</em> PX4 v1.15).</p></div><p>PX4 integrates with Remote ID hardware that supports:</p>',6)),t("ul",null,[t("li",null,[e[0]||(e[0]=t("a",{href:"https://mavlink.io/en/services/opendroneid.html",target:"_blank",rel:"noreferrer"},"Open Drone ID",-1)),e[1]||(e[1]=r(" MAVLink protocol")),o(a,{type:"tip",text:"PX4 v1.14"})]),t("li",null,[e[2]||(e[2]=r("Remote ID over CAN")),o(a,{type:"tip",text:"PX4 main (v1.16)"})])]),e[5]||(e[5]=n('<p>It has been tested with the following devices:</p><ul><li><a href="https://docs.cubepilot.org/user-guides/cube-id/cube-id" target="_blank" rel="noreferrer">Cube ID</a> (CubePilot)</li><li><a href="https://dronescout.co/dronebeacon-mavlink-remote-id-transponder/" target="_blank" rel="noreferrer">Db201</a> (BlueMark) - Tested via serial port. Not tested via CAN port.</li><li><a href="https://dronescout.co/dronebeacon-mavlink-remote-id-transponder/" target="_blank" rel="noreferrer">Db202mav</a> (BlueMark) - Less expensive variant without CAN port.</li><li><a href="https://holybro.com/products/remote-id" target="_blank" rel="noreferrer">Holybro RemoteID Module</a> (Holybro)</li></ul><p>Other devices that support the Open Drone ID protocol and DroneCAN should also work (but have not been tested).</p><h2 id="硬件安装" tabindex="-1">硬件安装 <a class="header-anchor" href="#硬件安装" aria-label="Permalink to &quot;硬件安装&quot;">​</a></h2><p>Remote ID devices can be connected to any free/unused serial port on the flight controller, or CAN. Most commonly they are connected directly to the <code>TELEM2</code> port (if it is not being use for some other purpose) as this is already configured for MAVLink &quot;by default&quot;.</p><h3 id="cube-id" tabindex="-1">Cube ID <a class="header-anchor" href="#cube-id" aria-label="Permalink to &quot;Cube ID&quot;">​</a></h3><p><a href="https://docs.cubepilot.org/user-guides/cube-id/cube-id" target="_blank" rel="noreferrer">Cube ID</a> can be connected using a serial or CAN port.</p><p>It comes with 6-pin and 4-pin JST-GH 1.25mm cables that can be connected directly to the <code>TELEM</code> serial port and <code>CAN</code> ports, respectively, on most recent Pixhawk flight controllers.</p><h4 id="cube-id-serial-port" tabindex="-1">Cube ID Serial Port <a class="header-anchor" href="#cube-id-serial-port" aria-label="Permalink to &quot;Cube ID Serial Port&quot;">​</a></h4><p>If using a different port, or a flight controller that has different connector, you may need to modify the cable. The pinout of the serial port is shown below. The TX and RX on the flight controller must be connected to the RX and TX on the Remote ID, respectively.</p><p><img src="'+i+'" alt="Cube ID serial port"></p><table tabindex="0"><thead><tr><th>针脚</th><th>信号</th><th>电压</th></tr></thead><tbody><tr><td>1（红）</td><td>VCC_5V</td><td>5V</td></tr><tr><td>2</td><td>TX (OUT)</td><td></td></tr><tr><td>3</td><td>RX (IN)</td><td></td></tr><tr><td>4（黑）</td><td>GND</td><td>0</td></tr></tbody></table><h4 id="cube-id-can-port" tabindex="-1">Cube ID CAN Port <a class="header-anchor" href="#cube-id-can-port" aria-label="Permalink to &quot;Cube ID CAN Port&quot;">​</a></h4><p><img src="'+l+'" alt="Cube ID CAN port"></p><table tabindex="0"><thead><tr><th>针脚</th><th>信号</th><th>电压</th></tr></thead><tbody><tr><td>1（红）</td><td>VCC_5V</td><td>5V</td></tr><tr><td>2 (red)</td><td>CAN_H</td><td></td></tr><tr><td>3</td><td>CAN_L</td><td></td></tr><tr><td>4（黑）</td><td>GND</td><td>0</td></tr></tbody></table><h4 id="cube-id-firmware" tabindex="-1">Cube ID Firmware <a class="header-anchor" href="#cube-id-firmware" aria-label="Permalink to &quot;Cube ID Firmware&quot;">​</a></h4><p>The Cube ID uses proprietary firmware (not <a href="https://github.com/ArduPilot/ArduRemoteID" target="_blank" rel="noreferrer">ArduRemoteID</a> like some other remote id beacons).</p><p>For firmware update instructions see <a href="https://docs.cubepilot.org/user-guides/cube-id/cube-id#updating" target="_blank" rel="noreferrer">Cube ID &gt; Updating</a>.</p><h3 id="bluemark-db201-db202mav" tabindex="-1">BlueMark Db201/Db202mav <a class="header-anchor" href="#bluemark-db201-db202mav" aria-label="Permalink to &quot;BlueMark Db201/Db202mav&quot;">​</a></h3><p><a href="https://dronescout.co/dronebeacon-mavlink-remote-id-transponder/" target="_blank" rel="noreferrer">Db201</a> or <a href="https://dronescout.co/dronebeacon-mavlink-remote-id-transponder/" target="_blank" rel="noreferrer">Db202mav</a> can be connected using their serial port.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <code>Db201</code> also has a CAN port that should work on PX4 <code>main</code> builds. However this has not yet been tested.</p></div><p>They come with a 6-pin JST-GH 1.25mm cable that can be connected directly to the <code>TELEM</code> ports on most recent Pixhawk flight controllers.</p><p>If using a different serial port (i.e. with fewer pins), or a flight controller that has different connector, you may need to modify the cable. Information on the port pinout can be found in the <a href="https://download.bluemark.io/db200.pdf" target="_blank" rel="noreferrer">User Guide</a>.</p><p>The beacons come preinstalled with recent <a href="https://github.com/ArduPilot/ArduRemoteID" target="_blank" rel="noreferrer">ArduRemoteID</a> firmware. The <a href="https://download.bluemark.io/db200.pdf" target="_blank" rel="noreferrer">User Guide</a> explains how you can update firmware via the web interface, if needed.</p><p>More general setup, including how to mount the beacon, is also covered in the <a href="https://download.bluemark.io/db200.pdf" target="_blank" rel="noreferrer">User Guide</a>.</p><h3 id="holybro-remote-id-module" tabindex="-1">Holybro Remote ID Module <a class="header-anchor" href="#holybro-remote-id-module" aria-label="Permalink to &quot;Holybro Remote ID Module&quot;">​</a></h3><p>The <a href="https://holybro.com/products/remote-id" target="_blank" rel="noreferrer">Holybro Remote ID Module</a> can be connected using a serial or CAN port.</p><p>It comes with a 6-pin JST-GH 1.25mm cable that can be connected directly to the <code>TELEM</code> ports on most recent Pixhawk flight controllers such as the Pixhawk 6C/6X or Cube Orange.</p><p>The module comes preinstalled with recent <a href="https://github.com/ArduPilot/ArduRemoteID" target="_blank" rel="noreferrer">ArduRemoteID</a> firmware.</p><p>The <a href="https://docs.holybro.com/radio/remote-id" target="_blank" rel="noreferrer">User Guide</a> explains how you can config and update firmware via the web interface, if needed.</p><h4 id="holybro-pinouts" tabindex="-1">Holybro Pinouts <a class="header-anchor" href="#holybro-pinouts" aria-label="Permalink to &quot;Holybro Pinouts&quot;">​</a></h4><p><img src="'+s+`" alt="Holybro Remote ID Pinouts"></p><h2 id="px4-配置" tabindex="-1">PX4 配置 <a class="header-anchor" href="#px4-配置" aria-label="Permalink to &quot;PX4 配置&quot;">​</a></h2><h3 id="mavlink-port-configuration" tabindex="-1">MAVLink Port Configuration <a class="header-anchor" href="#mavlink-port-configuration" aria-label="Permalink to &quot;MAVLink Port Configuration&quot;">​</a></h3><p>Remote ID hardware connected to a serial port is configured in the same way as any other <a href="./../peripherals/mavlink_peripherals.html">MAVLink Peripheral</a>.</p><p>Assuming you have connected the device to the <code>TELEM2</code> port, <a href="./../advanced_config/parameters.html">set the parameters</a> as shown:</p><ul><li><a href="./../advanced_config/parameter_reference.html#MAV_1_CONFIG">MAV_1_CONFIG</a> = <code>TELEM 2</code></li><li><a href="./../advanced_config/parameter_reference.html#MAV_1_MODE">MAV_1_MODE</a> = Normal</li><li><a href="./../advanced_config/parameter_reference.html#MAV_1_RATE">MAV_1_RATE</a> = 0 (default sending rate for port).</li><li><a href="./../advanced_config/parameter_reference.html#MAV_1_FORWARD">MAV_1_FORWARD</a> = Enabled</li></ul><p>Then reboot the vehicle.</p><p>You will now find a new parameter called <a href="./../advanced_config/parameter_reference.html#SER_TEL2_BAUD">SER_TEL2_BAUD</a>. The required baud rate depends on the remote ID used (for Cube ID it must be set to 57600).</p><h3 id="dronecan-configuration" tabindex="-1">DroneCAN Configuration <a class="header-anchor" href="#dronecan-configuration" aria-label="Permalink to &quot;DroneCAN Configuration&quot;">​</a></h3><p>Remote ID hardware connected to a CAN is configured in the same way as any other <a href="./../dronecan/#px4-configuration">DroneCAN Hardware</a>.</p><p>Specifically, you will have to <a href="./../dronecan/#enabling-dronecan">enable DroneCAN</a> by setting the value of <a href="./../advanced_config/parameter_reference.html#UAVCAN_ENABLE"><code>UAVCAN_ENABLE</code></a> to a non-zero value.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="./../peripherals/remote_id.html#can-remote-id-not-working">CAN Remote ID Not Working</a> explains how you can test the setup, and adjust Remote ID settings if necessary.</p></div><h3 id="enable-remote-id" tabindex="-1">Enable Remote ID <a class="header-anchor" href="#enable-remote-id" aria-label="Permalink to &quot;Enable Remote ID&quot;">​</a></h3><p>There is no need to explicitly enable Remote ID (supported Remote ID messages are either streamed by default or must be requested in the current implementation, even if no remote ID is connected).</p><h3 id="prevent-arming-based-on-remote-id" tabindex="-1">Prevent Arming based on Remote ID <a class="header-anchor" href="#prevent-arming-based-on-remote-id" aria-label="Permalink to &quot;Prevent Arming based on Remote ID&quot;">​</a></h3><p>To only allow arming when a Remote ID is ready, <a href="./../advanced_config/parameters.html#conditional-parameters">set</a> the parameter <a href="#COM_ARM_ODID">COM_ARM_ODID</a> to <code>2</code> (it is disabled by default).</p><table tabindex="0"><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><a id="COM_ARM_ODID"></a><a href="./../advanced_config/parameter_reference.html#COM_ARM_ODID">COM_ARM_ODID</a></td><td>Enable Drone ID system detection and health check. <code>0</code>: Disable (default), <code>1</code>: Warn if Remote ID not detected but still allow arming, <code>2</code>: Only allow arming if Remote ID is present.</td></tr></tbody></table><h2 id="module-broadcast-testing" tabindex="-1">Module Broadcast Testing <a class="header-anchor" href="#module-broadcast-testing" aria-label="Permalink to &quot;Module Broadcast Testing&quot;">​</a></h2><p>Integrators should test than the remote ID module is broadcasting the correct information, such as UAV location, ID, operator ID and so on. This is most easily done using a 3rd party application on your mobile device:</p><ul><li><a href="https://github.com/dronetag/drone-scanner" target="_blank" rel="noreferrer">Drone Scanner</a> (Google Play or Apple App store)</li><li><a href="https://play.google.com/store/apps/details?id=org.opendroneid.android_osm&amp;hl=en&amp;gl=US" target="_blank" rel="noreferrer">OpenDroneID OSM</a> (Google Play)</li></ul><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>PX4 v1.14 streams these messages by default (in streaming modes: normal, onboard, usb, onboard low bandwidth):</p><ul><li><p><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_LOCATION" target="_blank" rel="noreferrer">OPEN_DRONE_ID_LOCATION</a> (1 Hz) - UAV location, altitude, direction, and speed.</p></li><li><p><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_SYSTEM" target="_blank" rel="noreferrer">OPEN_DRONE_ID_SYSTEM</a> (1 Hz) Operator location/altitude, multiple aircraft information (group/swarm, if applicable), full timestamp and possible category/class information.</p><ul><li>Implementation assumes operator is located at vehicle home position (does not yet support getting operator position from GCS). This is believed to be compliant for broadcast-only Remote IDs.</li></ul></li></ul><p>The following message can be streamed on request (using <a href="https://mavlink.io/en/messages/common.html#MAV_CMD_SET_MESSAGE_INTERVAL" target="_blank" rel="noreferrer">MAV_CMD_SET_MESSAGE_INTERVAL</a>):</p><ul><li><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_BASIC_ID" target="_blank" rel="noreferrer">OPEN_DRONE_ID_BASIC_ID</a> - UAV identity information (essentially a serial number) <ul><li>PX4 v1.14 specifies a serial number (<a href="https://mavlink.io/en/messages/common.html#MAV_ODID_ID_TYPE_SERIAL_NUMBER" target="_blank" rel="noreferrer">MAV_ODID_ID_TYPE_SERIAL_NUMBER</a>) but does not use the required format (ANSI/CTA-2063 format).</li></ul></li></ul><p>PX4 prevents arming based on Remote ID health if parameter <a href="./../advanced_config/parameter_reference.html#COM_ARM_ODID">COM_ARM_ODID</a> is set to <code>2</code>. The UAV will then require <code>HEARTBEAT</code> messages from the Remote ID as a precondition for arming the UAV. You can also set the parameter to <code>1</code> to warn but still allow arming when Remote ID <code>HEARTBEAT</code> messages are not detected.</p><p>The following Open Drone ID MAVLink messages are not supported in PX4 v1.14 (to be added by <a href="https://github.com/PX4/PX4-Autopilot/pull/21647" target="_blank" rel="noreferrer">PX4#21647</a>):</p><ul><li><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_AUTHENTICATION" target="_blank" rel="noreferrer">OPEN_DRONE_ID_AUTHENTICATION</a> - Provides authentication data for the UAV.</li><li><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_SELF_ID" target="_blank" rel="noreferrer">OPEN_DRONE_ID_SELF_ID</a> - Operator identity (plain text).</li><li><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_OPERATOR_ID" target="_blank" rel="noreferrer">OPEN_DRONE_ID_OPERATOR_ID</a> - Operator identity.</li><li><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_ARM_STATUS" target="_blank" rel="noreferrer">OPEN_DRONE_ID_ARM_STATUS</a> - Status of Remote ID hardware. Use as condition for vehicle arming, and for Remote ID health check.</li><li><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_SYSTEM_UPDATE" target="_blank" rel="noreferrer">OPEN_DRONE_ID_SYSTEM_UPDATE</a> - Subset of <code>OPEN_DRONE_ID_SYSTEM</code> that can be sent with information at higher rate.</li></ul><h2 id="compliance" tabindex="-1">Compliance <a class="header-anchor" href="#compliance" aria-label="Permalink to &quot;Compliance&quot;">​</a></h2><p>PX4 may not be compliant with the relevant specifications in version 1.14 (which is why this feature is currently experimental). A working group has been established to evaluate the gaps.</p><p>Some known issues are:</p><ul><li>Vehicles must arm conditional on receiving the Remote ID <a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_ARM_STATUS" target="_blank" rel="noreferrer">OPEN_DRONE_ID_ARM_STATUS</a> message, with a status that indicates the Remote ID hardware is ready to broadcast. <ul><li>PX4 v1.14 does not process <code>OPEN_DRONE_ID_ARM_STATUS</code>, and arming is only conditional on the Remote ID device <code>HEARTBEAT</code>.</li></ul></li><li>Health of the Remote ID depends on both receiving a <code>HEARTBEAT</code> and the <code>OPEN_DRONE_ID_ARM_STATUS</code>. When flying, a non-armed status for the Remote ID must be published in <a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_LOCATION" target="_blank" rel="noreferrer">OPEN_DRONE_ID_LOCATION.status</a> as a Remote ID malfunction. <ul><li>PX4 v1.14 does not yet receive <code>OPEN_DRONE_ID_ARM_STATUS</code>.</li></ul></li><li><code>OPEN_DRONE_ID_ARM_STATUS</code> must be forwarded to the GCS, if present for additional error reporting.</li><li><a href="https://mavlink.io/en/messages/common.html#OPEN_DRONE_ID_BASIC_ID" target="_blank" rel="noreferrer">OPEN_DRONE_ID_BASIC_ID</a> specifies a serial number in an invalid format (not ANSI/CTA-2063 format).</li><li>The vehicle ID is expected to be tamper resistant.</li></ul><p><a href="https://github.com/PX4/PX4-Autopilot/pull/21647" target="_blank" rel="noreferrer">PX4-Autopilot/21647</a> is intended to address the known issues.</p><h2 id="故障处理" tabindex="-1">故障处理 <a class="header-anchor" href="#故障处理" aria-label="Permalink to &quot;故障处理&quot;">​</a></h2><h3 id="can-remote-id-not-working" tabindex="-1">CAN Remote ID Not Working <a class="header-anchor" href="#can-remote-id-not-working" aria-label="Permalink to &quot;CAN Remote ID Not Working&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This information was tested with the CAN Cube ID from CubePilot. It <em>should</em> also apply to CAN Remote ID modules from other vendors.</p></div><p>To confirm that the Remote ID is working:</p><ul><li><p>Check that the <code>OPEN_DRONE_ID_BASIC_ID</code> and <code>OPEN_DRONE_ID_LOCATION</code> messages appear in the QGroundControl <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/analyze_view/mavlink_inspector.html" target="_blank" rel="noreferrer">MAVLink Inspector</a> (QGC <strong>Analyze Tools &gt; MAVLink Inspector</strong>).</p></li><li><p>If those messages are not present, check that the Remote_ID node appears on the UAVCAN list.</p><p>Run the following command in the <a href="./../debug/mavlink_shell.html#qgroundcontrol-mavlink-console">QGroundControl MAVLink Console</a>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uavcan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><p>The connected CAN nodes should appear in the list. If you only have one CAN component on your system (the remote ID) the list might look like this:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Online nodes (Node ID, Health, Mode):</span></span>
<span class="line"><span>   125 OK         OPERAT</span></span></code></pre></div><p>The nodes aren&#39;t &quot;named&quot; so if you have more than one CAN node you can compare the number of nodes shown with the number expected on your system to see if they match. Alternatively you can run the <code>uavcan status</code> with the Remote ID connected and disconnected and difference the result (which has the benefit that you will then known the Remote ID module&#39;s node ID).</p></li></ul><p>If the Remote ID CAN node is present and the messages are not being received, then the Remote ID itself may need to be configured:</p><ol><li><p>Open QGroundControl</p></li><li><p>Navigate to the <a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/settings_view/general.html" target="_blank" rel="noreferrer">Application settings</a>: <strong>Application Settings &gt; General &gt; Miscellaneous</strong>.</p></li><li><p>Select <code>Enable Remote ID</code>. The Remote ID tab should appear.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If this option is not present you may be in a very recent version of QGC. In that case, open the view at: <strong>Application Settings &gt; Remote ID</strong>.</p></div></li></ol><p>:::</p><ol start="4"><li>Enter the information for Basic, Operator, and Self ID.</li></ol><p>Once configured, check the MAVLink Inspector again and check that the <code>OPEN_DRONE_ID_BASIC_ID</code> and <code>OPEN_DRONE_ID_LOCATION</code> messages are now present.</p><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="https://www.faa.gov/uas/getting_started/remote_id" target="_blank" rel="noreferrer">Remote Identification of Drones</a> (FAA)</li></ul>`,76))])}const R=d(m,[["render",u]]);export{k as __pageData,R as default};
