import{_ as t,c as o,a8 as i,o as a}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"Windows 가상 머신 호스팅 도구 모음","description":"","frontmatter":{},"headers":[],"relativePath":"ko/dev_setup/dev_env_windows_vm.md","filePath":"ko/dev_setup/dev_env_windows_vm.md"}'),s={name:"ko/dev_setup/dev_env_windows_vm.md"};function n(l,e,r,p,u,d){return a(),o("div",null,e[0]||(e[0]=[i('<h1 id="windows-가상-머신-호스팅-도구-모음" tabindex="-1">Windows 가상 머신 호스팅 도구 모음 <a class="header-anchor" href="#windows-가상-머신-호스팅-도구-모음" aria-label="Permalink to &quot;Windows 가상 머신 호스팅 도구 모음&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This development environment is <a href="./../advanced/community_supported_dev_env.html">community supported and maintained</a>. It may or may not work with current versions of PX4.</p><p>See <a href="./../dev_setup/dev_env.html">Toolchain Installation</a> for information about the environments and tools supported by the core development team.</p></div><p>Windows 개발자는 Linux를 게스트 운영 체제로 사용하는 가상 머신(VM)에서 PX4 툴체인을 실행할 수 있습니다. 가상 머신을 설정한 후, 가상 머신내의 PX4 설치 및 설정은 일반 Linux 환경에서의 설정과 동일합니다.</p><p>가상 머신을 사용하는 것은 펌웨어 구축 환경을 설정과 테스트가 매우 편리하지만, 사용자는 다음 사항에 유의하여야 합니다.</p><ol><li>펌웨어 빌드는 Linux에서 빌드하는 것보다 조금 느립니다.</li><li>The JMAVSim simulation, frame rate be much slower than on native Linux. 경우에 따라서, 가상 머신 리소스 부족과 관련된 문제로 차량이 충돌할 수 있습니다.</li><li>Gazebo와 ROS는 설치할 수 있지만, 사용할 수 없을 정도로 느립니다.</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Allocate as many CPU cores and memory resources to the VM as possible.</p></div><p>시스템에서 PX4 실행을 위한 가상 머신을 설정하는 방법에는 여러 가지가 있습니다. 이 가이드는 VMWare 설정 방법을 설명합니다. There is also an incomplete section for VirtualBox at the end (we&#39;d welcome expansion of this section from a community member).</p><h2 id="vmware-setup" tabindex="-1">VMWare Setup <a class="header-anchor" href="#vmware-setup" aria-label="Permalink to &quot;VMWare Setup&quot;">​</a></h2><p>VMWare performance is acceptable for basic usage (building Firmware) but not for running ROS or Gazebo Classic.</p><ol><li><p>Download <a href="https://www.vmware.com/products/workstation-player/workstation-player-evaluation.html" target="_blank" rel="noreferrer">VMWare Player Freeware</a></p></li><li><p>윈도우 시스템에 설치합니다.</p></li><li><p>Download the desired version of <a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noreferrer">Ubuntu Desktop ISO Image</a>. (see <a href="./../dev_setup/dev_env_linux.html">Linux Instructions Page</a> for recommended Ubuntu version).</p></li><li><p>Open <em>VMWare Player</em>.</p></li><li><p>Enable 3D acceleration in the VM&#39;s settings: <strong>VM &gt; Settings &gt; Hardware &gt; Display &gt; Accelerate 3D graphics</strong></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This option is required to properly run 3D simulation environments like jMAVSim and Gazebo Classic. 가상 환경에 Linux를 설치하기 전에 이 작업을 수행하는 것이 좋습니다.</p></div></li></ol><p>:::</p><ol start="6"><li><p>새 가상 머신을 생성하는 메뉴를 선택합니다.</p></li><li><p>가상 머신 생성 마법사에서 다운로드한 Ubuntu ISO 이미지를 설치 매체로 선택하면, 사용하려는 운영 체제가 자동으로 감지됩니다.</p></li><li><p>마법사에서 실행 중인 가상 머신에 할당할 리소스를 선택합니다. 가상 머신에 최대한 많은 메모리와 CPU 코어를 할당하십시오.</p></li><li><p>마법사가 종료시 새 가상 머신을 실행하고, 설정 지침에 따라 Ubuntu를 설치합니다. 모든 설정은 호스트 운영 체제에서 사용하기 위한 것이므로, 네트워크 공격의 위험을 증가시키지 않는 화면 보호기 및 로컬 워크스테이션 보안 기능을 비활성화할 수 있습니다.</p></li><li><p>Once the new VM is booted up make sure you install <em>VMWare tools drivers and tools extension</em> inside your guest system. 이렇게 하면 다음과 같은 VM 사용의 성능과 유용성들이 향상됩니다.</p><ul><li>크게 향상된 그래픽 성능</li><li>Proper support for hardware device usage like USB port allocation (important for target upload), proper mouse wheel scrolling, sound support</li><li>창 크기에 따른 게스트 디스플레이 해상도 조정</li><li>호스트 시스템 클립보드 공유</li><li>호스트 시스템 파일 공유</li></ul></li><li><p>Continue with <a href="./../dev_setup/dev_env_linux.html">PX4 environment setup for Linux</a></p></li></ol><h2 id="virtualbox-7-setup" tabindex="-1">VirtualBox 7 Setup <a class="header-anchor" href="#virtualbox-7-setup" aria-label="Permalink to &quot;VirtualBox 7 Setup&quot;">​</a></h2><p>The setup for VirtualBox is similar to VMWare. Community members, we&#39;d welcome a step-by-step guide here!</p><h3 id="usb-passthrough-for-qgroundcontrol-firmware-flashing" tabindex="-1">USB passthrough for QGroundControl / Firmware Flashing <a class="header-anchor" href="#usb-passthrough-for-qgroundcontrol-firmware-flashing" aria-label="Permalink to &quot;USB passthrough for QGroundControl / Firmware Flashing&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This section has been tested for VirtualBox 7 running Ubuntu 20.04 LTS on a Windows 10 host machine.</p></div><p>One limitation of virtual machines is that you can&#39;t automatically connect to a flight controller attached to the host computer USB port in order to <a href="./../dev_setup/building_px4.html#uploading-firmware-flashing-the-board">build and upload PX4 firmware from a terminal</a>. You also can&#39;t connect to the flight controller from QGroundControl in the virtual machine.</p><p>To allow this, you need to configure USB passthrough settings:</p><ol><li><p>Ensure that the user has been added to the dialout group in the VM using the terminal command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dialout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER</span></span></code></pre></div><p>Then restart Ubuntu in the virtual machine.</p></li><li><p>Enable serial port(s) in VM: <strong>VirtualBox &gt; Settings &gt; Serial Ports 1/2/3/etc...</strong></p></li><li><p>Enable USB controller in VM: <strong>VirtualBox &gt; Settings &gt; USB</strong></p></li><li><p>Add USB filters for the bootloader in VM: <strong>VirtualBox &gt; Settings &gt; USB &gt; Add new USB filter</strong>.</p><ul><li><p>Open the menu and plug in the USB cable connected to your autopilot. Select the <code>...Bootloader</code> device when it appears in the UI.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The bootloader device only appears for a few seconds after connecting USB. If it disappears before you can select it, disconnect and then reconnect USB.</p></div></li></ul></li></ol><p>:::</p><ul><li>Select the <code>...Autopilot</code> device when it appears (this happens after the bootloader completes).</li></ul><ol start="5"><li>Select the device in the VM instance&#39;s dropdown menu <strong>VirtualBox &gt; Devices &gt; your_device</strong></li></ol><p>If successful, your device will show up with <code>lsusb</code> and QGroundControl will connect to the device automatically. You should also be able to build and upload firmware using a command like:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4_fmu-v5_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><h3 id="telemetry-over-wifi-for-qgroundcontrol" tabindex="-1">Telemetry over WiFi for QGroundControl <a class="header-anchor" href="#telemetry-over-wifi-for-qgroundcontrol" aria-label="Permalink to &quot;Telemetry over WiFi for QGroundControl&quot;">​</a></h3><p>If using <em>QGroundControl</em> within a virtual machine you should set the VM networking settings to &quot;Bridged Adapter&quot; mode. This gives the guest OS direct access to networking hardware on the host. If you use the Network Address Translation (NAT), which is set by default for VirtualBox 7 running Ubuntu 20.04 LTS, this will block the outbound UDP packets that QGroundControl uses to communicate with the vehicle.</p>',26)]))}const m=t(s,[["render",n]]);export{c as __pageData,m as default};
