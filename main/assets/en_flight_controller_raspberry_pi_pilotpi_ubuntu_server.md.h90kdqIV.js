import{_ as i,c as a,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const c=JSON.parse('{"title":"PilotPi with Ubuntu Server","description":"","frontmatter":{},"headers":[],"relativePath":"en/flight_controller/raspberry_pi_pilotpi_ubuntu_server.md","filePath":"en/flight_controller/raspberry_pi_pilotpi_ubuntu_server.md"}'),n={name:"en/flight_controller/raspberry_pi_pilotpi_ubuntu_server.md"};function l(h,s,p,o,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="pilotpi-with-ubuntu-server" tabindex="-1">PilotPi with Ubuntu Server <a class="header-anchor" href="#pilotpi-with-ubuntu-server" aria-label="Permalink to &quot;PilotPi with Ubuntu Server&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Ubuntu Server on RPi 4B consumes a lot of current and generates a lot of heat. Design for better heat dissipation and high power consumption when using this hardware.</p></div><h2 id="developer-quick-start" tabindex="-1">Developer Quick Start <a class="header-anchor" href="#developer-quick-start" aria-label="Permalink to &quot;Developer Quick Start&quot;">​</a></h2><h3 id="os-image" tabindex="-1">OS Image <a class="header-anchor" href="#os-image" aria-label="Permalink to &quot;OS Image&quot;">​</a></h3><p>Both armhf and arm64 arch are supported.</p><h4 id="armhf" tabindex="-1">armhf <a class="header-anchor" href="#armhf" aria-label="Permalink to &quot;armhf&quot;">​</a></h4><ul><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-armhf+raspi2.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi2</a></li><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-armhf+raspi3.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi3</a></li><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-armhf+raspi4.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi4</a></li><li><a href="https://cdimage.ubuntu.com/releases/20.04.1/release/ubuntu-20.04.2-preinstalled-server-arm64+raspi.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 20.04.1 for RPi 2/3/4</a></li></ul><h4 id="arm64" tabindex="-1">arm64 <a class="header-anchor" href="#arm64" aria-label="Permalink to &quot;arm64&quot;">​</a></h4><ul><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-arm64+raspi3.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi3</a></li><li><a href="https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-arm64+raspi4.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 18.04.5 for RPi4</a></li><li><a href="https://cdimage.ubuntu.com/releases/20.04.1/release/ubuntu-20.04.2-preinstalled-server-arm64+raspi.img.xz" target="_blank" rel="noreferrer">Ubuntu Server 20.04.1 for RPi 3/4</a></li></ul><h4 id="latest-os" tabindex="-1">Latest OS <a class="header-anchor" href="#latest-os" aria-label="Permalink to &quot;Latest OS&quot;">​</a></h4><p>Please refer to official <a href="https://cdimage.ubuntu.com/releases/" target="_blank" rel="noreferrer">cdimage</a> page for any new updates.</p><h3 id="first-boot" tabindex="-1">First boot <a class="header-anchor" href="#first-boot" aria-label="Permalink to &quot;First boot&quot;">​</a></h3><p>When setting up RPi&#39;s WiFi for the first time we recommended using a wired Ethernet connection between your home router and RPi, and a monitor and keyboard.</p><h4 id="before-booting" tabindex="-1">Before booting <a class="header-anchor" href="#before-booting" aria-label="Permalink to &quot;Before booting&quot;">​</a></h4><p>Mount the SD card onto your computer and modify the network settings. Please follow the official instruction <a href="https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#3-wifi-or-ethernet" target="_blank" rel="noreferrer">here</a>.</p><p>Now plug the SD card onto your Pi and boot for the first time. Make sure you have shell access to the RPi - either SSH connection over wired Ethernet, or direct accessing with keyboard and monitor.</p><h4 id="wifi-region" tabindex="-1">WiFi region <a class="header-anchor" href="#wifi-region" aria-label="Permalink to &quot;WiFi region&quot;">​</a></h4><p>First install required package:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crda</span></span></code></pre></div><p>Edit the file <code>/etc/default/crda</code> to change the correct WiFi region. <a href="https://www.arubanetworks.com/techdocs/InstantWenger_Mobile/Advanced/Content/Instant%20User%20Guide%20-%20volumes/Country_Codes_List.htm" target="_blank" rel="noreferrer">Reference List</a></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/default/crda</span></span></code></pre></div><p>Then your Pi will able to join your WiFi network after reboot.</p><h4 id="hostname-and-mdns" tabindex="-1">Hostname and mDNS <a class="header-anchor" href="#hostname-and-mdns" aria-label="Permalink to &quot;Hostname and mDNS&quot;">​</a></h4><p>Let&#39;s set up hostname at first.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/hostname</span></span></code></pre></div><p>Change the hostname to whatever you like. Then install the package required by mDNS:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> avahi-daemon</span></span></code></pre></div><p>Perform a reboot.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reboot</span></span></code></pre></div><p>Regain the accessibility through WiFi connection after the above operation.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu@pi_hostname.local</span></span></code></pre></div><h4 id="password-less-auth-optional" tabindex="-1">Password-less Auth (Optional) <a class="header-anchor" href="#password-less-auth-optional" aria-label="Permalink to &quot;Password-less Auth (Optional)&quot;">​</a></h4><p>You may want to setup <a href="https://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md" target="_blank" rel="noreferrer">passwordless auth</a> as well.</p><h3 id="setting-up-os" tabindex="-1">Setting up OS <a class="header-anchor" href="#setting-up-os" aria-label="Permalink to &quot;Setting up OS&quot;">​</a></h3><h4 id="config-txt" tabindex="-1">config.txt <a class="header-anchor" href="#config-txt" aria-label="Permalink to &quot;config.txt&quot;">​</a></h4><p>The corresponding file in Ubuntu is <code>/boot/firmware/usercfg.txt</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/usercfg.txt</span></span></code></pre></div><p>Replace the file with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable sc16is752 overlay</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtoverlay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sc16is752-spi1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable I2C-1 and set the frequency to 400KHz</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtparam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i2c_arm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">on,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i2c_arm_baudrate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">400000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable spidev0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtparam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">on</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable RC input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enable_uart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enable I2C-0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtparam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i2c_vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">on</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># switch Bluetooth to miniuart</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtoverlay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">miniuart-bt</span></span></code></pre></div><h4 id="cmdline-txt" tabindex="-1">cmdline.txt <a class="header-anchor" href="#cmdline-txt" aria-label="Permalink to &quot;cmdline.txt&quot;">​</a></h4><p>On Ubuntu Server 20.04:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/cmdline.txt</span></span></code></pre></div><p>On Ubuntu Server 18.04 or earlier, <code>nobtcmd.txt</code> and <code>btcmd.txt</code> should both be modified.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/nobtcmd.txt</span></span></code></pre></div><p>Find <code>console=/dev/ttyAMA0,115200</code> and remove that part to disable the login shell on serial interface.</p><p>Append <code>isolcpus=2</code> after the last word. The whole file will then look like:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ifnames</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dwc_otg.lpm_enable=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> console=tty1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root=LABEL=writable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rootfstype=ext4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elevator=deadline</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rootwait</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fixrtc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isolcpus=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div><p>The above line tells the Linux kernel do not schedule any process on CPU core 2. We will manually run PX4 onto that core later.</p><p>Reboot and SSH onto your Pi.</p><p>Check UART interface:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/tty</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>There should be <code>/dev/ttyAMA0</code>, <code>/dev/ttySC0</code> and <code>/dev/ttySC1</code>.</p><p>Check I2C interface:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/i2c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>There should be <code>/dev/i2c-0</code> and <code>/dev/i2c-1</code></p><p>Check SPI interface:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/spidev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>There should be <code>/dev/spidev0.0</code>.</p><h4 id="rc-local" tabindex="-1">rc.local <a class="header-anchor" href="#rc-local" aria-label="Permalink to &quot;rc.local&quot;">​</a></h4><p>In this section we will configure the auto-start script in <strong>rc.local</strong>. Note that we need to create this file, as it is not present on a fresh Ubuntu OS.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/rc.local</span></span></code></pre></div><p>Append the content below to the file:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;25&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/export</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;in&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/gpio25/direction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/gpio25/value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Launching PX4&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/ubuntu/px4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taskset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pilotpi_mc.config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /home/ubuntu/px4/px4.log &amp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;25&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/gpio/unexport</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>Save and exit. Then set the correct permissions:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/rc.local</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Don&#39;t forget to turn off the switch when it is not needed!</p></div><h4 id="csi-camera" tabindex="-1">CSI camera <a class="header-anchor" href="#csi-camera" aria-label="Permalink to &quot;CSI camera&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Enable CSI camera will stop anything works on I2C-0.</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/firmware/usercfg.txt</span></span></code></pre></div><p>Append the following line at the end of file:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">start_x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span></code></pre></div><h3 id="building-the-code" tabindex="-1">Building the code <a class="header-anchor" href="#building-the-code" aria-label="Permalink to &quot;Building the code&quot;">​</a></h3><p>To get the <em>very latest</em> version onto your computer, enter the following command into a terminal:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/PX4/PX4-Autopilot.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is all you need to do just to build the latest code.</p></div><h4 id="set-rpi-upload-target" tabindex="-1">Set RPi upload target <a class="header-anchor" href="#set-rpi-upload-target" aria-label="Permalink to &quot;Set RPi upload target&quot;">​</a></h4><p>Set the IP (or hostname) of your RPi using:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">192.168.X.X</span></span></code></pre></div><p>or</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pi_hostname.local</span></span></code></pre></div><p>Additionally, we need to set the username:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTOPILOT_USER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ubuntu</span></span></code></pre></div><h4 id="build-for-armhf-target" tabindex="-1">Build for armhf target <a class="header-anchor" href="#build-for-armhf-target" aria-label="Permalink to &quot;Build for armhf target&quot;">​</a></h4><p>Build the executable file:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Firmware</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_default</span></span></code></pre></div><p>Then upload it with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><h4 id="alternative-build-method-for-armhf-using-docker" tabindex="-1">Alternative build method for armhf (using docker) <a class="header-anchor" href="#alternative-build-method-for-armhf-using-docker" aria-label="Permalink to &quot;Alternative build method for armhf (using docker)&quot;">​</a></h4><p>If you are compiling for the first time with docker, please refer to the <a href="./../test_and_ci/docker.html#prerequisites">official docs</a>.</p><p>Execute the command in firmware folder:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;export AUTOPILOT_HOST=192.168.X.X; export AUTOPILOT_USER=ubuntu; export NO_NINJA_BUILD=1; make scumaker_pilotpi_default upload&quot;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>mDNS is not supported within docker. You must specify the correct IP address every time when uploading.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If your IDE doesn&#39;t support ninja build, <code>NO_NINJA_BUILD=1</code> option will help. You can compile without uploading too. Just remove <code>upload</code> target.</p></div><p>It is also possible to just compile the code with command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;make scumaker_pilotpi_default&quot;</span></span></code></pre></div><h4 id="build-for-arm64-target" tabindex="-1">Build for arm64 target <a class="header-anchor" href="#build-for-arm64-target" aria-label="Permalink to &quot;Build for arm64 target&quot;">​</a></h4><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This step requires <code>aarch64-linux-gnu</code> tool-chain to be installed.</p></div><p>Build the executable file:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PX4-Autopilot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_arm64</span></span></code></pre></div><p>Then upload it with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scumaker_pilotpi_arm64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upload</span></span></code></pre></div><h4 id="alternative-build-method-for-arm64-using-docker" tabindex="-1">Alternative build method for arm64 (using docker) <a class="header-anchor" href="#alternative-build-method-for-arm64-using-docker" aria-label="Permalink to &quot;Alternative build method for arm64 (using docker)&quot;">​</a></h4><p>If you are compiling for the first time with docker, please refer to the <a href="./../test_and_ci/docker.html#prerequisites">official docs</a>.</p><p>Execute the command in <code>PX4-Autopilot</code> folder:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;export AUTOPILOT_HOST=192.168.X.X; export AUTOPILOT_USER=ubuntu; export NO_NINJA_BUILD=1; make scumaker_pilotpi_arm64 upload&quot;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>mDNS is not supported within docker. You must specify the correct IP address every time when uploading.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If your IDE doesn&#39;t support ninja build, <code>NO_NINJA_BUILD=1</code> option will help. You can compile without uploading too - just remove the <code>upload</code> target.</p></div><p>It is also possible to just compile the code with command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./Tools/docker_run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;make scumaker_pilotpi_arm64&quot;</span></span></code></pre></div><h4 id="manually-run-px4" tabindex="-1">Manually run PX4 <a class="header-anchor" href="#manually-run-px4" aria-label="Permalink to &quot;Manually run PX4&quot;">​</a></h4><p>Connect over SSH and run it with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> px4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taskset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./bin/px4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pilotpi_mc.config</span></span></code></pre></div><p>Now PX4 is started with multi-rotor configuration.</p><p>If you encountered the similar problem executing <code>bin/px4</code> on your Pi as following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bin/px4: /lib/xxxx/xxxx: version \`GLIBC_2.29&#39; not found (required by bin/px4)</span></span></code></pre></div><p>Then you should compile with docker instead.</p><p>Before proceeding to next step, clear the existing building at first:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/scumaker_pilotpi_</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>Then go back to the corresponding chapter above.</p><h3 id="post-configuration" tabindex="-1">Post-configuration <a class="header-anchor" href="#post-configuration" aria-label="Permalink to &quot;Post-configuration&quot;">​</a></h3><p>Please refer to the instructions <a href="./raspberry_pi_pilotpi_rpios.html">here</a></p>`,121)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
