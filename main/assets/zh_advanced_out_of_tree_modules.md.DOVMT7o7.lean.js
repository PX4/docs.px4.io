import{_ as s,c as a,a8 as t,o as i}from"./chunks/framework.BDnHobkS.js";const u=JSON.parse('{"title":"外部模块（Out-of-Tree）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/advanced/out_of_tree_modules.md","filePath":"zh/advanced/out_of_tree_modules.md"}'),n={name:"zh/advanced/out_of_tree_modules.md"};function l(o,e,p,d,r,h){return i(),a("div",null,e[0]||(e[0]=[t(`<h1 id="外部模块-out-of-tree" tabindex="-1">外部模块（Out-of-Tree） <a class="header-anchor" href="#外部模块-out-of-tree" aria-label="Permalink to &quot;外部模块（Out-of-Tree）&quot;">​</a></h1><p>外部模块为开发人员提供了一种便捷的机制，可以管理/分组他们想要添加（或更新）PX4 固件的专有模块。 外部模块可以使用与内部模块相同的includes，并可以通过uORB与内部模块交互。</p><p>本主题说明如何将外部（“out of tree”）模块添加到 PX4 编译中。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We encourage you to contribute your changes into PX4, where possible!</p></div><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><p>要创建外部模块：</p><ul><li><p>Create an <em>external directory</em> folder for grouping the external modules:</p><ul><li>This can be located anywhere outside of the <strong>PX4-Autopilot</strong> tree.</li><li>It must have the same structure as <strong>PX4-Autopilot</strong> (i.e. it must contain a directory called <strong>src</strong>).</li><li>Later we refer to this directory using <code>EXTERNAL_MODULES_LOCATION</code>.</li></ul></li><li><p>Copy an existing module (e.g. <strong>examples/px4_simple_app</strong>) to the external directory, or directly create a new module.</p></li><li><p>Rename the module (including <code>MODULE</code> in <strong>CMakeLists.txt</strong>) or remove it from the existing PX4-Autopilot <em>cmake</em> build config. 这是为了避免与内部模块发生冲突。</p></li><li><p>Add a file <strong>CMakeLists.txt</strong> in the external directory with content:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_module_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modules/&lt;new_module&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div></li><li><p>Add a line <code>EXTERNAL</code> to the <code>modules/&lt;new_module&gt;/CMakeLists.txt</code> within <code>px4_add_module()</code>, for example like this:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">px4_add_module(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	MODULE modules__test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	MAIN test_app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	STACK_MAIN 2000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	SRCS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		px4_simple_app.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	DEPENDS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		platforms__common</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	EXTERNAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	)</span></span></code></pre></div></li></ul><h2 id="out-of-tree-uorb-消息定义" tabindex="-1">Out-of-Tree uORB 消息定义 <a class="header-anchor" href="#out-of-tree-uorb-消息定义" aria-label="Permalink to &quot;Out-of-Tree uORB 消息定义&quot;">​</a></h2><p>树外uORB消息将在与正常uORB消息相同的位置生成。 For this, the <code>$EXTERNAL_MODULES_LOCATION/msg</code> folder must exist.</p><ul><li><p>Place all new message definitions within the <code>$EXTERNAL_MODULES_LOCATION/msg</code> directory. The format of these new out-of-tree message definitions are the same as for any other <a href="./../middleware/uorb.html#adding-a-new-topic">uORB message definition</a>.</p></li><li><p>Add a file <code>$EXTERNAL_MODULES_LOCATION/msg/CMakeLists.txt</code> with content:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_msg_list_external</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message1&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message2&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;message3&gt;.msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PARENT_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><p>where <code>&lt;message#&gt;.msg</code> is the name of the uORB message definition file to be processed and used for uORB message generation.</p></li></ul><p>树外 uORB 消息将在与正常 uORB 消息相同的位置生成。 The uORB topic headers are generated in <code>&lt;build_dir&gt;/uORB/topics/</code>, and the message source files are generated in <code>&lt;build_dir&gt;/msg/topics_sources/</code>.</p><p>The new uORB messages can be used like any other uORB message as described <a href="./../middleware/uorb.html#adding-a-new-topic">here</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The out-of-tree uORB message definitions cannot have the same name as any of the normal uORB messages.</p></div><h2 id="构建外部模块和-uorb-消息" tabindex="-1">构建外部模块和 uORB 消息 <a class="header-anchor" href="#构建外部模块和-uorb-消息" aria-label="Permalink to &quot;构建外部模块和 uORB 消息&quot;">​</a></h2><p>Execute <code>make px4_sitl EXTERNAL_MODULES_LOCATION=&lt;path&gt;</code>.</p><p>任何其他构建目标都可以使用，但构建目录尚不存在。 If it already exists, you can also just set the <em>cmake</em> variable in the build folder.</p><p>For subsequent incremental builds <code>EXTERNAL_MODULES_LOCATION</code> does not need to be specified.</p>`,17)]))}const E=s(n,[["render",l]]);export{u as __pageData,E as default};
