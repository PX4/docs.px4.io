import{_ as a,c as i,a8 as e,o as t}from"./chunks/framework.BDnHobkS.js";const k=JSON.parse('{"title":"VehicleAirData (UORB message)","description":"","frontmatter":{},"headers":[],"relativePath":"zh/msg_docs/VehicleAirData.md","filePath":"zh/msg_docs/VehicleAirData.md"}'),n={name:"zh/msg_docs/VehicleAirData.md"};function l(r,s,p,h,c,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="vehicleairdata-uorb-message" tabindex="-1">VehicleAirData (UORB message) <a class="header-anchor" href="#vehicleairdata-uorb-message" aria-label="Permalink to &quot;VehicleAirData (UORB message)&quot;">â€‹</a></h1><p><a href="https://github.com/PX4/PX4-Autopilot/blob/main/msg/VehicleAirData.msg" target="_blank" rel="noreferrer">source file</a></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp            # time since system </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint64 timestamp_sample     # the timestamp of the raw </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (microseconds)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint32 baro_device_id       # unique device ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the selected barometer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 baro_alt_meter			# Altitude above MSL calculated from temperature compensated baro sensor data using an ISA corrected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sea level pressure SENS_BARO_QNH.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 baro_temp_celcius		# Temperature in degrees Celsius</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 baro_pressure_pa		# Absolute pressure in Pascals</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 rho				# air density</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float32 eas2tas         # equivalent airspeed to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> airspeed conversion factor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uint8 calibration_count     # Calibration changed counter. Monotonically increases whenever calibration changes.</span></span></code></pre></div>`,3)]))}const E=a(n,[["render",l]]);export{k as __pageData,E as default};
