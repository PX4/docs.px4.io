(window.webpackJsonp=window.webpackJsonp||[]).push([[1971],{3541:function(t,a,e){"use strict";e.r(a);var s=e(19),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"系统启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统启动"}},[t._v("#")]),t._v(" 系统启动")]),t._v(" "),e("p",[t._v("PX4 系统的启动由 shell 脚本文件控制。 在 NuttX 平台上这些脚本文件位于 "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/ROMFS/px4fmu_common/init.d",target:"_blank",rel:"noopener noreferrer"}},[t._v("ROMFS/px4fmu_common/init.d"),e("OutboundLink")],1),t._v(" 文件夹下 - 该文件夹下的部分脚本文件也适用于 Posix (Linux/MacOS) 平台。 仅适用于 Posix 平台的启动脚本文件可以在 "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/ROMFS/px4fmu_common/init.d-posix",target:"_blank",rel:"noopener noreferrer"}},[t._v("ROMFS/px4fmu_common/init.d-posix"),e("OutboundLink")],1),t._v(" 文件夹下找到。")]),t._v(" "),e("p",[t._v("上述文件夹中以数字和下划线为文件名开头的脚本文件（例如，"),e("code",[t._v("10000_airplane")]),t._v("）都是封装好的机架构型配置文件。 这些文件在编译时会被导出至 "),e("code",[t._v("airframes.xml")]),t._v(" 文件中，"),e("a",{attrs:{href:"http://qgroundcontrol.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("QGroundControl"),e("OutboundLink")],1),t._v(" 通过解析该 xml 文件得到可以在 UI 界面上进行选择的机架构型。 Adding a new configuration is covered "),e("RouterLink",{attrs:{to:"/zh/dev_airframes/adding_a_new_frame.html"}},[t._v("here")]),t._v(".")],1),t._v(" "),e("p",[t._v("其它的文件则是系统常规启动逻辑的一部分。 在启动过程中第一个被系统执行的脚本文件是 "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/blob/main/ROMFS/px4fmu_common/init.d/rcS",target:"_blank",rel:"noopener noreferrer"}},[t._v("init.d/rcS"),e("OutboundLink")],1),t._v(" （Posix 平台则为 "),e("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/blob/main/ROMFS/px4fmu_common/init.d-posix/rcS",target:"_blank",rel:"noopener noreferrer"}},[t._v("init.d-posix/rcS"),e("OutboundLink")],1),t._v(" on Posix)），该脚本会调用所有的其它脚本。")]),t._v(" "),e("p",[t._v("根据 PX4 运行的操作系统将本文后续内容分成了如下各小节。")]),t._v(" "),e("h2",{attrs:{id:"posix-linux-macos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#posix-linux-macos"}},[t._v("#")]),t._v(" Posix (Linux/MacOS)")]),t._v(" "),e("p",[t._v("在 Posix 操作系统上，系统的 shell 将会作为脚本文件的解释器（例如， 在 Ubuntu 中 /bin/sh 与 Dash 建立了符号链接）。 为了使 PX4 可以在 Posix 中正常运行，需要做到以下几点：")]),t._v(" "),e("ul",[e("li",[t._v("PX4 的各个模块需要看起来像系统的单个可执行文件。 这一点可以通过创建符号链接做到。 每一个模块都根据命名规则： "),e("code",[t._v("px4-<module> -> px4")]),t._v(" 在编译文件夹 "),e("code",[t._v("bin")]),t._v(" 下创建了相应的符号链接。 在执行命令时，系统将检查命令的二进制路径 ("),e("code",[t._v("argv[0]")]),t._v(")，如果系统发现该命令是 PX4 的一个模块（命令名称以 "),e("code",[t._v("px4-")]),t._v(" 起头），那么系统将会把这个命令发送给 PX4 主实例（见下文）。")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[e("code",[t._v("px4-")]),t._v(" 前缀用于避免与系统命令的冲突 (例如) "),e("code",[t._v("关机")]),t._v("), 它也允许通过输入 "),e("code",[t._v("px4-<TAB>")]),t._v(" 并使用tab键来完成命令自动填充。")])]),t._v(" "),e("ul",[e("li",[t._v("Shell 需要知道在那里可以找到上述符号链接。 为此，在运行启动脚本前会将包含符号链接文件的 "),e("code",[t._v("bin")]),t._v(" 目录添加至操作系统的 "),e("code",[t._v("PATH")]),t._v(" 环境变量中。")]),t._v(" "),e("li",[t._v("Shell 将每个模块作为一个新的 (客户端) 进程进行启动， 每个客户端进程都需要与 PX4 主实例（服务器）进行通讯，实际的模块以线程的形式运行。 该过程通过 "),e("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/unix.7.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("UNIX socket"),e("OutboundLink")],1),t._v(" 实现。 服务器侦听一个 socket，然后客户端将连接该 socket 并通过它发送指令。 服务器收到客户端的指令后将指令运行的输出结果及返回代码重新发送给客户端。")]),t._v(" "),e("li",[t._v("启动脚本直接调用各模块，例如 "),e("code",[t._v("commander start")]),t._v(", 而不使用 "),e("code",[t._v("px4-")]),t._v(" 这个前缀。 这一点可以通过设置别名（aliase）来实现："),e("code",[t._v("bin/px4-alias.sh")]),t._v(" 文件会给每一个模块以 "),e("code",[t._v("alias <module>=px4-<module>")]),t._v(" 的形式设置好模块的别名。")]),t._v(" "),e("li",[e("code",[t._v("rcS")]),t._v(" 脚本由 PX4 主实例调用执行。 该脚本并不开启任何模块，它仅仅首先更新 "),e("code",[t._v("PATH")]),t._v(" 环境变量然后以 "),e("code",[t._v("rcS")]),t._v(" 文件作为值参数开启操作系统的 shell 。")]),t._v(" "),e("li",[t._v("除此之外，在进行多飞行器仿真时还可以启动多个服务器实例。 客户端可通过 "),e("code",[t._v("--instance")]),t._v(" 选择服务器实例。 该实例可通过 "),e("code",[t._v("$px4_instance")]),t._v(" 变量在脚本中使用。")])]),t._v(" "),e("p",[t._v("当 PX4 在操作系统上处于运行状态时可以从任意终端直接运行各个模块。 例如：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Firmware"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/build/px4_sitl_default/bin\n./px4-commander takeoff\n./px4-listener sensor_accel\n")])])]),e("h3",{attrs:{id:"dynamic-modules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-modules"}},[t._v("#")]),t._v(" Dynamic Modules")]),t._v(" "),e("p",[t._v("通常，所有模块都被编入一个 PX4 可执行程序。 然而，在Posix上，可以将模块编译成单独的文件，可以使用 "),e("code",[t._v("dyn")]),t._v(" 命令加载到 PX4。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("dyn ./test.px4mod\n")])])]),e("h2",{attrs:{id:"nuttx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nuttx"}},[t._v("#")]),t._v(" NuttX")]),t._v(" "),e("p",[t._v("软件组件的失效可以不中止 PX4 系统的启动， 这一特性可以在启动脚本中使用 "),e("code",[t._v("set +e")]),t._v(" 来实现。")]),t._v(" "),e("h3",{attrs:{id:"替换系统的启动文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#替换系统的启动文件"}},[t._v("#")]),t._v(" 替换系统的启动文件")]),t._v(" "),e("p",[t._v("软件组件的失效不会中止 PX4 系统的启动， 可以在启动脚本中使用 "),e("code",[t._v("set +e")]),t._v(" 来控制。")]),t._v(" "),e("p",[t._v("连接至 "),e("RouterLink",{attrs:{to:"/zh/debug/system_console.html"}},[t._v("系统控制台（system console）")]),t._v(" 后重启飞控板可以进行对系统启动引导序列进行调试。 由此生成的启动引导日志文件中包含了引导序列的详细信息，同时也应包含了解释启动中止的线索。")],1),t._v(" "),e("h4",{attrs:{id:"启动失败的常见原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动失败的常见原因"}},[t._v("#")]),t._v(" 启动失败的常见原因")]),t._v(" "),e("ul",[e("li",[t._v("For custom applications: The system was out of RAM. Run the "),e("code",[t._v("free")]),t._v(" command to see the amount of free RAM.")]),t._v(" "),e("li",[t._v("A software fault or assertion resulting in a stack trace")])]),t._v(" "),e("h3",{attrs:{id:"自定义系统的启动文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义系统的启动文件"}},[t._v("#")]),t._v(" 自定义系统的启动文件")]),t._v(" "),e("p",[t._v("可以通过在microSD卡中创建新的配置文件 "),e("code",[t._v("/etc/rc.xt")]),t._v("来替换整个启动过程(旧配置中的任何内容都不会自动启动，如果该文件为空，则不会启动任何内容)。")]),t._v(" "),e("p",[t._v("根据默认启动程序来进行定制化是一个比较好地开始。 文档如下。")]),t._v(" "),e("h3",{attrs:{id:"自定义系统的启动文件-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义系统的启动文件-2"}},[t._v("#")]),t._v(" 自定义系统的启动文件")]),t._v(" "),e("p",[t._v("自定义系统启动的最佳方式是引入一个 "),e("RouterLink",{attrs:{to:"/zh/dev_airframes/adding_a_new_frame.html"}},[t._v("新机架配置")]),t._v("。 机架配置文件可以在固件中，也可以在SD卡上。")],1),t._v(" "),e("p",[t._v("如果您只需要“调整”现有的配置，如启动另一个应用程序或设置几个参数的值， 您可以在 "),e("code",[t._v("/etc/")]),t._v(" 目录中创建两个文件来处理：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#customizing-the-configuration-config-txt"}},[t._v("/etc/config.txt")]),t._v(": 修改参数值")]),t._v(" "),e("li",[e("a",{attrs:{href:"#starting-additional-applications-extras-txt"}},[t._v("/etc/extras.txt")]),t._v(": 启动应用程序")])]),t._v(" "),e("p",[t._v("文件具体信息在后面介绍。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("系统启动文件是 UNIX 文件，该文件要求以UNIX规范的LF作为行结束符。\n如果在Windows上编辑，需要使用合适的编辑器。")])]),t._v(" "),e("div",{staticClass:"custom-block note"},[e("p",{staticClass:"custom-block-title"},[t._v("注解")]),t._v(" "),e("p",[t._v("这些文件在 PX4 代码中被引用为 "),e("code",[t._v("/fs/microsd/etc/config.txt")]),t._v(" 和 "),e("code",[t._v("/fs/microsd/etc/extras.xt")]),t._v(", microsd卡的根文件夹路径为 "),e("code",[t._v("/fs/microsd")]),t._v("。")])]),t._v(" "),e("h4",{attrs:{id:"自定义配置-config-txt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义配置-config-txt"}},[t._v("#")]),t._v(" 自定义配置（config.txt）")]),t._v(" "),e("p",[e("code",[t._v("config.txt")]),t._v(" 文件可以用来修改参数。 It is loaded after the main system has been configured and "),e("em",[t._v("before")]),t._v(" it is booted.")]),t._v(" "),e("p",[t._v("例如，您可以在 SD 卡上创建一个文件， "),e("code",[t._v("etc/config.txt")]),t._v(" 该文件设置的参数值如下所示：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("param set-default PWM_MAIN_DIS3 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\nparam set-default PWM_MAIN_MIN3 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1120")]),t._v("\n")])])]),e("h4",{attrs:{id:"启动附加应用程序-extras-txt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动附加应用程序-extras-txt"}},[t._v("#")]),t._v(" 启动附加应用程序 (extras.txt)")]),t._v(" "),e("p",[e("code",[t._v("extras.txt")]),t._v(" 可用于在主系统启动后启动额外的应用程序。 通常，额外启动的将是有效载荷控制器或类似的可选自定义组件。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("在系统启动文件中调用未知命令可能导致启动失败。\n通常情况下系统在启动失败后不会发送 mavlink 消息，在这种情况下请检查系统控制台上输出的的错误消息。")])]),t._v(" "),e("p",[t._v("下面的示例演示了如何启动自定义应用程序:")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在 SD 卡上创建一个文件 "),e("code",[t._v("etc/extras.txt")]),t._v(" ，包含如下内容：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("custom_app start\n")])])])]),t._v(" "),e("li",[e("p",[t._v("搭配使用 "),e("code",[t._v("set +e")]),t._v(" 和 "),e("code",[t._v("set -e")]),t._v(" 可以将命令设置为可选命令：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" +e\noptional_app start      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Will not result in boot failure if optional_app is unknown or fails")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -e\n\nmandatory_app start     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Will abort boot if mandatory_app is unknown or fails")]),t._v("\n")])])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);