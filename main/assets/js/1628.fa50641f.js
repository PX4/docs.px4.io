(window.webpackJsonp=window.webpackJsonp||[]).push([[1628],{3072:function(t,s,a){"use strict";a.r(s);var e=a(19),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"adcreport-uorb-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adcreport-uorb-message"}},[t._v("#")]),t._v(" AdcReport (UORB message)")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/blob/main/msg/AdcReport.msg",target:"_blank",rel:"noopener noreferrer"}},[t._v("source file"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("uint64 timestamp        # time since system "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("microseconds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nuint32 device_id        # unique device ID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the sensor that does not change between power cycles\nint16"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" channel_id        # ADC channel IDs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" negative "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" non"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("existent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TODO"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" should be kept same as array index\nint32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" raw_data      # ADC channel raw value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" accept negative value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" channel ID is positive\nuint32 resolution       # ADC channel resolution\nfloat32 v_ref           # ADC channel voltage reference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" use to calculate LSB "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("voltage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lsb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("scale"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("resolution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);