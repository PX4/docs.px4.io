(window.webpackJsonp=window.webpackJsonp||[]).push([[1628],{3076:function(e,t,a){"use strict";a.r(t);var s=a(19),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"모듈-참조-명령"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#모듈-참조-명령"}},[e._v("#")]),e._v(" 모듈 참조: 명령")]),e._v(" "),a("h2",{attrs:{id:"bl-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bl-update"}},[e._v("#")]),e._v(" bl_update")]),e._v(" "),a("p",[e._v("소스: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/bl_update",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/bl_update"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("파일에서 부트로더를 플래시하는 유틸리티")]),e._v(" "),a("p",[e._v("WARNING: remove all props before using this command.")]),e._v(" "),a("p",[a("a",{attrs:{id:"actuator_test_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bl_update [arguments...]\n setopt        옵션 비트를 설정하여 FLASH를 잠금 해제합니다(잠긴 상태인 경우에만 필요).\n   <file>        부트로더 바이너리 파일\n")])])]),a("h2",{attrs:{id:"dumpfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dumpfile"}},[e._v("#")]),e._v(" dumpfile")]),e._v(" "),a("p",[e._v("소스: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/dyn",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/dyn"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("PX4 바이너리로 컴파일되지 않은 동적 PX4 모듈을 로드하고 실행합니다.\n"),a("a",{attrs:{id:"bl_update_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dumpfile [arguments...]\n   <file>      덤프할 파일\n")])])]),a("h2",{attrs:{id:"bsondump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bsondump"}},[e._v("#")]),e._v(" bsondump")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/systemcmds/bsondump",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/bsondump"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("read BSON from a file and print in human form\n"),a("a",{attrs:{id:"bsondump_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-2"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bsondump [arguments...]\n     <file>      File name\n")])])]),a("h2",{attrs:{id:"dyn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dyn"}},[e._v("#")]),e._v(" dyn")]),e._v(" "),a("p",[e._v("소스: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/esc_calib",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/esc_calib"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Dump file utility. Prints file size and contents in binary mode (don't replace LF with CR LF) to stdout.\n"),a("a",{attrs:{id:"dumpfile_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-2"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dumpfile [arguments...]\n     <file>      File to dump\n")])])]),a("h2",{attrs:{id:"esc-calib"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#esc-calib"}},[e._v("#")]),e._v(" esc_calib")]),e._v(" "),a("p",[e._v("보정 절차(명령을 실행하면 안내 도움말이 표시됨):")]),e._v(" "),a("h3",{attrs:{id:"예"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#예"}},[e._v("#")]),e._v(" 예")]),e._v(" "),a("p",[e._v("소스: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/failure",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/failure"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"사용법-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-3"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dyn ./hello.px4mod start\n")])])]),a("p",[a("a",{attrs:{id:"dyn_usage"}})]),e._v(" "),a("h3",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("esc_calib [arguments...]\n     [-d <val>]  Select PWM output device\n                 values: <file:dev>, default: /dev/pwm_output0\n     [-l <val>]  Low PWM value in us\n                 default: 1000\n     [-h <val>]  High PWM value in us\n                 default: 2000\n     [-c <val>]  select channels in the form: 1234 (1 digit per channel,\n                 1=first)\n     [-m <val>]  Select channels via bitmask (eg. 0xF, 3)\n     [-a]        Select all channels Arguments to the module\n")])])]),a("h2",{attrs:{id:"failure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#failure"}},[e._v("#")]),e._v(" failure")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/failure",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/failure"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[e._v("#")]),e._v(" Description")]),e._v(" "),a("p",[e._v("Inject failures into system.")]),e._v(" "),a("h3",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),a("p",[e._v("This system command sends a vehicle command over uORB to trigger failure.")]),e._v(" "),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("p",[e._v("Test the GPS failsafe by stopping GPS:")]),e._v(" "),a("p",[e._v("failure gps off")]),e._v(" "),a("p",[a("a",{attrs:{id:"failure_usage"}})]),e._v(" "),a("h3",{attrs:{id:"usage-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-2"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("failure [arguments...]\n   help          Show this help text\n\n   gps|...       Specify component\n\n   ok|off|...    Specify failure type\n     [-i <val>]  sensor instance (0=all)\n                 default: 0\n")])])]),a("h2",{attrs:{id:"gpio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpio"}},[e._v("#")]),e._v(" gpio")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/gpio",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/gpio"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"description-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-2"}},[e._v("#")]),e._v(" Description")]),e._v(" "),a("p",[e._v("This command is used to read and write GPIOs")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gpio read <PORT><PIN>/<DEVICE> [PULLDOWN|PULLUP] [--force]\ngpio write <PORT><PIN>/<DEVICE> <VALUE> [PUSHPULL|OPENDRAIN] [--force]\n")])])]),a("h3",{attrs:{id:"examples-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-2"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("p",[e._v("Read the value on port H pin 4 configured as pullup, and it is high")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gpio read H4 PULLUP\n")])])]),a("p",[e._v("1 OK")]),e._v(" "),a("p",[e._v("Set the output value on Port E pin 7 to high")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gpio write E7 1 --force\n")])])]),a("p",[e._v("Set the output value on device /dev/gpio1 to high")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gpio write /dev/gpio1 1\n")])])]),a("p",[a("a",{attrs:{id:"gpio_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-4"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gpio [arguments...]\n   read\n     <PORT><PIN>/<DEVICE> GPIO port and pin or device\n     [PULLDOWN|PULLUP] Pulldown/Pullup\n     [--force]   Force (ignore board gpio list)\n\n   write\n     <PORT> <PIN> GPIO port and pin\n     <VALUE>     Value to write\n     [PUSHPULL|OPENDRAIN] Pushpull/Opendrain\n     [--force]   Force (ignore board gpio list)\n")])])]),a("h2",{attrs:{id:"hardfault-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hardfault-log"}},[e._v("#")]),e._v(" hardfault_log")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/hardfault_log",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/hardfault_log"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Hardfault utility")]),e._v(" "),a("p",[e._v("Used in startup scripts to handle hardfaults")]),e._v(" "),a("p",[a("a",{attrs:{id:"hardfault_log_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-5"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("hardfault_log <command> [arguments...]\n Commands:\n   check         Check if there's an uncommitted hardfault\n\n   rearm         Drop an uncommitted hardfault\n\n   fault         Generate a hardfault (this command crashes the system :)\n     [0|1]       Hardfault type: 0=divide by 0, 1=Assertion (default=0)\n\n   commit        Write uncommitted hardfault to /fs/microsd/fault_%i.txt (and\n                 rearm, but don't reset)\n\n   count         Read the reboot counter, counts the number of reboots of an\n                 uncommitted hardfault (returned as the exit code of the\n                 program)\n\n   reset         Reset the reboot counter\n")])])]),a("h2",{attrs:{id:"hist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hist"}},[e._v("#")]),e._v(" hist")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/systemcmds/hist",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/hist"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Command-line tool to show the px4 message history. There are no arguments.\n"),a("a",{attrs:{id:"hist_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-3"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("hist [arguments...]\n")])])]),a("h2",{attrs:{id:"i2cdetect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i2cdetect"}},[e._v("#")]),e._v(" i2cdetect")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/i2cdetect",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/i2cdetect"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Utility to scan for I2C devices on a particular bus.\n"),a("a",{attrs:{id:"i2cdetect_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-6"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("i2cdetect [arguments...]\n     [-b <val>]  I2C bus\n                 default: 1\n")])])]),a("h2",{attrs:{id:"led-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#led-control"}},[e._v("#")]),e._v(" led_control")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/led_control",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/led_control"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"description-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-3"}},[e._v("#")]),e._v(" Description")]),e._v(" "),a("p",[e._v("Command-line tool to control & test the (external) LED's.")]),e._v(" "),a("p",[e._v("To use it make sure there's a driver running, which handles the led_control uorb topic.")]),e._v(" "),a("p",[e._v("There are different priorities, such that for example one module can set a color with low priority, and another module can blink N times with high priority, and the LED's automatically return to the lower priority state after the blinking. The "),a("code",[e._v("reset")]),e._v(" command can also be used to return to a lower priority.")]),e._v(" "),a("h3",{attrs:{id:"examples-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-3"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("p",[e._v("Blink the first LED 5 times in blue:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("led_control blink -c blue -l 0 -n 5\n")])])]),a("p",[a("a",{attrs:{id:"led_control_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-7"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("led_control <command> [arguments...]\n Commands:\n   test          Run a test pattern\n\n   on            Turn LED on\n\n   off           Turn LED off\n\n   reset         Reset LED priority\n\n   blink         Blink LED N times\n     [-n <val>]  Number of blinks\n                 default: 3\n     [-s <val>]  Set blinking speed\n                 values: fast|normal|slow, default: normal\n\n   breathe       Continuously fade LED in & out\n\n   flash         Two fast blinks and then off with frequency of 1Hz\n\n The following arguments apply to all of the above commands except for 'test':\n     [-c <val>]  color\n                 values: red|blue|green|yellow|purple|amber|cyan|white, default:\n                 white\n     [-l <val>]  Which LED to control: 0, 1, 2, ... (default=all)\n     [-p <val>]  Priority\n                 default: 2\n")])])]),a("h2",{attrs:{id:"listener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listener"}},[e._v("#")]),e._v(" listener")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/topic_listener",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/topic_listener"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Utility to listen on uORB topics and print the data to the console.")]),e._v(" "),a("p",[e._v("The listener can be exited any time by pressing Ctrl+C, Esc, or Q.")]),e._v(" "),a("p",[a("a",{attrs:{id:"listener_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-4"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("listener <command> [arguments...]\n Commands:\n     <topic_name> uORB topic name\n     [-i <val>]  Topic instance\n                 default: 0\n     [-n <val>]  Number of messages\n                 default: 1\n     [-r <val>]  Subscription rate (unlimited if 0)\n                 default: 0\n")])])]),a("h2",{attrs:{id:"mfd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mfd"}},[e._v("#")]),e._v(" mfd")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/mft",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/mft"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Utility interact with the manifest\n"),a("a",{attrs:{id:"mfd_usage"}})]),e._v(" "),a("h3",{attrs:{id:"usage-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-3"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mfd <command> [arguments...]\n Commands:\n   query         Returns true if not existed\n")])])]),a("h2",{attrs:{id:"mtd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mtd"}},[e._v("#")]),e._v(" mtd")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/mtd",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/mtd"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Utility to mount and test partitions (based on FRAM/EEPROM storage as defined by the board)\n"),a("a",{attrs:{id:"mtd_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-5"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mtd <command> [arguments...]\n Commands:\n   status        Print status information\n\n   readtest      Perform read test\n\n   rwtest        Perform read-write test\n\n   erase         Erase partition(s)\n\n The commands 'readtest' and 'rwtest' have an optional instance index:\n     [-i <val>]  storage index (if the board has multiple storages)\n                 default: 0\n\n The commands 'readtest', 'rwtest' and 'erase' have an optional parameter:\n     [<partition_name1> [<partition_name2> ...]] Partition names (eg.\n                 /fs/mtd_params), use system default if not provided\n")])])]),a("h2",{attrs:{id:"nshterm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nshterm"}},[e._v("#")]),e._v(" nshterm")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/nshterm",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/nshterm"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Start an NSH shell on a given port.")]),e._v(" "),a("p",[e._v("This was previously used to start a shell on the USB serial port. Now there runs mavlink, and it is possible to use a shell over mavlink.")]),e._v(" "),a("p",[a("a",{attrs:{id:"nshterm_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-6"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("nshterm [arguments...]\n     <file:dev>  Device on which to start the shell (eg. /dev/ttyACM0)\n")])])]),a("h2",{attrs:{id:"param"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#param"}},[e._v("#")]),e._v(" param")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/param",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/param"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"description-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-4"}},[e._v("#")]),e._v(" Description")]),e._v(" "),a("p",[e._v("Command to access and manipulate parameters via shell or script.")]),e._v(" "),a("p",[e._v("This is used for example in the startup script to set airframe-specific parameters.")]),e._v(" "),a("p",[e._v("Parameters are automatically saved when changed, eg. with "),a("code",[e._v("param set")]),e._v(". They are typically stored to FRAM or to the SD card. "),a("code",[e._v("param select")]),e._v(" can be used to change the storage location for subsequent saves (this will need to be (re-)configured on every boot).")]),e._v(" "),a("p",[e._v("If the FLASH-based backend is enabled (which is done at compile time, e.g. for the Intel Aero or Omnibus), "),a("code",[e._v("param select")]),e._v(" has no effect and the default is always the FLASH backend. However "),a("code",[e._v("param save/load <file>")]),e._v(" can still be used to write to/read from files.")]),e._v(" "),a("p",[e._v("Each parameter has a 'used' flag, which is set when it's read during boot. It is used to only show relevant parameters to a ground control station.")]),e._v(" "),a("h3",{attrs:{id:"examples-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-4"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("p",[e._v("Change the airframe and make sure the airframe's default parameters are loaded:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("param set SYS_AUTOSTART 4001\nparam set SYS_AUTOCONFIG 1\nreboot\n")])])]),a("p",[a("a",{attrs:{id:"param_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-8"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("param <command> [arguments...]\n Commands:\n   load          Load params from a file (overwrite all)\n     [<file>]    File name (use default if not given)\n\n   import        Import params from a file\n     [<file>]    File name (use default if not given)\n\n   save          Save params to a file\n     [<file>]    File name (use default if not given)\n\n   select        Select default file\n     [<file>]    File name\n\n   select-backup Select default file\n     [<file>]    File name\n\n   show          Show parameter values\n     [-a]        Show all parameters (not just used)\n     [-c]        Show only changed params (unused too)\n     [-q]        quiet mode, print only param value (name needs to be exact)\n     [<filter>]  Filter by param name (wildcard at end allowed, eg. sys_*)\n\n   show-for-airframe Show changed params for airframe config\n\n   status        Print status of parameter system\n\n   set           Set parameter to a value\n     <param_name> <value> Parameter name and value to set\n     [fail]      If provided, let the command fail if param is not found\n\n   set-default   Set parameter default to a value\n     [-s]        If provided, silent errors if parameter doesn't exists\n     <param_name> <value> Parameter name and value to set\n     [fail]      If provided, let the command fail if param is not found\n\n   compare       Compare a param with a value. Command will succeed if equal\n     [-s]        If provided, silent errors if parameter doesn't exists\n     <param_name> <value> Parameter name and value to compare\n\n   greater       Compare a param with a value. Command will succeed if param is\n                 greater than the value\n     [-s]        If provided, silent errors if parameter doesn't exists\n     <param_name> <value> Parameter name and value to compare\n     <param_name> <value> Parameter name and value to compare\n\n   touch         Mark a parameter as used\n     [<param_name1> [<param_name2>]] Parameter name (one or more)\n\n   reset         Reset only specified params to default\n     [<param1> [<param2>]] Parameter names to reset (wildcard at end allowed)\n\n   reset_all     Reset all params to default\n     [<exclude1> [<exclude2>]] Do not reset matching params (wildcard at end\n                 allowed)\n\n   index         Show param for a given index\n     <index>     Index: an integer >= 0\n\n   index_used    Show used param for a given index\n     <index>     Index: an integer >= 0\n\n   find          Show index of a param\n     <param>     param name\n")])])]),a("h2",{attrs:{id:"payload-deliverer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#payload-deliverer"}},[e._v("#")]),e._v(" payload_deliverer")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/payload_deliverer",target:"_blank",rel:"noopener noreferrer"}},[e._v("modules/payload_deliverer"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"description-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-5"}},[e._v("#")]),e._v(" Description")]),e._v(" "),a("p",[e._v("Handles payload delivery with either Gripper or a Winch with an appropriate timeout / feedback sensor setting, and communicates back the delivery result as an acknowledgement internally")]),e._v(" "),a("p",[a("a",{attrs:{id:"payload_deliverer_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-7"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("payload_deliverer <command> [arguments...]\n Commands:\n   start\n\n   gripper_test  Tests the Gripper's release & grabbing sequence\n\n   gripper_open  Opens the gripper\n\n   gripper_close Closes the gripper\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"perf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#perf"}},[e._v("#")]),e._v(" perf")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/perf",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/perf"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Tool to print performance counters\n"),a("a",{attrs:{id:"perf_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-8"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("perf [arguments...]\n   reset         Reset all counters\n\n   latency       Print HRT timer latency histogram\n\n Prints all performance counters if no arguments given\n")])])]),a("h2",{attrs:{id:"reboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reboot"}},[e._v("#")]),e._v(" reboot")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/reboot",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/reboot"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Reboot the system\n"),a("a",{attrs:{id:"reboot_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-9"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("reboot [arguments...]\n     [-b]        Reboot into bootloader\n     [-i]        Reboot into ISP (1st stage bootloader)\n     [lock|unlock] Take/release the shutdown lock (for testing)\n")])])]),a("h2",{attrs:{id:"sd-bench"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sd-bench"}},[e._v("#")]),e._v(" sd_bench")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/sd_bench",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/sd_bench"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Test the speed of an SD Card\n"),a("a",{attrs:{id:"sd_bench_usage"}})]),e._v(" "),a("h3",{attrs:{id:"사용법-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-9"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sd_bench [arguments...]\n     [-b <val>]  Block size for each read/write\n                 default: 4096\n     [-r <val>]  Number of runs\n                 default: 5\n     [-d <val>]  Duration of a run in ms\n                 default: 2000\n     [-k]        Keep the test file\n     [-s]        Call fsync after each block (default=at end of each run)\n     [-u]        Test performance with unaligned data\n     [-v]        Verify data and block number\n")])])]),a("h2",{attrs:{id:"sd-stress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sd-stress"}},[e._v("#")]),e._v(" sd_stress")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/sd_stress",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/sd_stress"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Test operations on an SD Card\n"),a("a",{attrs:{id:"sd_stress_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-10"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sd_stress [arguments...]\n     [-r <val>]  Number of runs\n                 default: 5\n     [-b <val>]  Number of bytes\n                 default: 100\n")])])]),a("h2",{attrs:{id:"serial-passthru"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-passthru"}},[e._v("#")]),e._v(" serial_passthru")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/serial_passthru",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/serial_passthru"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Pass data from one device to another.")]),e._v(" "),a("p",[e._v("This can be used to use u-center connected to USB with a GPS on a serial port.")]),e._v(" "),a("p",[a("a",{attrs:{id:"serial_passthru_usage"}})]),e._v(" "),a("h3",{attrs:{id:"usage-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-4"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("serial_passthru [arguments...]\n     -e <val>    External device path\n                 values: <file:dev>\n     -d <val>    Internal device path\n                 values: <file:dev>\n     [-b <val>]  Baudrate\n                 default: 115200\n     [-t]        Track the External devices baudrate on internal device\n")])])]),a("h2",{attrs:{id:"system-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-time"}},[e._v("#")]),e._v(" system_time")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/system_time",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/system_time"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"예-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#예-2"}},[e._v("#")]),e._v(" 예")]),e._v(" "),a("p",[e._v("Command-line tool to set and get system time.")]),e._v(" "),a("h3",{attrs:{id:"사용법-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#사용법-10"}},[e._v("#")]),e._v(" 사용법")]),e._v(" "),a("p",[e._v("Set the system time and read it back")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("system_time set 1600775044\nsystem_time get\n")])])]),a("p",[a("a",{attrs:{id:"system_time_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-11"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("system_time <command> [arguments...]\n Commands:\n   set           Set the system time, provide time in unix epoch time format\n\n   get           Get the system time\n")])])]),a("h2",{attrs:{id:"top"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[e._v("#")]),e._v(" top")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/top",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/top"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Monitor running processes and their CPU, stack usage, priority and state\n"),a("a",{attrs:{id:"top_usage"}})]),e._v(" "),a("h3",{attrs:{id:"설명-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#설명-12"}},[e._v("#")]),e._v(" 설명")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("top [arguments...]\n   once          print load only once\n")])])]),a("h2",{attrs:{id:"usb-connected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usb-connected"}},[e._v("#")]),e._v(" usb_connected")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/usb_connected",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/usb_connected"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Utility to check if USB is connected. Was previously used in startup scripts. A return value of 0 means USB is connected, 1 otherwise.\n"),a("a",{attrs:{id:"usb_connected_usage"}})]),e._v(" "),a("h3",{attrs:{id:"예-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#예-3"}},[e._v("#")]),e._v(" 예")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("usb_connected [arguments...]\n")])])]),a("h2",{attrs:{id:"ver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ver"}},[e._v("#")]),e._v(" ver")]),e._v(" "),a("p",[e._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/master/src/systemcmds/ver",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemcmds/ver"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Tool to print various version information\n"),a("a",{attrs:{id:"ver_usage"}})]),e._v(" "),a("h3",{attrs:{id:"usage-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-5"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ver <command> [arguments...]\n Commands:\n   hw            Hardware architecture\n\n   mcu           MCU info\n\n   git           git version information\n\n   bdate         Build date and time\n\n   gcc           Compiler info\n\n   bdate         Build date and time\n\n   px4guid       PX4 GUID\n\n   uri           Build URI\n\n   all           Print all versions\n\n   hwcmp         Compare hardware version (returns 0 on match)\n     <hw> [<hw2>] Hardware to compare against (eg. PX4_FMU_V4). An OR comparison\n                 is used if multiple are specified\n\n   hwtypecmp     Compare hardware type (returns 0 on match)\n     <hwtype> [<hwtype2>] Hardware type to compare against (eg. V2). An OR\n                 comparison is used if multiple are specified\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);