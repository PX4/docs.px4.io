(window.webpackJsonp=window.webpackJsonp||[]).push([[2018],{3610:function(e,t,a){"use strict";a.r(t);var r=a(19),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"mcu-link-debug-probe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mcu-link-debug-probe"}},[e._v("#")]),e._v(" MCU-Link Debug Probe")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://www.nxp.com/design/design-center/software/development-software/mcuxpresso-software-and-tools-/mcu-link-debug-probe:MCU-LINK",target:"_blank",rel:"noopener noreferrer"}},[e._v("MCU-Link Debug Probe"),a("OutboundLink")],1),e._v(" is a cheap, fast and highly capable debug probe that can serve as a stand-alone debug and console communicator whn working with Pixhawk boards.")]),e._v(" "),a("p",[e._v("Key features:")]),e._v(" "),a("ul",[a("li",[e._v("Just one single USB-C connection for Reset, SWD, SWO, and serial in a very small package!")]),e._v(" "),a("li",[e._v("Up to 9.6MBit/s SWO connection.\nUp to 5 MBaud serial. 1.2V to 5V target voltage.\nUSB2 high-speed 480 Mbps connection.")]),e._v(" "),a("li",[e._v("Driven by NXP LinkServer or pyOCD software with wide device support.")]),e._v(" "),a("li",[e._v("Much cheaper (<15€) than a Pixhawk Debug Adapter (~20€) with a JLink EDU mini (~55€) or JLink BASE (~400€) while having better hardware specs.")])]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://holybro.com/products/pixhawk-debug-adapter",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pixhawk Debug Adapter"),a("OutboundLink")],1),e._v(" provides an easy way to connect a Pixhawk to an MCU-Link (the probe does not come with an adapter for working with Pixhawk flight controllers).")]),e._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[e._v("注解")]),e._v(" "),a("p",[e._v("These instructions have been tested on: FMUv6X-RT, FMUv6X, FMUv6c, FMUv5X.")])]),e._v(" "),a("h2",{attrs:{id:"debugging-configuration-using-nxp-linkserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging-configuration-using-nxp-linkserver"}},[e._v("#")]),e._v(" Debugging Configuration using NXP LinkServer")]),e._v(" "),a("p",[e._v("The MCU-Link provides for NXP (FMUv6X-RT) chips the "),a("a",{attrs:{href:"https://www.nxp.com/design/design-center/software/development-software/mcuxpresso-software-and-tools-/linkserver-for-microcontrollers:LINKERSERVER",target:"_blank",rel:"noopener noreferrer"}},[e._v("LinkServer"),a("OutboundLink")],1),e._v(" GDB server:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.nxp.com/design/design-center/software/development-software/mcuxpresso-software-and-tools-/linkserver-for-microcontrollers:LINKERSERVER#downloads",target:"_blank",rel:"noopener noreferrer"}},[e._v("Download"),a("OutboundLink")],1),e._v(" the Linkserver for your operating system and follow the installation instructions.")]),e._v(" "),a("p",[e._v("On Windows LinkServer gets installed to "),a("code",[e._v("C:\\NXP\\LinkServer_x.x.x")]),e._v("\nOn Linux LinkServer gets installed "),a("code",[e._v("/usr/local/LinkServer/LinkServer")])]),e._v(" "),a("p",[e._v("To flash you can use the "),a("code",[e._v("LinkServer flash")]),e._v(" command with target "),a("code",[e._v("MIMXRT1176xxxxx:MIMXRT1170-EVK-CM7-ONLY")]),e._v(" for the FMUv6X-RT")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("/usr/local/LinkServer/LinkServer flash MIMXRT1176xxxxx:MIMXRT1170-EVK-CM7-ONLY load build/px4_fmu-v6xrt_default/px4_fmu-v6xrt_default.elf\n")])])]),a("p",[e._v("You can launch the GDB server in a new terminal shell:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("/usr/local/LinkServer/LinkServer gdbserver MIMXRT1176xxxxx:MIMXRT1170-EVK-CM7-ONLY\n")])])]),a("p",[e._v("Then connect to port 3333 via GDB:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("arm-none-eabi-gdb build/px4_fmu-v6xrt_default/px4_fmu-v6xrt_default.elf -ex "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"target extended-remote :3333"')]),e._v("\n")])])]),a("p",[e._v("Use GDB to load the binary into the Pixhawk:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("gdb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" load\n")])])]),a("h2",{attrs:{id:"debugging-configuration-using-pyocd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging-configuration-using-pyocd"}},[e._v("#")]),e._v(" Debugging Configuration using pyOCD")]),e._v(" "),a("p",[e._v("The MCU-Link provides the "),a("a",{attrs:{href:"https://pyocd.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GDB server via pyOCD"),a("OutboundLink")],1),e._v(":")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("python3 -m pip "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -U pyocd\n")])])]),a("p",[e._v("You can launch the GDB server in a new terminal shell:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("pyocd gdb -t mimxrt1170_cm7\n")])])]),a("p",[e._v("The target needs to be one of:")]),e._v(" "),a("ul",[a("li",[e._v("FMUv6X-RT: "),a("code",[e._v("mimxrt1170_cm7")])]),e._v(" "),a("li",[e._v("FMUv6X: "),a("code",[e._v("stm32h743xx")])]),e._v(" "),a("li",[e._v("FMUv6C: "),a("code",[e._v("stm32h743xx")])]),e._v(" "),a("li",[e._v("FMUv5X: "),a("code",[e._v("stm32f767zi")])])]),e._v(" "),a("p",[e._v("You can then connect to port 3333 via GDB:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("arm-none-eabi-gdb build/px4_fmu-v6xrt_default/px4_fmu-v6xrt_default.elf -ex "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"target extended-remote :3333"')]),e._v("\n")])])]),a("p",[e._v("Use GDB to load the binary into the Pixhawk:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("gdb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" load\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);