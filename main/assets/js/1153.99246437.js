(window.webpackJsonp=window.webpackJsonp||[]).push([[1153],{2292:function(t,e,a){"use strict";a.r(e);var s=a(19),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"modules-reference-driver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modules-reference-driver"}},[t._v("#")]),t._v(" Modules Reference: Driver")]),t._v(" "),a("p",[t._v("Subcategories:")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_imu.html"}},[t._v("Imu")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_distance_sensor.html"}},[t._v("Distance Sensor")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_ins.html"}},[t._v("Ins")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_airspeed_sensor.html"}},[t._v("Airspeed Sensor")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_baro.html"}},[t._v("Baro")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_transponder.html"}},[t._v("Transponder")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_rpm_sensor.html"}},[t._v("Rpm Sensor")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_optical_flow.html"}},[t._v("Optical Flow")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/modules/modules_driver_magnetometer.html"}},[t._v("Magnetometer")])],1)]),t._v(" "),a("h2",{attrs:{id:"mcp23009"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mcp23009"}},[t._v("#")]),t._v(" MCP23009")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/gpio/mcp23009",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/gpio/mcp23009"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"MCP23009_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("MCP23009 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 37\n     [-D <val>]  Direction\n                 default: 0\n     [-O <val>]  Output\n                 default: 0\n     [-P <val>]  Pullups\n                 default: 0\n     [-U <val>]  Update Interval [ms]\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"adc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adc"}},[t._v("#")]),t._v(" adc")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/adc/board_adc",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/adc/board_adc"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("ADC driver.")]),t._v(" "),a("p",[a("a",{attrs:{id:"adc_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-2"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("adc <command> [arguments...]\n Commands:\n   start\n\n   test\n     [-n]        Do not publish ADC report, only system power\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"ads1115"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ads1115"}},[t._v("#")]),t._v(" ads1115")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/adc/ads1115",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/adc/ads1115"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-2"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver to enable an external "),a("a",{attrs:{href:"https://www.adafruit.com/product/1085",target:"_blank",rel:"noopener noreferrer"}},[t._v("ADS1115"),a("OutboundLink")],1),t._v(" ADC connected via I2C.")]),t._v(" "),a("p",[t._v("The driver is included by default in firmware for boards that do not have an internal analog to digital converter,\nsuch as "),a("RouterLink",{attrs:{to:"/en/flight_controller/raspberry_pi_pilotpi.html"}},[t._v("PilotPi")]),t._v(" or "),a("RouterLink",{attrs:{to:"/en/flight_controller/cuav_nora.html"}},[t._v("CUAV Nora")]),t._v("\n(search for "),a("code",[t._v("CONFIG_DRIVERS_ADC_ADS1115")]),t._v(" in board configuration files).")],1),t._v(" "),a("p",[t._v("It is enabled/disabled using the\n"),a("RouterLink",{attrs:{to:"/en/advanced_config/parameter_reference.html#ADC_ADS1115_EN"}},[t._v("ADC_ADS1115_EN")]),t._v("\nparameter, and is disabled by default.\nIf enabled, internal ADCs are not used.")],1),t._v(" "),a("p",[a("a",{attrs:{id:"ads1115_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-3"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ads1115 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 72\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"atxxxx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#atxxxx"}},[t._v("#")]),t._v(" atxxxx")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/osd/atxxxx",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/osd/atxxxx"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-3"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("OSD driver for the ATXXXX chip that is mounted on the OmnibusF4SD board for example.")]),t._v(" "),a("p",[t._v("It can be enabled with the OSD_ATXXXX_CFG parameter.")]),t._v(" "),a("p",[a("a",{attrs:{id:"atxxxx_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-4"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("atxxxx <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"batmon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batmon"}},[t._v("#")]),t._v(" batmon")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/smart_battery/batmon",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/smart_battery/batmon"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-4"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for SMBUS Communication with BatMon enabled smart-battery\nSetup/usage information: https://rotoye.com/batmon-tutorial/")]),t._v(" "),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("To start at address 0x0B, on bus 4")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("batmon start -X -a 11 -b 4\n")])])]),a("p",[a("a",{attrs:{id:"batmon_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-5"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("batmon <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 11\n\n   man_info      Prints manufacturer info.\n\n   suspend       Suspends the driver from rescheduling the cycle.\n\n   resume        Resumes the driver from suspension.\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"batt-smbus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batt-smbus"}},[t._v("#")]),t._v(" batt_smbus")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/batt_smbus",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/batt_smbus"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-5"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Smart battery driver for the BQ40Z50 fuel gauge IC.")]),t._v(" "),a("h3",{attrs:{id:"examples-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-2"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("To write to flash to set parameters. address, number_of_bytes, byte0, ... , byteN")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("batt_smbus -X write_flash 19069 2 27 0\n")])])]),a("p",[a("a",{attrs:{id:"batt_smbus_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-6"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("batt_smbus <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 11\n\n   man_info      Prints manufacturer info.\n\n   unseal        Unseals the devices flash memory to enable write_flash\n                 commands.\n\n   seal          Seals the devices flash memory to disable write_flash commands.\n\n   suspend       Suspends the driver from rescheduling the cycle.\n\n   resume        Resumes the driver from suspension.\n\n   write_flash   Writes to flash. The device must first be unsealed with the\n                 unseal command.\n     [address]   The address to start writing.\n     [number of bytes] Number of bytes to send.\n     [data[0]...data[n]] One byte of data at a time separated by spaces.\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"bst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bst"}},[t._v("#")]),t._v(" bst")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/telemetry/bst",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/telemetry/bst"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"bst_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-7"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bst <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 118\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"crsf-rc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crsf-rc"}},[t._v("#")]),t._v(" crsf_rc")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/rc/crsf_rc",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/rc/crsf_rc"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-6"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module parses the CRSF RC uplink protocol and generates CRSF downlink telemetry data")]),t._v(" "),a("p",[a("a",{attrs:{id:"crsf_rc_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-8"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("crsf_rc <command> [arguments...]\n Commands:\n   start\n     [-d <val>]  RC device\n                 values: <file:dev>, default: /dev/ttyS3\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"dshot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dshot"}},[t._v("#")]),t._v(" dshot")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/dshot",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/dshot"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-7"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This is the DShot output driver. It is similar to the fmu driver, and can be used as drop-in replacement\nto use DShot as ESC communication protocol instead of PWM.")]),t._v(" "),a("p",[t._v("On startup, the module tries to occupy all available pins for DShot output.\nIt skips all pins already in use (e.g. by a camera trigger module).")]),t._v(" "),a("p",[t._v("It supports:")]),t._v(" "),a("ul",[a("li",[t._v("DShot150, DShot300, DShot600, DShot1200")]),t._v(" "),a("li",[t._v("telemetry via separate UART and publishing as esc_status message")]),t._v(" "),a("li",[t._v("sending DShot commands via CLI")])]),t._v(" "),a("h3",{attrs:{id:"examples-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-3"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("Permanently reverse motor 1:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dshot reverse -m 1\ndshot save -m 1\n")])])]),a("p",[t._v("After saving, the reversed direction will be regarded as the normal one. So to reverse again repeat the same commands.")]),t._v(" "),a("p",[a("a",{attrs:{id:"dshot_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-9"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dshot <command> [arguments...]\n Commands:\n   start\n\n   telemetry     Enable Telemetry on a UART\n     <device>    UART device\n\n   reverse       Reverse motor direction\n     [-m <val>]  Motor index (1-based, default=all)\n\n   normal        Normal motor direction\n     [-m <val>]  Motor index (1-based, default=all)\n\n   save          Save current settings\n     [-m <val>]  Motor index (1-based, default=all)\n\n   3d_on         Enable 3D mode\n     [-m <val>]  Motor index (1-based, default=all)\n\n   3d_off        Disable 3D mode\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep1         Send Beep pattern 1\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep2         Send Beep pattern 2\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep3         Send Beep pattern 3\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep4         Send Beep pattern 4\n     [-m <val>]  Motor index (1-based, default=all)\n\n   beep5         Send Beep pattern 5\n     [-m <val>]  Motor index (1-based, default=all)\n\n   esc_info      Request ESC information\n     -m <val>    Motor index (1-based)\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"fake-gps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fake-gps"}},[t._v("#")]),t._v(" fake_gps")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/examples/fake_gps",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_gps"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-8"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[a("a",{attrs:{id:"fake_gps_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-10"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fake_gps <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"fake-imu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fake-imu"}},[t._v("#")]),t._v(" fake_imu")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/examples/fake_imu",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_imu"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-9"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[a("a",{attrs:{id:"fake_imu_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-11"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fake_imu <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"fake-magnetometer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fake-magnetometer"}},[t._v("#")]),t._v(" fake_magnetometer")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/examples/fake_magnetometer",target:"_blank",rel:"noopener noreferrer"}},[t._v("examples/fake_magnetometer"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-10"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Publish the earth magnetic field as a fake magnetometer (sensor_mag).\nRequires vehicle_attitude and vehicle_gps_position.")]),t._v(" "),a("p",[a("a",{attrs:{id:"fake_magnetometer_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-12"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fake_magnetometer <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"ft-technologies-serial"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ft-technologies-serial"}},[t._v("#")]),t._v(" ft_technologies_serial")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/wind_sensor/ft_technologies",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/wind_sensor/ft_technologies"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-11"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Serial bus driver for the FT Technologies Digital Wind Sensor FT742. This driver is required to operate alongside\na RS485 to UART signal transfer module.")]),t._v(" "),a("p",[t._v("Most boards are configured to enable/start the driver on a specified UART using the SENS_FTX_CFG parameter.")]),t._v(" "),a("h3",{attrs:{id:"examples-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-4"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("Attempt to start driver on a specified serial device.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ft_technologies_serial start -d /dev/ttyS1\n")])])]),a("p",[t._v("Stop driver")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ft_technologies_serial stop\n")])])]),a("p",[a("a",{attrs:{id:"ft_technologies_serial_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-13"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ft_technologies_serial <command> [arguments...]\n Commands:\n   start         Start driver\n     -d <val>    Serial device\n\n   stop          Stop driver\n")])])]),a("h2",{attrs:{id:"gimbal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gimbal"}},[t._v("#")]),t._v(" gimbal")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/gimbal",target:"_blank",rel:"noopener noreferrer"}},[t._v("modules/gimbal"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-12"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Mount/gimbal Gimbal control driver. It maps several different input methods (eg. RC or MAVLink) to a configured\noutput (eg. AUX channels or MAVLink).")]),t._v(" "),a("p",[t._v("Documentation how to use it is on the "),a("a",{attrs:{href:"https://docs.px4.io/main/en/advanced/gimbal_control.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("gimbal_control"),a("OutboundLink")],1),t._v(" page.")]),t._v(" "),a("h3",{attrs:{id:"examples-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-5"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("Test the output by setting a angles (all omitted axes are set to 0):")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gimbal test pitch -45 yaw 30\n")])])]),a("p",[a("a",{attrs:{id:"gimbal_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-14"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gimbal <command> [arguments...]\n Commands:\n   start\n\n   status\n\n   primary-control Set who is in control of gimbal\n     <sysid> <compid> MAVLink system ID and MAVLink component ID\n\n   test          Test the output: set a fixed angle for one or multiple axes\n                 (gimbal must be running)\n     roll|pitch|yaw <angle> Specify an axis and an angle in degrees\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"gps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gps"}},[t._v("#")]),t._v(" gps")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/gps",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/gps"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-13"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("GPS driver module that handles the communication with the device and publishes the position via uORB.\nIt supports multiple protocols (device vendors) and by default automatically selects the correct one.")]),t._v(" "),a("p",[t._v("The module supports a secondary GPS device, specified via "),a("code",[t._v("-e")]),t._v(" parameter. The position will be published\non the second uORB topic instance, but it's currently not used by the rest of the system (however the\ndata will be logged, so that it can be used for comparisons).")]),t._v(" "),a("h3",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),a("p",[t._v("There is a thread for each device polling for data. The GPS protocol classes are implemented with callbacks\nso that they can be used in other projects as well (eg. QGroundControl uses them too).")]),t._v(" "),a("h3",{attrs:{id:"examples-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-6"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("Starting 2 GPS devices (the main GPS on /dev/ttyS3 and the secondary on /dev/ttyS4):")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gps start -d /dev/ttyS3 -e /dev/ttyS4\n")])])]),a("p",[t._v("Initiate warm restart of GPS device")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gps reset warm\n")])])]),a("p",[a("a",{attrs:{id:"gps_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-15"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gps <command> [arguments...]\n Commands:\n   start\n     [-d <val>]  GPS device\n                 values: <file:dev>, default: /dev/ttyS3\n     [-b <val>]  Baudrate (can also be p:<param_name>)\n                 default: 0\n     [-e <val>]  Optional secondary GPS device\n                 values: <file:dev>\n     [-g <val>]  Baudrate (secondary GPS, can also be p:<param_name>)\n                 default: 0\n     [-i <val>]  GPS interface\n                 values: spi|uart, default: uart\n     [-j <val>]  secondary GPS interface\n                 values: spi|uart, default: uart\n     [-p <val>]  GPS Protocol (default=auto select)\n                 values: ubx|mtk|ash|eml|fem|nmea\n\n   stop\n\n   status        print status info\n\n   reset         Reset GPS device\n     cold|warm|hot Specify reset type\n")])])]),a("h2",{attrs:{id:"gz-bridge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gz-bridge"}},[t._v("#")]),t._v(" gz_bridge")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/simulation/gz_bridge",target:"_blank",rel:"noopener noreferrer"}},[t._v("modules/simulation/gz_bridge"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-14"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[a("a",{attrs:{id:"gz_bridge_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-16"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gz_bridge <command> [arguments...]\n Commands:\n   start\n     -m <val>    Fuel model name\n     -p <val>    Model Pose\n     -n <val>    Model name\n     -i <val>    PX4 instance\n     [-w <val>]  World name\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"ina220"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ina220"}},[t._v("#")]),t._v(" ina220")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/power_monitor/ina220",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina220"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-15"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for the INA220 power monitor.")]),t._v(" "),a("p",[t._v("Multiple instances of this driver can run simultaneously, if each instance has a separate bus OR I2C address.")]),t._v(" "),a("p",[t._v("For example, one instance can run on Bus 2, address 0x41, and one can run on Bus 2, address 0x43.")]),t._v(" "),a("p",[t._v("If the INA220 module is not powered, then by default, initialization of the driver will fail. To change this, use\nthe -f flag. If this flag is set, then if initialization fails, the driver will keep trying to initialize again\nevery 0.5 seconds. With this flag set, you can plug in a battery after the driver starts, and it will work. Without\nthis flag set, the battery must be plugged in before starting the driver.")]),t._v(" "),a("p",[a("a",{attrs:{id:"ina220_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-17"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ina220 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 65\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 3)\n                 default: 1\n     [-T <val>]  Type\n                 values: VBATT|VREG, default: VBATT\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"ina226"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ina226"}},[t._v("#")]),t._v(" ina226")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/power_monitor/ina226",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina226"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-16"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for the INA226 power monitor.")]),t._v(" "),a("p",[t._v("Multiple instances of this driver can run simultaneously, if each instance has a separate bus OR I2C address.")]),t._v(" "),a("p",[t._v("For example, one instance can run on Bus 2, address 0x41, and one can run on Bus 2, address 0x43.")]),t._v(" "),a("p",[t._v("If the INA226 module is not powered, then by default, initialization of the driver will fail. To change this, use\nthe -f flag. If this flag is set, then if initialization fails, the driver will keep trying to initialize again\nevery 0.5 seconds. With this flag set, you can plug in a battery after the driver starts, and it will work. Without\nthis flag set, the battery must be plugged in before starting the driver.")]),t._v(" "),a("p",[a("a",{attrs:{id:"ina226_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-18"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ina226 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 65\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 3)\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"ina228"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ina228"}},[t._v("#")]),t._v(" ina228")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/power_monitor/ina228",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina228"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-17"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for the INA228 power monitor.")]),t._v(" "),a("p",[t._v("Multiple instances of this driver can run simultaneously, if each instance has a separate bus OR I2C address.")]),t._v(" "),a("p",[t._v("For example, one instance can run on Bus 2, address 0x45, and one can run on Bus 2, address 0x45.")]),t._v(" "),a("p",[t._v("If the INA228 module is not powered, then by default, initialization of the driver will fail. To change this, use\nthe -f flag. If this flag is set, then if initialization fails, the driver will keep trying to initialize again\nevery 0.5 seconds. With this flag set, you can plug in a battery after the driver starts, and it will work. Without\nthis flag set, the battery must be plugged in before starting the driver.")]),t._v(" "),a("p",[a("a",{attrs:{id:"ina228_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-19"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ina228 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 69\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 3)\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"ina238"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ina238"}},[t._v("#")]),t._v(" ina238")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/power_monitor/ina238",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/ina238"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-18"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for the INA238 power monitor.")]),t._v(" "),a("p",[t._v("Multiple instances of this driver can run simultaneously, if each instance has a separate bus OR I2C address.")]),t._v(" "),a("p",[t._v("For example, one instance can run on Bus 2, address 0x45, and one can run on Bus 2, address 0x45.")]),t._v(" "),a("p",[t._v("If the INA238 module is not powered, then by default, initialization of the driver will fail. To change this, use\nthe -f flag. If this flag is set, then if initialization fails, the driver will keep trying to initialize again\nevery 0.5 seconds. With this flag set, you can plug in a battery after the driver starts, and it will work. Without\nthis flag set, the battery must be plugged in before starting the driver.")]),t._v(" "),a("p",[a("a",{attrs:{id:"ina238_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-20"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ina238 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 69\n     [-k]        if initialization (probing) fails, keep retrying periodically\n     [-t <val>]  battery index for calibration values (1 or 3)\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"iridiumsbd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iridiumsbd"}},[t._v("#")]),t._v(" iridiumsbd")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/telemetry/iridiumsbd",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/telemetry/iridiumsbd"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-19"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("IridiumSBD driver.")]),t._v(" "),a("p",[t._v("Creates a virtual serial port that another module can use for communication (e.g. mavlink).")]),t._v(" "),a("p",[a("a",{attrs:{id:"iridiumsbd_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-21"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("iridiumsbd <command> [arguments...]\n Commands:\n   start\n     -d <val>    Serial device\n                 values: <file:dev>\n     [-v]        Enable verbose output\n\n   test\n     [s|read|AT <cmd>] Test command\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"irlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#irlock"}},[t._v("#")]),t._v(" irlock")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/irlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/irlock"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"irlock_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-22"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("irlock <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 84\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"linux-pwm-out"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-pwm-out"}},[t._v("#")]),t._v(" linux_pwm_out")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/linux_pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/linux_pwm_out"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-20"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Linux PWM output driver with board-specific backend implementation.")]),t._v(" "),a("p",[a("a",{attrs:{id:"linux_pwm_out_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-23"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("linux_pwm_out <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"lsm303agr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lsm303agr"}},[t._v("#")]),t._v(" lsm303agr")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/magnetometer/lsm303agr",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/magnetometer/lsm303agr"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"lsm303agr_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-24"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("lsm303agr <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-R <val>]  Rotation\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"msp-osd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#msp-osd"}},[t._v("#")]),t._v(" msp_osd")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/osd/msp_osd",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/osd/msp_osd"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-21"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("MSP telemetry streamer")]),t._v(" "),a("h3",{attrs:{id:"implementation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation-2"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),a("p",[t._v("Converts uORB messages to MSP telemetry packets")]),t._v(" "),a("h3",{attrs:{id:"examples-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-7"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("CLI usage example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("msp_osd\n")])])]),a("p",[a("a",{attrs:{id:"msp_osd_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-25"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("msp_osd <command> [arguments...]\n Commands:\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"newpixel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#newpixel"}},[t._v("#")]),t._v(" newpixel")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/lights/neopixel",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/neopixel"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-22"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module is responsible for driving interfasing to the Neopixel Serial LED")]),t._v(" "),a("h3",{attrs:{id:"examples-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-8"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("It is typically started with:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("neopixel -n 8\n")])])]),a("p",[t._v("To drive all available leds.")]),t._v(" "),a("p",[a("a",{attrs:{id:"newpixel_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-26"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("newpixel <command> [arguments...]\n Commands:\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"paa3905"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paa3905"}},[t._v("#")]),t._v(" paa3905")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/optical_flow/paa3905",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/paa3905"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"paa3905_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-27"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("paa3905 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-Y <val>]  custom yaw rotation (degrees)\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"paw3902"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paw3902"}},[t._v("#")]),t._v(" paw3902")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/optical_flow/paw3902",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/paw3902"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"paw3902_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-28"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("paw3902 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-Y <val>]  custom yaw rotation (degrees)\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"pca9685-pwm-out"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pca9685-pwm-out"}},[t._v("#")]),t._v(" pca9685_pwm_out")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/pca9685_pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pca9685_pwm_out"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-23"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This is a PCA9685 PWM output driver.")]),t._v(" "),a("p",[t._v("It runs on I2C workqueue which is asynchronous with FC control loop,\nfetching the latest mixing result and write them to PCA9685 at its scheduling ticks.")]),t._v(" "),a("p",[t._v("It can do full 12bits output as duty-cycle mode, while also able to output precious pulse width\nthat can be accepted by most ESCs and servos.")]),t._v(" "),a("h3",{attrs:{id:"examples-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-9"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("It is typically started with:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pca9685_pwm_out start -a 0x40 -b 1\n")])])]),a("p",[a("a",{attrs:{id:"pca9685_pwm_out_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-29"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pca9685_pwm_out <command> [arguments...]\n Commands:\n   start         Start the task\n     [-a <val>]  7-bits I2C address of PCA9685\n                 values: <addr>, default: 0x40\n     [-b <val>]  bus that pca9685 is connected to\n                 default: 1\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"pm-selector-auterion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pm-selector-auterion"}},[t._v("#")]),t._v(" pm_selector_auterion")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/power_monitor/pm_selector_auterion",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/pm_selector_auterion"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-24"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for starting and auto-detecting different power monitors.")]),t._v(" "),a("p",[a("a",{attrs:{id:"pm_selector_auterion_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-30"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pm_selector_auterion <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"pmw3901"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pmw3901"}},[t._v("#")]),t._v(" pmw3901")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/optical_flow/pmw3901",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/pmw3901"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"pmw3901_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-31"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pmw3901 <command> [arguments...]\n Commands:\n   start\n     [-s]        Internal SPI bus(es)\n     [-S]        External SPI bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-c <val>]  chip-select pin (for internal SPI) or index (for external SPI)\n     [-m <val>]  SPI mode\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-R <val>]  Rotation\n                 default: 0\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"pps-capture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pps-capture"}},[t._v("#")]),t._v(" pps_capture")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/pps_capture",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pps_capture"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-25"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This implements capturing PPS information from the GNSS module and calculates the drift between PPS and Real-time clock.")]),t._v(" "),a("p",[a("a",{attrs:{id:"pps_capture_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-32"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pps_capture <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"pwm-out"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwm-out"}},[t._v("#")]),t._v(" pwm_out")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/pwm_out",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/pwm_out"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-26"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module is responsible for driving the output pins. For boards without a separate IO chip\n(eg. Pixracer), it uses the main channels. On boards with an IO chip (eg. Pixhawk), it uses the AUX channels, and the\npx4io driver is used for main ones.")]),t._v(" "),a("p",[a("a",{attrs:{id:"pwm_out_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-33"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pwm_out <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"pwm-out-sim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwm-out-sim"}},[t._v("#")]),t._v(" pwm_out_sim")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/simulation/pwm_out_sim",target:"_blank",rel:"noopener noreferrer"}},[t._v("modules/simulation/pwm_out_sim"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-27"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for simulated PWM outputs.")]),t._v(" "),a("p",[t._v("Its only function is to take "),a("code",[t._v("actuator_control")]),t._v(" uORB messages,\nmix them with any loaded mixer and output the result to the\n"),a("code",[t._v("actuator_output")]),t._v(" uORB topic.")]),t._v(" "),a("p",[t._v("It is used in SITL and HITL.")]),t._v(" "),a("p",[a("a",{attrs:{id:"pwm_out_sim_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-34"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pwm_out_sim <command> [arguments...]\n Commands:\n   start         Start the module\n     [-m <val>]  Mode\n                 values: hil|sim, default: sim\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"px4flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#px4flow"}},[t._v("#")]),t._v(" px4flow")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/optical_flow/px4flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/optical_flow/px4flow"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"px4flow_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-35"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("px4flow <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 66\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"px4io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#px4io"}},[t._v("#")]),t._v(" px4io")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/px4io",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/px4io"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-28"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Output driver communicating with the IO co-processor.")]),t._v(" "),a("p",[a("a",{attrs:{id:"px4io_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-36"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("px4io <command> [arguments...]\n Commands:\n   start\n\n   checkcrc      Check CRC for a firmware file against current code on IO\n     <filename>  Firmware file\n\n   update        Update IO firmware\n     [<filename>] Firmware file\n\n   debug         set IO debug level\n     <debug_level> 0=disabled, 9=max verbosity\n\n   bind          DSM bind\n     dsm2|dsmx|dsmx8 protocol\n\n   sbus1_out     enable sbus1 out\n\n   sbus2_out     enable sbus2 out\n\n   supported     Returns 0 if px4io is supported\n\n   test_fmu_fail test: turn off IO updates\n\n   test_fmu_ok   re-enable IO updates\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"rc-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rc-input"}},[t._v("#")]),t._v(" rc_input")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/rc_input",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/rc_input"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-29"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module does the RC input parsing and auto-selecting the method. Supported methods are:")]),t._v(" "),a("ul",[a("li",[t._v("PPM")]),t._v(" "),a("li",[t._v("SBUS")]),t._v(" "),a("li",[t._v("DSM")]),t._v(" "),a("li",[t._v("SUMD")]),t._v(" "),a("li",[t._v("ST24")]),t._v(" "),a("li",[t._v("TBS Crossfire (CRSF)")])]),t._v(" "),a("p",[a("a",{attrs:{id:"rc_input_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-37"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rc_input <command> [arguments...]\n Commands:\n   start\n     [-d <val>]  RC device\n                 values: <file:dev>, default: /dev/ttyS3\n\n   bind          Send a DSM bind command (module must be running)\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"rgbled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgbled"}},[t._v("#")]),t._v(" rgbled")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/lights/rgbled_ncp5623c",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/rgbled_ncp5623c"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"rgbled_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-38"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rgbled <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 57\n     [-o <val>]  RGB PWM Assignment\n                 default: 123\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"rgbled-is31fl3195"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgbled-is31fl3195"}},[t._v("#")]),t._v(" rgbled_is31fl3195")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/lights/rgbled_is31fl3195",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/rgbled_is31fl3195"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"rgbled_is31fl3195_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-39"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rgbled_is31fl3195 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 84\n     [-o <val>]  RGB PWM Assignment\n                 default: 123\n     [-i <val>]  Current Band\n                 default: 0.5\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"rgbled-lp5562"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rgbled-lp5562"}},[t._v("#")]),t._v(" rgbled_lp5562")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/lights/rgbled_lp5562",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/lights/rgbled_lp5562"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-30"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for "),a("a",{attrs:{href:"https://www.ti.com/product/LP5562",target:"_blank",rel:"noopener noreferrer"}},[t._v("LP5562"),a("OutboundLink")],1),t._v(" LED driver connected via I2C.")]),t._v(" "),a("p",[t._v("This used in some GPS modules by Holybro for "),a("RouterLink",{attrs:{to:"/en/getting_started/led_meanings.html"}},[t._v("PX4 status notification")])],1),t._v(" "),a("p",[t._v("The driver is included by default in firmware (KConfig key DRIVERS_LIGHTS_RGBLED_LP5562) and is always enabled.")]),t._v(" "),a("p",[a("a",{attrs:{id:"rgbled_lp5562_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-40"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rgbled_lp5562 <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 48\n     [-u <val>]  Current in mA\n                 default: 17.5\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"roboclaw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#roboclaw"}},[t._v("#")]),t._v(" roboclaw")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/roboclaw",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/roboclaw"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-31"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This driver communicates over UART with the "),a("a",{attrs:{href:"https://www.basicmicro.com/motor-controller",target:"_blank",rel:"noopener noreferrer"}},[t._v("Roboclaw motor driver"),a("OutboundLink")],1),t._v(".\nIt performs two tasks:")]),t._v(" "),a("ul",[a("li",[t._v("Control the motors based on the OutputModuleInterface.")]),t._v(" "),a("li",[t._v("Read the wheel encoders and publish the raw data in the "),a("code",[t._v("wheel_encoders")]),t._v(" uORB topic")])]),t._v(" "),a("p",[t._v("In order to use this driver, the Roboclaw should be put into Packet Serial mode (see the linked documentation), and\nyour flight controller's UART port should be connected to the Roboclaw as shown in the documentation.\nThe driver needs to be enabled using the parameter "),a("code",[t._v("RBCLW_SER_CFG")]),t._v(", the baudrate needs to be set correctly and\nthe address "),a("code",[t._v("RBCLW_ADDRESS")]),t._v(" needs to match the ESC configuration.")]),t._v(" "),a("p",[t._v("The command to start this driver is: "),a("code",[t._v("$ roboclaw start <UART device> <baud rate>")])]),t._v(" "),a("p",[a("a",{attrs:{id:"roboclaw_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-41"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("roboclaw <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"safety-button"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#safety-button"}},[t._v("#")]),t._v(" safety_button")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/safety_button",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/safety_button"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-32"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module is responsible for the safety button.\nPressing the safety button 3 times quickly will trigger a GCS pairing request.")]),t._v(" "),a("p",[a("a",{attrs:{id:"safety_button_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-42"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("safety_button <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"sht3x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sht3x"}},[t._v("#")]),t._v(" sht3x")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/hygrometer/sht3x",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/hygrometer/sht3x"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-33"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("SHT3x Temperature and Humidity Sensor Driver by Senserion.")]),t._v(" "),a("h3",{attrs:{id:"examples-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-10"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("CLI usage example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sht3x start -X\n")])])]),a("p",[t._v("Start the sensor driver on the external bus")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sht3x status\n")])])]),a("p",[t._v("Print driver status")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sht3x values\n")])])]),a("p",[t._v("Print last measured values")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sht3x reset\n")])])]),a("p",[t._v("Reinitialize senzor, reset flags")]),t._v(" "),a("p",[a("a",{attrs:{id:"sht3x_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-43"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sht3x <command> [arguments...]\n Commands:\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 68\n     [-k]        if initialization (probing) fails, keep retrying periodically\n\n   stop\n\n   status        print status info\n\n   values        Print actual data\n\n   reset         Reinitialize sensor\n")])])]),a("h2",{attrs:{id:"tap-esc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tap-esc"}},[t._v("#")]),t._v(" tap_esc")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/tap_esc",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/tap_esc"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-34"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module controls the TAP_ESC hardware via UART. It listens on the\nactuator_controls topics, does the mixing and writes the PWM outputs.")]),t._v(" "),a("h3",{attrs:{id:"implementation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation-3"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),a("p",[t._v("Currently the module is implemented as a threaded version only, meaning that it\nruns in its own thread instead of on the work queue.")]),t._v(" "),a("h3",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("p",[t._v("The module is typically started with:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("tap_esc start -d /dev/ttyS2 -n <1-8>\n")])])]),a("p",[a("a",{attrs:{id:"tap_esc_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-44"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("tap_esc <command> [arguments...]\n Commands:\n   start         Start the task\n     [-d <val>]  Device used to talk to ESCs\n                 values: <device>\n     [-n <val>]  Number of ESCs\n                 default: 4\n")])])]),a("h2",{attrs:{id:"tone-alarm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tone-alarm"}},[t._v("#")]),t._v(" tone_alarm")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/tone_alarm",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/tone_alarm"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-35"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module is responsible for the tone alarm.")]),t._v(" "),a("p",[a("a",{attrs:{id:"tone_alarm_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-45"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("tone_alarm <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"uwb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uwb"}},[t._v("#")]),t._v(" uwb")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/uwb/uwb_sr150",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/uwb/uwb_sr150"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-36"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Driver for NXP UWB_SR150 UWB positioning system. This driver publishes a "),a("code",[t._v("uwb_distance")]),t._v(" message\nwhenever the UWB_SR150 has a position measurement available.")]),t._v(" "),a("h3",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("p",[t._v("Start the driver with a given device:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("uwb start -d /dev/ttyS2\n")])])]),a("p",[a("a",{attrs:{id:"uwb_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-46"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("uwb <command> [arguments...]\n Commands:\n   start\n     -d <val>    Name of device for serial communication with UWB\n                 values: <file:dev>\n     -b <val>    Baudrate for serial communication\n                 values: <int>\n\n   stop\n\n   status\n")])])]),a("h2",{attrs:{id:"voxl2-io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#voxl2-io"}},[t._v("#")]),t._v(" voxl2_io")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/voxl2_io",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/voxl2_io"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-37"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module is responsible for driving the output pins. For boards without a separate IO chip\n(eg. Pixracer), it uses the main channels. On boards with an IO chip (eg. Pixhawk), it uses the AUX channels, and the\npx4io driver is used for main ones.")]),t._v(" "),a("p",[a("a",{attrs:{id:"voxl2_io_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-47"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("voxl2_io <command> [arguments...]\n Commands:\n   start         Start the task\n     -v          Verbose messages\n     -d          Disable PWM\n     -e          Disable RC\n     -p <val>    UART port\n\n   calibrate_escs Calibrate ESCs min/max range\n\n   calibrate_escs Calibrate ESCs min/max range\n\n   pwm           Open-Loop PWM test control request\n     -c <val>    PWM OUTPUT Channel, 0-3\n     -r <val>    Duty Cycle value, 0 to 800\n     -n <val>    Command repeat count, 0 to INT_MAX\n     -t <val>    Delay between repeated commands (microseconds), 0 to INT_MAX\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"voxl-esc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#voxl-esc"}},[t._v("#")]),t._v(" voxl_esc")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/actuators/voxl_esc",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/actuators/voxl_esc"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-38"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("This module is responsible for...")]),t._v(" "),a("h3",{attrs:{id:"implementation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation-4"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),a("p",[t._v("By default the module runs on a work queue with a callback on the uORB actuator_controls topic.")]),t._v(" "),a("h3",{attrs:{id:"examples-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-11"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("It is typically started with:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("todo\n")])])]),a("p",[a("a",{attrs:{id:"voxl_esc_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-48"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("voxl_esc <command> [arguments...]\n Commands:\n   start         Start the task\n\n   reset         Send reset request to ESC\n     -i <val>    ESC ID, 0-3\n\n   version       Send version request to ESC\n     -i <val>    ESC ID, 0-3\n\n   version-ext   Send extended version request to ESC\n     -i <val>    ESC ID, 0-3\n\n   rpm           Closed-Loop RPM test control request\n     -i <val>    ESC ID, 0-3\n     -r <val>    RPM, -32,768 to 32,768\n     -n <val>    Command repeat count, 0 to INT_MAX\n     -t <val>    Delay between repeated commands (microseconds), 0 to INT_MAX\n\n   pwm           Open-Loop PWM test control request\n     -i <val>    ESC ID, 0-3\n     -r <val>    Duty Cycle value, 0 to 800\n     -n <val>    Command repeat count, 0 to INT_MAX\n     -t <val>    Delay between repeated commands (microseconds), 0 to INT_MAX\n\n   tone          Send tone generation request to ESC\n     -i <val>    ESC ID, 0-3\n     -p <val>    Period of sound, inverse frequency, 0-255\n     -d <val>    Duration of the sound, 0-255, 1LSB = 13ms\n     -v <val>    Power (volume) of sound, 0-100\n\n   led           Send LED control request\n     -l <val>    Bitmask 0x0FFF (12 bits) - ESC0 (RGB) ESC1 (RGB) ESC2 (RGB)\n                 ESC3 (RGB)\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"voxlpm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#voxlpm"}},[t._v("#")]),t._v(" voxlpm")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/drivers/power_monitor/voxlpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("drivers/power_monitor/voxlpm"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{id:"voxlpm_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-49"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("voxlpm [arguments...]\n   start\n     [-I]        Internal I2C bus(es)\n     [-X]        External I2C bus(es)\n     [-b <val>]  board-specific bus (default=all) (external SPI: n-th bus\n                 (default=1))\n     [-f <val>]  bus frequency in kHz\n     [-q]        quiet startup (no message if no device found)\n     [-a <val>]  I2C address\n                 default: 68\n     [-T <val>]  Type\n                 values: VBATT|P5VDC|P12VDC, default: VBATT\n     [-k]        if initialization (probing) fails, keep retrying periodically\n\n   stop\n\n   status        print status info\n")])])]),a("h2",{attrs:{id:"zenoh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zenoh"}},[t._v("#")]),t._v(" zenoh")]),t._v(" "),a("p",[t._v("Source: "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/tree/main/src/modules/zenoh",target:"_blank",rel:"noopener noreferrer"}},[t._v("modules/zenoh"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"description-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-39"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Zenoh demo bridge")]),t._v(" "),a("p",[a("a",{attrs:{id:"zenoh_usage"}})]),t._v(" "),a("h3",{attrs:{id:"usage-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-50"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("zenoh <command> [arguments...]\n Commands:\n   start\n\n   stop\n\n   status\n\n   config\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);